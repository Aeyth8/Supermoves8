#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GrindHUDBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GYMGAME_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass GrindHUDBP.GrindHUDBP_C
// 0x0028 (0x0378 - 0x0350)
class UGrindHUDBP_C final : public UGymGuiGrindMeter
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       SpawnAnimation;                                    // 0x0358(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 GrindMeter;                                        // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 RedVignetteLeft;                                   // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 RedVignetteRight;                                  // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void BPOpen();
	void ExecuteUbergraph_GrindHUDBP(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GrindHUDBP_C">();
	}
	static class UGrindHUDBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGrindHUDBP_C>();
	}
};
static_assert(alignof(UGrindHUDBP_C) == 0x000008, "Wrong alignment on UGrindHUDBP_C");
static_assert(sizeof(UGrindHUDBP_C) == 0x000378, "Wrong size on UGrindHUDBP_C");
static_assert(offsetof(UGrindHUDBP_C, UberGraphFrame) == 0x000350, "Member 'UGrindHUDBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGrindHUDBP_C, SpawnAnimation) == 0x000358, "Member 'UGrindHUDBP_C::SpawnAnimation' has a wrong offset!");
static_assert(offsetof(UGrindHUDBP_C, GrindMeter) == 0x000360, "Member 'UGrindHUDBP_C::GrindMeter' has a wrong offset!");
static_assert(offsetof(UGrindHUDBP_C, RedVignetteLeft) == 0x000368, "Member 'UGrindHUDBP_C::RedVignetteLeft' has a wrong offset!");
static_assert(offsetof(UGrindHUDBP_C, RedVignetteRight) == 0x000370, "Member 'UGrindHUDBP_C::RedVignetteRight' has a wrong offset!");

}

