#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Seve_control_rig

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ControlRig_structs.hpp"
#include "ControlRig_classes.hpp"
#include "PBIK_structs.hpp"
#include "AnimationCore_structs.hpp"
#include "RigVM_structs.hpp"
#include "RigVM_classes.hpp"


namespace SDK
{

// ControlRigBlueprintGeneratedClass Seve_control_rig.Seve_control_rig_C
// 0x0100 (0x0710 - 0x0610)
class USeve_control_rig_C final : public UControlRig
{
public:
	double                                        LeftFootIKOffsetAlpha;                             // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                LeftFootIKDesiredNormal;                           // 0x0618(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                LeftFootIKDesiredLocation;                         // 0x0630(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        RightFootIKOffsetAlpha;                            // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                RightFootIKDesiredNormal;                          // 0x0650(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                RightFootIKDesiredLocation;                        // 0x0668(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                PelvisOffset;                                      // 0x0680(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        PelvisOffsetAlpha;                                 // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                RightHandIKLocation;                               // 0x06A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                RightHandIKRotator;                                // 0x06B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        RightHandIKAlpha;                                  // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                LeftHandIKRotator;                                 // 0x06D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                LeftHandIKLocation;                                // 0x06F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        LeftHandIKAlpha;                                   // 0x0708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Seve_control_rig_C">();
	}
	static class USeve_control_rig_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USeve_control_rig_C>();
	}
};
static_assert(alignof(USeve_control_rig_C) == 0x000008, "Wrong alignment on USeve_control_rig_C");
static_assert(sizeof(USeve_control_rig_C) == 0x000710, "Wrong size on USeve_control_rig_C");
static_assert(offsetof(USeve_control_rig_C, LeftFootIKOffsetAlpha) == 0x000610, "Member 'USeve_control_rig_C::LeftFootIKOffsetAlpha' has a wrong offset!");
static_assert(offsetof(USeve_control_rig_C, LeftFootIKDesiredNormal) == 0x000618, "Member 'USeve_control_rig_C::LeftFootIKDesiredNormal' has a wrong offset!");
static_assert(offsetof(USeve_control_rig_C, LeftFootIKDesiredLocation) == 0x000630, "Member 'USeve_control_rig_C::LeftFootIKDesiredLocation' has a wrong offset!");
static_assert(offsetof(USeve_control_rig_C, RightFootIKOffsetAlpha) == 0x000648, "Member 'USeve_control_rig_C::RightFootIKOffsetAlpha' has a wrong offset!");
static_assert(offsetof(USeve_control_rig_C, RightFootIKDesiredNormal) == 0x000650, "Member 'USeve_control_rig_C::RightFootIKDesiredNormal' has a wrong offset!");
static_assert(offsetof(USeve_control_rig_C, RightFootIKDesiredLocation) == 0x000668, "Member 'USeve_control_rig_C::RightFootIKDesiredLocation' has a wrong offset!");
static_assert(offsetof(USeve_control_rig_C, PelvisOffset) == 0x000680, "Member 'USeve_control_rig_C::PelvisOffset' has a wrong offset!");
static_assert(offsetof(USeve_control_rig_C, PelvisOffsetAlpha) == 0x000698, "Member 'USeve_control_rig_C::PelvisOffsetAlpha' has a wrong offset!");
static_assert(offsetof(USeve_control_rig_C, RightHandIKLocation) == 0x0006A0, "Member 'USeve_control_rig_C::RightHandIKLocation' has a wrong offset!");
static_assert(offsetof(USeve_control_rig_C, RightHandIKRotator) == 0x0006B8, "Member 'USeve_control_rig_C::RightHandIKRotator' has a wrong offset!");
static_assert(offsetof(USeve_control_rig_C, RightHandIKAlpha) == 0x0006D0, "Member 'USeve_control_rig_C::RightHandIKAlpha' has a wrong offset!");
static_assert(offsetof(USeve_control_rig_C, LeftHandIKRotator) == 0x0006D8, "Member 'USeve_control_rig_C::LeftHandIKRotator' has a wrong offset!");
static_assert(offsetof(USeve_control_rig_C, LeftHandIKLocation) == 0x0006F0, "Member 'USeve_control_rig_C::LeftHandIKLocation' has a wrong offset!");
static_assert(offsetof(USeve_control_rig_C, LeftHandIKAlpha) == 0x000708, "Member 'USeve_control_rig_C::LeftHandIKAlpha' has a wrong offset!");

// RigVMMemoryStorageGeneratorClass Seve_control_rig.RigVMMemory_Literal
// 0x0198 (0x01C0 - 0x0028)
class URigVMMemory_Literal final : public URigVMMemoryStorage
{
public:
	struct FRigElementKey                         RigVMModel___Set_Transform_Item__Const;            // 0x0028(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ERigVMTransformSpace                          RigVMModel___Set_Transform_Space__Const;           // 0x0034(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___Set_Transform_bInitial__Const;        // 0x0035(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         RigVMModel___GetTransform_Item__Const;             // 0x0038(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___Set_Transform_Weight__Const;          // 0x0044(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___Set_Transform_bPropagateToChildren__Const; // 0x0048(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         RigVMModel___Set_Transform_1_Item__Const;          // 0x004C(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___GetTransform_1_Item__Const;           // 0x0058(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___Set_Transform_1_1_Item__Const;        // 0x0064(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___GetTransform_1_1_Item__Const;         // 0x0070(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___Set_Transform_1_1_1_Item__Const;      // 0x007C(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___GetTransform_1_1_1_Item__Const;       // 0x0088(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___Set_Transform_1_1_1_1_Item__Const;    // 0x0094(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___GetTransform_1_1_1_1_Item__Const;     // 0x00A0(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___OffsetTransformForItem_2_OffsetTransform__Const; // 0x00B0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EEulerRotationOrder                           RigVMModel___MathQuaternionFromEuler_RotationOrder__Const; // 0x0110(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RigVMModel___Add_3_B__Const;                       // 0x0118(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   RigVMModel___PBIK_Root__Const;                     // 0x0130(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FPBIKEffector>                  RigVMModel___PBIK_Effectors__Const;                // 0x0138(0x0010)(Edit, EditConst, NonTransactional)
	double                                        RigVMModel___Subtract_A__Const;                    // 0x0148(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FPBIKBoneSetting>               RigVMModel___PBIK_BoneSettings__Const;             // 0x0150(0x0010)(Edit, EditConst, NonTransactional)
	TArray<class FName>                           RigVMModel___PBIK_ExcludedBones__Const;            // 0x0160(0x0010)(Edit, EditConst, NonTransactional)
	struct FPBIKSolverSettings                    RigVMModel___PBIK_Settings__Const;                 // 0x0170(0x003C)(Edit, EditConst, NonTransactional, NoDestructor)
	struct FPBIKDebug                             RigVMModel___PBIK_Debug__Const;                    // 0x01AC(0x0008)(Edit, EditConst, NonTransactional, NoDestructor)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemory_Literal">();
	}
	static class URigVMMemory_Literal* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMMemory_Literal>();
	}
};
static_assert(alignof(URigVMMemory_Literal) == 0x000010, "Wrong alignment on URigVMMemory_Literal");
static_assert(sizeof(URigVMMemory_Literal) == 0x0001C0, "Wrong size on URigVMMemory_Literal");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___Set_Transform_Item__Const) == 0x000028, "Member 'URigVMMemory_Literal::RigVMModel___Set_Transform_Item__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___Set_Transform_Space__Const) == 0x000034, "Member 'URigVMMemory_Literal::RigVMModel___Set_Transform_Space__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___Set_Transform_bInitial__Const) == 0x000035, "Member 'URigVMMemory_Literal::RigVMModel___Set_Transform_bInitial__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___GetTransform_Item__Const) == 0x000038, "Member 'URigVMMemory_Literal::RigVMModel___GetTransform_Item__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___Set_Transform_Weight__Const) == 0x000044, "Member 'URigVMMemory_Literal::RigVMModel___Set_Transform_Weight__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___Set_Transform_bPropagateToChildren__Const) == 0x000048, "Member 'URigVMMemory_Literal::RigVMModel___Set_Transform_bPropagateToChildren__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___Set_Transform_1_Item__Const) == 0x00004C, "Member 'URigVMMemory_Literal::RigVMModel___Set_Transform_1_Item__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___GetTransform_1_Item__Const) == 0x000058, "Member 'URigVMMemory_Literal::RigVMModel___GetTransform_1_Item__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___Set_Transform_1_1_Item__Const) == 0x000064, "Member 'URigVMMemory_Literal::RigVMModel___Set_Transform_1_1_Item__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___GetTransform_1_1_Item__Const) == 0x000070, "Member 'URigVMMemory_Literal::RigVMModel___GetTransform_1_1_Item__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___Set_Transform_1_1_1_Item__Const) == 0x00007C, "Member 'URigVMMemory_Literal::RigVMModel___Set_Transform_1_1_1_Item__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___GetTransform_1_1_1_Item__Const) == 0x000088, "Member 'URigVMMemory_Literal::RigVMModel___GetTransform_1_1_1_Item__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___Set_Transform_1_1_1_1_Item__Const) == 0x000094, "Member 'URigVMMemory_Literal::RigVMModel___Set_Transform_1_1_1_1_Item__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___GetTransform_1_1_1_1_Item__Const) == 0x0000A0, "Member 'URigVMMemory_Literal::RigVMModel___GetTransform_1_1_1_1_Item__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___OffsetTransformForItem_2_OffsetTransform__Const) == 0x0000B0, "Member 'URigVMMemory_Literal::RigVMModel___OffsetTransformForItem_2_OffsetTransform__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___MathQuaternionFromEuler_RotationOrder__Const) == 0x000110, "Member 'URigVMMemory_Literal::RigVMModel___MathQuaternionFromEuler_RotationOrder__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___Add_3_B__Const) == 0x000118, "Member 'URigVMMemory_Literal::RigVMModel___Add_3_B__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___PBIK_Root__Const) == 0x000130, "Member 'URigVMMemory_Literal::RigVMModel___PBIK_Root__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___PBIK_Effectors__Const) == 0x000138, "Member 'URigVMMemory_Literal::RigVMModel___PBIK_Effectors__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___Subtract_A__Const) == 0x000148, "Member 'URigVMMemory_Literal::RigVMModel___Subtract_A__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___PBIK_BoneSettings__Const) == 0x000150, "Member 'URigVMMemory_Literal::RigVMModel___PBIK_BoneSettings__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___PBIK_ExcludedBones__Const) == 0x000160, "Member 'URigVMMemory_Literal::RigVMModel___PBIK_ExcludedBones__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___PBIK_Settings__Const) == 0x000170, "Member 'URigVMMemory_Literal::RigVMModel___PBIK_Settings__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___PBIK_Debug__Const) == 0x0001AC, "Member 'URigVMMemory_Literal::RigVMModel___PBIK_Debug__Const' has a wrong offset!");

// RigVMMemoryStorageGeneratorClass Seve_control_rig.RigVMMemory_Work
// 0x0768 (0x0790 - 0x0028)
class URigVMMemory_Work final : public URigVMMemoryStorage
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___GetTransform_Transform;               // 0x0030(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetTransform_CachedIndex;             // 0x0090(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___Set_Transform_CachedIndex;            // 0x00A0(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___GetTransform_1_Transform;             // 0x00B0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetTransform_1_CachedIndex;           // 0x0110(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___Set_Transform_1_CachedIndex;          // 0x0120(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___GetTransform_1_1_Transform;           // 0x0130(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetTransform_1_1_CachedIndex;         // 0x0190(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___Set_Transform_1_1_CachedIndex;        // 0x01A0(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___GetTransform_1_1_1_Transform;         // 0x01B0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetTransform_1_1_1_CachedIndex;       // 0x0210(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___Set_Transform_1_1_1_CachedIndex;      // 0x0220(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___GetTransform_1_1_1_1_Transform;       // 0x0230(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetTransform_1_1_1_1_CachedIndex;     // 0x0290(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___Set_Transform_1_1_1_1_CachedIndex;    // 0x02A0(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___OffsetTransformForItem_2_OffsetTransform__IO; // 0x02B0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___OffsetTransformForItem_2_Weight;      // 0x0310(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___OffsetTransformForItem_2_CachedIndex; // 0x0318(0x0010)(Edit, EditConst, NonTransactional)
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___OffsetTransformForItem_2_1_OffsetTransform__IO; // 0x0330(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___OffsetTransformForItem_2_1_Weight;    // 0x0390(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_394[0x4];                                      // 0x0394(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___OffsetTransformForItem_2_1_CachedIndex; // 0x0398(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___Add_2_Result;                         // 0x03A8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___GetTransform_4_Transform;             // 0x03C0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetTransform_4_CachedIndex;           // 0x0420(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___Add_2_A;                              // 0x0430(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___Set_Transform_2_Weight;               // 0x0448(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44C[0x4];                                      // 0x044C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___Set_Transform_2_CachedIndex;          // 0x0450(0x0010)(Edit, EditConst, NonTransactional)
	float                                         RigVMModel___Set_Transform_1_1_1_1_1_Weight;       // 0x0460(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_464[0x4];                                      // 0x0464(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___Set_Transform_1_1_1_1_1_CachedIndex;  // 0x0468(0x0010)(Edit, EditConst, NonTransactional)
	uint8                                         Pad_478[0x8];                                      // 0x0478(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionFromEuler_Result;       // 0x0480(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___Set_Transform_1_1_1_1_1_2_Weight;     // 0x04A0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A4[0x4];                                      // 0x04A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___Set_Transform_1_1_1_1_1_2_CachedIndex; // 0x04A8(0x0010)(Edit, EditConst, NonTransactional)
	float                                         RigVMModel___Set_Transform_1_1_1_1_1_1_Weight;     // 0x04B8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BC[0x4];                                      // 0x04BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___Set_Transform_1_1_1_1_1_1_CachedIndex; // 0x04C0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromEuler_1_Result;     // 0x04D0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___Add_3_Result;                         // 0x04F0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___Set_Transform_3_Weight;               // 0x0508(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50C[0x4];                                      // 0x050C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___Set_Transform_3_CachedIndex;          // 0x0510(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___GetTransform_2_Transform;             // 0x0520(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetTransform_2_CachedIndex;           // 0x0580(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___GetTransform_2_1_Transform;           // 0x0590(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetTransform_2_1_CachedIndex;         // 0x05F0(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___GetTransform_2_1_1_Transform;         // 0x0600(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetTransform_2_1_1_CachedIndex;       // 0x0660(0x0010)(Edit, EditConst, NonTransactional)
	double                                        RigVMModel___Subtract_Result;                      // 0x0670(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        RigVMModel___Maximum_Result;                       // 0x0678(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___GetTransform_2_1_1_1_Transform;       // 0x0680(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetTransform_2_1_1_1_CachedIndex;     // 0x06E0(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___GetTransform_2_1_1_1_2_Transform;     // 0x06F0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetTransform_2_1_1_1_2_CachedIndex;   // 0x0750(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FPBIKEffector>                  RigVMModel___PBIK_Effectors__IO;                   // 0x0760(0x0010)(Edit, EditConst, NonTransactional)
	TArray<TArray<int32>>                         RigVMModel___PBIK_EffectorSolverIndices;           // 0x0770(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FPBIKWorkData>                  RigVMModel___PBIK_WorkData;                        // 0x0780(0x0010)(Edit, EditConst, NonTransactional)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemory_Work">();
	}
	static class URigVMMemory_Work* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMMemory_Work>();
	}
};
static_assert(alignof(URigVMMemory_Work) == 0x000010, "Wrong alignment on URigVMMemory_Work");
static_assert(sizeof(URigVMMemory_Work) == 0x000790, "Wrong size on URigVMMemory_Work");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___GetTransform_Transform) == 0x000030, "Member 'URigVMMemory_Work::RigVMModel___GetTransform_Transform' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___GetTransform_CachedIndex) == 0x000090, "Member 'URigVMMemory_Work::RigVMModel___GetTransform_CachedIndex' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___Set_Transform_CachedIndex) == 0x0000A0, "Member 'URigVMMemory_Work::RigVMModel___Set_Transform_CachedIndex' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___GetTransform_1_Transform) == 0x0000B0, "Member 'URigVMMemory_Work::RigVMModel___GetTransform_1_Transform' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___GetTransform_1_CachedIndex) == 0x000110, "Member 'URigVMMemory_Work::RigVMModel___GetTransform_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___Set_Transform_1_CachedIndex) == 0x000120, "Member 'URigVMMemory_Work::RigVMModel___Set_Transform_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___GetTransform_1_1_Transform) == 0x000130, "Member 'URigVMMemory_Work::RigVMModel___GetTransform_1_1_Transform' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___GetTransform_1_1_CachedIndex) == 0x000190, "Member 'URigVMMemory_Work::RigVMModel___GetTransform_1_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___Set_Transform_1_1_CachedIndex) == 0x0001A0, "Member 'URigVMMemory_Work::RigVMModel___Set_Transform_1_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___GetTransform_1_1_1_Transform) == 0x0001B0, "Member 'URigVMMemory_Work::RigVMModel___GetTransform_1_1_1_Transform' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___GetTransform_1_1_1_CachedIndex) == 0x000210, "Member 'URigVMMemory_Work::RigVMModel___GetTransform_1_1_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___Set_Transform_1_1_1_CachedIndex) == 0x000220, "Member 'URigVMMemory_Work::RigVMModel___Set_Transform_1_1_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___GetTransform_1_1_1_1_Transform) == 0x000230, "Member 'URigVMMemory_Work::RigVMModel___GetTransform_1_1_1_1_Transform' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___GetTransform_1_1_1_1_CachedIndex) == 0x000290, "Member 'URigVMMemory_Work::RigVMModel___GetTransform_1_1_1_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___Set_Transform_1_1_1_1_CachedIndex) == 0x0002A0, "Member 'URigVMMemory_Work::RigVMModel___Set_Transform_1_1_1_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___OffsetTransformForItem_2_OffsetTransform__IO) == 0x0002B0, "Member 'URigVMMemory_Work::RigVMModel___OffsetTransformForItem_2_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___OffsetTransformForItem_2_Weight) == 0x000310, "Member 'URigVMMemory_Work::RigVMModel___OffsetTransformForItem_2_Weight' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___OffsetTransformForItem_2_CachedIndex) == 0x000318, "Member 'URigVMMemory_Work::RigVMModel___OffsetTransformForItem_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___OffsetTransformForItem_2_1_OffsetTransform__IO) == 0x000330, "Member 'URigVMMemory_Work::RigVMModel___OffsetTransformForItem_2_1_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___OffsetTransformForItem_2_1_Weight) == 0x000390, "Member 'URigVMMemory_Work::RigVMModel___OffsetTransformForItem_2_1_Weight' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___OffsetTransformForItem_2_1_CachedIndex) == 0x000398, "Member 'URigVMMemory_Work::RigVMModel___OffsetTransformForItem_2_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___Add_2_Result) == 0x0003A8, "Member 'URigVMMemory_Work::RigVMModel___Add_2_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___GetTransform_4_Transform) == 0x0003C0, "Member 'URigVMMemory_Work::RigVMModel___GetTransform_4_Transform' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___GetTransform_4_CachedIndex) == 0x000420, "Member 'URigVMMemory_Work::RigVMModel___GetTransform_4_CachedIndex' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___Add_2_A) == 0x000430, "Member 'URigVMMemory_Work::RigVMModel___Add_2_A' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___Set_Transform_2_Weight) == 0x000448, "Member 'URigVMMemory_Work::RigVMModel___Set_Transform_2_Weight' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___Set_Transform_2_CachedIndex) == 0x000450, "Member 'URigVMMemory_Work::RigVMModel___Set_Transform_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___Set_Transform_1_1_1_1_1_Weight) == 0x000460, "Member 'URigVMMemory_Work::RigVMModel___Set_Transform_1_1_1_1_1_Weight' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___Set_Transform_1_1_1_1_1_CachedIndex) == 0x000468, "Member 'URigVMMemory_Work::RigVMModel___Set_Transform_1_1_1_1_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___MathQuaternionFromEuler_Result) == 0x000480, "Member 'URigVMMemory_Work::RigVMModel___MathQuaternionFromEuler_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___Set_Transform_1_1_1_1_1_2_Weight) == 0x0004A0, "Member 'URigVMMemory_Work::RigVMModel___Set_Transform_1_1_1_1_1_2_Weight' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___Set_Transform_1_1_1_1_1_2_CachedIndex) == 0x0004A8, "Member 'URigVMMemory_Work::RigVMModel___Set_Transform_1_1_1_1_1_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___Set_Transform_1_1_1_1_1_1_Weight) == 0x0004B8, "Member 'URigVMMemory_Work::RigVMModel___Set_Transform_1_1_1_1_1_1_Weight' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___Set_Transform_1_1_1_1_1_1_CachedIndex) == 0x0004C0, "Member 'URigVMMemory_Work::RigVMModel___Set_Transform_1_1_1_1_1_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___MathQuaternionFromEuler_1_Result) == 0x0004D0, "Member 'URigVMMemory_Work::RigVMModel___MathQuaternionFromEuler_1_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___Add_3_Result) == 0x0004F0, "Member 'URigVMMemory_Work::RigVMModel___Add_3_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___Set_Transform_3_Weight) == 0x000508, "Member 'URigVMMemory_Work::RigVMModel___Set_Transform_3_Weight' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___Set_Transform_3_CachedIndex) == 0x000510, "Member 'URigVMMemory_Work::RigVMModel___Set_Transform_3_CachedIndex' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___GetTransform_2_Transform) == 0x000520, "Member 'URigVMMemory_Work::RigVMModel___GetTransform_2_Transform' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___GetTransform_2_CachedIndex) == 0x000580, "Member 'URigVMMemory_Work::RigVMModel___GetTransform_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___GetTransform_2_1_Transform) == 0x000590, "Member 'URigVMMemory_Work::RigVMModel___GetTransform_2_1_Transform' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___GetTransform_2_1_CachedIndex) == 0x0005F0, "Member 'URigVMMemory_Work::RigVMModel___GetTransform_2_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___GetTransform_2_1_1_Transform) == 0x000600, "Member 'URigVMMemory_Work::RigVMModel___GetTransform_2_1_1_Transform' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___GetTransform_2_1_1_CachedIndex) == 0x000660, "Member 'URigVMMemory_Work::RigVMModel___GetTransform_2_1_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___Subtract_Result) == 0x000670, "Member 'URigVMMemory_Work::RigVMModel___Subtract_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___Maximum_Result) == 0x000678, "Member 'URigVMMemory_Work::RigVMModel___Maximum_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___GetTransform_2_1_1_1_Transform) == 0x000680, "Member 'URigVMMemory_Work::RigVMModel___GetTransform_2_1_1_1_Transform' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___GetTransform_2_1_1_1_CachedIndex) == 0x0006E0, "Member 'URigVMMemory_Work::RigVMModel___GetTransform_2_1_1_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___GetTransform_2_1_1_1_2_Transform) == 0x0006F0, "Member 'URigVMMemory_Work::RigVMModel___GetTransform_2_1_1_1_2_Transform' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___GetTransform_2_1_1_1_2_CachedIndex) == 0x000750, "Member 'URigVMMemory_Work::RigVMModel___GetTransform_2_1_1_1_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___PBIK_Effectors__IO) == 0x000760, "Member 'URigVMMemory_Work::RigVMModel___PBIK_Effectors__IO' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___PBIK_EffectorSolverIndices) == 0x000770, "Member 'URigVMMemory_Work::RigVMModel___PBIK_EffectorSolverIndices' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___PBIK_WorkData) == 0x000780, "Member 'URigVMMemory_Work::RigVMModel___PBIK_WorkData' has a wrong offset!");

}

