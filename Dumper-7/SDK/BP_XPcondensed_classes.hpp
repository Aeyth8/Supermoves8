#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_XPcondensed

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_XPcondensed.BP_XPcondensed_C
// 0x0028 (0x02E8 - 0x02C0)
class UBP_XPcondensed_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       XPReveal;                                          // 0x02C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UCommonTextBlock*                       BaseXP;                                            // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Multiplier;                                        // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       TotalXP;                                           // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_XPcondensed(int32 EntryPoint);
	void SetData(int32 BaseXP_0, int32 Multiplier_0, int32 TotalXP_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_XPcondensed_C">();
	}
	static class UBP_XPcondensed_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_XPcondensed_C>();
	}
};
static_assert(alignof(UBP_XPcondensed_C) == 0x000008, "Wrong alignment on UBP_XPcondensed_C");
static_assert(sizeof(UBP_XPcondensed_C) == 0x0002E8, "Wrong size on UBP_XPcondensed_C");
static_assert(offsetof(UBP_XPcondensed_C, UberGraphFrame) == 0x0002C0, "Member 'UBP_XPcondensed_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_XPcondensed_C, XPReveal) == 0x0002C8, "Member 'UBP_XPcondensed_C::XPReveal' has a wrong offset!");
static_assert(offsetof(UBP_XPcondensed_C, BaseXP) == 0x0002D0, "Member 'UBP_XPcondensed_C::BaseXP' has a wrong offset!");
static_assert(offsetof(UBP_XPcondensed_C, Multiplier) == 0x0002D8, "Member 'UBP_XPcondensed_C::Multiplier' has a wrong offset!");
static_assert(offsetof(UBP_XPcondensed_C, TotalXP) == 0x0002E0, "Member 'UBP_XPcondensed_C::TotalXP' has a wrong offset!");

}

