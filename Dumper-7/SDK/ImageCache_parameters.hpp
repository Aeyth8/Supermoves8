#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ImageCache

#include "Basic.hpp"


namespace SDK::Params
{

// Function ImageCache.AsyncTaskFetchImage.FetchImage
// 0x0018 (0x0018 - 0x0000)
struct AsyncTaskFetchImage_FetchImage final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncTaskFetchImage*                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTaskFetchImage_FetchImage) == 0x000008, "Wrong alignment on AsyncTaskFetchImage_FetchImage");
static_assert(sizeof(AsyncTaskFetchImage_FetchImage) == 0x000018, "Wrong size on AsyncTaskFetchImage_FetchImage");
static_assert(offsetof(AsyncTaskFetchImage_FetchImage, URL) == 0x000000, "Member 'AsyncTaskFetchImage_FetchImage::URL' has a wrong offset!");
static_assert(offsetof(AsyncTaskFetchImage_FetchImage, ReturnValue) == 0x000010, "Member 'AsyncTaskFetchImage_FetchImage::ReturnValue' has a wrong offset!");

// Function ImageCache.AsyncTaskQueueFetchImages.QueueFetchImages
// 0x0020 (0x0020 - 0x0000)
struct AsyncTaskQueueFetchImages_QueueFetchImages final
{
public:
	TArray<class FString>                         Items;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bClearMemory;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAsyncTaskQueueFetchImages*             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTaskQueueFetchImages_QueueFetchImages) == 0x000008, "Wrong alignment on AsyncTaskQueueFetchImages_QueueFetchImages");
static_assert(sizeof(AsyncTaskQueueFetchImages_QueueFetchImages) == 0x000020, "Wrong size on AsyncTaskQueueFetchImages_QueueFetchImages");
static_assert(offsetof(AsyncTaskQueueFetchImages_QueueFetchImages, Items) == 0x000000, "Member 'AsyncTaskQueueFetchImages_QueueFetchImages::Items' has a wrong offset!");
static_assert(offsetof(AsyncTaskQueueFetchImages_QueueFetchImages, bClearMemory) == 0x000010, "Member 'AsyncTaskQueueFetchImages_QueueFetchImages::bClearMemory' has a wrong offset!");
static_assert(offsetof(AsyncTaskQueueFetchImages_QueueFetchImages, ReturnValue) == 0x000018, "Member 'AsyncTaskQueueFetchImages_QueueFetchImages::ReturnValue' has a wrong offset!");

// Function ImageCache.AsyncTaskQueueFetchImages.HandleFetchImageFail
// 0x0018 (0x0018 - 0x0000)
struct AsyncTaskQueueFetchImages_HandleFetchImageFail final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2DDynamic*                      Texture;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTaskQueueFetchImages_HandleFetchImageFail) == 0x000008, "Wrong alignment on AsyncTaskQueueFetchImages_HandleFetchImageFail");
static_assert(sizeof(AsyncTaskQueueFetchImages_HandleFetchImageFail) == 0x000018, "Wrong size on AsyncTaskQueueFetchImages_HandleFetchImageFail");
static_assert(offsetof(AsyncTaskQueueFetchImages_HandleFetchImageFail, URL) == 0x000000, "Member 'AsyncTaskQueueFetchImages_HandleFetchImageFail::URL' has a wrong offset!");
static_assert(offsetof(AsyncTaskQueueFetchImages_HandleFetchImageFail, Texture) == 0x000010, "Member 'AsyncTaskQueueFetchImages_HandleFetchImageFail::Texture' has a wrong offset!");

// Function ImageCache.AsyncTaskQueueFetchImages.HandleFetchImageSucess
// 0x0018 (0x0018 - 0x0000)
struct AsyncTaskQueueFetchImages_HandleFetchImageSucess final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2DDynamic*                      Texture;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTaskQueueFetchImages_HandleFetchImageSucess) == 0x000008, "Wrong alignment on AsyncTaskQueueFetchImages_HandleFetchImageSucess");
static_assert(sizeof(AsyncTaskQueueFetchImages_HandleFetchImageSucess) == 0x000018, "Wrong size on AsyncTaskQueueFetchImages_HandleFetchImageSucess");
static_assert(offsetof(AsyncTaskQueueFetchImages_HandleFetchImageSucess, URL) == 0x000000, "Member 'AsyncTaskQueueFetchImages_HandleFetchImageSucess::URL' has a wrong offset!");
static_assert(offsetof(AsyncTaskQueueFetchImages_HandleFetchImageSucess, Texture) == 0x000010, "Member 'AsyncTaskQueueFetchImages_HandleFetchImageSucess::Texture' has a wrong offset!");

// Function ImageCache.ImageCacheLibrary.CacheImage
// 0x0010 (0x0010 - 0x0000)
struct ImageCacheLibrary_CacheImage final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImageCacheLibrary_CacheImage) == 0x000008, "Wrong alignment on ImageCacheLibrary_CacheImage");
static_assert(sizeof(ImageCacheLibrary_CacheImage) == 0x000010, "Wrong size on ImageCacheLibrary_CacheImage");
static_assert(offsetof(ImageCacheLibrary_CacheImage, URL) == 0x000000, "Member 'ImageCacheLibrary_CacheImage::URL' has a wrong offset!");

// Function ImageCache.ImageCacheLibrary.CacheImages
// 0x0010 (0x0010 - 0x0000)
struct ImageCacheLibrary_CacheImages final
{
public:
	TArray<class FString>                         URLs;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImageCacheLibrary_CacheImages) == 0x000008, "Wrong alignment on ImageCacheLibrary_CacheImages");
static_assert(sizeof(ImageCacheLibrary_CacheImages) == 0x000010, "Wrong size on ImageCacheLibrary_CacheImages");
static_assert(offsetof(ImageCacheLibrary_CacheImages, URLs) == 0x000000, "Member 'ImageCacheLibrary_CacheImages::URLs' has a wrong offset!");

// Function ImageCache.ImageCacheLibrary.DeleteImageCache
// 0x0010 (0x0010 - 0x0000)
struct ImageCacheLibrary_DeleteImageCache final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImageCacheLibrary_DeleteImageCache) == 0x000008, "Wrong alignment on ImageCacheLibrary_DeleteImageCache");
static_assert(sizeof(ImageCacheLibrary_DeleteImageCache) == 0x000010, "Wrong size on ImageCacheLibrary_DeleteImageCache");
static_assert(offsetof(ImageCacheLibrary_DeleteImageCache, URL) == 0x000000, "Member 'ImageCacheLibrary_DeleteImageCache::URL' has a wrong offset!");

// Function ImageCache.ImageCacheLibrary.GetCachedImage
// 0x0018 (0x0018 - 0x0000)
struct ImageCacheLibrary_GetCachedImage final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2DDynamic*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImageCacheLibrary_GetCachedImage) == 0x000008, "Wrong alignment on ImageCacheLibrary_GetCachedImage");
static_assert(sizeof(ImageCacheLibrary_GetCachedImage) == 0x000018, "Wrong size on ImageCacheLibrary_GetCachedImage");
static_assert(offsetof(ImageCacheLibrary_GetCachedImage, URL) == 0x000000, "Member 'ImageCacheLibrary_GetCachedImage::URL' has a wrong offset!");
static_assert(offsetof(ImageCacheLibrary_GetCachedImage, ReturnValue) == 0x000010, "Member 'ImageCacheLibrary_GetCachedImage::ReturnValue' has a wrong offset!");

// Function ImageCache.ImageCacheLibrary.GetImageCacheDirectory
// 0x0010 (0x0010 - 0x0000)
struct ImageCacheLibrary_GetImageCacheDirectory final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImageCacheLibrary_GetImageCacheDirectory) == 0x000008, "Wrong alignment on ImageCacheLibrary_GetImageCacheDirectory");
static_assert(sizeof(ImageCacheLibrary_GetImageCacheDirectory) == 0x000010, "Wrong size on ImageCacheLibrary_GetImageCacheDirectory");
static_assert(offsetof(ImageCacheLibrary_GetImageCacheDirectory, ReturnValue) == 0x000000, "Member 'ImageCacheLibrary_GetImageCacheDirectory::ReturnValue' has a wrong offset!");

// Function ImageCache.ImageCacheLibrary.GetImageCacheExpireTime
// 0x0004 (0x0004 - 0x0000)
struct ImageCacheLibrary_GetImageCacheExpireTime final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImageCacheLibrary_GetImageCacheExpireTime) == 0x000004, "Wrong alignment on ImageCacheLibrary_GetImageCacheExpireTime");
static_assert(sizeof(ImageCacheLibrary_GetImageCacheExpireTime) == 0x000004, "Wrong size on ImageCacheLibrary_GetImageCacheExpireTime");
static_assert(offsetof(ImageCacheLibrary_GetImageCacheExpireTime, ReturnValue) == 0x000000, "Member 'ImageCacheLibrary_GetImageCacheExpireTime::ReturnValue' has a wrong offset!");

// Function ImageCache.ImageCacheLibrary.GetImageCacheMaxSizeGB
// 0x0004 (0x0004 - 0x0000)
struct ImageCacheLibrary_GetImageCacheMaxSizeGB final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImageCacheLibrary_GetImageCacheMaxSizeGB) == 0x000004, "Wrong alignment on ImageCacheLibrary_GetImageCacheMaxSizeGB");
static_assert(sizeof(ImageCacheLibrary_GetImageCacheMaxSizeGB) == 0x000004, "Wrong size on ImageCacheLibrary_GetImageCacheMaxSizeGB");
static_assert(offsetof(ImageCacheLibrary_GetImageCacheMaxSizeGB, ReturnValue) == 0x000000, "Member 'ImageCacheLibrary_GetImageCacheMaxSizeGB::ReturnValue' has a wrong offset!");

// Function ImageCache.ImageCacheLibrary.SetImageCacheExpireTime
// 0x0004 (0x0004 - 0x0000)
struct ImageCacheLibrary_SetImageCacheExpireTime final
{
public:
	int32                                         ExpireTime;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImageCacheLibrary_SetImageCacheExpireTime) == 0x000004, "Wrong alignment on ImageCacheLibrary_SetImageCacheExpireTime");
static_assert(sizeof(ImageCacheLibrary_SetImageCacheExpireTime) == 0x000004, "Wrong size on ImageCacheLibrary_SetImageCacheExpireTime");
static_assert(offsetof(ImageCacheLibrary_SetImageCacheExpireTime, ExpireTime) == 0x000000, "Member 'ImageCacheLibrary_SetImageCacheExpireTime::ExpireTime' has a wrong offset!");

// Function ImageCache.ImageCacheLibrary.SetImageCacheMaxSizeGB
// 0x0004 (0x0004 - 0x0000)
struct ImageCacheLibrary_SetImageCacheMaxSizeGB final
{
public:
	float                                         SizeGB;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImageCacheLibrary_SetImageCacheMaxSizeGB) == 0x000004, "Wrong alignment on ImageCacheLibrary_SetImageCacheMaxSizeGB");
static_assert(sizeof(ImageCacheLibrary_SetImageCacheMaxSizeGB) == 0x000004, "Wrong size on ImageCacheLibrary_SetImageCacheMaxSizeGB");
static_assert(offsetof(ImageCacheLibrary_SetImageCacheMaxSizeGB, SizeGB) == 0x000000, "Member 'ImageCacheLibrary_SetImageCacheMaxSizeGB::SizeGB' has a wrong offset!");

}

