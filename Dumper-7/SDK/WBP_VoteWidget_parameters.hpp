#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_VoteWidget

#include "Basic.hpp"

#include "GYMGAME_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_VoteWidget.WBP_VoteWidget_C.ExecuteUbergraph_WBP_VoteWidget
// 0x0044 (0x0044 - 0x0000)
struct WBP_VoteWidget_C_ExecuteUbergraph_WBP_VoteWidget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_VoteWidget_C_ExecuteUbergraph_WBP_VoteWidget) == 0x000004, "Wrong alignment on WBP_VoteWidget_C_ExecuteUbergraph_WBP_VoteWidget");
static_assert(sizeof(WBP_VoteWidget_C_ExecuteUbergraph_WBP_VoteWidget) == 0x000044, "Wrong size on WBP_VoteWidget_C_ExecuteUbergraph_WBP_VoteWidget");
static_assert(offsetof(WBP_VoteWidget_C_ExecuteUbergraph_WBP_VoteWidget, EntryPoint) == 0x000000, "Member 'WBP_VoteWidget_C_ExecuteUbergraph_WBP_VoteWidget::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_ExecuteUbergraph_WBP_VoteWidget, K2Node_Event_MyGeometry) == 0x000004, "Member 'WBP_VoteWidget_C_ExecuteUbergraph_WBP_VoteWidget::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_ExecuteUbergraph_WBP_VoteWidget, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'WBP_VoteWidget_C_ExecuteUbergraph_WBP_VoteWidget::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_ExecuteUbergraph_WBP_VoteWidget, K2Node_SwitchEnum_CmpSuccess) == 0x000040, "Member 'WBP_VoteWidget_C_ExecuteUbergraph_WBP_VoteWidget::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function WBP_VoteWidget.WBP_VoteWidget_C.FormatTime
// 0x0130 (0x0130 - 0x0000)
struct WBP_VoteWidget_C_FormatTime final
{
public:
	double                                        Time;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Out;                                               // 0x0008(0x0018)(Parm, OutParm)
	double                                        CallFunc_Percent_FloatFloat_ReturnValue;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FFloor_ReturnValue;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FFloor_ReturnValue_1;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0038(0x0018)()
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_1;             // 0x0050(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0068(0x0050)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00B8(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0108(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0118(0x0018)()
};
static_assert(alignof(WBP_VoteWidget_C_FormatTime) == 0x000008, "Wrong alignment on WBP_VoteWidget_C_FormatTime");
static_assert(sizeof(WBP_VoteWidget_C_FormatTime) == 0x000130, "Wrong size on WBP_VoteWidget_C_FormatTime");
static_assert(offsetof(WBP_VoteWidget_C_FormatTime, Time) == 0x000000, "Member 'WBP_VoteWidget_C_FormatTime::Time' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_FormatTime, Out) == 0x000008, "Member 'WBP_VoteWidget_C_FormatTime::Out' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_FormatTime, CallFunc_Percent_FloatFloat_ReturnValue) == 0x000020, "Member 'WBP_VoteWidget_C_FormatTime::CallFunc_Percent_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_FormatTime, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000028, "Member 'WBP_VoteWidget_C_FormatTime::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_FormatTime, CallFunc_FFloor_ReturnValue) == 0x000030, "Member 'WBP_VoteWidget_C_FormatTime::CallFunc_FFloor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_FormatTime, CallFunc_FFloor_ReturnValue_1) == 0x000034, "Member 'WBP_VoteWidget_C_FormatTime::CallFunc_FFloor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_FormatTime, CallFunc_Conv_IntToText_ReturnValue) == 0x000038, "Member 'WBP_VoteWidget_C_FormatTime::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_FormatTime, CallFunc_Conv_IntToText_ReturnValue_1) == 0x000050, "Member 'WBP_VoteWidget_C_FormatTime::CallFunc_Conv_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_FormatTime, K2Node_MakeStruct_FormatArgumentData) == 0x000068, "Member 'WBP_VoteWidget_C_FormatTime::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_FormatTime, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000B8, "Member 'WBP_VoteWidget_C_FormatTime::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_FormatTime, K2Node_MakeArray_Array) == 0x000108, "Member 'WBP_VoteWidget_C_FormatTime::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_FormatTime, CallFunc_Format_ReturnValue) == 0x000118, "Member 'WBP_VoteWidget_C_FormatTime::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function WBP_VoteWidget.WBP_VoteWidget_C.OnVotedChanged
// 0x0020 (0x0020 - 0x0000)
struct WBP_VoteWidget_C_OnVotedChanged final
{
public:
	bool                                          bDidVote;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_2;              // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_VoteWidget_C_OnVotedChanged) == 0x000008, "Wrong alignment on WBP_VoteWidget_C_OnVotedChanged");
static_assert(sizeof(WBP_VoteWidget_C_OnVotedChanged) == 0x000020, "Wrong size on WBP_VoteWidget_C_OnVotedChanged");
static_assert(offsetof(WBP_VoteWidget_C_OnVotedChanged, bDidVote) == 0x000000, "Member 'WBP_VoteWidget_C_OnVotedChanged::bDidVote' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_OnVotedChanged, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'WBP_VoteWidget_C_OnVotedChanged::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_OnVotedChanged, CallFunc_PlayAnimation_ReturnValue_1) == 0x000010, "Member 'WBP_VoteWidget_C_OnVotedChanged::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_OnVotedChanged, CallFunc_PlayAnimation_ReturnValue_2) == 0x000018, "Member 'WBP_VoteWidget_C_OnVotedChanged::CallFunc_PlayAnimation_ReturnValue_2' has a wrong offset!");

// Function WBP_VoteWidget.WBP_VoteWidget_C.OnVoteEnded
// 0x0003 (0x0003 - 0x0000)
struct WBP_VoteWidget_C_OnVoteEnded final
{
public:
	EVoteState                                    VoteResult;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDidVote;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_VoteWidget_C_OnVoteEnded) == 0x000001, "Wrong alignment on WBP_VoteWidget_C_OnVoteEnded");
static_assert(sizeof(WBP_VoteWidget_C_OnVoteEnded) == 0x000003, "Wrong size on WBP_VoteWidget_C_OnVoteEnded");
static_assert(offsetof(WBP_VoteWidget_C_OnVoteEnded, VoteResult) == 0x000000, "Member 'WBP_VoteWidget_C_OnVoteEnded::VoteResult' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_OnVoteEnded, bDidVote) == 0x000001, "Member 'WBP_VoteWidget_C_OnVoteEnded::bDidVote' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_OnVoteEnded, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'WBP_VoteWidget_C_OnVoteEnded::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function WBP_VoteWidget.WBP_VoteWidget_C.OnVoteStateChanged
// 0x0010 (0x0010 - 0x0000)
struct WBP_VoteWidget_C_OnVoteStateChanged final
{
public:
	EVoteState                                    VoteState;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_VoteWidget_C_OnVoteStateChanged) == 0x000008, "Wrong alignment on WBP_VoteWidget_C_OnVoteStateChanged");
static_assert(sizeof(WBP_VoteWidget_C_OnVoteStateChanged) == 0x000010, "Wrong size on WBP_VoteWidget_C_OnVoteStateChanged");
static_assert(offsetof(WBP_VoteWidget_C_OnVoteStateChanged, VoteState) == 0x000000, "Member 'WBP_VoteWidget_C_OnVoteStateChanged::VoteState' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_OnVoteStateChanged, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'WBP_VoteWidget_C_OnVoteStateChanged::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WBP_VoteWidget.WBP_VoteWidget_C.Tick
// 0x003C (0x003C - 0x0000)
struct WBP_VoteWidget_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_VoteWidget_C_Tick) == 0x000004, "Wrong alignment on WBP_VoteWidget_C_Tick");
static_assert(sizeof(WBP_VoteWidget_C_Tick) == 0x00003C, "Wrong size on WBP_VoteWidget_C_Tick");
static_assert(offsetof(WBP_VoteWidget_C_Tick, MyGeometry) == 0x000000, "Member 'WBP_VoteWidget_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_Tick, InDeltaTime) == 0x000038, "Member 'WBP_VoteWidget_C_Tick::InDeltaTime' has a wrong offset!");

// Function WBP_VoteWidget.WBP_VoteWidget_C.TryInit
// 0x0078 (0x0078 - 0x0000)
struct WBP_VoteWidget_C_TryInit final
{
public:
	bool                                          GSValid;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PSValid;                                           // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EVoteState VoteState)>         K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool bDidVote)>                K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EVoteState VoteResult, bool bDidVote)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x0034(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGymGameState*                          K2Node_DynamicCast_AsGym_Game_State;               // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGymPlayerState*                        K2Node_DynamicCast_AsGym_Player_State;             // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_VoteWidget_C_TryInit) == 0x000008, "Wrong alignment on WBP_VoteWidget_C_TryInit");
static_assert(sizeof(WBP_VoteWidget_C_TryInit) == 0x000078, "Wrong size on WBP_VoteWidget_C_TryInit");
static_assert(offsetof(WBP_VoteWidget_C_TryInit, GSValid) == 0x000000, "Member 'WBP_VoteWidget_C_TryInit::GSValid' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_TryInit, PSValid) == 0x000001, "Member 'WBP_VoteWidget_C_TryInit::PSValid' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_TryInit, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'WBP_VoteWidget_C_TryInit::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_TryInit, CallFunc_IsValid_ReturnValue_1) == 0x000003, "Member 'WBP_VoteWidget_C_TryInit::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_TryInit, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'WBP_VoteWidget_C_TryInit::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_TryInit, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'WBP_VoteWidget_C_TryInit::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_TryInit, K2Node_CreateDelegate_OutputDelegate_2) == 0x000024, "Member 'WBP_VoteWidget_C_TryInit::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_TryInit, K2Node_CreateDelegate_OutputDelegate_3) == 0x000034, "Member 'WBP_VoteWidget_C_TryInit::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_TryInit, CallFunc_BooleanAND_ReturnValue) == 0x000044, "Member 'WBP_VoteWidget_C_TryInit::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_TryInit, CallFunc_GetOwningPlayer_ReturnValue) == 0x000048, "Member 'WBP_VoteWidget_C_TryInit::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_TryInit, CallFunc_GetGameState_ReturnValue) == 0x000050, "Member 'WBP_VoteWidget_C_TryInit::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_TryInit, K2Node_DynamicCast_AsGym_Game_State) == 0x000058, "Member 'WBP_VoteWidget_C_TryInit::K2Node_DynamicCast_AsGym_Game_State' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_TryInit, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'WBP_VoteWidget_C_TryInit::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_TryInit, K2Node_DynamicCast_AsGym_Player_State) == 0x000068, "Member 'WBP_VoteWidget_C_TryInit::K2Node_DynamicCast_AsGym_Player_State' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_TryInit, K2Node_DynamicCast_bSuccess_1) == 0x000070, "Member 'WBP_VoteWidget_C_TryInit::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function WBP_VoteWidget.WBP_VoteWidget_C.UpdateCancelVisibility
// 0x0006 (0x0006 - 0x0000)
struct WBP_VoteWidget_C_UpdateCancelVisibility final
{
public:
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOwner_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_VoteWidget_C_UpdateCancelVisibility) == 0x000001, "Wrong alignment on WBP_VoteWidget_C_UpdateCancelVisibility");
static_assert(sizeof(WBP_VoteWidget_C_UpdateCancelVisibility) == 0x000006, "Wrong size on WBP_VoteWidget_C_UpdateCancelVisibility");
static_assert(offsetof(WBP_VoteWidget_C_UpdateCancelVisibility, Temp_byte_Variable) == 0x000000, "Member 'WBP_VoteWidget_C_UpdateCancelVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateCancelVisibility, Temp_byte_Variable_1) == 0x000001, "Member 'WBP_VoteWidget_C_UpdateCancelVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateCancelVisibility, CallFunc_IsOwner_ReturnValue) == 0x000002, "Member 'WBP_VoteWidget_C_UpdateCancelVisibility::CallFunc_IsOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateCancelVisibility, CallFunc_IsValid_ReturnValue) == 0x000003, "Member 'WBP_VoteWidget_C_UpdateCancelVisibility::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateCancelVisibility, Temp_bool_Variable) == 0x000004, "Member 'WBP_VoteWidget_C_UpdateCancelVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateCancelVisibility, K2Node_Select_Default) == 0x000005, "Member 'WBP_VoteWidget_C_UpdateCancelVisibility::K2Node_Select_Default' has a wrong offset!");

// Function WBP_VoteWidget.WBP_VoteWidget_C.UpdateInfoText
// 0x0070 (0x0070 - 0x0000)
struct WBP_VoteWidget_C_UpdateInfoText final
{
public:
	class UGymRuleReplicatedData*                 RuleData;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0020(0x0018)()
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymRuleReplicatedData*                 CallFunc_GetBasicRuleData_ReturnValue;             // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVoteState                                    CallFunc_GetVoteState_ReturnValue;                 // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0050(0x0018)()
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_VoteWidget_C_UpdateInfoText) == 0x000008, "Wrong alignment on WBP_VoteWidget_C_UpdateInfoText");
static_assert(sizeof(WBP_VoteWidget_C_UpdateInfoText) == 0x000070, "Wrong size on WBP_VoteWidget_C_UpdateInfoText");
static_assert(offsetof(WBP_VoteWidget_C_UpdateInfoText, RuleData) == 0x000000, "Member 'WBP_VoteWidget_C_UpdateInfoText::RuleData' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateInfoText, Temp_text_Variable) == 0x000008, "Member 'WBP_VoteWidget_C_UpdateInfoText::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateInfoText, Temp_text_Variable_1) == 0x000020, "Member 'WBP_VoteWidget_C_UpdateInfoText::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateInfoText, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'WBP_VoteWidget_C_UpdateInfoText::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateInfoText, CallFunc_GetBasicRuleData_ReturnValue) == 0x000040, "Member 'WBP_VoteWidget_C_UpdateInfoText::CallFunc_GetBasicRuleData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateInfoText, Temp_bool_Variable) == 0x000048, "Member 'WBP_VoteWidget_C_UpdateInfoText::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateInfoText, CallFunc_GetVoteState_ReturnValue) == 0x000049, "Member 'WBP_VoteWidget_C_UpdateInfoText::CallFunc_GetVoteState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateInfoText, K2Node_SwitchEnum_CmpSuccess) == 0x00004A, "Member 'WBP_VoteWidget_C_UpdateInfoText::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateInfoText, K2Node_Select_Default) == 0x000050, "Member 'WBP_VoteWidget_C_UpdateInfoText::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateInfoText, CallFunc_IsValid_ReturnValue_1) == 0x000068, "Member 'WBP_VoteWidget_C_UpdateInfoText::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function WBP_VoteWidget.WBP_VoteWidget_C.UpdateJoinMatchVisibility
// 0x0020 (0x0020 - 0x0000)
struct WBP_VoteWidget_C_UpdateJoinMatchVisibility final
{
public:
	class UGymRuleReplicatedData*                 RuleData;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymRuleReplicatedData*                 CallFunc_GetBasicRuleData_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVoteState                                    CallFunc_GetVoteState_ReturnValue;                 // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_VoteWidget_C_UpdateJoinMatchVisibility) == 0x000008, "Wrong alignment on WBP_VoteWidget_C_UpdateJoinMatchVisibility");
static_assert(sizeof(WBP_VoteWidget_C_UpdateJoinMatchVisibility) == 0x000020, "Wrong size on WBP_VoteWidget_C_UpdateJoinMatchVisibility");
static_assert(offsetof(WBP_VoteWidget_C_UpdateJoinMatchVisibility, RuleData) == 0x000000, "Member 'WBP_VoteWidget_C_UpdateJoinMatchVisibility::RuleData' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateJoinMatchVisibility, Temp_byte_Variable) == 0x000008, "Member 'WBP_VoteWidget_C_UpdateJoinMatchVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateJoinMatchVisibility, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'WBP_VoteWidget_C_UpdateJoinMatchVisibility::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateJoinMatchVisibility, CallFunc_GetBasicRuleData_ReturnValue) == 0x000010, "Member 'WBP_VoteWidget_C_UpdateJoinMatchVisibility::CallFunc_GetBasicRuleData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateJoinMatchVisibility, Temp_byte_Variable_1) == 0x000018, "Member 'WBP_VoteWidget_C_UpdateJoinMatchVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateJoinMatchVisibility, Temp_bool_Variable) == 0x000019, "Member 'WBP_VoteWidget_C_UpdateJoinMatchVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateJoinMatchVisibility, CallFunc_GetVoteState_ReturnValue) == 0x00001A, "Member 'WBP_VoteWidget_C_UpdateJoinMatchVisibility::CallFunc_GetVoteState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateJoinMatchVisibility, CallFunc_IsValid_ReturnValue_1) == 0x00001B, "Member 'WBP_VoteWidget_C_UpdateJoinMatchVisibility::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateJoinMatchVisibility, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00001C, "Member 'WBP_VoteWidget_C_UpdateJoinMatchVisibility::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateJoinMatchVisibility, K2Node_Select_Default) == 0x00001D, "Member 'WBP_VoteWidget_C_UpdateJoinMatchVisibility::K2Node_Select_Default' has a wrong offset!");

// Function WBP_VoteWidget.WBP_VoteWidget_C.UpdateJoinText
// 0x0050 (0x0050 - 0x0000)
struct WBP_VoteWidget_C_UpdateJoinText final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0020(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0038(0x0018)()
};
static_assert(alignof(WBP_VoteWidget_C_UpdateJoinText) == 0x000008, "Wrong alignment on WBP_VoteWidget_C_UpdateJoinText");
static_assert(sizeof(WBP_VoteWidget_C_UpdateJoinText) == 0x000050, "Wrong size on WBP_VoteWidget_C_UpdateJoinText");
static_assert(offsetof(WBP_VoteWidget_C_UpdateJoinText, Temp_bool_Variable) == 0x000000, "Member 'WBP_VoteWidget_C_UpdateJoinText::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateJoinText, Temp_text_Variable) == 0x000008, "Member 'WBP_VoteWidget_C_UpdateJoinText::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateJoinText, Temp_text_Variable_1) == 0x000020, "Member 'WBP_VoteWidget_C_UpdateJoinText::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateJoinText, K2Node_Select_Default) == 0x000038, "Member 'WBP_VoteWidget_C_UpdateJoinText::K2Node_Select_Default' has a wrong offset!");

// Function WBP_VoteWidget.WBP_VoteWidget_C.UpdatePlayerCount
// 0x0170 (0x0170 - 0x0000)
struct WBP_VoteWidget_C_UpdatePlayerCount final
{
public:
	class UGymRuleReplicatedData*                 RuleData;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymRuleReplicatedData*                 CallFunc_GetBasicRuleData_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0028(0x0050)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetMaxVotes_ReturnValue;                  // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue_1;            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCurrentVotes_ReturnValue;              // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0090(0x0050)(HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue_2;            // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVoteState                                    CallFunc_GetVoteState_ReturnValue;                 // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x00F0(0x0050)(HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0148(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0158(0x0018)()
};
static_assert(alignof(WBP_VoteWidget_C_UpdatePlayerCount) == 0x000008, "Wrong alignment on WBP_VoteWidget_C_UpdatePlayerCount");
static_assert(sizeof(WBP_VoteWidget_C_UpdatePlayerCount) == 0x000170, "Wrong size on WBP_VoteWidget_C_UpdatePlayerCount");
static_assert(offsetof(WBP_VoteWidget_C_UpdatePlayerCount, RuleData) == 0x000000, "Member 'WBP_VoteWidget_C_UpdatePlayerCount::RuleData' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdatePlayerCount, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'WBP_VoteWidget_C_UpdatePlayerCount::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdatePlayerCount, CallFunc_GetBasicRuleData_ReturnValue) == 0x000010, "Member 'WBP_VoteWidget_C_UpdatePlayerCount::CallFunc_GetBasicRuleData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdatePlayerCount, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'WBP_VoteWidget_C_UpdatePlayerCount::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdatePlayerCount, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000020, "Member 'WBP_VoteWidget_C_UpdatePlayerCount::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdatePlayerCount, K2Node_MakeStruct_FormatArgumentData) == 0x000028, "Member 'WBP_VoteWidget_C_UpdatePlayerCount::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdatePlayerCount, CallFunc_IsValid_ReturnValue_1) == 0x000078, "Member 'WBP_VoteWidget_C_UpdatePlayerCount::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdatePlayerCount, CallFunc_GetMaxVotes_ReturnValue) == 0x00007C, "Member 'WBP_VoteWidget_C_UpdatePlayerCount::CallFunc_GetMaxVotes_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdatePlayerCount, CallFunc_Conv_IntToInt64_ReturnValue_1) == 0x000080, "Member 'WBP_VoteWidget_C_UpdatePlayerCount::CallFunc_Conv_IntToInt64_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdatePlayerCount, CallFunc_GetCurrentVotes_ReturnValue) == 0x000088, "Member 'WBP_VoteWidget_C_UpdatePlayerCount::CallFunc_GetCurrentVotes_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdatePlayerCount, K2Node_MakeStruct_FormatArgumentData_1) == 0x000090, "Member 'WBP_VoteWidget_C_UpdatePlayerCount::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdatePlayerCount, CallFunc_Conv_IntToInt64_ReturnValue_2) == 0x0000E0, "Member 'WBP_VoteWidget_C_UpdatePlayerCount::CallFunc_Conv_IntToInt64_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdatePlayerCount, CallFunc_GetVoteState_ReturnValue) == 0x0000E8, "Member 'WBP_VoteWidget_C_UpdatePlayerCount::CallFunc_GetVoteState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdatePlayerCount, K2Node_MakeStruct_FormatArgumentData_2) == 0x0000F0, "Member 'WBP_VoteWidget_C_UpdatePlayerCount::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdatePlayerCount, K2Node_SwitchEnum_CmpSuccess) == 0x000140, "Member 'WBP_VoteWidget_C_UpdatePlayerCount::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdatePlayerCount, K2Node_MakeArray_Array) == 0x000148, "Member 'WBP_VoteWidget_C_UpdatePlayerCount::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdatePlayerCount, CallFunc_Format_ReturnValue) == 0x000158, "Member 'WBP_VoteWidget_C_UpdatePlayerCount::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function WBP_VoteWidget.WBP_VoteWidget_C.UpdateStartVisibility
// 0x0028 (0x0028 - 0x0000)
struct WBP_VoteWidget_C_UpdateStartVisibility final
{
public:
	class UGymRuleReplicatedData*                 RuleData;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymRuleReplicatedData*                 CallFunc_GetBasicRuleData_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOwner_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetMinVotes_ReturnValue;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCurrentVotes_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_VoteWidget_C_UpdateStartVisibility) == 0x000008, "Wrong alignment on WBP_VoteWidget_C_UpdateStartVisibility");
static_assert(sizeof(WBP_VoteWidget_C_UpdateStartVisibility) == 0x000028, "Wrong size on WBP_VoteWidget_C_UpdateStartVisibility");
static_assert(offsetof(WBP_VoteWidget_C_UpdateStartVisibility, RuleData) == 0x000000, "Member 'WBP_VoteWidget_C_UpdateStartVisibility::RuleData' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateStartVisibility, Temp_bool_Variable) == 0x000008, "Member 'WBP_VoteWidget_C_UpdateStartVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateStartVisibility, Temp_byte_Variable) == 0x000009, "Member 'WBP_VoteWidget_C_UpdateStartVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateStartVisibility, Temp_byte_Variable_1) == 0x00000A, "Member 'WBP_VoteWidget_C_UpdateStartVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateStartVisibility, CallFunc_IsValid_ReturnValue) == 0x00000B, "Member 'WBP_VoteWidget_C_UpdateStartVisibility::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateStartVisibility, CallFunc_GetBasicRuleData_ReturnValue) == 0x000010, "Member 'WBP_VoteWidget_C_UpdateStartVisibility::CallFunc_GetBasicRuleData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateStartVisibility, CallFunc_IsOwner_ReturnValue) == 0x000018, "Member 'WBP_VoteWidget_C_UpdateStartVisibility::CallFunc_IsOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateStartVisibility, CallFunc_IsValid_ReturnValue_1) == 0x000019, "Member 'WBP_VoteWidget_C_UpdateStartVisibility::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateStartVisibility, CallFunc_IsValid_ReturnValue_2) == 0x00001A, "Member 'WBP_VoteWidget_C_UpdateStartVisibility::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateStartVisibility, CallFunc_GetMinVotes_ReturnValue) == 0x00001C, "Member 'WBP_VoteWidget_C_UpdateStartVisibility::CallFunc_GetMinVotes_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateStartVisibility, CallFunc_GetCurrentVotes_ReturnValue) == 0x000020, "Member 'WBP_VoteWidget_C_UpdateStartVisibility::CallFunc_GetCurrentVotes_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateStartVisibility, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000024, "Member 'WBP_VoteWidget_C_UpdateStartVisibility::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateStartVisibility, CallFunc_BooleanAND_ReturnValue) == 0x000025, "Member 'WBP_VoteWidget_C_UpdateStartVisibility::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateStartVisibility, K2Node_Select_Default) == 0x000026, "Member 'WBP_VoteWidget_C_UpdateStartVisibility::K2Node_Select_Default' has a wrong offset!");

// Function WBP_VoteWidget.WBP_VoteWidget_C.UpdateTimerText
// 0x0260 (0x0260 - 0x0000)
struct WBP_VoteWidget_C_UpdateTimerText final
{
public:
	class UGymRuleReplicatedData*                 RuleData;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymRuleReplicatedData*                 CallFunc_GetBasicRuleData_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EVoteState                                    CallFunc_GetVoteState_ReturnValue;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetVoteStartTime_ReturnValue;             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetVoteTimer_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0028(0x0018)()
	int32                                         CallFunc_GetMinVotes_ReturnValue;                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCurrentVotes_ReturnValue;              // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetServerWorldTimeSeconds_ReturnValue;    // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0078(0x0050)(HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00D0(0x0010)(ReferenceParm)
	class FText                                   CallFunc_FormatTime_Out;                           // 0x00E0(0x0018)()
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00F8(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0110(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0160(0x0010)(ReferenceParm)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0170(0x0050)(HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x01C0(0x0018)()
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_2;                          // 0x01D8(0x0010)(ReferenceParm)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E9[0x7];                                      // 0x01E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue_2;                     // 0x01F0(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0208(0x0018)()
	EVoteState                                    Temp_byte_Variable;                                // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0228(0x0018)()
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVoteState                                    CallFunc_GetVoteState_ReturnValue_1;               // 0x0241(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0242(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_243[0x5];                                      // 0x0243(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_B_ImplicitCast;     // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_Max_ImplicitCast;                  // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast;     // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_VoteWidget_C_UpdateTimerText) == 0x000008, "Wrong alignment on WBP_VoteWidget_C_UpdateTimerText");
static_assert(sizeof(WBP_VoteWidget_C_UpdateTimerText) == 0x000260, "Wrong size on WBP_VoteWidget_C_UpdateTimerText");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, RuleData) == 0x000000, "Member 'WBP_VoteWidget_C_UpdateTimerText::RuleData' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'WBP_VoteWidget_C_UpdateTimerText::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, CallFunc_GetBasicRuleData_ReturnValue) == 0x000010, "Member 'WBP_VoteWidget_C_UpdateTimerText::CallFunc_GetBasicRuleData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, CallFunc_GetVoteState_ReturnValue) == 0x000018, "Member 'WBP_VoteWidget_C_UpdateTimerText::CallFunc_GetVoteState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, CallFunc_GetVoteStartTime_ReturnValue) == 0x00001C, "Member 'WBP_VoteWidget_C_UpdateTimerText::CallFunc_GetVoteStartTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, CallFunc_GetVoteTimer_ReturnValue) == 0x000020, "Member 'WBP_VoteWidget_C_UpdateTimerText::CallFunc_GetVoteTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, Temp_text_Variable) == 0x000028, "Member 'WBP_VoteWidget_C_UpdateTimerText::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, CallFunc_GetMinVotes_ReturnValue) == 0x000040, "Member 'WBP_VoteWidget_C_UpdateTimerText::CallFunc_GetMinVotes_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, CallFunc_GetCurrentVotes_ReturnValue) == 0x000044, "Member 'WBP_VoteWidget_C_UpdateTimerText::CallFunc_GetCurrentVotes_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, CallFunc_Subtract_IntInt_ReturnValue) == 0x000048, "Member 'WBP_VoteWidget_C_UpdateTimerText::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, CallFunc_GetServerWorldTimeSeconds_ReturnValue) == 0x000050, "Member 'WBP_VoteWidget_C_UpdateTimerText::CallFunc_GetServerWorldTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, CallFunc_Max_ReturnValue) == 0x000058, "Member 'WBP_VoteWidget_C_UpdateTimerText::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000060, "Member 'WBP_VoteWidget_C_UpdateTimerText::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000068, "Member 'WBP_VoteWidget_C_UpdateTimerText::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000070, "Member 'WBP_VoteWidget_C_UpdateTimerText::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, K2Node_MakeStruct_FormatArgumentData) == 0x000078, "Member 'WBP_VoteWidget_C_UpdateTimerText::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, CallFunc_FClamp_ReturnValue) == 0x0000C8, "Member 'WBP_VoteWidget_C_UpdateTimerText::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, K2Node_MakeArray_Array) == 0x0000D0, "Member 'WBP_VoteWidget_C_UpdateTimerText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, CallFunc_FormatTime_Out) == 0x0000E0, "Member 'WBP_VoteWidget_C_UpdateTimerText::CallFunc_FormatTime_Out' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, CallFunc_Format_ReturnValue) == 0x0000F8, "Member 'WBP_VoteWidget_C_UpdateTimerText::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, K2Node_MakeStruct_FormatArgumentData_1) == 0x000110, "Member 'WBP_VoteWidget_C_UpdateTimerText::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, K2Node_MakeArray_Array_1) == 0x000160, "Member 'WBP_VoteWidget_C_UpdateTimerText::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, K2Node_MakeStruct_FormatArgumentData_2) == 0x000170, "Member 'WBP_VoteWidget_C_UpdateTimerText::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, CallFunc_Format_ReturnValue_1) == 0x0001C0, "Member 'WBP_VoteWidget_C_UpdateTimerText::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, K2Node_MakeArray_Array_2) == 0x0001D8, "Member 'WBP_VoteWidget_C_UpdateTimerText::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0001E8, "Member 'WBP_VoteWidget_C_UpdateTimerText::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, CallFunc_Format_ReturnValue_2) == 0x0001F0, "Member 'WBP_VoteWidget_C_UpdateTimerText::CallFunc_Format_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, Temp_text_Variable_1) == 0x000208, "Member 'WBP_VoteWidget_C_UpdateTimerText::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, Temp_byte_Variable) == 0x000220, "Member 'WBP_VoteWidget_C_UpdateTimerText::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, K2Node_Select_Default) == 0x000228, "Member 'WBP_VoteWidget_C_UpdateTimerText::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, CallFunc_IsValid_ReturnValue_1) == 0x000240, "Member 'WBP_VoteWidget_C_UpdateTimerText::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, CallFunc_GetVoteState_ReturnValue_1) == 0x000241, "Member 'WBP_VoteWidget_C_UpdateTimerText::CallFunc_GetVoteState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, K2Node_SwitchEnum_CmpSuccess) == 0x000242, "Member 'WBP_VoteWidget_C_UpdateTimerText::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, CallFunc_Subtract_DoubleDouble_B_ImplicitCast) == 0x000248, "Member 'WBP_VoteWidget_C_UpdateTimerText::CallFunc_Subtract_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, CallFunc_FClamp_Max_ImplicitCast) == 0x000250, "Member 'WBP_VoteWidget_C_UpdateTimerText::CallFunc_FClamp_Max_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateTimerText, CallFunc_Subtract_DoubleDouble_A_ImplicitCast) == 0x000258, "Member 'WBP_VoteWidget_C_UpdateTimerText::CallFunc_Subtract_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function WBP_VoteWidget.WBP_VoteWidget_C.UpdateVisibility
// 0x0001 (0x0001 - 0x0000)
struct WBP_VoteWidget_C_UpdateVisibility final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_VoteWidget_C_UpdateVisibility) == 0x000001, "Wrong alignment on WBP_VoteWidget_C_UpdateVisibility");
static_assert(sizeof(WBP_VoteWidget_C_UpdateVisibility) == 0x000001, "Wrong size on WBP_VoteWidget_C_UpdateVisibility");
static_assert(offsetof(WBP_VoteWidget_C_UpdateVisibility, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member 'WBP_VoteWidget_C_UpdateVisibility::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function WBP_VoteWidget.WBP_VoteWidget_C.UpdateVoteButtonVisibility
// 0x0020 (0x0020 - 0x0000)
struct WBP_VoteWidget_C_UpdateVoteButtonVisibility final
{
public:
	class UGymRuleReplicatedData*                 RuleData;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymRuleReplicatedData*                 CallFunc_GetBasicRuleData_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVoteState                                    CallFunc_GetVoteState_ReturnValue;                 // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_VoteWidget_C_UpdateVoteButtonVisibility) == 0x000008, "Wrong alignment on WBP_VoteWidget_C_UpdateVoteButtonVisibility");
static_assert(sizeof(WBP_VoteWidget_C_UpdateVoteButtonVisibility) == 0x000020, "Wrong size on WBP_VoteWidget_C_UpdateVoteButtonVisibility");
static_assert(offsetof(WBP_VoteWidget_C_UpdateVoteButtonVisibility, RuleData) == 0x000000, "Member 'WBP_VoteWidget_C_UpdateVoteButtonVisibility::RuleData' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateVoteButtonVisibility, Temp_bool_Variable) == 0x000008, "Member 'WBP_VoteWidget_C_UpdateVoteButtonVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateVoteButtonVisibility, Temp_byte_Variable) == 0x000009, "Member 'WBP_VoteWidget_C_UpdateVoteButtonVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateVoteButtonVisibility, Temp_byte_Variable_1) == 0x00000A, "Member 'WBP_VoteWidget_C_UpdateVoteButtonVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateVoteButtonVisibility, CallFunc_IsValid_ReturnValue) == 0x00000B, "Member 'WBP_VoteWidget_C_UpdateVoteButtonVisibility::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateVoteButtonVisibility, CallFunc_GetBasicRuleData_ReturnValue) == 0x000010, "Member 'WBP_VoteWidget_C_UpdateVoteButtonVisibility::CallFunc_GetBasicRuleData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateVoteButtonVisibility, CallFunc_IsValid_ReturnValue_1) == 0x000018, "Member 'WBP_VoteWidget_C_UpdateVoteButtonVisibility::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateVoteButtonVisibility, CallFunc_GetVoteState_ReturnValue) == 0x000019, "Member 'WBP_VoteWidget_C_UpdateVoteButtonVisibility::CallFunc_GetVoteState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateVoteButtonVisibility, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00001A, "Member 'WBP_VoteWidget_C_UpdateVoteButtonVisibility::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_VoteWidget_C_UpdateVoteButtonVisibility, K2Node_Select_Default) == 0x00001B, "Member 'WBP_VoteWidget_C_UpdateVoteButtonVisibility::K2Node_Select_Default' has a wrong offset!");

}

