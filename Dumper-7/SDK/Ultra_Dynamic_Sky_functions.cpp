#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Ultra_Dynamic_Sky

#include "Basic.hpp"

#include "Ultra_Dynamic_Sky_classes.hpp"
#include "Ultra_Dynamic_Sky_parameters.hpp"


namespace SDK
{

// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.2D Clouds Base Texture
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        Tex                                                    (Parm, OutParm, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::TwoD_Clouds_Base_Texture(TSoftObjectPtr<class UTexture2D>* Tex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "2D Clouds Base Texture");

	Params::Ultra_Dynamic_Sky_C_TwoD_Clouds_Base_Texture Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Tex != nullptr)
		*Tex = Parms.Tex;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.2D Clouds Shading Offset Vector
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FLinearColor                     LinearColor                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::TwoD_Clouds_Shading_Offset_Vector(struct FLinearColor* LinearColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "2D Clouds Shading Offset Vector");

	Params::Ultra_Dynamic_Sky_C_TwoD_Clouds_Shading_Offset_Vector Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LinearColor != nullptr)
		*LinearColor = std::move(Parms.LinearColor);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Absent Directional Lights Brightness
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Absent_Directional_Lights_Brightness()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Absent Directional Lights Brightness");

	Params::Ultra_Dynamic_Sky_C_Absent_Directional_Lights_Brightness Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Add Object to Async Loading Queue
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>           Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    High_Priority                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Add_Object_to_Async_Loading_Queue(TSoftObjectPtr<class UObject> Object, bool High_Priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Add Object to Async Loading Queue");

	Params::Ultra_Dynamic_Sky_C_Add_Object_to_Async_Loading_Queue Parms{};

	Parms.Object = Object;
	Parms.High_Priority = High_Priority;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Adjust Base Sun Light Intensity
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Sun_Vector                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Intensity                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Multiplier                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Adjust_Base_Sun_Light_Intensity(const struct FVector& Sun_Vector, double* Intensity, double* Multiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Adjust Base Sun Light Intensity");

	Params::Ultra_Dynamic_Sky_C_Adjust_Base_Sun_Light_Intensity Parms{};

	Parms.Sun_Vector = std::move(Sun_Vector);

	UObject::ProcessEvent(Func, &Parms);

	if (Intensity != nullptr)
		*Intensity = Parms.Intensity;

	if (Multiplier != nullptr)
		*Multiplier = Parms.Multiplier;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.All Volumetric Cloud MIDs
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class UMaterialInstanceDynamic*> MIDs                                                   (Parm, OutParm)

void AUltra_Dynamic_Sky_C::All_Volumetric_Cloud_MIDs(TArray<class UMaterialInstanceDynamic*>* MIDs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "All Volumetric Cloud MIDs");

	Params::Ultra_Dynamic_Sky_C_All_Volumetric_Cloud_MIDs Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MIDs != nullptr)
		*MIDs = std::move(Parms.MIDs);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Applied Cloud Speed
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Applied_Cloud_Speed(double* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Applied Cloud Speed");

	Params::Ultra_Dynamic_Sky_C_Applied_Cloud_Speed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = Parms.Out;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Apply Console Variable with Check
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Cvar                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// double                                  Setting                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Apply_Console_Variable_with_Check(const class FString& Cvar, double Setting, int32 Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Apply Console Variable with Check");

	Params::Ultra_Dynamic_Sky_C_Apply_Console_Variable_with_Check Parms{};

	Parms.Cvar = std::move(Cvar);
	Parms.Setting = Setting;
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Apply Light Shaft Settings
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UDirectionalLightComponent*       Light                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Max_Brightness                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Bloom_Threshold                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Bloom_Scale                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Forward_Vector                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Apply_Light_Shaft_Settings(class UDirectionalLightComponent* Light, const struct FVector2D& Max_Brightness, const struct FVector2D& Bloom_Threshold, const struct FVector2D& Bloom_Scale, const struct FVector& Forward_Vector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Apply Light Shaft Settings");

	Params::Ultra_Dynamic_Sky_C_Apply_Light_Shaft_Settings Parms{};

	Parms.Light = Light;
	Parms.Max_Brightness = std::move(Max_Brightness);
	Parms.Bloom_Threshold = std::move(Bloom_Threshold);
	Parms.Bloom_Scale = std::move(Bloom_Scale);
	Parms.Forward_Vector = std::move(Forward_Vector);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Apply Location Preset
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUDS_CityPresets                        Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Apply_Location_Preset(EUDS_CityPresets Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Apply Location Preset");

	Params::Ultra_Dynamic_Sky_C_Apply_Location_Preset Parms{};

	Parms.Location = Location;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Apply Saved UDS and UDW State
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FUDS_and_UDW_State               State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Apply_Saved_UDS_and_UDW_State(const struct FUDS_and_UDW_State& State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Apply Saved UDS and UDW State");

	Params::Ultra_Dynamic_Sky_C_Apply_Saved_UDS_and_UDW_State Parms{};

	Parms.State = std::move(State);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Apply Volumetric Mode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUDS_VolRT_Mode                         Mode                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Apply_Volumetric_Mode(EUDS_VolRT_Mode Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Apply Volumetric Mode");

	Params::Ultra_Dynamic_Sky_C_Apply_Volumetric_Mode Parms{};

	Parms.Mode = Mode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Approximate Real Sun Moon and Stars
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Month_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Day_0                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Year_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Time_of_Day_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Time_Zone_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Only_Calculate_Sun                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Sun_Vector                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Moon_Vector                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Real_Phase                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Phase_Alignment                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Celestial_Orbit                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Celestial_Yaw                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Approximate_Real_Sun_Moon_and_Stars(int32 Month_0, int32 Day_0, int32 Year_0, double Time_of_Day_0, double Time_Zone_0, bool Only_Calculate_Sun, struct FVector* Sun_Vector, struct FVector* Moon_Vector, double* Real_Phase, struct FVector* Phase_Alignment, double* Celestial_Orbit, struct FLinearColor* Celestial_Yaw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Approximate Real Sun Moon and Stars");

	Params::Ultra_Dynamic_Sky_C_Approximate_Real_Sun_Moon_and_Stars Parms{};

	Parms.Month_0 = Month_0;
	Parms.Day_0 = Day_0;
	Parms.Year_0 = Year_0;
	Parms.Time_of_Day_0 = Time_of_Day_0;
	Parms.Time_Zone_0 = Time_Zone_0;
	Parms.Only_Calculate_Sun = Only_Calculate_Sun;

	UObject::ProcessEvent(Func, &Parms);

	if (Sun_Vector != nullptr)
		*Sun_Vector = std::move(Parms.Sun_Vector);

	if (Moon_Vector != nullptr)
		*Moon_Vector = std::move(Parms.Moon_Vector);

	if (Real_Phase != nullptr)
		*Real_Phase = Parms.Real_Phase;

	if (Phase_Alignment != nullptr)
		*Phase_Alignment = std::move(Parms.Phase_Alignment);

	if (Celestial_Orbit != nullptr)
		*Celestial_Orbit = Parms.Celestial_Orbit;

	if (Celestial_Yaw != nullptr)
		*Celestial_Yaw = std::move(Parms.Celestial_Yaw);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Cache Color
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUDS_CachedProperties                   Property                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Set_Value                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Change_Tolerance                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Cache_Color(EUDS_CachedProperties Property, const struct FLinearColor& Set_Value, double Change_Tolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Cache Color");

	Params::Ultra_Dynamic_Sky_C_Cache_Color Parms{};

	Parms.Property = Property;
	Parms.Set_Value = std::move(Set_Value);
	Parms.Change_Tolerance = Change_Tolerance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Cache Float
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUDS_CachedProperties                   Property                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Set_Value                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Change_Tolerance                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Cache_Float(EUDS_CachedProperties Property, double Set_Value, double Change_Tolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Cache Float");

	Params::Ultra_Dynamic_Sky_C_Cache_Float Parms{};

	Parms.Property = Property;
	Parms.Set_Value = Set_Value;
	Parms.Change_Tolerance = Change_Tolerance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Cache Properties
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Cache_Group                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Cache_Properties(int32 Cache_Group)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Cache Properties");

	Params::Ultra_Dynamic_Sky_C_Cache_Properties Parms{};

	Parms.Cache_Group = Cache_Group;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Cache Sun and Moon Orientation
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Cache_Sun_and_Moon_Orientation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Cache Sun and Moon Orientation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Cache Timer And Update Speed
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Hard_Cache_Reset                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Cache_Timer_And_Update_Speed(bool* Hard_Cache_Reset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Cache Timer And Update Speed");

	Params::Ultra_Dynamic_Sky_C_Cache_Timer_And_Update_Speed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Hard_Cache_Reset != nullptr)
		*Hard_Cache_Reset = Parms.Hard_Cache_Reset;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Cache Vector
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUDS_CachedProperties                   Property                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Set_Value                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Change_Tolerance                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Cache_Vector(EUDS_CachedProperties Property, const struct FVector& Set_Value, double Change_Tolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Cache Vector");

	Params::Ultra_Dynamic_Sky_C_Cache_Vector Parms{};

	Parms.Property = Property;
	Parms.Set_Value = std::move(Set_Value);
	Parms.Change_Tolerance = Change_Tolerance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Caching Properties__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Caching_Properties__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Caching Properties__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Cancel Shadows Value
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Light_Vector                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Cancel_Shadows_Value(const struct FVector& Light_Vector, double* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Cancel Shadows Value");

	Params::Ultra_Dynamic_Sky_C_Cancel_Shadows_Value Parms{};

	Parms.Light_Vector = std::move(Light_Vector);

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = Parms.Out;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Change Sky Mode at Runtime
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUDS_SkyMode                            New_Sky_Mode                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Change_Sky_Mode_at_Runtime(EUDS_SkyMode New_Sky_Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Change Sky Mode at Runtime");

	Params::Ultra_Dynamic_Sky_C_Change_Sky_Mode_at_Runtime Parms{};

	Parms.New_Sky_Mode = New_Sky_Mode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Check for Cloud Coverage Target Recenter
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Check_for_Cloud_Coverage_Target_Recenter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Check for Cloud Coverage Target Recenter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Check for Daylight Savings Time
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Check_for_Daylight_Savings_Time()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Check for Daylight Savings Time");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Check for Time Event Dispatchers
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Check_for_Time_Event_Dispatchers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Check for Time Event Dispatchers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Check if Point is Exposed to Sun or Moon Light
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Distance_to_Trace                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>                   Actors_to_Ignore_in_Trace                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Exposed_to_Sun                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Exposed_to_Moon                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Exposed_to_Either                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Light_Intensity__Lux_                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Check_if_Point_is_Exposed_to_Sun_or_Moon_Light(const struct FVector& Location, double Distance_to_Trace, TArray<class AActor*>& Actors_to_Ignore_in_Trace, bool* Exposed_to_Sun, bool* Exposed_to_Moon, bool* Exposed_to_Either, double* Light_Intensity__Lux_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Check if Point is Exposed to Sun or Moon Light");

	Params::Ultra_Dynamic_Sky_C_Check_if_Point_is_Exposed_to_Sun_or_Moon_Light Parms{};

	Parms.Location = std::move(Location);
	Parms.Distance_to_Trace = Distance_to_Trace;
	Parms.Actors_to_Ignore_in_Trace = std::move(Actors_to_Ignore_in_Trace);

	UObject::ProcessEvent(Func, &Parms);

	Actors_to_Ignore_in_Trace = std::move(Parms.Actors_to_Ignore_in_Trace);

	if (Exposed_to_Sun != nullptr)
		*Exposed_to_Sun = Parms.Exposed_to_Sun;

	if (Exposed_to_Moon != nullptr)
		*Exposed_to_Moon = Parms.Exposed_to_Moon;

	if (Exposed_to_Either != nullptr)
		*Exposed_to_Either = Parms.Exposed_to_Either;

	if (Light_Intensity__Lux_ != nullptr)
		*Light_Intensity__Lux_ = Parms.Light_Intensity__Lux_;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Check If Year is Leap Year
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Year_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Leap_Year                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Check_If_Year_is_Leap_Year(int32 Year_0, bool* Leap_Year)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Check If Year is Leap Year");

	Params::Ultra_Dynamic_Sky_C_Check_If_Year_is_Leap_Year Parms{};

	Parms.Year_0 = Year_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Leap_Year != nullptr)
		*Leap_Year = Parms.Leap_Year;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Check To Use Existing MIDs
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Check_To_Use_Existing_MIDs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Check To Use Existing MIDs");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Cloud Coverage Local
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Cloud_Coverage_Local(double* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Cloud Coverage Local");

	Params::Ultra_Dynamic_Sky_C_Cloud_Coverage_Local Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = Parms.Out;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Cloud Coverage Target Mapping
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Mapping                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Cloud_Coverage_Target_Mapping(struct FVector* Mapping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Cloud Coverage Target Mapping");

	Params::Ultra_Dynamic_Sky_C_Cloud_Coverage_Target_Mapping Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Mapping != nullptr)
		*Mapping = std::move(Parms.Mapping);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Cloud Darkening
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Cloud_Darkening()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Cloud Darkening");

	Params::Ultra_Dynamic_Sky_C_Cloud_Darkening Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Cloud Layer Top and Bottom World Height
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Bottom_World_Height                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Top_World_Height                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Cloud_Layer_Top_and_Bottom_World_Height(double* Bottom_World_Height, double* Top_World_Height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Cloud Layer Top and Bottom World Height");

	Params::Ultra_Dynamic_Sky_C_Cloud_Layer_Top_and_Bottom_World_Height Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Bottom_World_Height != nullptr)
		*Bottom_World_Height = Parms.Bottom_World_Height;

	if (Top_World_Height != nullptr)
		*Top_World_Height = Parms.Top_World_Height;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Cloud Shadows Cloud Density
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Cloud_Shadows_Cloud_Density()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Cloud Shadows Cloud Density");

	Params::Ultra_Dynamic_Sky_C_Cloud_Shadows_Cloud_Density Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Cloud Shadows Light Vector And Cancel Value
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Vector                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Cancel_Value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Cloud_Shadows_Light_Vector_And_Cancel_Value(struct FLinearColor* Vector, double* Cancel_Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Cloud Shadows Light Vector And Cancel Value");

	Params::Ultra_Dynamic_Sky_C_Cloud_Shadows_Light_Vector_And_Cancel_Value Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Vector != nullptr)
		*Vector = std::move(Parms.Vector);

	if (Cancel_Value != nullptr)
		*Cancel_Value = Parms.Cancel_Value;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Cloud Shadows Parent Material
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TSoftObjectPtr<class UMaterialInterface>Mat                                                    (Parm, OutParm, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Cloud_Shadows_Parent_Material(TSoftObjectPtr<class UMaterialInterface>* Mat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Cloud Shadows Parent Material");

	Params::Ultra_Dynamic_Sky_C_Cloud_Shadows_Parent_Material Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Mat != nullptr)
		*Mat = Parms.Mat;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Cloud Texture Pan Scale
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Scale                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Cloud_Texture_Pan_Scale(double* Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Cloud Texture Pan Scale");

	Params::Ultra_Dynamic_Sky_C_Cloud_Texture_Pan_Scale Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Scale != nullptr)
		*Scale = Parms.Scale;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Cloud Texture Velocity
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector AUltra_Dynamic_Sky_C::Cloud_Texture_Velocity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Cloud Texture Velocity");

	Params::Ultra_Dynamic_Sky_C_Cloud_Texture_Velocity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Cloud Wisp Gradient Vector
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FLinearColor                     Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Cloud_Wisp_Gradient_Vector(struct FLinearColor* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Cloud Wisp Gradient Vector");

	Params::Ultra_Dynamic_Sky_C_Cloud_Wisp_Gradient_Vector Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = std::move(Parms.Out);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Clouds Changing
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AUltra_Dynamic_Sky_C::Clouds_Changing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Clouds Changing");

	Params::Ultra_Dynamic_Sky_C_Clouds_Changing Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Clouds Time of Day Factor
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Clouds_Time_of_Day_Factor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Clouds Time of Day Factor");

	Params::Ultra_Dynamic_Sky_C_Clouds_Time_of_Day_Factor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Combined Night Brightness
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Combined_Night_Brightness(double* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Combined Night Brightness");

	Params::Ultra_Dynamic_Sky_C_Combined_Night_Brightness Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = Parms.Out;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Configure Directional Light with Feature Toggle
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUDS_FeatureToggle                      Toggle                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDirectionalLightComponent*       Selected_Component_Variable                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// class UDirectionalLightComponent*       Built_in_Light_Component                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class ADirectionalLight*                Custom_Light_Actor                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Atmospheric_Index                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EComponentMobility                      Mobility                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Light_Visibility                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Configure_Directional_Light_with_Feature_Toggle(EUDS_FeatureToggle Toggle, class UDirectionalLightComponent*& Selected_Component_Variable, class UDirectionalLightComponent* Built_in_Light_Component, class ADirectionalLight* Custom_Light_Actor, int32 Atmospheric_Index, EComponentMobility Mobility, bool Light_Visibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Configure Directional Light with Feature Toggle");

	Params::Ultra_Dynamic_Sky_C_Configure_Directional_Light_with_Feature_Toggle Parms{};

	Parms.Toggle = Toggle;
	Parms.Selected_Component_Variable = Selected_Component_Variable;
	Parms.Built_in_Light_Component = Built_in_Light_Component;
	Parms.Custom_Light_Actor = Custom_Light_Actor;
	Parms.Atmospheric_Index = Atmospheric_Index;
	Parms.Mobility = Mobility;
	Parms.Light_Visibility = Light_Visibility;

	UObject::ProcessEvent(Func, &Parms);

	Selected_Component_Variable = Parms.Selected_Component_Variable;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Configure Height Fog with Feature Toggle
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Configure_Height_Fog_with_Feature_Toggle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Configure Height Fog with Feature Toggle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Configure Sky Light with Feature Toggle
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Configure_Sky_Light_with_Feature_Toggle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Configure Sky Light with Feature Toggle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Construct Space Layer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Construct_Space_Layer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Construct Space Layer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Construction Script Function
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Run_By_Counterpart                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Move_Static_Lights                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Construction_Script_Function(bool Run_By_Counterpart, bool Move_Static_Lights)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Construction Script Function");

	Params::Ultra_Dynamic_Sky_C_Construction_Script_Function Parms{};

	Parms.Run_By_Counterpart = Run_By_Counterpart;
	Parms.Move_Static_Lights = Move_Static_Lights;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Control UDW Weather State
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Control_UDW_Weather_State()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Control UDW Weather State");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Convert Time of Day to Time Code
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTimecode                        Timecode                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Convert_Time_of_Day_to_Time_Code(double Time, struct FTimecode* Timecode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Convert Time of Day to Time Code");

	Params::Ultra_Dynamic_Sky_C_Convert_Time_of_Day_to_Time_Code Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);

	if (Timecode != nullptr)
		*Timecode = std::move(Parms.Timecode);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Copy Replicated Time Variables to Local
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Copy_Replicated_Time_Variables_to_Local()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Copy Replicated Time Variables to Local");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Create Post Process Components
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Create_Post_Process_Components()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Create Post Process Components");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Create UDS And UDW State For Saving
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FUDS_and_UDW_State               Packaged_State                                         (Parm, OutParm, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Create_UDS_And_UDW_State_For_Saving(struct FUDS_and_UDW_State* Packaged_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Create UDS And UDW State For Saving");

	Params::Ultra_Dynamic_Sky_C_Create_UDS_And_UDW_State_For_Saving Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Packaged_State != nullptr)
		*Packaged_State = std::move(Parms.Packaged_State);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current 2D Cloud Tint
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FLinearColor AUltra_Dynamic_Sky_C::Current_2D_Cloud_Tint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current 2D Cloud Tint");

	Params::Ultra_Dynamic_Sky_C_Current_2D_Cloud_Tint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Aurora Intensity
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Current_Aurora_Intensity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Aurora Intensity");

	Params::Ultra_Dynamic_Sky_C_Current_Aurora_Intensity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Base Clouds Scale
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Current_Base_Clouds_Scale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Base Clouds Scale");

	Params::Ultra_Dynamic_Sky_C_Current_Base_Clouds_Scale Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Cloud Wisps Color
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FLinearColor                     Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Current_Cloud_Wisps_Color(struct FLinearColor* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Cloud Wisps Color");

	Params::Ultra_Dynamic_Sky_C_Current_Cloud_Wisps_Color Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = std::move(Parms.Out);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Directional Inscattering Exponent
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Current_Directional_Inscattering_Exponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Directional Inscattering Exponent");

	Params::Ultra_Dynamic_Sky_C_Current_Directional_Inscattering_Exponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Exposure Bias
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Bias                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Current_Exposure_Bias(double* Bias)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Exposure Bias");

	Params::Ultra_Dynamic_Sky_C_Current_Exposure_Bias Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Bias != nullptr)
		*Bias = Parms.Bias;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Fog Density
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Current_Fog_Density()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Fog Density");

	Params::Ultra_Dynamic_Sky_C_Current_Fog_Density Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Fog Directional Inscattering Color
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FLinearColor                     Directional_Inscattering_Color                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Current_Fog_Directional_Inscattering_Color(struct FLinearColor* Directional_Inscattering_Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Fog Directional Inscattering Color");

	Params::Ultra_Dynamic_Sky_C_Current_Fog_Directional_Inscattering_Color Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Directional_Inscattering_Color != nullptr)
		*Directional_Inscattering_Color = std::move(Parms.Directional_Inscattering_Color);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Fog Inscattering Color
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FLinearColor                     Inscattering_Color                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Current_Fog_Inscattering_Color(struct FLinearColor* Inscattering_Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Fog Inscattering Color");

	Params::Ultra_Dynamic_Sky_C_Current_Fog_Inscattering_Color Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Inscattering_Color != nullptr)
		*Inscattering_Color = std::move(Parms.Inscattering_Color);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Lerp to Simplified Clouds
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Alpha                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Current_Lerp_to_Simplified_Clouds(double* Alpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Lerp to Simplified Clouds");

	Params::Ultra_Dynamic_Sky_C_Current_Lerp_to_Simplified_Clouds Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Alpha != nullptr)
		*Alpha = Parms.Alpha;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Light Pollution
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FLinearColor AUltra_Dynamic_Sky_C::Current_Light_Pollution()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Light Pollution");

	Params::Ultra_Dynamic_Sky_C_Current_Light_Pollution Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Lit Intensity
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Current_Lit_Intensity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Lit Intensity");

	Params::Ultra_Dynamic_Sky_C_Current_Lit_Intensity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Max Trace Distance
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Current_Max_Trace_Distance(double* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Max Trace Distance");

	Params::Ultra_Dynamic_Sky_C_Current_Max_Trace_Distance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = Parms.Out;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Mie Anisotropy
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Current_Mie_Anisotropy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Mie Anisotropy");

	Params::Ultra_Dynamic_Sky_C_Current_Mie_Anisotropy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Mie Scattering Scale
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Current_Mie_Scattering_Scale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Mie Scattering Scale");

	Params::Ultra_Dynamic_Sky_C_Current_Mie_Scattering_Scale Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Month Lengths
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Year_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           Lengths                                                (Parm, OutParm)

void AUltra_Dynamic_Sky_C::Current_Month_Lengths(int32 Year_0, TArray<int32>* Lengths)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Month Lengths");

	Params::Ultra_Dynamic_Sky_C_Current_Month_Lengths Parms{};

	Parms.Year_0 = Year_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Lengths != nullptr)
		*Lengths = std::move(Parms.Lengths);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Moon Light Color
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FLinearColor                     Color                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Current_Moon_Light_Color(struct FLinearColor* Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Moon Light Color");

	Params::Ultra_Dynamic_Sky_C_Current_Moon_Light_Color Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Color != nullptr)
		*Color = std::move(Parms.Color);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Moon Light Material Color
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FLinearColor AUltra_Dynamic_Sky_C::Current_Moon_Light_Material_Color()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Moon Light Material Color");

	Params::Ultra_Dynamic_Sky_C_Current_Moon_Light_Material_Color Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Moon Lit Percent
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Current_Moon_Lit_Percent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Moon Lit Percent");

	Params::Ultra_Dynamic_Sky_C_Current_Moon_Lit_Percent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Moon Material Intensity
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Current_Moon_Material_Intensity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Moon Material Intensity");

	Params::Ultra_Dynamic_Sky_C_Current_Moon_Material_Intensity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Moon Phase Angle
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FLinearColor AUltra_Dynamic_Sky_C::Current_Moon_Phase_Angle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Moon Phase Angle");

	Params::Ultra_Dynamic_Sky_C_Current_Moon_Phase_Angle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Moon Scale and Cutout Value
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Scale                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Cutout                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Current_Moon_Scale_and_Cutout_Value(double* Scale, double* Cutout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Moon Scale and Cutout Value");

	Params::Ultra_Dynamic_Sky_C_Current_Moon_Scale_and_Cutout_Value Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Scale != nullptr)
		*Scale = Parms.Scale;

	if (Cutout != nullptr)
		*Cutout = Parms.Cutout;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Moon Source Angle
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Current_Moon_Source_Angle(double* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Moon Source Angle");

	Params::Ultra_Dynamic_Sky_C_Current_Moon_Source_Angle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = Parms.Out;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Moons Cloud Mask
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Current_Moons_Cloud_Mask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Moons Cloud Mask");

	Params::Ultra_Dynamic_Sky_C_Current_Moons_Cloud_Mask Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Night Sky Glow
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FLinearColor AUltra_Dynamic_Sky_C::Current_Night_Sky_Glow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Night Sky Glow");

	Params::Ultra_Dynamic_Sky_C_Current_Night_Sky_Glow Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Overall Intensity
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Current_Overall_Intensity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Overall Intensity");

	Params::Ultra_Dynamic_Sky_C_Current_Overall_Intensity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Overcast Swirl
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Current_Overcast_Swirl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Overcast Swirl");

	Params::Ultra_Dynamic_Sky_C_Current_Overcast_Swirl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Rayleigh Scattering Color
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FLinearColor AUltra_Dynamic_Sky_C::Current_Rayleigh_Scattering_Color()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Rayleigh Scattering Color");

	Params::Ultra_Dynamic_Sky_C_Current_Rayleigh_Scattering_Color Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Saturation
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Current_Saturation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Saturation");

	Params::Ultra_Dynamic_Sky_C_Current_Saturation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Sky Ambient Color
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FLinearColor                     Sky_Ambient_Color                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Current_Sky_Ambient_Color(struct FLinearColor* Sky_Ambient_Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Sky Ambient Color");

	Params::Ultra_Dynamic_Sky_C_Current_Sky_Ambient_Color Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Sky_Ambient_Color != nullptr)
		*Sky_Ambient_Color = std::move(Parms.Sky_Ambient_Color);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Sky Atmosphere Absorption Color
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FLinearColor                     Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Current_Sky_Atmosphere_Absorption_Color(struct FLinearColor* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Sky Atmosphere Absorption Color");

	Params::Ultra_Dynamic_Sky_C_Current_Sky_Atmosphere_Absorption_Color Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = std::move(Parms.Out);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Sky Atmosphere Luminance
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FLinearColor AUltra_Dynamic_Sky_C::Current_Sky_Atmosphere_Luminance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Sky Atmosphere Luminance");

	Params::Ultra_Dynamic_Sky_C_Current_Sky_Atmosphere_Luminance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Sky Light Lower Hemisphere Color
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FLinearColor AUltra_Dynamic_Sky_C::Current_Sky_Light_Lower_Hemisphere_Color()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Sky Light Lower Hemisphere Color");

	Params::Ultra_Dynamic_Sky_C_Current_Sky_Light_Lower_Hemisphere_Color Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Solar Eclipse Values
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FLinearColor                     Tint_Color                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Eclipse_Percent                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Current_Solar_Eclipse_Values(struct FLinearColor* Tint_Color, double* Eclipse_Percent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Solar Eclipse Values");

	Params::Ultra_Dynamic_Sky_C_Current_Solar_Eclipse_Values Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Tint_Color != nullptr)
		*Tint_Color = std::move(Parms.Tint_Color);

	if (Eclipse_Percent != nullptr)
		*Eclipse_Percent = Parms.Eclipse_Percent;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Space Layer Brightness
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Current_Space_Layer_Brightness()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Space Layer Brightness");

	Params::Ultra_Dynamic_Sky_C_Current_Space_Layer_Brightness Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Stars Color
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FLinearColor AUltra_Dynamic_Sky_C::Current_Stars_Color()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Stars Color");

	Params::Ultra_Dynamic_Sky_C_Current_Stars_Color Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Sun Disk Color
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FLinearColor AUltra_Dynamic_Sky_C::Current_Sun_Disk_Color()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Sun Disk Color");

	Params::Ultra_Dynamic_Sky_C_Current_Sun_Disk_Color Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Sun Disk Intensity
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Current_Sun_Disk_Intensity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Sun Disk Intensity");

	Params::Ultra_Dynamic_Sky_C_Current_Sun_Disk_Intensity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Sun Light Color
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FLinearColor AUltra_Dynamic_Sky_C::Current_Sun_Light_Color()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Sun Light Color");

	Params::Ultra_Dynamic_Sky_C_Current_Sun_Light_Color Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Sun Light Intensity
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Current_Sun_Light_Intensity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Sun Light Intensity");

	Params::Ultra_Dynamic_Sky_C_Current_Sun_Light_Intensity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Sun Radius
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Current_Sun_Radius()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Sun Radius");

	Params::Ultra_Dynamic_Sky_C_Current_Sun_Radius Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Sun Source Angle
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Current_Sun_Source_Angle(double* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Sun Source Angle");

	Params::Ultra_Dynamic_Sky_C_Current_Sun_Source_Angle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = Parms.Out;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Sunrise Event Time
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Current_Sunrise_Event_Time()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Sunrise Event Time");

	Params::Ultra_Dynamic_Sky_C_Current_Sunrise_Event_Time Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Sunset Event Time
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Current_Sunset_Event_Time()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Sunset Event Time");

	Params::Ultra_Dynamic_Sky_C_Current_Sunset_Event_Time Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current View Sample Scale
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Current_View_Sample_Scale(double* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current View Sample Scale");

	Params::Ultra_Dynamic_Sky_C_Current_View_Sample_Scale Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = Parms.Out;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Volumetric Cloud Albedo
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FLinearColor AUltra_Dynamic_Sky_C::Current_Volumetric_Cloud_Albedo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Volumetric Cloud Albedo");

	Params::Ultra_Dynamic_Sky_C_Current_Volumetric_Cloud_Albedo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Volumetric Cloud Inner Emit Limit
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Current_Volumetric_Cloud_Inner_Emit_Limit(double* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Volumetric Cloud Inner Emit Limit");

	Params::Ultra_Dynamic_Sky_C_Current_Volumetric_Cloud_Inner_Emit_Limit Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = Parms.Out;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Volumetric Cloud Macro Variation
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Current_Volumetric_Cloud_Macro_Variation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Volumetric Cloud Macro Variation");

	Params::Ultra_Dynamic_Sky_C_Current_Volumetric_Cloud_Macro_Variation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Volumetric Cloud Multiscattering Intensity
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Current_Volumetric_Cloud_Multiscattering_Intensity(double* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Volumetric Cloud Multiscattering Intensity");

	Params::Ultra_Dynamic_Sky_C_Current_Volumetric_Cloud_Multiscattering_Intensity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = Parms.Out;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Volumetric Cloud Multiscattering Occlusion
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Occlusion                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Current_Volumetric_Cloud_Multiscattering_Occlusion(double* Occlusion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Volumetric Cloud Multiscattering Occlusion");

	Params::Ultra_Dynamic_Sky_C_Current_Volumetric_Cloud_Multiscattering_Occlusion Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Occlusion != nullptr)
		*Occlusion = Parms.Occlusion;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Volumetric Cloud Shadow Tracing Distance
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Current_Volumetric_Cloud_Shadow_Tracing_Distance(double* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Volumetric Cloud Shadow Tracing Distance");

	Params::Ultra_Dynamic_Sky_C_Current_Volumetric_Cloud_Shadow_Tracing_Distance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = Parms.Out;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Volumetric Cloud Sky Atmo Contribution
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Current_Volumetric_Cloud_Sky_Atmo_Contribution()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Volumetric Cloud Sky Atmo Contribution");

	Params::Ultra_Dynamic_Sky_C_Current_Volumetric_Cloud_Sky_Atmo_Contribution Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Volumetric Clouds Density
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Layer1                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Layer2                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Current_Volumetric_Clouds_Density(double* Layer1, double* Layer2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Volumetric Clouds Density");

	Params::Ultra_Dynamic_Sky_C_Current_Volumetric_Clouds_Density Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Layer1 != nullptr)
		*Layer1 = Parms.Layer1;

	if (Layer2 != nullptr)
		*Layer2 = Parms.Layer2;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Current Wisps Opacity
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Current_Wisps_Opacity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Current Wisps Opacity");

	Params::Ultra_Dynamic_Sky_C_Current_Wisps_Opacity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Date and Time to Year Progress
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Month_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Day_0                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Days_from_Start_of_Year                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Date_and_Time_to_Year_Progress(int32 Month_0, int32 Day_0, double Time, double* Days_from_Start_of_Year)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Date and Time to Year Progress");

	Params::Ultra_Dynamic_Sky_C_Date_and_Time_to_Year_Progress Parms{};

	Parms.Month_0 = Month_0;
	Parms.Day_0 = Day_0;
	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);

	if (Days_from_Start_of_Year != nullptr)
		*Days_from_Start_of_Year = Parms.Days_from_Start_of_Year;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Day Count at the Start of a Month
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Year_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Month_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Count                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Day_Count_at_the_Start_of_a_Month(int32 Year_0, int32 Month_0, int32* Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Day Count at the Start of a Month");

	Params::Ultra_Dynamic_Sky_C_Day_Count_at_the_Start_of_a_Month Parms{};

	Parms.Year_0 = Year_0;
	Parms.Month_0 = Month_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Count != nullptr)
		*Count = Parms.Count;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Day Ended
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Day_Ended()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Day Ended");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Days Since J2000
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Input_Day                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Input_Month                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Input_Year                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Days                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Days_Since_J2000(int32 Input_Day, int32 Input_Month, int32 Input_Year, int32* Days)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Days Since J2000");

	Params::Ultra_Dynamic_Sky_C_Days_Since_J2000 Parms{};

	Parms.Input_Day = Input_Day;
	Parms.Input_Month = Input_Month;
	Parms.Input_Year = Input_Year;

	UObject::ProcessEvent(Func, &Parms);

	if (Days != nullptr)
		*Days = Parms.Days;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Days Since Y1D1M1
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Input_Day                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Input_Month                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Input_Year                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Days                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Days_Since_Y1D1M1(int32 Input_Day, int32 Input_Month, int32 Input_Year, int32* Days)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Days Since Y1D1M1");

	Params::Ultra_Dynamic_Sky_C_Days_Since_Y1D1M1 Parms{};

	Parms.Input_Day = Input_Day;
	Parms.Input_Month = Input_Month;
	Parms.Input_Year = Input_Year;

	UObject::ProcessEvent(Func, &Parms);

	if (Days != nullptr)
		*Days = Parms.Days;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Dimming Directional Lights
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AUltra_Dynamic_Sky_C::Dimming_Directional_Lights()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Dimming Directional Lights");

	Params::Ultra_Dynamic_Sky_C_Dimming_Directional_Lights Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Directional Inscattering Multiplier
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Multiplier                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Directional_Inscattering_Multiplier(double* Multiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Directional Inscattering Multiplier");

	Params::Ultra_Dynamic_Sky_C_Directional_Inscattering_Multiplier Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Multiplier != nullptr)
		*Multiplier = Parms.Multiplier;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Directional Light Dimming
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Directional_Light_Dimming(double* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Directional Light Dimming");

	Params::Ultra_Dynamic_Sky_C_Directional_Light_Dimming Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = Parms.Out;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.ExecuteUbergraph_Ultra_Dynamic_Sky
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::ExecuteUbergraph_Ultra_Dynamic_Sky(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "ExecuteUbergraph_Ultra_Dynamic_Sky");

	Params::Ultra_Dynamic_Sky_C_ExecuteUbergraph_Ultra_Dynamic_Sky Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Filtered Moon Light Intensity
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Unfiltered                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Intensity                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Filtered_Moon_Light_Intensity(double Unfiltered, double* Intensity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Filtered Moon Light Intensity");

	Params::Ultra_Dynamic_Sky_C_Filtered_Moon_Light_Intensity Parms{};

	Parms.Unfiltered = Unfiltered;

	UObject::ProcessEvent(Func, &Parms);

	if (Intensity != nullptr)
		*Intensity = Parms.Intensity;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Find Overall Intensity
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Cloud_Darkening                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Find_Overall_Intensity(double Cloud_Darkening)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Find Overall Intensity");

	Params::Ultra_Dynamic_Sky_C_Find_Overall_Intensity Parms{};

	Parms.Cloud_Darkening = Cloud_Darkening;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Sunrise Times
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Sunrise_Times()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Sunrise Times");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Finish Time Transition
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Finish_Time_Transition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Finish Time Transition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Fire Editor Dispatchers
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Fire_Editor_Dispatchers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Fire Editor Dispatchers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Flat Cloudiness
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    On                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Flat_Cloudiness(bool* On)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Flat Cloudiness");

	Params::Ultra_Dynamic_Sky_C_Flat_Cloudiness Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (On != nullptr)
		*On = Parms.On;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Fog Height Falloff
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Fog_Height_Falloff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Fog Height Falloff");

	Params::Ultra_Dynamic_Sky_C_Fog_Height_Falloff Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Fog Start Distance
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Fog_Start_Distance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Fog Start Distance");

	Params::Ultra_Dynamic_Sky_C_Fog_Start_Distance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Force Startup
// (BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Force_Startup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Force Startup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Force Valid Day
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Force_Valid_Day()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Force Valid Day");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Get Cached Color
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUDS_CachedProperties                   Property                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Get_Cached_Color(EUDS_CachedProperties Property, struct FLinearColor* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Get Cached Color");

	Params::Ultra_Dynamic_Sky_C_Get_Cached_Color Parms{};

	Parms.Property = Property;

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = std::move(Parms.Value);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Get Cached Float
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUDS_CachedProperties                   Property                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Get_Cached_Float(EUDS_CachedProperties Property, double* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Get Cached Float");

	Params::Ultra_Dynamic_Sky_C_Get_Cached_Float Parms{};

	Parms.Property = Property;

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Get Cached Vector
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUDS_CachedProperties                   Property                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Get_Cached_Vector(EUDS_CachedProperties Property, struct FVector* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Get Cached Vector");

	Params::Ultra_Dynamic_Sky_C_Get_Cached_Vector Parms{};

	Parms.Property = Property;

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = std::move(Parms.Value);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Get Camera Location and Camera Relative Heights
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Get_Camera_Location_and_Camera_Relative_Heights()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Get Camera Location and Camera Relative Heights");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Get Current Cloud Shadows Intensity and Softness
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Intensity                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Softness                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Get_Current_Cloud_Shadows_Intensity_and_Softness(double* Intensity, double* Softness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Get Current Cloud Shadows Intensity and Softness");

	Params::Ultra_Dynamic_Sky_C_Get_Current_Cloud_Shadows_Intensity_and_Softness Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Intensity != nullptr)
		*Intensity = Parms.Intensity;

	if (Softness != nullptr)
		*Softness = Parms.Softness;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Get Current Date and Time
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FDateTime                        Current_Date_and_Time                                  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Get_Current_Date_and_Time(struct FDateTime* Current_Date_and_Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Get Current Date and Time");

	Params::Ultra_Dynamic_Sky_C_Get_Current_Date_and_Time Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Current_Date_and_Time != nullptr)
		*Current_Date_and_Time = std::move(Parms.Current_Date_and_Time);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Get Current Fog Base Colors
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Ambient_Fog_Color_0                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Directional_Base_Color                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Scaled_Directional_Base_Color                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Sun_Fog_Base                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Moon_Fog_Base                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Get_Current_Fog_Base_Colors(struct FLinearColor* Ambient_Fog_Color_0, struct FLinearColor* Directional_Base_Color, struct FLinearColor* Scaled_Directional_Base_Color, struct FLinearColor* Sun_Fog_Base, struct FLinearColor* Moon_Fog_Base)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Get Current Fog Base Colors");

	Params::Ultra_Dynamic_Sky_C_Get_Current_Fog_Base_Colors Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Ambient_Fog_Color_0 != nullptr)
		*Ambient_Fog_Color_0 = std::move(Parms.Ambient_Fog_Color_0);

	if (Directional_Base_Color != nullptr)
		*Directional_Base_Color = std::move(Parms.Directional_Base_Color);

	if (Scaled_Directional_Base_Color != nullptr)
		*Scaled_Directional_Base_Color = std::move(Parms.Scaled_Directional_Base_Color);

	if (Sun_Fog_Base != nullptr)
		*Sun_Fog_Base = std::move(Parms.Sun_Fog_Base);

	if (Moon_Fog_Base != nullptr)
		*Moon_Fog_Base = std::move(Parms.Moon_Fog_Base);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Get Current Sky Light Color and Intensity
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Out_Intensity                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Out_Color                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Get_Current_Sky_Light_Color_and_Intensity(double* Out_Intensity, struct FLinearColor* Out_Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Get Current Sky Light Color and Intensity");

	Params::Ultra_Dynamic_Sky_C_Get_Current_Sky_Light_Color_and_Intensity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Intensity != nullptr)
		*Out_Intensity = Parms.Out_Intensity;

	if (Out_Color != nullptr)
		*Out_Color = std::move(Parms.Out_Color);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Get Current Volumetric Cloud Extinction Scale
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Top                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Get_Current_Volumetric_Cloud_Extinction_Scale(double* Top)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Get Current Volumetric Cloud Extinction Scale");

	Params::Ultra_Dynamic_Sky_C_Get_Current_Volumetric_Cloud_Extinction_Scale Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Top != nullptr)
		*Top = Parms.Top;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Get Day of the Week
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Index_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Name_0                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Get_Day_of_the_Week(int32* Index_0, class FString* Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Get Day of the Week");

	Params::Ultra_Dynamic_Sky_C_Get_Day_of_the_Week Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Index_0 != nullptr)
		*Index_0 = Parms.Index_0;

	if (Name_0 != nullptr)
		*Name_0 = std::move(Parms.Name_0);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Get Inverted Global Occlusion
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Get_Inverted_Global_Occlusion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Get Inverted Global Occlusion");

	Params::Ultra_Dynamic_Sky_C_Get_Inverted_Global_Occlusion Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Get Nearby Cloud Cells To Load Asynchronously
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Get_Nearby_Cloud_Cells_To_Load_Asynchronously()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Get Nearby Cloud Cells To Load Asynchronously");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Get Sky MID Parent Material Instance
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TSoftObjectPtr<class UMaterialInterface>ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash)

TSoftObjectPtr<class UMaterialInterface> AUltra_Dynamic_Sky_C::Get_Sky_MID_Parent_Material_Instance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Get Sky MID Parent Material Instance");

	Params::Ultra_Dynamic_Sky_C_Get_Sky_MID_Parent_Material_Instance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Get Time of Day in Real Time Format
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTimecode                        Time                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Get_Time_of_Day_in_Real_Time_Format(struct FTimecode* Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Get Time of Day in Real Time Format");

	Params::Ultra_Dynamic_Sky_C_Get_Time_of_Day_in_Real_Time_Format Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Time != nullptr)
		*Time = std::move(Parms.Time);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Get Volumetric Cloud Emissive Colors
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Bottom                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Top                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Get_Volumetric_Cloud_Emissive_Colors(struct FLinearColor* Bottom, struct FLinearColor* Top)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Get Volumetric Cloud Emissive Colors");

	Params::Ultra_Dynamic_Sky_C_Get_Volumetric_Cloud_Emissive_Colors Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Bottom != nullptr)
		*Bottom = std::move(Parms.Bottom);

	if (Top != nullptr)
		*Top = std::move(Parms.Top);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.MS to Time of Day
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Hours                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Minutes                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Seconds                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Miliseconds                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Time                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::MS_to_Time_of_Day(int32 Hours, int32 Minutes, int32 Seconds, int32 Miliseconds, double* Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "MS to Time of Day");

	Params::Ultra_Dynamic_Sky_C_MS_to_Time_of_Day Parms{};

	Parms.Hours = Hours;
	Parms.Minutes = Minutes;
	Parms.Seconds = Seconds;
	Parms.Miliseconds = Miliseconds;

	UObject::ProcessEvent(Func, &Parms);

	if (Time != nullptr)
		*Time = Parms.Time;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Hard Reset Cache
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Hard_Reset_Cache()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Hard Reset Cache");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Hourly__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Hour                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Hourly__DelegateSignature(int32 Hour)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Hourly__DelegateSignature");

	Params::Ultra_Dynamic_Sky_C_Hourly__DelegateSignature Parms{};

	Parms.Hour = Hour;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Increment Cache Timer
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Increment_Cache_Timer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Increment Cache Timer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Increment Cloud Movement Cache
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Increment_Cloud_Movement_Cache()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Increment Cloud Movement Cache");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Increment Day
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Increment_Day()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Increment Day");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Increment Lunar Phase
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Increment_Lunar_Phase()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Increment Lunar Phase");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Increment Time of Day Forward
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Increment_Time_of_Day_Forward(double Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Increment Time of Day Forward");

	Params::Ultra_Dynamic_Sky_C_Increment_Time_of_Day_Forward Parms{};

	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Initialize Occlusion
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Initialize_Occlusion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Initialize Occlusion");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Inside Outside Cloud Layer
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Inside_Outside_Cloud_Layer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Inside Outside Cloud Layer");

	Params::Ultra_Dynamic_Sky_C_Inside_Outside_Cloud_Layer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Is it Daytime?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Yes                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Is_it_Daytime_(bool* Yes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Is it Daytime?");

	Params::Ultra_Dynamic_Sky_C_Is_it_Daytime_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Yes != nullptr)
		*Yes = Parms.Yes;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Is Lens Flare Enabled
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Yes                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Is_Lens_Flare_Enabled(bool* Yes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Is Lens Flare Enabled");

	Params::Ultra_Dynamic_Sky_C_Is_Lens_Flare_Enabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Yes != nullptr)
		*Yes = Parms.Yes;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Is Location Inside Cloud Layer
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Inside                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Is_Location_Inside_Cloud_Layer(const struct FVector& Location, bool* Inside)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Is Location Inside Cloud Layer");

	Params::Ultra_Dynamic_Sky_C_Is_Location_Inside_Cloud_Layer Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);

	if (Inside != nullptr)
		*Inside = Parms.Inside;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Is Moon Light Casting Shadows
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Yes                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Is_Moon_Light_Casting_Shadows(bool* Yes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Is Moon Light Casting Shadows");

	Params::Ultra_Dynamic_Sky_C_Is_Moon_Light_Casting_Shadows Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Yes != nullptr)
		*Yes = Parms.Yes;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Is Sun Light Casting Shadows
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Yes                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Is_Sun_Light_Casting_Shadows(bool* Yes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Is Sun Light Casting Shadows");

	Params::Ultra_Dynamic_Sky_C_Is_Sun_Light_Casting_Shadows Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Yes != nullptr)
		*Yes = Parms.Yes;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Lens Flare Parent Material
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TSoftObjectPtr<class UMaterialInterface>Mat                                                    (Parm, OutParm, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Lens_Flare_Parent_Material(TSoftObjectPtr<class UMaterialInterface>* Mat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Lens Flare Parent Material");

	Params::Ultra_Dynamic_Sky_C_Lens_Flare_Parent_Material Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Mat != nullptr)
		*Mat = Parms.Mat;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Lights Update Degree Threshold Test
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class USceneComponent*                  Root_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USceneComponent*                  Light                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AUltra_Dynamic_Sky_C::Lights_Update_Degree_Threshold_Test(class USceneComponent* Root_0, class USceneComponent* Light)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Lights Update Degree Threshold Test");

	Params::Ultra_Dynamic_Sky_C_Lights_Update_Degree_Threshold_Test Parms{};

	Parms.Root_0 = Root_0;
	Parms.Light = Light;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Load Required Assets
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Load_Required_Assets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Load Required Assets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Midnight__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Midnight__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Midnight__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Monitor for Changes
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Monitor_for_Changes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Monitor for Changes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Moon Light Specular Scale
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Moon_Light_Specular_Scale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Moon Light Specular Scale");

	Params::Ultra_Dynamic_Sky_C_Moon_Light_Specular_Scale Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Moon Light Volumetric Scattering Intensity
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Moon_Light_Volumetric_Scattering_Intensity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Moon Light Volumetric Scattering Intensity");

	Params::Ultra_Dynamic_Sky_C_Moon_Light_Volumetric_Scattering_Intensity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Moon Phase Multiplier
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Without_Light_Brightness                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Moon_Phase_Multiplier(double* Without_Light_Brightness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Moon Phase Multiplier");

	Params::Ultra_Dynamic_Sky_C_Moon_Phase_Multiplier Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Without_Light_Brightness != nullptr)
		*Without_Light_Brightness = Parms.Without_Light_Brightness;

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Moon Z Vector
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Moon_Z_Vector(struct FVector* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Moon Z Vector");

	Params::Ultra_Dynamic_Sky_C_Moon_Z_Vector Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = std::move(Parms.Out);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Night Filter
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Night_Filter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Night Filter");

	Params::Ultra_Dynamic_Sky_C_Night_Filter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Night Filtered Night Brightness
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Multiplier                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Night_Filtered_Night_Brightness(double* Multiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Night Filtered Night Brightness");

	Params::Ultra_Dynamic_Sky_C_Night_Filtered_Night_Brightness Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Multiplier != nullptr)
		*Multiplier = Parms.Multiplier;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Notify of Removed Cloud Paint Container
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Notify_of_Removed_Cloud_Paint_Container()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Notify of Removed Cloud Paint Container");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Number of Days in a Year
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Year_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Count                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Number_of_Days_in_a_Year(int32 Year_0, int32* Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Number of Days in a Year");

	Params::Ultra_Dynamic_Sky_C_Number_of_Days_in_a_Year Parms{};

	Parms.Year_0 = Year_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Count != nullptr)
		*Count = Parms.Count;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Offset Date by a Number of Days
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Input_Month                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Input_Day                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Input_Year                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Output_Month                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Output_Day                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Output_Year                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Offset_Date_by_a_Number_of_Days(int32 Input_Month, int32 Input_Day, int32 Input_Year, int32 Offset, int32* Output_Month, int32* Output_Day, int32* Output_Year)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Offset Date by a Number of Days");

	Params::Ultra_Dynamic_Sky_C_Offset_Date_by_a_Number_of_Days Parms{};

	Parms.Input_Month = Input_Month;
	Parms.Input_Day = Input_Day;
	Parms.Input_Year = Input_Year;
	Parms.Offset = Offset;

	UObject::ProcessEvent(Func, &Parms);

	if (Output_Month != nullptr)
		*Output_Month = Parms.Output_Month;

	if (Output_Day != nullptr)
		*Output_Day = Parms.Output_Day;

	if (Output_Year != nullptr)
		*Output_Year = Parms.Output_Year;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.OnLoaded_AA91001A446E22425F2F54AAB2159C50
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::OnLoaded_AA91001A446E22425F2F54AAB2159C50(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "OnLoaded_AA91001A446E22425F2F54AAB2159C50");

	Params::Ultra_Dynamic_Sky_C_OnLoaded_AA91001A446E22425F2F54AAB2159C50 Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.OnRep_Replicated Time of Day
// (BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::OnRep_Replicated_Time_of_Day()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "OnRep_Replicated Time of Day");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Overcast Brightness
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Overcast_Brightness()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Overcast Brightness");

	Params::Ultra_Dynamic_Sky_C_Overcast_Brightness Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Overcast Light Contribution
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    For_Volumetric_Clouds                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FLinearColor AUltra_Dynamic_Sky_C::Overcast_Light_Contribution(bool For_Volumetric_Clouds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Overcast Light Contribution");

	Params::Ultra_Dynamic_Sky_C_Overcast_Light_Contribution Parms{};

	Parms.For_Volumetric_Clouds = For_Volumetric_Clouds;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Overcast Luminance Boost
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Multiplier                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Overcast_Luminance_Boost(double Multiplier, double* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Overcast Luminance Boost");

	Params::Ultra_Dynamic_Sky_C_Overcast_Luminance_Boost Parms{};

	Parms.Multiplier = Multiplier;

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = Parms.Out;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Query Project Settings And UDS Version
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Query_Project_Settings_And_UDS_Version()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Query Project Settings And UDS Version");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Randomize Time Of Day
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Randomize_Time_Of_Day()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Randomize Time Of Day");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Recapture Sky Light
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Recapture_Sky_Light()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Recapture Sky Light");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AUltra_Dynamic_Sky_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "ReceiveEndPlay");

	Params::Ultra_Dynamic_Sky_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "ReceiveTick");

	Params::Ultra_Dynamic_Sky_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Release Async Loaded Object
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>           Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Release_Async_Loaded_Object(TSoftObjectPtr<class UObject> Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Release Async Loaded Object");

	Params::Ultra_Dynamic_Sky_C_Release_Async_Loaded_Object Parms{};

	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Restart Real Time Sky Light Capture
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Restart_Real_Time_Sky_Light_Capture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Restart Real Time Sky Light Capture");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Save Calendar Data
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Save_Calendar_Data()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Save Calendar Data");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Scale Sample Count
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  In                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Scale_Sample_Count(double In, double* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Scale Sample Count");

	Params::Ultra_Dynamic_Sky_C_Scale_Sample_Count Parms{};

	Parms.In = In;

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = Parms.Out;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Season Value for Weather from Date and Time
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Day_Offset                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Season                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Season_Value_for_Weather_from_Date_and_Time(int32 Day_Offset, double* Season)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Season Value for Weather from Date and Time");

	Params::Ultra_Dynamic_Sky_C_Season_Value_for_Weather_from_Date_and_Time Parms{};

	Parms.Day_Offset = Day_Offset;

	UObject::ProcessEvent(Func, &Parms);

	if (Season != nullptr)
		*Season = Parms.Season;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Set Date and Time
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FDateTime                        Date_Time                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Set_Date_and_Time(const struct FDateTime& Date_Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Set Date and Time");

	Params::Ultra_Dynamic_Sky_C_Set_Date_and_Time Parms{};

	Parms.Date_Time = std::move(Date_Time);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Set Starting Last Frame Values for Change Monitoring
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Set_Starting_Last_Frame_Values_for_Change_Monitoring()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Set Starting Last Frame Values for Change Monitoring");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Set Sun and Moon Root Rotation
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Set_Sun_and_Moon_Root_Rotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Set Sun and Moon Root Rotation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Set Time of Day using Time Code
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTimecode                        Time_Code                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Set_Time_of_Day_using_Time_Code(const struct FTimecode& Time_Code)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Set Time of Day using Time Code");

	Params::Ultra_Dynamic_Sky_C_Set_Time_of_Day_using_Time_Code Parms{};

	Parms.Time_Code = std::move(Time_Code);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Set Up Global Volumetric Fog Material
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Set_Up_Global_Volumetric_Fog_Material()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Set Up Global Volumetric Fog Material");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Set Up Inside Cloud Fog
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Set_Up_Inside_Cloud_Fog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Set Up Inside Cloud Fog");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Set Up Lens Flare
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Set_Up_Lens_Flare()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Set Up Lens Flare");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Set Up Overcast Turbulence
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Set_Up_Overcast_Turbulence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Set Up Overcast Turbulence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Set Up Post Process Cloud Fog
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Set_Up_Post_Process_Cloud_Fog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Set Up Post Process Cloud Fog");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Set Up Volumetric Cloud Light Rays
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Set_Up_Volumetric_Cloud_Light_Rays()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Set Up Volumetric Cloud Light Rays");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Simplified Current Color
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FLinearColor                     Day_Color                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Dusk_Color                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Night_Color                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Simplified_Current_Color(const struct FLinearColor& Day_Color, const struct FLinearColor& Dusk_Color, const struct FLinearColor& Night_Color, struct FLinearColor* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Simplified Current Color");

	Params::Ultra_Dynamic_Sky_C_Simplified_Current_Color Parms{};

	Parms.Day_Color = std::move(Day_Color);
	Parms.Dusk_Color = std::move(Dusk_Color);
	Parms.Night_Color = std::move(Night_Color);

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = std::move(Parms.Out);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Simplified Sun Glow Color
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FLinearColor                     Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Simplified_Sun_Glow_Color(struct FLinearColor* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Simplified Sun Glow Color");

	Params::Ultra_Dynamic_Sky_C_Simplified_Sun_Glow_Color Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = std::move(Parms.Out);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Size Cache Arrays
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Size_Cache_Arrays()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Size Cache Arrays");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Sky Atmosphere Fog Contribution
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Output                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Sky_Atmosphere_Fog_Contribution(double* Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Sky Atmosphere Fog Contribution");

	Params::Ultra_Dynamic_Sky_C_Sky_Atmosphere_Fog_Contribution Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Output != nullptr)
		*Output = Parms.Output;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Solar Eclipse Circle Mask
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Sun_Angular_Radius                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Moon_Angular_Radius                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Moon_Vector                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Moon_Softness                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Fraction_Showing                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Solar_Eclipse_Circle_Mask(double Sun_Angular_Radius, double Moon_Angular_Radius, const struct FVector& Moon_Vector, double Moon_Softness, double* Fraction_Showing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Solar Eclipse Circle Mask");

	Params::Ultra_Dynamic_Sky_C_Solar_Eclipse_Circle_Mask Parms{};

	Parms.Sun_Angular_Radius = Sun_Angular_Radius;
	Parms.Moon_Angular_Radius = Moon_Angular_Radius;
	Parms.Moon_Vector = std::move(Moon_Vector);
	Parms.Moon_Softness = Moon_Softness;

	UObject::ProcessEvent(Func, &Parms);

	if (Fraction_Showing != nullptr)
		*Fraction_Showing = Parms.Fraction_Showing;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Space Planet Parent MID
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FUDS_Space_Planet                Planet                                                 (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// TSoftObjectPtr<class UMaterialInterface>Out                                                    (Parm, OutParm, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Space_Planet_Parent_MID(const struct FUDS_Space_Planet& Planet, TSoftObjectPtr<class UMaterialInterface>* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Space Planet Parent MID");

	Params::Ultra_Dynamic_Sky_C_Space_Planet_Parent_MID Parms{};

	Parms.Planet = std::move(Planet);

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = Parms.Out;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Start Active Timers
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Start_Active_Timers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Start Active Timers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Start Async Loader
// (BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Start_Async_Loader()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Start Async Loader");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Start Up UDW If it Exists
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Start_Up_UDW_If_it_Exists()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Start Up UDW If it Exists");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Starting Animate Time of Day Offset
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Starting_Animate_Time_of_Day_Offset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Starting Animate Time of Day Offset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Starting Cloud Formation
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Starting_Cloud_Formation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Starting Cloud Formation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Static Clouds Lighting Mask
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FLinearColor                     XY_Mask                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Static_Clouds_Lighting_Mask(struct FLinearColor* XY_Mask)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Static Clouds Lighting Mask");

	Params::Ultra_Dynamic_Sky_C_Static_Clouds_Lighting_Mask Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (XY_Mask != nullptr)
		*XY_Mask = std::move(Parms.XY_Mask);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Static Clouds Tint Color
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FLinearColor                     Light                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Shadow                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Static_Clouds_Tint_Color(struct FLinearColor* Light, struct FLinearColor* Shadow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Static Clouds Tint Color");

	Params::Ultra_Dynamic_Sky_C_Static_Clouds_Tint_Color Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Light != nullptr)
		*Light = std::move(Parms.Light);

	if (Shadow != nullptr)
		*Shadow = std::move(Parms.Shadow);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Sun Height
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Z                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Sun_Height(double* Z)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Sun Height");

	Params::Ultra_Dynamic_Sky_C_Sun_Height Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Z != nullptr)
		*Z = Parms.Z;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Sun Z Vector
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Sun_Z_Vector(struct FVector* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Sun Z Vector");

	Params::Ultra_Dynamic_Sky_C_Sun_Z_Vector Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = std::move(Parms.Out);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Sunrise__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Sunrise__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Sunrise__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Sunset__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Sunset__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Sunset__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Swap with Cinematic Runtime Value
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  In                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Cine                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    User_Higher                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Swap_with_Cinematic_Runtime_Value(double In, double Cine, bool User_Higher, double* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Swap with Cinematic Runtime Value");

	Params::Ultra_Dynamic_Sky_C_Swap_with_Cinematic_Runtime_Value Parms{};

	Parms.In = In;
	Parms.Cine = Cine;
	Parms.User_Higher = User_Higher;

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = Parms.Out;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Test Point for Painted Cloud Coverage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Cloud_Coverage_with_Painting                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Test_Point_for_Painted_Cloud_Coverage(const struct FVector& Location, double* Cloud_Coverage_with_Painting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Test Point for Painted Cloud Coverage");

	Params::Ultra_Dynamic_Sky_C_Test_Point_for_Painted_Cloud_Coverage Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);

	if (Cloud_Coverage_with_Painting != nullptr)
		*Cloud_Coverage_with_Painting = Parms.Cloud_Coverage_with_Painting;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Three Time Floats
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Day_0                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Dusk                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Night                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Three_Time_Floats(double Day_0, double Dusk, double Night, double* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Three Time Floats");

	Params::Ultra_Dynamic_Sky_C_Three_Time_Floats Parms{};

	Parms.Day_0 = Day_0;
	Parms.Dusk = Dusk;
	Parms.Night = Night;

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = Parms.Out;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Tick Time Transition
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Tick_Time_Transition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Tick Time Transition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Time of Day Animation
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Time_of_Day_Animation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Time of Day Animation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Time of Day Offset
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  This_Frame                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Per_Second                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Time_of_Day_Offset(double* This_Frame, double* Per_Second)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Time of Day Offset");

	Params::Ultra_Dynamic_Sky_C_Time_of_Day_Offset Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (This_Frame != nullptr)
		*This_Frame = Parms.This_Frame;

	if (Per_Second != nullptr)
		*Per_Second = Parms.Per_Second;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Timed Override with New Changes
// (BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Timed_Override_with_New_Changes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Timed Override with New Changes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Total Time Elapsed
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Sky_C::Total_Time_Elapsed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Total Time Elapsed");

	Params::Ultra_Dynamic_Sky_C_Total_Time_Elapsed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Transition Sky Light Intensity
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  New_Sky_Light_Intensity_Multiplier                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Transition_Time                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Transition_Sky_Light_Intensity(double New_Sky_Light_Intensity_Multiplier, double Transition_Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Transition Sky Light Intensity");

	Params::Ultra_Dynamic_Sky_C_Transition_Sky_Light_Intensity Parms{};

	Parms.New_Sky_Light_Intensity_Multiplier = New_Sky_Light_Intensity_Multiplier;
	Parms.Transition_Time = Transition_Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Transition Time of Day
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  New_Time_of_Day                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Transition_Duration__Seconds_                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EEasingFunc                             Easing_Function                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Easing_Exponent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Allow_Time_Going_Backwards                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Transition_Time_of_Day(double New_Time_of_Day, double Transition_Duration__Seconds_, EEasingFunc Easing_Function, double Easing_Exponent, bool Allow_Time_Going_Backwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Transition Time of Day");

	Params::Ultra_Dynamic_Sky_C_Transition_Time_of_Day Parms{};

	Parms.New_Time_of_Day = New_Time_of_Day;
	Parms.Transition_Duration__Seconds_ = Transition_Duration__Seconds_;
	Parms.Easing_Function = Easing_Function;
	Parms.Easing_Exponent = Easing_Exponent;
	Parms.Allow_Time_Going_Backwards = Allow_Time_Going_Backwards;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Twilight Brightness Falloff
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Z                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Scale                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Twilight_Brightness_Falloff(double Z, double* Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Twilight Brightness Falloff");

	Params::Ultra_Dynamic_Sky_C_Twilight_Brightness_Falloff Parms{};

	Parms.Z = Z;

	UObject::ProcessEvent(Func, &Parms);

	if (Scale != nullptr)
		*Scale = Parms.Scale;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Unfiltered Moon Light Intensity
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Unfiltered_Moon_Light_Intensity(double* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Unfiltered Moon Light Intensity");

	Params::Ultra_Dynamic_Sky_C_Unfiltered_Moon_Light_Intensity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = Parms.Out;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update Active Variables
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Update_Active_Variables()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update Active Variables");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update Cache Group Boolean
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUDS_Cache_Group                        Group                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<EUDS_CachedProperties>           Properties_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AUltra_Dynamic_Sky_C::Update_Cache_Group_Boolean(EUDS_Cache_Group Group, TArray<EUDS_CachedProperties>& Properties_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update Cache Group Boolean");

	Params::Ultra_Dynamic_Sky_C_Update_Cache_Group_Boolean Parms{};

	Parms.Group = Group;
	Parms.Properties_0 = std::move(Properties_0);

	UObject::ProcessEvent(Func, &Parms);

	Properties_0 = std::move(Parms.Properties_0);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update Cloud Coverage After Painting
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Update_Cloud_Coverage_After_Painting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update Cloud Coverage After Painting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update Cloud Movement
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Update_Cloud_Movement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update Cloud Movement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update Current Volumetric Clouds MID
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Update_Current_Volumetric_Clouds_MID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update Current Volumetric Clouds MID");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update Directional Light Rotations
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Update_Directional_Light_Rotations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update Directional Light Rotations");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update Distance to Sample Max Count
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Shut_Down                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Update_Distance_to_Sample_Max_Count(bool Shut_Down)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update Distance to Sample Max Count");

	Params::Ultra_Dynamic_Sky_C_Update_Distance_to_Sample_Max_Count Parms{};

	Parms.Shut_Down = Shut_Down;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update Dynamic Sky Light Multiplier
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Update_Dynamic_Sky_Light_Multiplier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update Dynamic Sky Light Multiplier");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update Forced Active Variables
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Update_Forced_Active_Variables()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update Forced Active Variables");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update from UDW Construction Script
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           UDW                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Update_from_UDW_Construction_Script(class AActor* UDW)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update from UDW Construction Script");

	Params::Ultra_Dynamic_Sky_C_Update_from_UDW_Construction_Script Parms{};

	Parms.UDW = UDW;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update Global Volumetric Fog Material
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Update_Global_Volumetric_Fog_Material()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update Global Volumetric Fog Material");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update High Priority Properties
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Update_High_Priority_Properties()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update High Priority Properties");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update Lens Flare
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Update_Lens_Flare()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update Lens Flare");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update Low Priority Properties
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Update_Low_Priority_Properties()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update Low Priority Properties");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update Overcast Turbulence
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Update_Overcast_Turbulence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update Overcast Turbulence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update Painted Cloud Coverage Target
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Update_Painted_Cloud_Coverage_Target()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update Painted Cloud Coverage Target");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update Post Process Blend Weights
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Update_Post_Process_Blend_Weights()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update Post Process Blend Weights");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update Replicated Time
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Update_Replicated_Time()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update Replicated Time");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update Settings Based on Platform and Scalability
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Update_Settings_Based_on_Platform_and_Scalability()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update Settings Based on Platform and Scalability");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update Sky Atmosphere Location
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Update_Sky_Atmosphere_Location(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update Sky Atmosphere Location");

	Params::Ultra_Dynamic_Sky_C_Update_Sky_Atmosphere_Location Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update Space Layer Vectors
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Update_Space_Layer_Vectors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update Space Layer Vectors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update Static Variables
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Update_Static_Variables()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update Static Variables");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update Variables Controlled By Weather
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Update_Variables_Controlled_By_Weather()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update Variables Controlled By Weather");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update Volumetric Cloud Light Rays
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Update_Volumetric_Cloud_Light_Rays()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update Volumetric Cloud Light Rays");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update Volumetric Cloud Light Rays Movement
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Update_Volumetric_Cloud_Light_Rays_Movement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update Volumetric Cloud Light Rays Movement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Use Sky Atmosphere
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AUltra_Dynamic_Sky_C::Use_Sky_Atmosphere()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Use Sky Atmosphere");

	Params::Ultra_Dynamic_Sky_C_Use_Sky_Atmosphere Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Using 2D Clouds
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AUltra_Dynamic_Sky_C::Using_2D_Clouds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Using 2D Clouds");

	Params::Ultra_Dynamic_Sky_C_Using_2D_Clouds Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Volumetric Cloud Ambient Light Color
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FLinearColor                     Bottom                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Top                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Volumetric_Cloud_Ambient_Light_Color(struct FLinearColor* Bottom, struct FLinearColor* Top)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Volumetric Cloud Ambient Light Color");

	Params::Ultra_Dynamic_Sky_C_Volumetric_Cloud_Ambient_Light_Color Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Bottom != nullptr)
		*Bottom = std::move(Parms.Bottom);

	if (Top != nullptr)
		*Top = std::move(Parms.Top);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Volumetric Cloud Base Cloud Height
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Base_Cloud_Height_0                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Volumetric_Cloud_Base_Cloud_Height(double* Base_Cloud_Height_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Volumetric Cloud Base Cloud Height");

	Params::Ultra_Dynamic_Sky_C_Volumetric_Cloud_Base_Cloud_Height Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Base_Cloud_Height_0 != nullptr)
		*Base_Cloud_Height_0 = Parms.Base_Cloud_Height_0;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Volumetric Cloud Floor Variation
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Height_Clear                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Height_Cloudy                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Color                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Volumetric_Cloud_Floor_Variation(double* Height_Clear, double* Height_Cloudy, double* Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Volumetric Cloud Floor Variation");

	Params::Ultra_Dynamic_Sky_C_Volumetric_Cloud_Floor_Variation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Height_Clear != nullptr)
		*Height_Clear = Parms.Height_Clear;

	if (Height_Cloudy != nullptr)
		*Height_Cloudy = Parms.Height_Cloudy;

	if (Color != nullptr)
		*Color = Parms.Color;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Volumetric Cloud Layer Height
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Base_Cloud_Height_0                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Layer_Height                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Volumetric_Cloud_Layer_Height(double Base_Cloud_Height_0, double* Layer_Height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Volumetric Cloud Layer Height");

	Params::Ultra_Dynamic_Sky_C_Volumetric_Cloud_Layer_Height Parms{};

	Parms.Base_Cloud_Height_0 = Base_Cloud_Height_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Layer_Height != nullptr)
		*Layer_Height = Parms.Layer_Height;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Volumetric Cloud Layer Scale
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Layer_Scale                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Volumetric_Cloud_Layer_Scale(double* Layer_Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Volumetric Cloud Layer Scale");

	Params::Ultra_Dynamic_Sky_C_Volumetric_Cloud_Layer_Scale Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Layer_Scale != nullptr)
		*Layer_Scale = Parms.Layer_Scale;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Volumetric Cloud Shadows Altitude
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Cloud_Shadows_Altitude                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Volumetric_Cloud_Shadows_Altitude(double* Cloud_Shadows_Altitude)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Volumetric Cloud Shadows Altitude");

	Params::Ultra_Dynamic_Sky_C_Volumetric_Cloud_Shadows_Altitude Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Cloud_Shadows_Altitude != nullptr)
		*Cloud_Shadows_Altitude = Parms.Cloud_Shadows_Altitude;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Volumetric Cloud Top Altitude
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Cloud_Top_Altitude                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Volumetric_Cloud_Top_Altitude(double* Cloud_Top_Altitude)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Volumetric Cloud Top Altitude");

	Params::Ultra_Dynamic_Sky_C_Volumetric_Cloud_Top_Altitude Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Cloud_Top_Altitude != nullptr)
		*Cloud_Top_Altitude = Parms.Cloud_Top_Altitude;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Volumetric Clouds Base Clouds Texture
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        Tex                                                    (Parm, OutParm, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Volumetric_Clouds_Base_Clouds_Texture(TSoftObjectPtr<class UTexture2D>* Tex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Volumetric Clouds Base Clouds Texture");

	Params::Ultra_Dynamic_Sky_C_Volumetric_Clouds_Base_Clouds_Texture Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Tex != nullptr)
		*Tex = Parms.Tex;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Volumetric Clouds Parent Materials
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TSoftObjectPtr<class UMaterialInterface>Simplified                                             (Parm, OutParm, HasGetValueTypeHash)
// TSoftObjectPtr<class UMaterialInterface>Complex                                                (Parm, OutParm, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Volumetric_Clouds_Parent_Materials(TSoftObjectPtr<class UMaterialInterface>* Simplified, TSoftObjectPtr<class UMaterialInterface>* Complex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Volumetric Clouds Parent Materials");

	Params::Ultra_Dynamic_Sky_C_Volumetric_Clouds_Parent_Materials Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Simplified != nullptr)
		*Simplified = Parms.Simplified;

	if (Complex != nullptr)
		*Complex = Parms.Complex;
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Volumetric Clouds SubNoise Scales
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     High                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Low                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Volumetric_Clouds_SubNoise_Scales(struct FLinearColor* High, struct FLinearColor* Low)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Volumetric Clouds SubNoise Scales");

	Params::Ultra_Dynamic_Sky_C_Volumetric_Clouds_SubNoise_Scales Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (High != nullptr)
		*High = std::move(Parms.High);

	if (Low != nullptr)
		*Low = std::move(Parms.Low);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.World Space to Drawn Target Pixel Space
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector2D                        In                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::World_Space_to_Drawn_Target_Pixel_Space(const struct FVector2D& In, struct FVector2D* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "World Space to Drawn Target Pixel Space");

	Params::Ultra_Dynamic_Sky_C_World_Space_to_Drawn_Target_Pixel_Space Parms{};

	Parms.In = std::move(In);

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = std::move(Parms.Out);
}

}

