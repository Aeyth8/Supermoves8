#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GYMGAME

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GYMGAME_structs.hpp"
#include "AIModule_classes.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "AutoSettingsInput_classes.hpp"
#include "PhysicsCore_structs.hpp"
#include "PhysicsCore_classes.hpp"
#include "CommonUI_classes.hpp"
#include "AutoSettings_classes.hpp"


namespace SDK
{

// Class GYMGAME.CameraPreflow
// 0x0010 (0x02A8 - 0x0298)
class ACameraPreflow : public AActor
{
public:
	FMulticastInlineDelegateProperty_             OnGymCameraPreflowEnded;                           // 0x0298(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void GymCameraPreflowEnded__DelegateSignature();
	void StartPreraceSequence();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraPreflow">();
	}
	static class ACameraPreflow* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACameraPreflow>();
	}
};
static_assert(alignof(ACameraPreflow) == 0x000008, "Wrong alignment on ACameraPreflow");
static_assert(sizeof(ACameraPreflow) == 0x0002A8, "Wrong size on ACameraPreflow");
static_assert(offsetof(ACameraPreflow, OnGymCameraPreflowEnded) == 0x000298, "Member 'ACameraPreflow::OnGymCameraPreflowEnded' has a wrong offset!");

// Class GYMGAME.GymGameModeMusicDataFile
// 0x0008 (0x0038 - 0x0030)
class UGymGameModeMusicDataFile final : public UPrimaryDataAsset
{
public:
	class FName                                   AssetName;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGameModeMusicDataFile">();
	}
	static class UGymGameModeMusicDataFile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGameModeMusicDataFile>();
	}
};
static_assert(alignof(UGymGameModeMusicDataFile) == 0x000008, "Wrong alignment on UGymGameModeMusicDataFile");
static_assert(sizeof(UGymGameModeMusicDataFile) == 0x000038, "Wrong size on UGymGameModeMusicDataFile");
static_assert(offsetof(UGymGameModeMusicDataFile, AssetName) == 0x000030, "Member 'UGymGameModeMusicDataFile::AssetName' has a wrong offset!");

// Class GYMGAME.ClimbableWall
// 0x0000 (0x00A0 - 0x00A0)
class UClimbableWall final : public UActorComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ClimbableWall">();
	}
	static class UClimbableWall* GetDefaultObj()
	{
		return GetDefaultObjImpl<UClimbableWall>();
	}
};
static_assert(alignof(UClimbableWall) == 0x000008, "Wrong alignment on UClimbableWall");
static_assert(sizeof(UClimbableWall) == 0x0000A0, "Wrong size on UClimbableWall");

// Class GYMGAME.EditorGizmo
// 0x0028 (0x02C0 - 0x0298)
class AEditorGizmo : public AActor
{
public:
	class USceneComponent*                        GymPivot;                                          // 0x0298(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   YawRotationMesh;                                   // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   PitchRotationMesh;                                 // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   RollRotationMesh;                                  // 0x02B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EnableAxis(ERotationAxis RotationAxis);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EditorGizmo">();
	}
	static class AEditorGizmo* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEditorGizmo>();
	}
};
static_assert(alignof(AEditorGizmo) == 0x000008, "Wrong alignment on AEditorGizmo");
static_assert(sizeof(AEditorGizmo) == 0x0002C0, "Wrong size on AEditorGizmo");
static_assert(offsetof(AEditorGizmo, GymPivot) == 0x000298, "Member 'AEditorGizmo::GymPivot' has a wrong offset!");
static_assert(offsetof(AEditorGizmo, YawRotationMesh) == 0x0002A0, "Member 'AEditorGizmo::YawRotationMesh' has a wrong offset!");
static_assert(offsetof(AEditorGizmo, PitchRotationMesh) == 0x0002A8, "Member 'AEditorGizmo::PitchRotationMesh' has a wrong offset!");
static_assert(offsetof(AEditorGizmo, RollRotationMesh) == 0x0002B0, "Member 'AEditorGizmo::RollRotationMesh' has a wrong offset!");

// Class GYMGAME.GymSplinePlacer
// 0x0098 (0x0330 - 0x0298)
class AGymSplinePlacer : public AActor
{
public:
	class UGymMultiPlacer*                        CurrentPlacer;                                     // 0x0298(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AGymSplinePlaceable*                    PreviewAsset;                                      // 0x02A0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A8[0x8];                                      // 0x02A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AGymStaticLevelAsset>       AssetType;                                         // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AGymStaticLevelAsset>       PreviewAssetType;                                  // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoUpdateOnChange;                                // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CustomPlacedSpline;                                // 0x02C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C2[0x2];                                      // 0x02C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExtendMultiplier;                                  // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       SplineComponent;                                   // 0x02C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AGymStaticLevelAsset*>           Spawned;                                           // 0x02D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AGymStaticLevelAsset*>           PreviewSpawned;                                    // 0x02E0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AGymSplinePlaceable*>            Placeables;                                        // 0x02F0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_300[0x20];                                     // 0x0300(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUseAssetRotation;                                 // 0x0320(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_321[0x3];                                      // 0x0321(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxSlopeAngle;                                     // 0x0324(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHorizontalTurnRate;                             // 0x0328(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleCheckSegmentLength;                           // 0x032C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ClearSplineAssets();
	void UpdateSplineAssets();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSplinePlacer">();
	}
	static class AGymSplinePlacer* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymSplinePlacer>();
	}
};
static_assert(alignof(AGymSplinePlacer) == 0x000008, "Wrong alignment on AGymSplinePlacer");
static_assert(sizeof(AGymSplinePlacer) == 0x000330, "Wrong size on AGymSplinePlacer");
static_assert(offsetof(AGymSplinePlacer, CurrentPlacer) == 0x000298, "Member 'AGymSplinePlacer::CurrentPlacer' has a wrong offset!");
static_assert(offsetof(AGymSplinePlacer, PreviewAsset) == 0x0002A0, "Member 'AGymSplinePlacer::PreviewAsset' has a wrong offset!");
static_assert(offsetof(AGymSplinePlacer, AssetType) == 0x0002B0, "Member 'AGymSplinePlacer::AssetType' has a wrong offset!");
static_assert(offsetof(AGymSplinePlacer, PreviewAssetType) == 0x0002B8, "Member 'AGymSplinePlacer::PreviewAssetType' has a wrong offset!");
static_assert(offsetof(AGymSplinePlacer, AutoUpdateOnChange) == 0x0002C0, "Member 'AGymSplinePlacer::AutoUpdateOnChange' has a wrong offset!");
static_assert(offsetof(AGymSplinePlacer, CustomPlacedSpline) == 0x0002C1, "Member 'AGymSplinePlacer::CustomPlacedSpline' has a wrong offset!");
static_assert(offsetof(AGymSplinePlacer, ExtendMultiplier) == 0x0002C4, "Member 'AGymSplinePlacer::ExtendMultiplier' has a wrong offset!");
static_assert(offsetof(AGymSplinePlacer, SplineComponent) == 0x0002C8, "Member 'AGymSplinePlacer::SplineComponent' has a wrong offset!");
static_assert(offsetof(AGymSplinePlacer, Spawned) == 0x0002D0, "Member 'AGymSplinePlacer::Spawned' has a wrong offset!");
static_assert(offsetof(AGymSplinePlacer, PreviewSpawned) == 0x0002E0, "Member 'AGymSplinePlacer::PreviewSpawned' has a wrong offset!");
static_assert(offsetof(AGymSplinePlacer, Placeables) == 0x0002F0, "Member 'AGymSplinePlacer::Placeables' has a wrong offset!");
static_assert(offsetof(AGymSplinePlacer, bUseAssetRotation) == 0x000320, "Member 'AGymSplinePlacer::bUseAssetRotation' has a wrong offset!");
static_assert(offsetof(AGymSplinePlacer, MaxSlopeAngle) == 0x000324, "Member 'AGymSplinePlacer::MaxSlopeAngle' has a wrong offset!");
static_assert(offsetof(AGymSplinePlacer, MaxHorizontalTurnRate) == 0x000328, "Member 'AGymSplinePlacer::MaxHorizontalTurnRate' has a wrong offset!");
static_assert(offsetof(AGymSplinePlacer, AngleCheckSegmentLength) == 0x00032C, "Member 'AGymSplinePlacer::AngleCheckSegmentLength' has a wrong offset!");

// Class GYMGAME.GymFinishlineSplinePlacer
// 0x0080 (0x03B0 - 0x0330)
class AGymFinishlineSplinePlacer final : public AGymSplinePlacer
{
public:
	float                                         ShortDistance;                                     // 0x0330(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LongDistance;                                      // 0x0334(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AGymStaticLevelAsset>       AssetShortType;                                    // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AGymStaticLevelAsset>       PillarFillerType;                                  // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AGymStaticLevelAsset>       PreviewPillarType;                                 // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AGymFinishlineBanner>       FinishLineBannerType;                              // 0x0350(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_358[0x18];                                     // 0x0358(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class AGymFinishlineBanner*                   FinishLineBanner;                                  // 0x0370(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AGymFinishlinePlaceable*                EndPointPreview;                                   // 0x0378(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class AGymStaticLevelAsset*>           LongPreviewSpawnedArray;                           // 0x0380(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class AGymStaticLevelAsset*>           ShortPreviewSpawnedArray;                          // 0x0390(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class AGymStaticLevelAsset*>           PreviewPillarsFillers;                             // 0x03A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymFinishlineSplinePlacer">();
	}
	static class AGymFinishlineSplinePlacer* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymFinishlineSplinePlacer>();
	}
};
static_assert(alignof(AGymFinishlineSplinePlacer) == 0x000008, "Wrong alignment on AGymFinishlineSplinePlacer");
static_assert(sizeof(AGymFinishlineSplinePlacer) == 0x0003B0, "Wrong size on AGymFinishlineSplinePlacer");
static_assert(offsetof(AGymFinishlineSplinePlacer, ShortDistance) == 0x000330, "Member 'AGymFinishlineSplinePlacer::ShortDistance' has a wrong offset!");
static_assert(offsetof(AGymFinishlineSplinePlacer, LongDistance) == 0x000334, "Member 'AGymFinishlineSplinePlacer::LongDistance' has a wrong offset!");
static_assert(offsetof(AGymFinishlineSplinePlacer, AssetShortType) == 0x000338, "Member 'AGymFinishlineSplinePlacer::AssetShortType' has a wrong offset!");
static_assert(offsetof(AGymFinishlineSplinePlacer, PillarFillerType) == 0x000340, "Member 'AGymFinishlineSplinePlacer::PillarFillerType' has a wrong offset!");
static_assert(offsetof(AGymFinishlineSplinePlacer, PreviewPillarType) == 0x000348, "Member 'AGymFinishlineSplinePlacer::PreviewPillarType' has a wrong offset!");
static_assert(offsetof(AGymFinishlineSplinePlacer, FinishLineBannerType) == 0x000350, "Member 'AGymFinishlineSplinePlacer::FinishLineBannerType' has a wrong offset!");
static_assert(offsetof(AGymFinishlineSplinePlacer, FinishLineBanner) == 0x000370, "Member 'AGymFinishlineSplinePlacer::FinishLineBanner' has a wrong offset!");
static_assert(offsetof(AGymFinishlineSplinePlacer, EndPointPreview) == 0x000378, "Member 'AGymFinishlineSplinePlacer::EndPointPreview' has a wrong offset!");
static_assert(offsetof(AGymFinishlineSplinePlacer, LongPreviewSpawnedArray) == 0x000380, "Member 'AGymFinishlineSplinePlacer::LongPreviewSpawnedArray' has a wrong offset!");
static_assert(offsetof(AGymFinishlineSplinePlacer, ShortPreviewSpawnedArray) == 0x000390, "Member 'AGymFinishlineSplinePlacer::ShortPreviewSpawnedArray' has a wrong offset!");
static_assert(offsetof(AGymFinishlineSplinePlacer, PreviewPillarsFillers) == 0x0003A0, "Member 'AGymFinishlineSplinePlacer::PreviewPillarsFillers' has a wrong offset!");

// Class GYMGAME.ExtendableBackgroundCell
// 0x0018 (0x02B0 - 0x0298)
class AExtendableBackgroundCell final : public AActor
{
public:
	uint8                                         Pad_298[0x1];                                      // 0x0298(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          Claimed;                                           // 0x0299(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_29A[0x2];                                      // 0x029A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HalfSize;                                          // 0x029C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SkyboxActorTag;                                    // 0x02A0(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BuildableFloorTag;                                 // 0x02A8(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void CheckStartClaimed();
	void OnClaimedChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ExtendableBackgroundCell">();
	}
	static class AExtendableBackgroundCell* GetDefaultObj()
	{
		return GetDefaultObjImpl<AExtendableBackgroundCell>();
	}
};
static_assert(alignof(AExtendableBackgroundCell) == 0x000008, "Wrong alignment on AExtendableBackgroundCell");
static_assert(sizeof(AExtendableBackgroundCell) == 0x0002B0, "Wrong size on AExtendableBackgroundCell");
static_assert(offsetof(AExtendableBackgroundCell, Claimed) == 0x000299, "Member 'AExtendableBackgroundCell::Claimed' has a wrong offset!");
static_assert(offsetof(AExtendableBackgroundCell, HalfSize) == 0x00029C, "Member 'AExtendableBackgroundCell::HalfSize' has a wrong offset!");
static_assert(offsetof(AExtendableBackgroundCell, SkyboxActorTag) == 0x0002A0, "Member 'AExtendableBackgroundCell::SkyboxActorTag' has a wrong offset!");
static_assert(offsetof(AExtendableBackgroundCell, BuildableFloorTag) == 0x0002A8, "Member 'AExtendableBackgroundCell::BuildableFloorTag' has a wrong offset!");

// Class GYMGAME.Gym3DWidgetComponent
// 0x0040 (0x0730 - 0x06F0)
class UGym3DWidgetComponent final : public UWidgetComponent
{
public:
	class UUserWidget*                            UsingWidget;                                       // 0x06F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UCommonActionWidget*>            CommonUIActionWidgets;                             // 0x06F8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FColor                                 ColorMask;                                         // 0x0708(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LookAtLocalPlayer;                                 // 0x070C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideMinMaxVisibilityRange;                     // 0x070D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseMinMaxVisibilityRange;                          // 0x070E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_70F[0x1];                                      // 0x070F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinVisibilityRange;                                // 0x0710(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxVisibilityRange;                                // 0x0714(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideFadeSpeed;                                 // 0x0718(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_719[0x3];                                      // 0x0719(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeSpeed;                                         // 0x071C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseOverrideCommonUIIconRenderScale;                // 0x0720(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_721[0x3];                                      // 0x0721(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideCommonUIIconRenderScale;                   // 0x0724(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_728[0x8];                                      // 0x0728(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Gym3DWidgetComponent">();
	}
	static class UGym3DWidgetComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGym3DWidgetComponent>();
	}
};
static_assert(alignof(UGym3DWidgetComponent) == 0x000010, "Wrong alignment on UGym3DWidgetComponent");
static_assert(sizeof(UGym3DWidgetComponent) == 0x000730, "Wrong size on UGym3DWidgetComponent");
static_assert(offsetof(UGym3DWidgetComponent, UsingWidget) == 0x0006F0, "Member 'UGym3DWidgetComponent::UsingWidget' has a wrong offset!");
static_assert(offsetof(UGym3DWidgetComponent, CommonUIActionWidgets) == 0x0006F8, "Member 'UGym3DWidgetComponent::CommonUIActionWidgets' has a wrong offset!");
static_assert(offsetof(UGym3DWidgetComponent, ColorMask) == 0x000708, "Member 'UGym3DWidgetComponent::ColorMask' has a wrong offset!");
static_assert(offsetof(UGym3DWidgetComponent, LookAtLocalPlayer) == 0x00070C, "Member 'UGym3DWidgetComponent::LookAtLocalPlayer' has a wrong offset!");
static_assert(offsetof(UGym3DWidgetComponent, OverrideMinMaxVisibilityRange) == 0x00070D, "Member 'UGym3DWidgetComponent::OverrideMinMaxVisibilityRange' has a wrong offset!");
static_assert(offsetof(UGym3DWidgetComponent, UseMinMaxVisibilityRange) == 0x00070E, "Member 'UGym3DWidgetComponent::UseMinMaxVisibilityRange' has a wrong offset!");
static_assert(offsetof(UGym3DWidgetComponent, MinVisibilityRange) == 0x000710, "Member 'UGym3DWidgetComponent::MinVisibilityRange' has a wrong offset!");
static_assert(offsetof(UGym3DWidgetComponent, MaxVisibilityRange) == 0x000714, "Member 'UGym3DWidgetComponent::MaxVisibilityRange' has a wrong offset!");
static_assert(offsetof(UGym3DWidgetComponent, OverrideFadeSpeed) == 0x000718, "Member 'UGym3DWidgetComponent::OverrideFadeSpeed' has a wrong offset!");
static_assert(offsetof(UGym3DWidgetComponent, FadeSpeed) == 0x00071C, "Member 'UGym3DWidgetComponent::FadeSpeed' has a wrong offset!");
static_assert(offsetof(UGym3DWidgetComponent, UseOverrideCommonUIIconRenderScale) == 0x000720, "Member 'UGym3DWidgetComponent::UseOverrideCommonUIIconRenderScale' has a wrong offset!");
static_assert(offsetof(UGym3DWidgetComponent, OverrideCommonUIIconRenderScale) == 0x000724, "Member 'UGym3DWidgetComponent::OverrideCommonUIIconRenderScale' has a wrong offset!");

// Class GYMGAME.GymGlobalMetaControl
// 0x0008 (0x00A8 - 0x00A0)
class UGymGlobalMetaControl : public UActorComponent
{
public:
	class AGymPlayerController*                   Master;                                            // 0x00A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGlobalMetaControl">();
	}
	static class UGymGlobalMetaControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGlobalMetaControl>();
	}
};
static_assert(alignof(UGymGlobalMetaControl) == 0x000008, "Wrong alignment on UGymGlobalMetaControl");
static_assert(sizeof(UGymGlobalMetaControl) == 0x0000A8, "Wrong size on UGymGlobalMetaControl");
static_assert(offsetof(UGymGlobalMetaControl, Master) == 0x0000A0, "Member 'UGymGlobalMetaControl::Master' has a wrong offset!");

// Class GYMGAME.GymGlobalActionControl
// 0x00D8 (0x0180 - 0x00A8)
class UGymGlobalActionControl final : public UGymGlobalMetaControl
{
public:
	TArray<class UGymMetaAction*>                 AllActions;                                        // 0x00A8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<struct FGymActionContainer>            ActionPages;                                       // 0x00B8(0x0010)(ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UGymToggleCameraAction*                 ToggleCameraAction;                                // 0x00C8(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymTogglePhotoModeAction*              TogglePhotomodeAction;                             // 0x00D0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymMarkLocationAction*                 MarkLocationAction;                                // 0x00D8(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymRespawnAction*                      RespawnAction;                                     // 0x00E0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymEndMatchAction*                     EndMatchAction;                                    // 0x00E8(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymStartMatchAction*                   StartMatchAction;                                  // 0x00F0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymVoteAction*                         VoteAction;                                        // 0x00F8(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymCancelVoteAction*                   CancelVoteAction;                                  // 0x0100(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymAddFlagAction*                      AddFlagAction;                                     // 0x0108(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymGiveUpAction*                       GiveUpAction;                                      // 0x0110(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymTauntAction*                        TauntAction1;                                      // 0x0118(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymTauntAction*                        TauntAction2;                                      // 0x0120(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymTauntAction*                        TauntAction3;                                      // 0x0128(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymTauntAction*                        TauntAction4;                                      // 0x0130(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymTauntAction*                        TauntAction5;                                      // 0x0138(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymTauntAction*                        TauntAction6;                                      // 0x0140(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymTauntAction*                        TauntAction7;                                      // 0x0148(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymTauntAction*                        TauntAction8;                                      // 0x0150(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymTauntAction*                        TauntAction9;                                      // 0x0158(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymSprayAction*                        SprayAction1;                                      // 0x0160(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymSprayAction*                        SprayAction2;                                      // 0x0168(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymSprayAction*                        SprayAction3;                                      // 0x0170(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymSprayAction*                        SprayAction4;                                      // 0x0178(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	const TArray<class UGymMetaAction*> GetActionsFromPage(int32 Page);
	const TArray<class UGymMetaAction*> GetAllActions();
	bool GetPageData(int32 Page, struct FGymActionContainer* OutActionData);
	int32 GetPageNum();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGlobalActionControl">();
	}
	static class UGymGlobalActionControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGlobalActionControl>();
	}
};
static_assert(alignof(UGymGlobalActionControl) == 0x000008, "Wrong alignment on UGymGlobalActionControl");
static_assert(sizeof(UGymGlobalActionControl) == 0x000180, "Wrong size on UGymGlobalActionControl");
static_assert(offsetof(UGymGlobalActionControl, AllActions) == 0x0000A8, "Member 'UGymGlobalActionControl::AllActions' has a wrong offset!");
static_assert(offsetof(UGymGlobalActionControl, ActionPages) == 0x0000B8, "Member 'UGymGlobalActionControl::ActionPages' has a wrong offset!");
static_assert(offsetof(UGymGlobalActionControl, ToggleCameraAction) == 0x0000C8, "Member 'UGymGlobalActionControl::ToggleCameraAction' has a wrong offset!");
static_assert(offsetof(UGymGlobalActionControl, TogglePhotomodeAction) == 0x0000D0, "Member 'UGymGlobalActionControl::TogglePhotomodeAction' has a wrong offset!");
static_assert(offsetof(UGymGlobalActionControl, MarkLocationAction) == 0x0000D8, "Member 'UGymGlobalActionControl::MarkLocationAction' has a wrong offset!");
static_assert(offsetof(UGymGlobalActionControl, RespawnAction) == 0x0000E0, "Member 'UGymGlobalActionControl::RespawnAction' has a wrong offset!");
static_assert(offsetof(UGymGlobalActionControl, EndMatchAction) == 0x0000E8, "Member 'UGymGlobalActionControl::EndMatchAction' has a wrong offset!");
static_assert(offsetof(UGymGlobalActionControl, StartMatchAction) == 0x0000F0, "Member 'UGymGlobalActionControl::StartMatchAction' has a wrong offset!");
static_assert(offsetof(UGymGlobalActionControl, VoteAction) == 0x0000F8, "Member 'UGymGlobalActionControl::VoteAction' has a wrong offset!");
static_assert(offsetof(UGymGlobalActionControl, CancelVoteAction) == 0x000100, "Member 'UGymGlobalActionControl::CancelVoteAction' has a wrong offset!");
static_assert(offsetof(UGymGlobalActionControl, AddFlagAction) == 0x000108, "Member 'UGymGlobalActionControl::AddFlagAction' has a wrong offset!");
static_assert(offsetof(UGymGlobalActionControl, GiveUpAction) == 0x000110, "Member 'UGymGlobalActionControl::GiveUpAction' has a wrong offset!");
static_assert(offsetof(UGymGlobalActionControl, TauntAction1) == 0x000118, "Member 'UGymGlobalActionControl::TauntAction1' has a wrong offset!");
static_assert(offsetof(UGymGlobalActionControl, TauntAction2) == 0x000120, "Member 'UGymGlobalActionControl::TauntAction2' has a wrong offset!");
static_assert(offsetof(UGymGlobalActionControl, TauntAction3) == 0x000128, "Member 'UGymGlobalActionControl::TauntAction3' has a wrong offset!");
static_assert(offsetof(UGymGlobalActionControl, TauntAction4) == 0x000130, "Member 'UGymGlobalActionControl::TauntAction4' has a wrong offset!");
static_assert(offsetof(UGymGlobalActionControl, TauntAction5) == 0x000138, "Member 'UGymGlobalActionControl::TauntAction5' has a wrong offset!");
static_assert(offsetof(UGymGlobalActionControl, TauntAction6) == 0x000140, "Member 'UGymGlobalActionControl::TauntAction6' has a wrong offset!");
static_assert(offsetof(UGymGlobalActionControl, TauntAction7) == 0x000148, "Member 'UGymGlobalActionControl::TauntAction7' has a wrong offset!");
static_assert(offsetof(UGymGlobalActionControl, TauntAction8) == 0x000150, "Member 'UGymGlobalActionControl::TauntAction8' has a wrong offset!");
static_assert(offsetof(UGymGlobalActionControl, TauntAction9) == 0x000158, "Member 'UGymGlobalActionControl::TauntAction9' has a wrong offset!");
static_assert(offsetof(UGymGlobalActionControl, SprayAction1) == 0x000160, "Member 'UGymGlobalActionControl::SprayAction1' has a wrong offset!");
static_assert(offsetof(UGymGlobalActionControl, SprayAction2) == 0x000168, "Member 'UGymGlobalActionControl::SprayAction2' has a wrong offset!");
static_assert(offsetof(UGymGlobalActionControl, SprayAction3) == 0x000170, "Member 'UGymGlobalActionControl::SprayAction3' has a wrong offset!");
static_assert(offsetof(UGymGlobalActionControl, SprayAction4) == 0x000178, "Member 'UGymGlobalActionControl::SprayAction4' has a wrong offset!");

// Class GYMGAME.GymAchievements
// 0x0040 (0x0068 - 0x0028)
class UGymAchievements final : public UObject
{
public:
	uint8                                         Pad_28[0x40];                                      // 0x0028(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DEBUG_ResetAchievements();
	bool SetAchievementWithEnum(EGymAchievement Achievement);
	bool SetAchievementWithString(const class FString& AchievementID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymAchievements">();
	}
	static class UGymAchievements* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymAchievements>();
	}
};
static_assert(alignof(UGymAchievements) == 0x000008, "Wrong alignment on UGymAchievements");
static_assert(sizeof(UGymAchievements) == 0x000068, "Wrong size on UGymAchievements");

// Class GYMGAME.GymActionInputWidget
// 0x0008 (0x02C8 - 0x02C0)
class UGymActionInputWidget : public UUserWidget
{
public:
	class UCommonActionWidget*                    ActionWidget;                                      // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetInput(class FName Input);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymActionInputWidget">();
	}
	static class UGymActionInputWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymActionInputWidget>();
	}
};
static_assert(alignof(UGymActionInputWidget) == 0x000008, "Wrong alignment on UGymActionInputWidget");
static_assert(sizeof(UGymActionInputWidget) == 0x0002C8, "Wrong size on UGymActionInputWidget");
static_assert(offsetof(UGymActionInputWidget, ActionWidget) == 0x0002C0, "Member 'UGymActionInputWidget::ActionWidget' has a wrong offset!");

// Class GYMGAME.GymGlobalTickerEventControl
// 0x0008 (0x00B0 - 0x00A8)
class UGymGlobalTickerEventControl final : public UGymGlobalMetaControl
{
public:
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Client_AddCustomMessage(TSubclassOf<class UGymGuiTickerMessageWidget> Message, ETickerPosition Position);
	void Client_AddMessage(const struct FTickerSettingsStruct& Settings);
	void Client_RemoveMessage(class FName MessageId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGlobalTickerEventControl">();
	}
	static class UGymGlobalTickerEventControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGlobalTickerEventControl>();
	}
};
static_assert(alignof(UGymGlobalTickerEventControl) == 0x000008, "Wrong alignment on UGymGlobalTickerEventControl");
static_assert(sizeof(UGymGlobalTickerEventControl) == 0x0000B0, "Wrong size on UGymGlobalTickerEventControl");

// Class GYMGAME.GymMetaAction
// 0x0018 (0x00B8 - 0x00A0)
class UGymMetaAction : public UActorComponent
{
public:
	class UGymGlobalActionControl*                Control;                                           // 0x00A0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ActionIcon;                                        // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	bool CanPerform();
	class FText GetActionName();
	void PerformAction();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymMetaAction">();
	}
	static class UGymMetaAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymMetaAction>();
	}
};
static_assert(alignof(UGymMetaAction) == 0x000008, "Wrong alignment on UGymMetaAction");
static_assert(sizeof(UGymMetaAction) == 0x0000B8, "Wrong size on UGymMetaAction");
static_assert(offsetof(UGymMetaAction, Control) == 0x0000A0, "Member 'UGymMetaAction::Control' has a wrong offset!");
static_assert(offsetof(UGymMetaAction, ActionIcon) == 0x0000B0, "Member 'UGymMetaAction::ActionIcon' has a wrong offset!");

// Class GYMGAME.GymAddFlagAction
// 0x0000 (0x00B8 - 0x00B8)
class UGymAddFlagAction final : public UGymMetaAction
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymAddFlagAction">();
	}
	static class UGymAddFlagAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymAddFlagAction>();
	}
};
static_assert(alignof(UGymAddFlagAction) == 0x000008, "Wrong alignment on UGymAddFlagAction");
static_assert(sizeof(UGymAddFlagAction) == 0x0000B8, "Wrong size on UGymAddFlagAction");

// Class GYMGAME.GymGlobalChatControl
// 0x0000 (0x00A8 - 0x00A8)
class UGymGlobalChatControl final : public UGymGlobalMetaControl
{
public:
	void Client_ReceiveMessage(const class FString& PlayerName, const class FString& Message);
	void Server_SendMessage(const class FString& PlayerName, const class FString& Message);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGlobalChatControl">();
	}
	static class UGymGlobalChatControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGlobalChatControl>();
	}
};
static_assert(alignof(UGymGlobalChatControl) == 0x000008, "Wrong alignment on UGymGlobalChatControl");
static_assert(sizeof(UGymGlobalChatControl) == 0x0000A8, "Wrong size on UGymGlobalChatControl");

// Class GYMGAME.GymAIController
// 0x0048 (0x0408 - 0x03C0)
class AGymAIController final : public AAIController
{
public:
	class FString                                 GymId;                                             // 0x03C0(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x03D0(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Difficulty;                                        // 0x03E0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E4[0x24];                                     // 0x03E4(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FinishParticipant();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymAIController">();
	}
	static class AGymAIController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymAIController>();
	}
};
static_assert(alignof(AGymAIController) == 0x000008, "Wrong alignment on AGymAIController");
static_assert(sizeof(AGymAIController) == 0x000408, "Wrong size on AGymAIController");
static_assert(offsetof(AGymAIController, GymId) == 0x0003C0, "Member 'AGymAIController::GymId' has a wrong offset!");
static_assert(offsetof(AGymAIController, MapName) == 0x0003D0, "Member 'AGymAIController::MapName' has a wrong offset!");
static_assert(offsetof(AGymAIController, Difficulty) == 0x0003E0, "Member 'AGymAIController::Difficulty' has a wrong offset!");

// Class GYMGAME.GymMetaAnimator
// 0x0008 (0x00A8 - 0x00A0)
class UGymMetaAnimator : public UActorComponent
{
public:
	class UGymAnimationControl*                   Control;                                           // 0x00A0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymMetaAnimator">();
	}
	static class UGymMetaAnimator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymMetaAnimator>();
	}
};
static_assert(alignof(UGymMetaAnimator) == 0x000008, "Wrong alignment on UGymMetaAnimator");
static_assert(sizeof(UGymMetaAnimator) == 0x0000A8, "Wrong size on UGymMetaAnimator");
static_assert(offsetof(UGymMetaAnimator, Control) == 0x0000A0, "Member 'UGymMetaAnimator::Control' has a wrong offset!");

// Class GYMGAME.GymGiveUpAction
// 0x0000 (0x00B8 - 0x00B8)
class UGymGiveUpAction final : public UGymMetaAction
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGiveUpAction">();
	}
	static class UGymGiveUpAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGiveUpAction>();
	}
};
static_assert(alignof(UGymGiveUpAction) == 0x000008, "Wrong alignment on UGymGiveUpAction");
static_assert(sizeof(UGymGiveUpAction) == 0x0000B8, "Wrong size on UGymGiveUpAction");

// Class GYMGAME.GymAimIKAnimator
// 0x0000 (0x00A8 - 0x00A8)
class UGymAimIKAnimator final : public UGymMetaAnimator
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymAimIKAnimator">();
	}
	static class UGymAimIKAnimator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymAimIKAnimator>();
	}
};
static_assert(alignof(UGymAimIKAnimator) == 0x000008, "Wrong alignment on UGymAimIKAnimator");
static_assert(sizeof(UGymAimIKAnimator) == 0x0000A8, "Wrong size on UGymAimIKAnimator");

// Class GYMGAME.GymAIRunData
// 0x0040 (0x0070 - 0x0030)
class UGymAIRunData final : public UPrimaryDataAsset
{
public:
	class FString                                 MapName;                                           // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocationID;                                        // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Difficulty;                                        // 0x0044(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RunFileName;                                       // 0x0048(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinishTime;                                        // 0x0058(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFinished;                                         // 0x005C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CompletionPercent;                                 // 0x0060(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastReachedTime;                                   // 0x0064(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEliminationReason                            EliminationReason;                                 // 0x0068(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymAIRunData">();
	}
	static class UGymAIRunData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymAIRunData>();
	}
};
static_assert(alignof(UGymAIRunData) == 0x000008, "Wrong alignment on UGymAIRunData");
static_assert(sizeof(UGymAIRunData) == 0x000070, "Wrong size on UGymAIRunData");
static_assert(offsetof(UGymAIRunData, MapName) == 0x000030, "Member 'UGymAIRunData::MapName' has a wrong offset!");
static_assert(offsetof(UGymAIRunData, LocationID) == 0x000040, "Member 'UGymAIRunData::LocationID' has a wrong offset!");
static_assert(offsetof(UGymAIRunData, Difficulty) == 0x000044, "Member 'UGymAIRunData::Difficulty' has a wrong offset!");
static_assert(offsetof(UGymAIRunData, RunFileName) == 0x000048, "Member 'UGymAIRunData::RunFileName' has a wrong offset!");
static_assert(offsetof(UGymAIRunData, FinishTime) == 0x000058, "Member 'UGymAIRunData::FinishTime' has a wrong offset!");
static_assert(offsetof(UGymAIRunData, bFinished) == 0x00005C, "Member 'UGymAIRunData::bFinished' has a wrong offset!");
static_assert(offsetof(UGymAIRunData, CompletionPercent) == 0x000060, "Member 'UGymAIRunData::CompletionPercent' has a wrong offset!");
static_assert(offsetof(UGymAIRunData, LastReachedTime) == 0x000064, "Member 'UGymAIRunData::LastReachedTime' has a wrong offset!");
static_assert(offsetof(UGymAIRunData, EliminationReason) == 0x000068, "Member 'UGymAIRunData::EliminationReason' has a wrong offset!");

// Class GYMGAME.GymCharacterMetaControl
// 0x0018 (0x00B8 - 0x00A0)
class UGymCharacterMetaControl : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AGymCharacter*                          Master;                                            // 0x00A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0x8];                                       // 0x00B0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCharacterMetaControl">();
	}
	static class UGymCharacterMetaControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCharacterMetaControl>();
	}
};
static_assert(alignof(UGymCharacterMetaControl) == 0x000008, "Wrong alignment on UGymCharacterMetaControl");
static_assert(sizeof(UGymCharacterMetaControl) == 0x0000B8, "Wrong size on UGymCharacterMetaControl");
static_assert(offsetof(UGymCharacterMetaControl, Master) == 0x0000A8, "Member 'UGymCharacterMetaControl::Master' has a wrong offset!");

// Class GYMGAME.GymAnimationControl
// 0x0480 (0x0538 - 0x00B8)
class UGymAnimationControl final : public UGymCharacterMetaControl
{
public:
	uint8                                         Pad_B8[0x30];                                      // 0x00B8(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     OverlayMaterial;                                   // 0x00E8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymPivot*                              HandsPivot;                                        // 0x00F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HandsPivotBaseRelativeLocation;                    // 0x00F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 BaseSkeletalMesh;                                  // 0x0110(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 TPAnimRoot;                                        // 0x0118(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 FPAnimRoot;                                        // 0x0120(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HandsBaseRelativeScale;                            // 0x0128(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCharacterPartMeshGroupBindingPtr      FPCHands;                                          // 0x0140(0x0078)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FCharacterPartMeshGroupBindingPtr      FPCHandsKinematic;                                 // 0x01B8(0x0078)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FCharacterPartMeshGroupBindingPtr      FPCBody;                                           // 0x0230(0x0078)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FCharacterPartMeshGroupBindingPtr      FPCLegs;                                           // 0x02A8(0x0078)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FCharacterPartMeshGroupBindingPtr      TPCBase;                                           // 0x0320(0x0078)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     CachedHoodMaterialInstance;                        // 0x0398(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USkeletalMeshComponent*>         FpcParts;                                          // 0x03A0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UNiagaraComponent*>              FPCEffects;                                        // 0x03B0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FGymCustomizationMesh>          CustomizationMeshes;                               // 0x03C0(0x0010)(ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class USkeletalMeshComponent*>         TpcParts;                                          // 0x03D0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UNiagaraComponent*>              TPCEffects;                                        // 0x03E0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F0[0x30];                                     // 0x03F0(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymUtilityAnimator*                    UtilAnimator;                                      // 0x0420(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymSwimmingAnimator*                   SwimmingAnimator;                                  // 0x0428(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymBasicAnimator*                      BasicAnimator;                                     // 0x0430(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymFootIKAnimator*                     FootIKAnimator;                                    // 0x0438(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymAimIKAnimator*                      AimIKAnimator;                                     // 0x0440(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymHandsIKAnimator*                    HandsIKAnimator;                                   // 0x0448(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymRollingAnimator*                    RollingAnimator;                                   // 0x0450(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymSlidingAnimator*                    SlidingAnimator;                                   // 0x0458(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymVaultingEngineAnimator*             VaultingEngineAnimator;                            // 0x0460(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymWallScrambleAnimator*               WallScrambleWAnimator;                             // 0x0468(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymSidewaysWRAnimator*                 SidewaysWRAnimator;                                // 0x0470(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymGrindingAnimator*                   GrindingAnimator;                                  // 0x0478(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymWireWalkingAnimator*                WireWalkingAnimator;                               // 0x0480(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymZiplineAnimator*                    ZiplineAnimator;                                   // 0x0488(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymIdleAnimator*                       IdleAnimator;                                      // 0x0490(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymTauntAnimator*                      TauntAnimator;                                     // 0x0498(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A0[0x30];                                     // 0x04A0(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGymMetaAnimator*>               Animators;                                         // 0x04D0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class USkeletalMeshComponent*>         Meshes;                                            // 0x04E0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4F0[0x48];                                     // 0x04F0(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetHandsHidden();
	void SetFirstPersonBody(bool Force);
	void SetFPHideAllArms(bool State);
	void SetFPHideLegs(bool State);
	void SetFPHideTorso(bool State);
	void SetInvisible();
	void SetOverlayMaterial(class UMaterialInterface* Material);
	void SetThirdPersonBody(bool Force);

	class UGymUtilityAnimator* GetUtilAnimator() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymAnimationControl">();
	}
	static class UGymAnimationControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymAnimationControl>();
	}
};
static_assert(alignof(UGymAnimationControl) == 0x000008, "Wrong alignment on UGymAnimationControl");
static_assert(sizeof(UGymAnimationControl) == 0x000538, "Wrong size on UGymAnimationControl");
static_assert(offsetof(UGymAnimationControl, OverlayMaterial) == 0x0000E8, "Member 'UGymAnimationControl::OverlayMaterial' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, HandsPivot) == 0x0000F0, "Member 'UGymAnimationControl::HandsPivot' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, HandsPivotBaseRelativeLocation) == 0x0000F8, "Member 'UGymAnimationControl::HandsPivotBaseRelativeLocation' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, BaseSkeletalMesh) == 0x000110, "Member 'UGymAnimationControl::BaseSkeletalMesh' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, TPAnimRoot) == 0x000118, "Member 'UGymAnimationControl::TPAnimRoot' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, FPAnimRoot) == 0x000120, "Member 'UGymAnimationControl::FPAnimRoot' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, HandsBaseRelativeScale) == 0x000128, "Member 'UGymAnimationControl::HandsBaseRelativeScale' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, FPCHands) == 0x000140, "Member 'UGymAnimationControl::FPCHands' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, FPCHandsKinematic) == 0x0001B8, "Member 'UGymAnimationControl::FPCHandsKinematic' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, FPCBody) == 0x000230, "Member 'UGymAnimationControl::FPCBody' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, FPCLegs) == 0x0002A8, "Member 'UGymAnimationControl::FPCLegs' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, TPCBase) == 0x000320, "Member 'UGymAnimationControl::TPCBase' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, CachedHoodMaterialInstance) == 0x000398, "Member 'UGymAnimationControl::CachedHoodMaterialInstance' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, FpcParts) == 0x0003A0, "Member 'UGymAnimationControl::FpcParts' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, FPCEffects) == 0x0003B0, "Member 'UGymAnimationControl::FPCEffects' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, CustomizationMeshes) == 0x0003C0, "Member 'UGymAnimationControl::CustomizationMeshes' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, TpcParts) == 0x0003D0, "Member 'UGymAnimationControl::TpcParts' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, TPCEffects) == 0x0003E0, "Member 'UGymAnimationControl::TPCEffects' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, UtilAnimator) == 0x000420, "Member 'UGymAnimationControl::UtilAnimator' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, SwimmingAnimator) == 0x000428, "Member 'UGymAnimationControl::SwimmingAnimator' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, BasicAnimator) == 0x000430, "Member 'UGymAnimationControl::BasicAnimator' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, FootIKAnimator) == 0x000438, "Member 'UGymAnimationControl::FootIKAnimator' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, AimIKAnimator) == 0x000440, "Member 'UGymAnimationControl::AimIKAnimator' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, HandsIKAnimator) == 0x000448, "Member 'UGymAnimationControl::HandsIKAnimator' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, RollingAnimator) == 0x000450, "Member 'UGymAnimationControl::RollingAnimator' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, SlidingAnimator) == 0x000458, "Member 'UGymAnimationControl::SlidingAnimator' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, VaultingEngineAnimator) == 0x000460, "Member 'UGymAnimationControl::VaultingEngineAnimator' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, WallScrambleWAnimator) == 0x000468, "Member 'UGymAnimationControl::WallScrambleWAnimator' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, SidewaysWRAnimator) == 0x000470, "Member 'UGymAnimationControl::SidewaysWRAnimator' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, GrindingAnimator) == 0x000478, "Member 'UGymAnimationControl::GrindingAnimator' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, WireWalkingAnimator) == 0x000480, "Member 'UGymAnimationControl::WireWalkingAnimator' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, ZiplineAnimator) == 0x000488, "Member 'UGymAnimationControl::ZiplineAnimator' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, IdleAnimator) == 0x000490, "Member 'UGymAnimationControl::IdleAnimator' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, TauntAnimator) == 0x000498, "Member 'UGymAnimationControl::TauntAnimator' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, Animators) == 0x0004D0, "Member 'UGymAnimationControl::Animators' has a wrong offset!");
static_assert(offsetof(UGymAnimationControl, Meshes) == 0x0004E0, "Member 'UGymAnimationControl::Meshes' has a wrong offset!");

// Class GYMGAME.GymGuiMetaWidget
// 0x0070 (0x0330 - 0x02C0)
class UGymGuiMetaWidget : public UUserWidget
{
public:
	uint8                                         Pad_2C0[0x8];                                      // 0x02C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CurrentHighlightedWidget;                          // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   Title;                                             // 0x02D0(0x0018)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	float                                         NavigationThresholdMultiplier;                     // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          AdminOnly;                                         // 0x02EC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2ED[0x23];                                     // 0x02ED(0x0023)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymGuiMetaWidget*                      ParentWidget;                                      // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         InputPriority;                                     // 0x0318(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ScrollBoxNavigationBlockTime;                      // 0x031C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_320[0x4];                                      // 0x0320(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIgnoreControlHideAll;                             // 0x0324(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_325[0x3];                                      // 0x0325(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NavigationDotThreshold;                            // 0x0328(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BPClose();
	void BPHighlightWidget(class UWidget* Widget);
	void BPOpen();
	void Close();
	bool DoesAnotherWidgetHavePriority();
	bool FakeClickHighlightedTextFieldGamepad();
	void GamepadUIInteract();
	bool GamepadUINavigate(const EUINavDirection Direction, const TArray<class UWidget*>& Widgets);
	int32 GetInputPriority();
	void HighlightWidget(class UWidget* Widget, EUIHoverRequirement HoverRequirement);
	bool IsOpenVisibleAndHasPriority();
	bool IsWidgetVisible(class UWidget* Widget);
	void Open();
	void SetInputPriority(int32 NewPriority);
	void SimulateGamepadUINavigate(const EUINavDirection Direction, const TArray<class UWidget*>& Widgets, class UWidget** NextWidget);

	bool IsOpen() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiMetaWidget">();
	}
	static class UGymGuiMetaWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiMetaWidget>();
	}
};
static_assert(alignof(UGymGuiMetaWidget) == 0x000008, "Wrong alignment on UGymGuiMetaWidget");
static_assert(sizeof(UGymGuiMetaWidget) == 0x000330, "Wrong size on UGymGuiMetaWidget");
static_assert(offsetof(UGymGuiMetaWidget, CurrentHighlightedWidget) == 0x0002C8, "Member 'UGymGuiMetaWidget::CurrentHighlightedWidget' has a wrong offset!");
static_assert(offsetof(UGymGuiMetaWidget, Title) == 0x0002D0, "Member 'UGymGuiMetaWidget::Title' has a wrong offset!");
static_assert(offsetof(UGymGuiMetaWidget, NavigationThresholdMultiplier) == 0x0002E8, "Member 'UGymGuiMetaWidget::NavigationThresholdMultiplier' has a wrong offset!");
static_assert(offsetof(UGymGuiMetaWidget, AdminOnly) == 0x0002EC, "Member 'UGymGuiMetaWidget::AdminOnly' has a wrong offset!");
static_assert(offsetof(UGymGuiMetaWidget, ParentWidget) == 0x000310, "Member 'UGymGuiMetaWidget::ParentWidget' has a wrong offset!");
static_assert(offsetof(UGymGuiMetaWidget, InputPriority) == 0x000318, "Member 'UGymGuiMetaWidget::InputPriority' has a wrong offset!");
static_assert(offsetof(UGymGuiMetaWidget, ScrollBoxNavigationBlockTime) == 0x00031C, "Member 'UGymGuiMetaWidget::ScrollBoxNavigationBlockTime' has a wrong offset!");
static_assert(offsetof(UGymGuiMetaWidget, bIgnoreControlHideAll) == 0x000324, "Member 'UGymGuiMetaWidget::bIgnoreControlHideAll' has a wrong offset!");
static_assert(offsetof(UGymGuiMetaWidget, NavigationDotThreshold) == 0x000328, "Member 'UGymGuiMetaWidget::NavigationDotThreshold' has a wrong offset!");

// Class GYMGAME.GymGuiCharacterMetaWidget
// 0x0008 (0x0338 - 0x0330)
class UGymGuiCharacterMetaWidget : public UGymGuiMetaWidget
{
public:
	class UGymGuiControl*                         Control;                                           // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiCharacterMetaWidget">();
	}
	static class UGymGuiCharacterMetaWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiCharacterMetaWidget>();
	}
};
static_assert(alignof(UGymGuiCharacterMetaWidget) == 0x000008, "Wrong alignment on UGymGuiCharacterMetaWidget");
static_assert(sizeof(UGymGuiCharacterMetaWidget) == 0x000338, "Wrong size on UGymGuiCharacterMetaWidget");
static_assert(offsetof(UGymGuiCharacterMetaWidget, Control) == 0x000330, "Member 'UGymGuiCharacterMetaWidget::Control' has a wrong offset!");

// Class GYMGAME.GymGui3DMetaWidget
// 0x0008 (0x0340 - 0x0338)
class UGymGui3DMetaWidget : public UGymGuiCharacterMetaWidget
{
public:
	class UWidgetComponent*                       WidgetComponent;                                   // 0x0338(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGui3DMetaWidget">();
	}
	static class UGymGui3DMetaWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGui3DMetaWidget>();
	}
};
static_assert(alignof(UGymGui3DMetaWidget) == 0x000008, "Wrong alignment on UGymGui3DMetaWidget");
static_assert(sizeof(UGymGui3DMetaWidget) == 0x000340, "Wrong size on UGymGui3DMetaWidget");
static_assert(offsetof(UGymGui3DMetaWidget, WidgetComponent) == 0x000338, "Member 'UGymGui3DMetaWidget::WidgetComponent' has a wrong offset!");

// Class GYMGAME.GymGui3DPlayerNameplateWidget
// 0x0010 (0x0350 - 0x0340)
class UGymGui3DPlayerNameplateWidget final : public UGymGui3DMetaWidget
{
public:
	class UImage*                                 PlayerAvatarImage;                                 // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             PlayerName;                                        // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGui3DPlayerNameplateWidget">();
	}
	static class UGymGui3DPlayerNameplateWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGui3DPlayerNameplateWidget>();
	}
};
static_assert(alignof(UGymGui3DPlayerNameplateWidget) == 0x000008, "Wrong alignment on UGymGui3DPlayerNameplateWidget");
static_assert(sizeof(UGymGui3DPlayerNameplateWidget) == 0x000350, "Wrong size on UGymGui3DPlayerNameplateWidget");
static_assert(offsetof(UGymGui3DPlayerNameplateWidget, PlayerAvatarImage) == 0x000340, "Member 'UGymGui3DPlayerNameplateWidget::PlayerAvatarImage' has a wrong offset!");
static_assert(offsetof(UGymGui3DPlayerNameplateWidget, PlayerName) == 0x000348, "Member 'UGymGui3DPlayerNameplateWidget::PlayerName' has a wrong offset!");

// Class GYMGAME.GymAssetControl
// 0x0030 (0x00E8 - 0x00B8)
class UGymAssetControl final : public UGymCharacterMetaControl
{
public:
	uint8                                         Pad_B8[0x18];                                      // 0x00B8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGymLevelAssetData*>             LevelAssets;                                       // 0x00D0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E0[0x8];                                       // 0x00E0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymAssetControl">();
	}
	static class UGymAssetControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymAssetControl>();
	}
};
static_assert(alignof(UGymAssetControl) == 0x000008, "Wrong alignment on UGymAssetControl");
static_assert(sizeof(UGymAssetControl) == 0x0000E8, "Wrong size on UGymAssetControl");
static_assert(offsetof(UGymAssetControl, LevelAssets) == 0x0000D0, "Member 'UGymAssetControl::LevelAssets' has a wrong offset!");

// Class GYMGAME.GymAudioControl
// 0x0008 (0x00C0 - 0x00B8)
class UGymAudioControl final : public UGymCharacterMetaControl
{
public:
	class UGymMetaAudioPlayer*                    AudioPlayer;                                       // 0x00B8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymAudioControl">();
	}
	static class UGymAudioControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymAudioControl>();
	}
};
static_assert(alignof(UGymAudioControl) == 0x000008, "Wrong alignment on UGymAudioControl");
static_assert(sizeof(UGymAudioControl) == 0x0000C0, "Wrong size on UGymAudioControl");
static_assert(offsetof(UGymAudioControl, AudioPlayer) == 0x0000B8, "Member 'UGymAudioControl::AudioPlayer' has a wrong offset!");

// Class GYMGAME.GymAudioPlayerActor
// 0x0010 (0x02A8 - 0x0298)
class AGymAudioPlayerActor : public AActor
{
public:
	class AGymCharacter*                          OwningPlayer;                                      // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A0[0x8];                                      // 0x02A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymAudioPlayerActor">();
	}
	static class AGymAudioPlayerActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymAudioPlayerActor>();
	}
};
static_assert(alignof(AGymAudioPlayerActor) == 0x000008, "Wrong alignment on AGymAudioPlayerActor");
static_assert(sizeof(AGymAudioPlayerActor) == 0x0002A8, "Wrong size on AGymAudioPlayerActor");
static_assert(offsetof(AGymAudioPlayerActor, OwningPlayer) == 0x000298, "Member 'AGymAudioPlayerActor::OwningPlayer' has a wrong offset!");

// Class GYMGAME.GymAudioVolumeComponent
// 0x0020 (0x0650 - 0x0630)
class UGymAudioVolumeComponent final : public UStaticMeshComponent
{
public:
	struct FReverbSettings                        Settings;                                          // 0x0628(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_648[0x8];                                      // 0x0648(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymAudioVolumeComponent">();
	}
	static class UGymAudioVolumeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymAudioVolumeComponent>();
	}
};
static_assert(alignof(UGymAudioVolumeComponent) == 0x000010, "Wrong alignment on UGymAudioVolumeComponent");
static_assert(sizeof(UGymAudioVolumeComponent) == 0x000650, "Wrong size on UGymAudioVolumeComponent");
static_assert(offsetof(UGymAudioVolumeComponent, Settings) == 0x000628, "Member 'UGymAudioVolumeComponent::Settings' has a wrong offset!");

// Class GYMGAME.GymAutoKillzone
// 0x0038 (0x02D0 - 0x0298)
class AGymAutoKillzone final : public AActor
{
public:
	class UStaticMesh*                            Mesh;                                              // 0x0298(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterial*                              Material;                                          // 0x02A0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                MeshScale;                                         // 0x02A8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CellSize;                                          // 0x02C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PaddingRadius;                                     // 0x02C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	double                                        CullDistance;                                      // 0x02C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void Clear();
	void GenerateKillzone();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymAutoKillzone">();
	}
	static class AGymAutoKillzone* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymAutoKillzone>();
	}
};
static_assert(alignof(AGymAutoKillzone) == 0x000008, "Wrong alignment on AGymAutoKillzone");
static_assert(sizeof(AGymAutoKillzone) == 0x0002D0, "Wrong size on AGymAutoKillzone");
static_assert(offsetof(AGymAutoKillzone, Mesh) == 0x000298, "Member 'AGymAutoKillzone::Mesh' has a wrong offset!");
static_assert(offsetof(AGymAutoKillzone, Material) == 0x0002A0, "Member 'AGymAutoKillzone::Material' has a wrong offset!");
static_assert(offsetof(AGymAutoKillzone, MeshScale) == 0x0002A8, "Member 'AGymAutoKillzone::MeshScale' has a wrong offset!");
static_assert(offsetof(AGymAutoKillzone, CellSize) == 0x0002C0, "Member 'AGymAutoKillzone::CellSize' has a wrong offset!");
static_assert(offsetof(AGymAutoKillzone, PaddingRadius) == 0x0002C4, "Member 'AGymAutoKillzone::PaddingRadius' has a wrong offset!");
static_assert(offsetof(AGymAutoKillzone, CullDistance) == 0x0002C8, "Member 'AGymAutoKillzone::CullDistance' has a wrong offset!");

// Class GYMGAME.GymBaseGameMode
// 0x00B8 (0x03F0 - 0x0338)
class AGymBaseGameMode : public AGameModeBase
{
public:
	TSubclassOf<class UGymRules>                  SprintRulesBP;                                     // 0x0338(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UGymRules>                  TideRulesBP;                                       // 0x0340(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UGymRules>                  BombRulesBP;                                       // 0x0348(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UGymRules>                  CircuitRulesBP;                                    // 0x0350(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UGymRules>                  LootRulesBP;                                       // 0x0358(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UGymRules>                  ObbyRulesBP;                                       // 0x0360(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_368[0x28];                                     // 0x0368(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymRules*                              Rules;                                             // 0x0390(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WaitForPlayersTimer;                               // 0x0398(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AllPlayerReadyTimer;                               // 0x039C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A0[0x20];                                     // 0x03A0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        Pausers;                                           // 0x03C0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3D0[0x20];                                     // 0x03D0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UGymRules* GetRuleInstance();
	bool IsCurrentlyInCareer();
	void PauseGymGame(class UObject* Pauser);
	void UnPauseGymGame(class UObject* Pauser, bool bForce);

	void SendRaceStartAnalytics(const struct FRuleStartInfo& Info) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymBaseGameMode">();
	}
	static class AGymBaseGameMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymBaseGameMode>();
	}
};
static_assert(alignof(AGymBaseGameMode) == 0x000008, "Wrong alignment on AGymBaseGameMode");
static_assert(sizeof(AGymBaseGameMode) == 0x0003F0, "Wrong size on AGymBaseGameMode");
static_assert(offsetof(AGymBaseGameMode, SprintRulesBP) == 0x000338, "Member 'AGymBaseGameMode::SprintRulesBP' has a wrong offset!");
static_assert(offsetof(AGymBaseGameMode, TideRulesBP) == 0x000340, "Member 'AGymBaseGameMode::TideRulesBP' has a wrong offset!");
static_assert(offsetof(AGymBaseGameMode, BombRulesBP) == 0x000348, "Member 'AGymBaseGameMode::BombRulesBP' has a wrong offset!");
static_assert(offsetof(AGymBaseGameMode, CircuitRulesBP) == 0x000350, "Member 'AGymBaseGameMode::CircuitRulesBP' has a wrong offset!");
static_assert(offsetof(AGymBaseGameMode, LootRulesBP) == 0x000358, "Member 'AGymBaseGameMode::LootRulesBP' has a wrong offset!");
static_assert(offsetof(AGymBaseGameMode, ObbyRulesBP) == 0x000360, "Member 'AGymBaseGameMode::ObbyRulesBP' has a wrong offset!");
static_assert(offsetof(AGymBaseGameMode, Rules) == 0x000390, "Member 'AGymBaseGameMode::Rules' has a wrong offset!");
static_assert(offsetof(AGymBaseGameMode, WaitForPlayersTimer) == 0x000398, "Member 'AGymBaseGameMode::WaitForPlayersTimer' has a wrong offset!");
static_assert(offsetof(AGymBaseGameMode, AllPlayerReadyTimer) == 0x00039C, "Member 'AGymBaseGameMode::AllPlayerReadyTimer' has a wrong offset!");
static_assert(offsetof(AGymBaseGameMode, Pausers) == 0x0003C0, "Member 'AGymBaseGameMode::Pausers' has a wrong offset!");

// Class GYMGAME.GymBasicAnimator
// 0x00B8 (0x0160 - 0x00A8)
class UGymBasicAnimator final : public UGymMetaAnimator
{
public:
	struct FGymBasicAnimatorProps                 Props;                                             // 0x00A8(0x0098)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FGymBasicAnimatorPropsReplicated       PropsReplicated;                                   // 0x0140(0x001C)(Net, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymBasicAnimator">();
	}
	static class UGymBasicAnimator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymBasicAnimator>();
	}
};
static_assert(alignof(UGymBasicAnimator) == 0x000008, "Wrong alignment on UGymBasicAnimator");
static_assert(sizeof(UGymBasicAnimator) == 0x000160, "Wrong size on UGymBasicAnimator");
static_assert(offsetof(UGymBasicAnimator, Props) == 0x0000A8, "Member 'UGymBasicAnimator::Props' has a wrong offset!");
static_assert(offsetof(UGymBasicAnimator, PropsReplicated) == 0x000140, "Member 'UGymBasicAnimator::PropsReplicated' has a wrong offset!");

// Class GYMGAME.GymRules
// 0x0110 (0x0138 - 0x0028)
class UGymRules : public UObject
{
public:
	TArray<class AGymStaticLevelAsset*>           StartPieces;                                       // 0x0028(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<int32>                                 PossibleLocations;                                 // 0x0038(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class UWorld*                                 CurrentWorld;                                      // 0x0048(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FGymRuleParticipant>            Participants;                                      // 0x0050(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class AGymBaseGameMode*                       GameMode;                                          // 0x0060(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxPlayers;                                        // 0x0068(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CloudId;                                           // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PreflowTime;                                       // 0x0080(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ShouldPreflow;                                     // 0x0084(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsRespawnAllowedDuringRace;                       // 0x0085(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_86[0x2];                                       // 0x0086(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGymRuleReplicatedData>     ReplicateDataClass;                                // 0x0088(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGymParticipantRepData>     ParticipantReplicateDataClass;                     // 0x0090(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_98[0x68];                                      // 0x0098(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnRaceFinished;                                    // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AGymTide*                               TideActor;                                         // 0x0110(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGymRuleReplicatedData*                 RuleData;                                          // 0x0118(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AGymMap*                                CurrentMap;                                        // 0x0120(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_128[0x10];                                     // 0x0128(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 CalculateTournamentScoreForStanding(int32 Standing);
	class FString GetGameModeId();
	void RaceFinishedDelegate__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymRules">();
	}
	static class UGymRules* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymRules>();
	}
};
static_assert(alignof(UGymRules) == 0x000008, "Wrong alignment on UGymRules");
static_assert(sizeof(UGymRules) == 0x000138, "Wrong size on UGymRules");
static_assert(offsetof(UGymRules, StartPieces) == 0x000028, "Member 'UGymRules::StartPieces' has a wrong offset!");
static_assert(offsetof(UGymRules, PossibleLocations) == 0x000038, "Member 'UGymRules::PossibleLocations' has a wrong offset!");
static_assert(offsetof(UGymRules, CurrentWorld) == 0x000048, "Member 'UGymRules::CurrentWorld' has a wrong offset!");
static_assert(offsetof(UGymRules, Participants) == 0x000050, "Member 'UGymRules::Participants' has a wrong offset!");
static_assert(offsetof(UGymRules, GameMode) == 0x000060, "Member 'UGymRules::GameMode' has a wrong offset!");
static_assert(offsetof(UGymRules, MaxPlayers) == 0x000068, "Member 'UGymRules::MaxPlayers' has a wrong offset!");
static_assert(offsetof(UGymRules, CloudId) == 0x000070, "Member 'UGymRules::CloudId' has a wrong offset!");
static_assert(offsetof(UGymRules, PreflowTime) == 0x000080, "Member 'UGymRules::PreflowTime' has a wrong offset!");
static_assert(offsetof(UGymRules, ShouldPreflow) == 0x000084, "Member 'UGymRules::ShouldPreflow' has a wrong offset!");
static_assert(offsetof(UGymRules, bIsRespawnAllowedDuringRace) == 0x000085, "Member 'UGymRules::bIsRespawnAllowedDuringRace' has a wrong offset!");
static_assert(offsetof(UGymRules, ReplicateDataClass) == 0x000088, "Member 'UGymRules::ReplicateDataClass' has a wrong offset!");
static_assert(offsetof(UGymRules, ParticipantReplicateDataClass) == 0x000090, "Member 'UGymRules::ParticipantReplicateDataClass' has a wrong offset!");
static_assert(offsetof(UGymRules, OnRaceFinished) == 0x000100, "Member 'UGymRules::OnRaceFinished' has a wrong offset!");
static_assert(offsetof(UGymRules, TideActor) == 0x000110, "Member 'UGymRules::TideActor' has a wrong offset!");
static_assert(offsetof(UGymRules, RuleData) == 0x000118, "Member 'UGymRules::RuleData' has a wrong offset!");
static_assert(offsetof(UGymRules, CurrentMap) == 0x000120, "Member 'UGymRules::CurrentMap' has a wrong offset!");

// Class GYMGAME.GymGuiGlobalMetaWidget
// 0x0008 (0x0338 - 0x0330)
class UGymGuiGlobalMetaWidget : public UGymGuiMetaWidget
{
public:
	class UGymGlobalWidgetControl*                Control;                                           // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnWindowFocusChanged(bool bHasFocus);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiGlobalMetaWidget">();
	}
	static class UGymGuiGlobalMetaWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiGlobalMetaWidget>();
	}
};
static_assert(alignof(UGymGuiGlobalMetaWidget) == 0x000008, "Wrong alignment on UGymGuiGlobalMetaWidget");
static_assert(sizeof(UGymGuiGlobalMetaWidget) == 0x000338, "Wrong size on UGymGuiGlobalMetaWidget");
static_assert(offsetof(UGymGuiGlobalMetaWidget, Control) == 0x000330, "Member 'UGymGuiGlobalMetaWidget::Control' has a wrong offset!");

// Class GYMGAME.GymGuiChooseLevelWidget
// 0x00D0 (0x0408 - 0x0338)
class UGymGuiChooseLevelWidget : public UGymGuiGlobalMetaWidget
{
public:
	TArray<class UGymGuiChooseLevelSlot*>         AllLevelSlots;                                     // 0x0338(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_348[0x98];                                     // 0x0348(0x0098)(Fixing Size After Last Property [ Dumper-7 ])
	class UUniformGridPanel*                      GridPanel;                                         // 0x03E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UButton*                                BackButton;                                        // 0x03E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UButton*                                SelectButton;                                      // 0x03F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UButton*                                DefaultLevelsTab;                                  // 0x03F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UButton*                                CustomLevelsTab;                                   // 0x0400(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnBackButtonPressed();
	void OnSelectButtonPressed();
	void OnTabCustom();
	void OnTabDefault();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiChooseLevelWidget">();
	}
	static class UGymGuiChooseLevelWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiChooseLevelWidget>();
	}
};
static_assert(alignof(UGymGuiChooseLevelWidget) == 0x000008, "Wrong alignment on UGymGuiChooseLevelWidget");
static_assert(sizeof(UGymGuiChooseLevelWidget) == 0x000408, "Wrong size on UGymGuiChooseLevelWidget");
static_assert(offsetof(UGymGuiChooseLevelWidget, AllLevelSlots) == 0x000338, "Member 'UGymGuiChooseLevelWidget::AllLevelSlots' has a wrong offset!");
static_assert(offsetof(UGymGuiChooseLevelWidget, GridPanel) == 0x0003E0, "Member 'UGymGuiChooseLevelWidget::GridPanel' has a wrong offset!");
static_assert(offsetof(UGymGuiChooseLevelWidget, BackButton) == 0x0003E8, "Member 'UGymGuiChooseLevelWidget::BackButton' has a wrong offset!");
static_assert(offsetof(UGymGuiChooseLevelWidget, SelectButton) == 0x0003F0, "Member 'UGymGuiChooseLevelWidget::SelectButton' has a wrong offset!");
static_assert(offsetof(UGymGuiChooseLevelWidget, DefaultLevelsTab) == 0x0003F8, "Member 'UGymGuiChooseLevelWidget::DefaultLevelsTab' has a wrong offset!");
static_assert(offsetof(UGymGuiChooseLevelWidget, CustomLevelsTab) == 0x000400, "Member 'UGymGuiChooseLevelWidget::CustomLevelsTab' has a wrong offset!");

// Class GYMGAME.GymCareerRules
// 0x0060 (0x0198 - 0x0138)
class UGymCareerRules : public UGymRules
{
public:
	int32                                         MaxTasks;                                          // 0x0138(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CareerName;                                        // 0x0140(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGymCareerReplicatedData*               CareerRepData;                                     // 0x0150(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULevelSequence*                         StartLevelSequence;                                // 0x0158(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULevelSequence*                         EndLevelSequence;                                  // 0x0160(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSavePlayerLastLocation;                           // 0x0168(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRunPhysicsAtStart;                                // 0x0169(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16A[0x6];                                      // 0x016A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ALevelSequenceActor*                    CurrentSequenceActor;                              // 0x0170(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULevelSequencePlayer*                   CurrentLevelSequencePlayer;                        // 0x0178(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_180[0x8];                                      // 0x0180(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AGymPlayerController*                   ParticipantController;                             // 0x0188(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_190[0x8];                                      // 0x0190(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_SetupEndCutscene(class ALevelSequenceActor* SequenceActor);
	void BP_SetupStartCutscene(class ALevelSequenceActor* SequenceActor);
	void EndSequenceFinished();
	void OnSkipEndSequence();
	void OnSkipStartSequence();
	class AActor* SpawnActorOfClass(TSubclassOf<class AActor> ActorClass, const struct FTransform& Transform);
	void StartEndSequence();
	void StartSequenceFinished();

	class FString GetCareerName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCareerRules">();
	}
	static class UGymCareerRules* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCareerRules>();
	}
};
static_assert(alignof(UGymCareerRules) == 0x000008, "Wrong alignment on UGymCareerRules");
static_assert(sizeof(UGymCareerRules) == 0x000198, "Wrong size on UGymCareerRules");
static_assert(offsetof(UGymCareerRules, MaxTasks) == 0x000138, "Member 'UGymCareerRules::MaxTasks' has a wrong offset!");
static_assert(offsetof(UGymCareerRules, CareerName) == 0x000140, "Member 'UGymCareerRules::CareerName' has a wrong offset!");
static_assert(offsetof(UGymCareerRules, CareerRepData) == 0x000150, "Member 'UGymCareerRules::CareerRepData' has a wrong offset!");
static_assert(offsetof(UGymCareerRules, StartLevelSequence) == 0x000158, "Member 'UGymCareerRules::StartLevelSequence' has a wrong offset!");
static_assert(offsetof(UGymCareerRules, EndLevelSequence) == 0x000160, "Member 'UGymCareerRules::EndLevelSequence' has a wrong offset!");
static_assert(offsetof(UGymCareerRules, bSavePlayerLastLocation) == 0x000168, "Member 'UGymCareerRules::bSavePlayerLastLocation' has a wrong offset!");
static_assert(offsetof(UGymCareerRules, bRunPhysicsAtStart) == 0x000169, "Member 'UGymCareerRules::bRunPhysicsAtStart' has a wrong offset!");
static_assert(offsetof(UGymCareerRules, CurrentSequenceActor) == 0x000170, "Member 'UGymCareerRules::CurrentSequenceActor' has a wrong offset!");
static_assert(offsetof(UGymCareerRules, CurrentLevelSequencePlayer) == 0x000178, "Member 'UGymCareerRules::CurrentLevelSequencePlayer' has a wrong offset!");
static_assert(offsetof(UGymCareerRules, ParticipantController) == 0x000188, "Member 'UGymCareerRules::ParticipantController' has a wrong offset!");

// Class GYMGAME.GymBasicsRules
// 0x0030 (0x01C8 - 0x0198)
class UGymBasicsRules final : public UGymCareerRules
{
public:
	uint8                                         Pad_198[0x20];                                     // 0x0198(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGymGuiTickerMessageWidget> StartMessage;                                      // 0x01B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   TaskName;                                          // 0x01C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void GoalReached(class AActor* Goal, class AGymCharacter* PlayerCharacter);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymBasicsRules">();
	}
	static class UGymBasicsRules* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymBasicsRules>();
	}
};
static_assert(alignof(UGymBasicsRules) == 0x000008, "Wrong alignment on UGymBasicsRules");
static_assert(sizeof(UGymBasicsRules) == 0x0001C8, "Wrong size on UGymBasicsRules");
static_assert(offsetof(UGymBasicsRules, StartMessage) == 0x0001B8, "Member 'UGymBasicsRules::StartMessage' has a wrong offset!");
static_assert(offsetof(UGymBasicsRules, TaskName) == 0x0001C0, "Member 'UGymBasicsRules::TaskName' has a wrong offset!");

// Class GYMGAME.GymGuiAssetPropertyEditorWidget
// 0x0100 (0x0438 - 0x0338)
class UGymGuiAssetPropertyEditorWidget : public UGymGuiCharacterMetaWidget
{
public:
	struct FGymProperty                           EditableProperty;                                  // 0x0338(0x00D8)(BlueprintVisible, BlueprintReadOnly, ExposeOnSpawn, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnValueChanged;                                    // 0x0410(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnEditingStopped;                                  // 0x0420(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	bool                                          bSelected;                                         // 0x0430(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_431[0x7];                                      // 0x0431(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEditingStopped__DelegateSignature();
	void OnHovered();
	void OnPropertyUpdated();
	void OnPropertyValueChanged__DelegateSignature(const struct FGymPropertyValues& PropertyValue);
	void OnSelect();
	void OnUnHovered();
	void OnUnSelect();
	void Select();
	void SelectNextSetting();
	void SelectPrevSetting();
	void Unselect();
	void UpdateProperty(const struct FGymProperty& Property);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiAssetPropertyEditorWidget">();
	}
	static class UGymGuiAssetPropertyEditorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiAssetPropertyEditorWidget>();
	}
};
static_assert(alignof(UGymGuiAssetPropertyEditorWidget) == 0x000008, "Wrong alignment on UGymGuiAssetPropertyEditorWidget");
static_assert(sizeof(UGymGuiAssetPropertyEditorWidget) == 0x000438, "Wrong size on UGymGuiAssetPropertyEditorWidget");
static_assert(offsetof(UGymGuiAssetPropertyEditorWidget, EditableProperty) == 0x000338, "Member 'UGymGuiAssetPropertyEditorWidget::EditableProperty' has a wrong offset!");
static_assert(offsetof(UGymGuiAssetPropertyEditorWidget, OnValueChanged) == 0x000410, "Member 'UGymGuiAssetPropertyEditorWidget::OnValueChanged' has a wrong offset!");
static_assert(offsetof(UGymGuiAssetPropertyEditorWidget, OnEditingStopped) == 0x000420, "Member 'UGymGuiAssetPropertyEditorWidget::OnEditingStopped' has a wrong offset!");
static_assert(offsetof(UGymGuiAssetPropertyEditorWidget, bSelected) == 0x000430, "Member 'UGymGuiAssetPropertyEditorWidget::bSelected' has a wrong offset!");

// Class GYMGAME.GymMetaRuleMusicState
// 0x0050 (0x00F0 - 0x00A0)
class UGymMetaRuleMusicState : public UActorComponent
{
public:
	class UGymGlobalMusicStateControl*            Control;                                           // 0x00A0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x48];                                      // 0x00A8(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Client_OnTriggerAudio(class FName TriggerName);
	void Client_OnTriggerStingerAudio(class FName TriggerName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymMetaRuleMusicState">();
	}
	static class UGymMetaRuleMusicState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymMetaRuleMusicState>();
	}
};
static_assert(alignof(UGymMetaRuleMusicState) == 0x000008, "Wrong alignment on UGymMetaRuleMusicState");
static_assert(sizeof(UGymMetaRuleMusicState) == 0x0000F0, "Wrong size on UGymMetaRuleMusicState");
static_assert(offsetof(UGymMetaRuleMusicState, Control) == 0x0000A0, "Member 'UGymMetaRuleMusicState::Control' has a wrong offset!");

// Class GYMGAME.GymBasicTutorialMusicState
// 0x0008 (0x00F8 - 0x00F0)
class UGymBasicTutorialMusicState final : public UGymMetaRuleMusicState
{
public:
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymBasicTutorialMusicState">();
	}
	static class UGymBasicTutorialMusicState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymBasicTutorialMusicState>();
	}
};
static_assert(alignof(UGymBasicTutorialMusicState) == 0x000008, "Wrong alignment on UGymBasicTutorialMusicState");
static_assert(sizeof(UGymBasicTutorialMusicState) == 0x0000F8, "Wrong size on UGymBasicTutorialMusicState");

// Class GYMGAME.GymObjective
// 0x0098 (0x00C0 - 0x0028)
class UGymObjective : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EProgressNumberFormat                         CurrentProgressionFormat;                          // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProgressNumberFormat                         MaxProgressionFormat;                              // 0x0031(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ProgressionTextAreaFillOverride;                   // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowInWidget;                                      // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0xF];                                       // 0x0039(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGymCriterionCreationData>      CriterionCreationData;                             // 0x0048(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_58[0x18];                                      // 0x0058(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bHasBegun;                                         // 0x0070(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentProgression;                                // 0x0074(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxProgression;                                    // 0x0078(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGymObjectiveCriterion*>         ObjectiveCriteria;                                 // 0x0080(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_90[0x30];                                      // 0x0090(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BPRestart();
	void Client_SetCurrentProgression(float Progression);
	void Client_SetMaxProgression(float MaxProgress);
	void Client_SetObjectiveState(EObjectiveState State);
	bool IsObjectiveStarted();
	void SetFailed();
	void SetObjectiveState(EObjectiveState State, bool bForce, bool bNotifyMaster);

	float GetCurrentProgression() const;
	const class FText GetDescriptionText() const;
	float GetMaxProgression() const;
	const class FText GetProgressionText() const;
	float GetProgressionTextAreaFillOverride() const;
	EObjectiveState GetState() const;
	bool IsCompleted() const;
	bool IsFailed() const;
	bool IsInProgress() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymObjective">();
	}
	static class UGymObjective* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymObjective>();
	}
};
static_assert(alignof(UGymObjective) == 0x000008, "Wrong alignment on UGymObjective");
static_assert(sizeof(UGymObjective) == 0x0000C0, "Wrong size on UGymObjective");
static_assert(offsetof(UGymObjective, CurrentProgressionFormat) == 0x000030, "Member 'UGymObjective::CurrentProgressionFormat' has a wrong offset!");
static_assert(offsetof(UGymObjective, MaxProgressionFormat) == 0x000031, "Member 'UGymObjective::MaxProgressionFormat' has a wrong offset!");
static_assert(offsetof(UGymObjective, ProgressionTextAreaFillOverride) == 0x000034, "Member 'UGymObjective::ProgressionTextAreaFillOverride' has a wrong offset!");
static_assert(offsetof(UGymObjective, ShowInWidget) == 0x000038, "Member 'UGymObjective::ShowInWidget' has a wrong offset!");
static_assert(offsetof(UGymObjective, CriterionCreationData) == 0x000048, "Member 'UGymObjective::CriterionCreationData' has a wrong offset!");
static_assert(offsetof(UGymObjective, bHasBegun) == 0x000070, "Member 'UGymObjective::bHasBegun' has a wrong offset!");
static_assert(offsetof(UGymObjective, CurrentProgression) == 0x000074, "Member 'UGymObjective::CurrentProgression' has a wrong offset!");
static_assert(offsetof(UGymObjective, MaxProgression) == 0x000078, "Member 'UGymObjective::MaxProgression' has a wrong offset!");
static_assert(offsetof(UGymObjective, ObjectiveCriteria) == 0x000080, "Member 'UGymObjective::ObjectiveCriteria' has a wrong offset!");

// Class GYMGAME.GymGraffitiObjective
// 0x0040 (0x0100 - 0x00C0)
class UGymGraffitiObjective final : public UGymObjective
{
public:
	float                                         MaxDist;                                           // 0x00C0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MissionSpray;                                      // 0x00C4(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x34];                                      // 0x00CC(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGraffitiObjective">();
	}
	static class UGymGraffitiObjective* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGraffitiObjective>();
	}
};
static_assert(alignof(UGymGraffitiObjective) == 0x000008, "Wrong alignment on UGymGraffitiObjective");
static_assert(sizeof(UGymGraffitiObjective) == 0x000100, "Wrong size on UGymGraffitiObjective");
static_assert(offsetof(UGymGraffitiObjective, MaxDist) == 0x0000C0, "Member 'UGymGraffitiObjective::MaxDist' has a wrong offset!");
static_assert(offsetof(UGymGraffitiObjective, MissionSpray) == 0x0000C4, "Member 'UGymGraffitiObjective::MissionSpray' has a wrong offset!");

// Class GYMGAME.GymBindCapturePrompt
// 0x0000 (0x0328 - 0x0328)
class UGymBindCapturePrompt : public UBindCapturePrompt
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymBindCapturePrompt">();
	}
	static class UGymBindCapturePrompt* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymBindCapturePrompt>();
	}
};
static_assert(alignof(UGymBindCapturePrompt) == 0x000008, "Wrong alignment on UGymBindCapturePrompt");
static_assert(sizeof(UGymBindCapturePrompt) == 0x000328, "Wrong size on UGymBindCapturePrompt");

// Class GYMGAME.GymMetaCameraModifier
// 0x0010 (0x00B0 - 0x00A0)
class UGymMetaCameraModifier : public UActorComponent
{
public:
	class UGymCameraControl*                      Control;                                           // 0x00A0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymMetaCameraModifier">();
	}
	static class UGymMetaCameraModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymMetaCameraModifier>();
	}
};
static_assert(alignof(UGymMetaCameraModifier) == 0x000008, "Wrong alignment on UGymMetaCameraModifier");
static_assert(sizeof(UGymMetaCameraModifier) == 0x0000B0, "Wrong size on UGymMetaCameraModifier");
static_assert(offsetof(UGymMetaCameraModifier, Control) == 0x0000A0, "Member 'UGymMetaCameraModifier::Control' has a wrong offset!");

// Class GYMGAME.GymGuiCanvasPartyOverlayWidget
// 0x0000 (0x02C0 - 0x02C0)
class UGymGuiCanvasPartyOverlayWidget : public UUserWidget
{
public:
	void OnDisconnectButtonPressed() const;
	void OnEndMatchButtonPressed() const;
	void OnQuitButtonPressed() const;
	void OnRespawnButtonPressed() const;
	ESlateVisibility ShouldShowEndMatch() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiCanvasPartyOverlayWidget">();
	}
	static class UGymGuiCanvasPartyOverlayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiCanvasPartyOverlayWidget>();
	}
};
static_assert(alignof(UGymGuiCanvasPartyOverlayWidget) == 0x000008, "Wrong alignment on UGymGuiCanvasPartyOverlayWidget");
static_assert(sizeof(UGymGuiCanvasPartyOverlayWidget) == 0x0002C0, "Wrong size on UGymGuiCanvasPartyOverlayWidget");

// Class GYMGAME.GymBlurVignetteCameraModifier
// 0x0018 (0x00C8 - 0x00B0)
class UGymBlurVignetteCameraModifier final : public UGymMetaCameraModifier
{
public:
	struct FGymBlurVignetteCameraModifierSettings Settings;                                          // 0x00B0(0x000C)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	struct FGymBlurVignetteCameraModifierProps    Props;                                             // 0x00BC(0x000C)(Transient, NoDestructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymBlurVignetteCameraModifier">();
	}
	static class UGymBlurVignetteCameraModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymBlurVignetteCameraModifier>();
	}
};
static_assert(alignof(UGymBlurVignetteCameraModifier) == 0x000008, "Wrong alignment on UGymBlurVignetteCameraModifier");
static_assert(sizeof(UGymBlurVignetteCameraModifier) == 0x0000C8, "Wrong size on UGymBlurVignetteCameraModifier");
static_assert(offsetof(UGymBlurVignetteCameraModifier, Settings) == 0x0000B0, "Member 'UGymBlurVignetteCameraModifier::Settings' has a wrong offset!");
static_assert(offsetof(UGymBlurVignetteCameraModifier, Props) == 0x0000BC, "Member 'UGymBlurVignetteCameraModifier::Props' has a wrong offset!");

// Class GYMGAME.GymRuleReplicatedData
// 0x0060 (0x0088 - 0x0028)
class UGymRuleReplicatedData : public UObject
{
public:
	EGymRulesState                                CurrentRuleState;                                  // 0x0028(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EVoteState                                    VoteState;                                         // 0x0029(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VoteStartTime;                                     // 0x002C(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         VoteTimer;                                         // 0x0030(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QuickplayCountdownStartTime;                       // 0x0034(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QuickplayCountdownMaxTime;                         // 0x0038(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CurrentVotes;                                      // 0x003C(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MaxVotes;                                          // 0x0040(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MinVotes;                                          // 0x0044(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ParticipantsRunning;                               // 0x0048(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TotalParticipants;                                 // 0x004C(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RaceStartTime;                                     // 0x0050(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RaceMaxTime;                                       // 0x0054(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MaxQualifiedNum;                                   // 0x0058(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CurrentQualifiedNum;                               // 0x005C(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsQuickplay;                                      // 0x0060(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AGymPlayerState*>                VotedPlayers;                                      // 0x0068(0x0010)(Net, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_78[0x10];                                      // 0x0078(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddVote(const class AGymPlayerState* Player);
	bool GetIsQuickplay();
	float GetRaceTime();
	void RemoveVote(const class AGymPlayerState* Player);
	void ResetVotes();
	void SetCurrentQualified(int32 Qualified);
	void SetIsQuickplay(bool IsQuickplay);
	void SetMaxQualified(int32 Qualified);
	void SetParticipantsRunning(int32 NewParticipantsRunning);
	void SetQuickplayCountdownMaxTime(float Time);
	void SetQuickplayCountdownStartTime(float Time);
	void SetRaceMaxTime(float NewMaxTime);
	void SetRaceStartTime(float NewStartTime);
	void SetRuleState(EGymRulesState State);
	void SetTotalParticipants(int32 NewTotalParticipants);
	void SetVoteStartTime(float Time);
	void SetVoteState(EVoteState NewVoteState);
	void SetVoteTimer(float Timer);
	void UpdateVotes(int32 NewMinVotes, int32 NewMaxVotes, int32 NewCurrentVotes);

	int32 GetCheckpointCount() const;
	int32 GetCurrentQualified() const;
	int32 GetCurrentVotes() const;
	int32 GetMaxQualified() const;
	int32 GetMaxVotes() const;
	int32 GetMinVotes() const;
	int32 GetParticipantsRunning() const;
	float GetQuickplayCountdownMaxTime() const;
	float GetQuickplayCountdownStartTime() const;
	float GetRaceMaxTime() const;
	float GetRaceStartTime() const;
	EGymRulesState GetRuleState() const;
	float GetTimeLeft() const;
	int32 GetTotalParticipants() const;
	float GetVoteStartTime() const;
	EVoteState GetVoteState() const;
	float GetVoteTimer() const;
	bool HasVoted(const class AGymPlayerState* Player) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymRuleReplicatedData">();
	}
	static class UGymRuleReplicatedData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymRuleReplicatedData>();
	}
};
static_assert(alignof(UGymRuleReplicatedData) == 0x000008, "Wrong alignment on UGymRuleReplicatedData");
static_assert(sizeof(UGymRuleReplicatedData) == 0x000088, "Wrong size on UGymRuleReplicatedData");
static_assert(offsetof(UGymRuleReplicatedData, CurrentRuleState) == 0x000028, "Member 'UGymRuleReplicatedData::CurrentRuleState' has a wrong offset!");
static_assert(offsetof(UGymRuleReplicatedData, VoteState) == 0x000029, "Member 'UGymRuleReplicatedData::VoteState' has a wrong offset!");
static_assert(offsetof(UGymRuleReplicatedData, VoteStartTime) == 0x00002C, "Member 'UGymRuleReplicatedData::VoteStartTime' has a wrong offset!");
static_assert(offsetof(UGymRuleReplicatedData, VoteTimer) == 0x000030, "Member 'UGymRuleReplicatedData::VoteTimer' has a wrong offset!");
static_assert(offsetof(UGymRuleReplicatedData, QuickplayCountdownStartTime) == 0x000034, "Member 'UGymRuleReplicatedData::QuickplayCountdownStartTime' has a wrong offset!");
static_assert(offsetof(UGymRuleReplicatedData, QuickplayCountdownMaxTime) == 0x000038, "Member 'UGymRuleReplicatedData::QuickplayCountdownMaxTime' has a wrong offset!");
static_assert(offsetof(UGymRuleReplicatedData, CurrentVotes) == 0x00003C, "Member 'UGymRuleReplicatedData::CurrentVotes' has a wrong offset!");
static_assert(offsetof(UGymRuleReplicatedData, MaxVotes) == 0x000040, "Member 'UGymRuleReplicatedData::MaxVotes' has a wrong offset!");
static_assert(offsetof(UGymRuleReplicatedData, MinVotes) == 0x000044, "Member 'UGymRuleReplicatedData::MinVotes' has a wrong offset!");
static_assert(offsetof(UGymRuleReplicatedData, ParticipantsRunning) == 0x000048, "Member 'UGymRuleReplicatedData::ParticipantsRunning' has a wrong offset!");
static_assert(offsetof(UGymRuleReplicatedData, TotalParticipants) == 0x00004C, "Member 'UGymRuleReplicatedData::TotalParticipants' has a wrong offset!");
static_assert(offsetof(UGymRuleReplicatedData, RaceStartTime) == 0x000050, "Member 'UGymRuleReplicatedData::RaceStartTime' has a wrong offset!");
static_assert(offsetof(UGymRuleReplicatedData, RaceMaxTime) == 0x000054, "Member 'UGymRuleReplicatedData::RaceMaxTime' has a wrong offset!");
static_assert(offsetof(UGymRuleReplicatedData, MaxQualifiedNum) == 0x000058, "Member 'UGymRuleReplicatedData::MaxQualifiedNum' has a wrong offset!");
static_assert(offsetof(UGymRuleReplicatedData, CurrentQualifiedNum) == 0x00005C, "Member 'UGymRuleReplicatedData::CurrentQualifiedNum' has a wrong offset!");
static_assert(offsetof(UGymRuleReplicatedData, bIsQuickplay) == 0x000060, "Member 'UGymRuleReplicatedData::bIsQuickplay' has a wrong offset!");
static_assert(offsetof(UGymRuleReplicatedData, VotedPlayers) == 0x000068, "Member 'UGymRuleReplicatedData::VotedPlayers' has a wrong offset!");

// Class GYMGAME.GymGuiDevWidget
// 0x0000 (0x0338 - 0x0338)
class UGymGuiDevWidget final : public UGymGuiCharacterMetaWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiDevWidget">();
	}
	static class UGymGuiDevWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiDevWidget>();
	}
};
static_assert(alignof(UGymGuiDevWidget) == 0x000008, "Wrong alignment on UGymGuiDevWidget");
static_assert(sizeof(UGymGuiDevWidget) == 0x000338, "Wrong size on UGymGuiDevWidget");

// Class GYMGAME.GymBombModeReplicatedData
// 0x0018 (0x00A0 - 0x0088)
class UGymBombModeReplicatedData final : public UGymRuleReplicatedData
{
public:
	bool                                          bBombIsTicking;                                    // 0x0088(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BombTimer;                                         // 0x008C(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RoundNum;                                          // 0x0090(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MaxRounds;                                         // 0x0094(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Bombs;                                             // 0x0098(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RoundStartTime;                                    // 0x009C(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetBombNum(int32 BombNum);
	void SetBombTicking(bool BombTicking);
	void SetBombTimer(float Timer);
	void SetMaxRounds(int32 Rounds);
	void SetRoundNum(int32 Rounds);
	void SetRoundStartTime(float Time);

	int32 GetBombNum() const;
	bool GetBombTicking() const;
	float GetBombTimer() const;
	int32 GetMaxRounds() const;
	int32 GetRoundNum() const;
	float GetRoundStartTime() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymBombModeReplicatedData">();
	}
	static class UGymBombModeReplicatedData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymBombModeReplicatedData>();
	}
};
static_assert(alignof(UGymBombModeReplicatedData) == 0x000008, "Wrong alignment on UGymBombModeReplicatedData");
static_assert(sizeof(UGymBombModeReplicatedData) == 0x0000A0, "Wrong size on UGymBombModeReplicatedData");
static_assert(offsetof(UGymBombModeReplicatedData, bBombIsTicking) == 0x000088, "Member 'UGymBombModeReplicatedData::bBombIsTicking' has a wrong offset!");
static_assert(offsetof(UGymBombModeReplicatedData, BombTimer) == 0x00008C, "Member 'UGymBombModeReplicatedData::BombTimer' has a wrong offset!");
static_assert(offsetof(UGymBombModeReplicatedData, RoundNum) == 0x000090, "Member 'UGymBombModeReplicatedData::RoundNum' has a wrong offset!");
static_assert(offsetof(UGymBombModeReplicatedData, MaxRounds) == 0x000094, "Member 'UGymBombModeReplicatedData::MaxRounds' has a wrong offset!");
static_assert(offsetof(UGymBombModeReplicatedData, Bombs) == 0x000098, "Member 'UGymBombModeReplicatedData::Bombs' has a wrong offset!");
static_assert(offsetof(UGymBombModeReplicatedData, RoundStartTime) == 0x00009C, "Member 'UGymBombModeReplicatedData::RoundStartTime' has a wrong offset!");

// Class GYMGAME.GymBombModeRules
// 0x0088 (0x01C0 - 0x0138)
class UGymBombModeRules : public UGymRules
{
public:
	uint8                                         Pad_138[0x8];                                      // 0x0138(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BombTimeSeconds;                                   // 0x0140(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             BombTransferTexture;                               // 0x0148(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             BombExplodeTexture;                                // 0x0150(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TagCapsuleRadius;                                  // 0x0158(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TagCapsuleHalfHeight;                              // 0x015C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TagAngle;                                          // 0x0160(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TagCooldown;                                       // 0x0164(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ExplosionLoadTimer;                                // 0x0168(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BetweenRoundTimer;                                 // 0x016C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AGymTaggedPlayerMarker>     TagMarkerClass;                                    // 0x0170(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AGymChasedPlayerMarker>     ChasedMarkerClass;                                 // 0x0178(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_180[0x8];                                      // 0x0180(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AGymTaggedPlayerMarker*>         TaggedMarkers;                                     // 0x0188(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class AGymChasedPlayerMarker*>         ChasedMarkers;                                     // 0x0198(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	class UGymBombModeReplicatedData*             BombRepData;                                       // 0x01A8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B0[0x10];                                     // 0x01B0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymBombModeRules">();
	}
	static class UGymBombModeRules* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymBombModeRules>();
	}
};
static_assert(alignof(UGymBombModeRules) == 0x000008, "Wrong alignment on UGymBombModeRules");
static_assert(sizeof(UGymBombModeRules) == 0x0001C0, "Wrong size on UGymBombModeRules");
static_assert(offsetof(UGymBombModeRules, BombTimeSeconds) == 0x000140, "Member 'UGymBombModeRules::BombTimeSeconds' has a wrong offset!");
static_assert(offsetof(UGymBombModeRules, BombTransferTexture) == 0x000148, "Member 'UGymBombModeRules::BombTransferTexture' has a wrong offset!");
static_assert(offsetof(UGymBombModeRules, BombExplodeTexture) == 0x000150, "Member 'UGymBombModeRules::BombExplodeTexture' has a wrong offset!");
static_assert(offsetof(UGymBombModeRules, TagCapsuleRadius) == 0x000158, "Member 'UGymBombModeRules::TagCapsuleRadius' has a wrong offset!");
static_assert(offsetof(UGymBombModeRules, TagCapsuleHalfHeight) == 0x00015C, "Member 'UGymBombModeRules::TagCapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(UGymBombModeRules, TagAngle) == 0x000160, "Member 'UGymBombModeRules::TagAngle' has a wrong offset!");
static_assert(offsetof(UGymBombModeRules, TagCooldown) == 0x000164, "Member 'UGymBombModeRules::TagCooldown' has a wrong offset!");
static_assert(offsetof(UGymBombModeRules, ExplosionLoadTimer) == 0x000168, "Member 'UGymBombModeRules::ExplosionLoadTimer' has a wrong offset!");
static_assert(offsetof(UGymBombModeRules, BetweenRoundTimer) == 0x00016C, "Member 'UGymBombModeRules::BetweenRoundTimer' has a wrong offset!");
static_assert(offsetof(UGymBombModeRules, TagMarkerClass) == 0x000170, "Member 'UGymBombModeRules::TagMarkerClass' has a wrong offset!");
static_assert(offsetof(UGymBombModeRules, ChasedMarkerClass) == 0x000178, "Member 'UGymBombModeRules::ChasedMarkerClass' has a wrong offset!");
static_assert(offsetof(UGymBombModeRules, TaggedMarkers) == 0x000188, "Member 'UGymBombModeRules::TaggedMarkers' has a wrong offset!");
static_assert(offsetof(UGymBombModeRules, ChasedMarkers) == 0x000198, "Member 'UGymBombModeRules::ChasedMarkers' has a wrong offset!");
static_assert(offsetof(UGymBombModeRules, BombRepData) == 0x0001A8, "Member 'UGymBombModeRules::BombRepData' has a wrong offset!");

// Class GYMGAME.GymGuiConfirmWidget
// 0x0010 (0x0348 - 0x0338)
class UGymGuiConfirmWidget : public UGymGuiGlobalMetaWidget
{
public:
	FMulticastInlineDelegateProperty_             ConfirmReacted;                                    // 0x0338(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void OnConfirmReacted__DelegateSignature(bool Result);
	bool ShowConfirm(const class FText& Message, const class FText& AcceptMessage, const class FText& DeclineMessage);

	bool IsConfirmOpen() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiConfirmWidget">();
	}
	static class UGymGuiConfirmWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiConfirmWidget>();
	}
};
static_assert(alignof(UGymGuiConfirmWidget) == 0x000008, "Wrong alignment on UGymGuiConfirmWidget");
static_assert(sizeof(UGymGuiConfirmWidget) == 0x000348, "Wrong size on UGymGuiConfirmWidget");
static_assert(offsetof(UGymGuiConfirmWidget, ConfirmReacted) == 0x000338, "Member 'UGymGuiConfirmWidget::ConfirmReacted' has a wrong offset!");

// Class GYMGAME.GymBombMusicState
// 0x0020 (0x0110 - 0x00F0)
class UGymBombMusicState final : public UGymMetaRuleMusicState
{
public:
	uint8                                         Pad_F0[0x20];                                      // 0x00F0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymBombMusicState">();
	}
	static class UGymBombMusicState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymBombMusicState>();
	}
};
static_assert(alignof(UGymBombMusicState) == 0x000008, "Wrong alignment on UGymBombMusicState");
static_assert(sizeof(UGymBombMusicState) == 0x000110, "Wrong size on UGymBombMusicState");

// Class GYMGAME.GymBPUtils
// 0x0000 (0x0028 - 0x0028)
class UGymBPUtils final : public UBlueprintFunctionLibrary
{
public:
	static void CopyTextToClipboard(const class FString& Text);
	static void FilterLevelName(const class FText& InLevelName, class FText* OutLevelName);
	static void FilterText(const class FString& InText, class FString* OutText);
	static void FocusAndSetAsHovered(class UWidget* Widget);
	static class UWidget* GetCurrentFocusedWidget();
	static EFocusCause GetFocusCause(const struct FFocusEvent& InFocusEvent);
	static bool IsDevBuild();
	static bool IsShippingBuild();
	static struct FIntPoint ResolutionStringToIntPoint(const class FString& ResolutionString);
	static bool RunningInPIE();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymBPUtils">();
	}
	static class UGymBPUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymBPUtils>();
	}
};
static_assert(alignof(UGymBPUtils) == 0x000008, "Wrong alignment on UGymBPUtils");
static_assert(sizeof(UGymBPUtils) == 0x000028, "Wrong size on UGymBPUtils");

// Class GYMGAME.GymGuiCanvasLoadingWidget
// 0x0008 (0x0340 - 0x0338)
class UGymGuiCanvasLoadingWidget final : public UGymGuiGlobalMetaWidget
{
public:
	class UTextBlock*                             LoadingMessage;                                    // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiCanvasLoadingWidget">();
	}
	static class UGymGuiCanvasLoadingWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiCanvasLoadingWidget>();
	}
};
static_assert(alignof(UGymGuiCanvasLoadingWidget) == 0x000008, "Wrong alignment on UGymGuiCanvasLoadingWidget");
static_assert(sizeof(UGymGuiCanvasLoadingWidget) == 0x000340, "Wrong size on UGymGuiCanvasLoadingWidget");
static_assert(offsetof(UGymGuiCanvasLoadingWidget, LoadingMessage) == 0x000338, "Member 'UGymGuiCanvasLoadingWidget::LoadingMessage' has a wrong offset!");

// Class GYMGAME.GymCameraAimAssistModifier
// 0x0040 (0x00F0 - 0x00B0)
class UGymCameraAimAssistModifier final : public UGymMetaCameraModifier
{
public:
	struct FGymCameraAimAssistModifierSettings    Settings;                                          // 0x00B0(0x0020)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	struct FGymCameraAimAssistModifierProps       Props;                                             // 0x00D0(0x0020)(Transient, NoDestructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCameraAimAssistModifier">();
	}
	static class UGymCameraAimAssistModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCameraAimAssistModifier>();
	}
};
static_assert(alignof(UGymCameraAimAssistModifier) == 0x000008, "Wrong alignment on UGymCameraAimAssistModifier");
static_assert(sizeof(UGymCameraAimAssistModifier) == 0x0000F0, "Wrong size on UGymCameraAimAssistModifier");
static_assert(offsetof(UGymCameraAimAssistModifier, Settings) == 0x0000B0, "Member 'UGymCameraAimAssistModifier::Settings' has a wrong offset!");
static_assert(offsetof(UGymCameraAimAssistModifier, Props) == 0x0000D0, "Member 'UGymCameraAimAssistModifier::Props' has a wrong offset!");

// Class GYMGAME.GymCameraControl
// 0x0278 (0x0330 - 0x00B8)
class alignas(0x10) UGymCameraControl final : public UGymCharacterMetaControl
{
public:
	class UGymClampCameraModifier*                ClampCameraModifier;                               // 0x00B8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymFOVCameraModifier*                  FOVCameraModifier;                                 // 0x00C0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymMotionBlurCameraModifier*           MotionBlurCameraModifier;                          // 0x00C8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymOffsetCameraModifier*               OffsetCameraModifier;                              // 0x00D0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymTiltCameraModifier*                 TiltCameraModifier;                                // 0x00D8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymHeadMovementCameraModifier*         HeadMovementCameraModifier;                        // 0x00E0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymVignetteCameraModifier*             VignetteCameraModifier;                            // 0x00E8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymZoomInOutCameraModifier*            ZoomInOutCameraModifier;                           // 0x00F0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymCameraShakeModifier*                CameraShakeModifier;                               // 0x00F8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymCameraAimAssistModifier*            AimAssistModifier;                                 // 0x0100(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymCameraTPAimAssistModifier*          TPAimAssistModifier;                               // 0x0108(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymBlurVignetteCameraModifier*         BlurVignetteModifier;                              // 0x0110(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x10];                                     // 0x0118(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGymMetaCameraModifier*>         AllCameraModifiers;                                // 0x0128(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_138[0xC8];                                     // 0x0138(0x00C8)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CameraLockDecreasingRotatorOffsetCurve;            // 0x0200(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_208[0x128];                                    // 0x0208(0x0128)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool PlayerSelectedModeIsFP() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCameraControl">();
	}
	static class UGymCameraControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCameraControl>();
	}
};
static_assert(alignof(UGymCameraControl) == 0x000010, "Wrong alignment on UGymCameraControl");
static_assert(sizeof(UGymCameraControl) == 0x000330, "Wrong size on UGymCameraControl");
static_assert(offsetof(UGymCameraControl, ClampCameraModifier) == 0x0000B8, "Member 'UGymCameraControl::ClampCameraModifier' has a wrong offset!");
static_assert(offsetof(UGymCameraControl, FOVCameraModifier) == 0x0000C0, "Member 'UGymCameraControl::FOVCameraModifier' has a wrong offset!");
static_assert(offsetof(UGymCameraControl, MotionBlurCameraModifier) == 0x0000C8, "Member 'UGymCameraControl::MotionBlurCameraModifier' has a wrong offset!");
static_assert(offsetof(UGymCameraControl, OffsetCameraModifier) == 0x0000D0, "Member 'UGymCameraControl::OffsetCameraModifier' has a wrong offset!");
static_assert(offsetof(UGymCameraControl, TiltCameraModifier) == 0x0000D8, "Member 'UGymCameraControl::TiltCameraModifier' has a wrong offset!");
static_assert(offsetof(UGymCameraControl, HeadMovementCameraModifier) == 0x0000E0, "Member 'UGymCameraControl::HeadMovementCameraModifier' has a wrong offset!");
static_assert(offsetof(UGymCameraControl, VignetteCameraModifier) == 0x0000E8, "Member 'UGymCameraControl::VignetteCameraModifier' has a wrong offset!");
static_assert(offsetof(UGymCameraControl, ZoomInOutCameraModifier) == 0x0000F0, "Member 'UGymCameraControl::ZoomInOutCameraModifier' has a wrong offset!");
static_assert(offsetof(UGymCameraControl, CameraShakeModifier) == 0x0000F8, "Member 'UGymCameraControl::CameraShakeModifier' has a wrong offset!");
static_assert(offsetof(UGymCameraControl, AimAssistModifier) == 0x000100, "Member 'UGymCameraControl::AimAssistModifier' has a wrong offset!");
static_assert(offsetof(UGymCameraControl, TPAimAssistModifier) == 0x000108, "Member 'UGymCameraControl::TPAimAssistModifier' has a wrong offset!");
static_assert(offsetof(UGymCameraControl, BlurVignetteModifier) == 0x000110, "Member 'UGymCameraControl::BlurVignetteModifier' has a wrong offset!");
static_assert(offsetof(UGymCameraControl, AllCameraModifiers) == 0x000128, "Member 'UGymCameraControl::AllCameraModifiers' has a wrong offset!");
static_assert(offsetof(UGymCameraControl, CameraLockDecreasingRotatorOffsetCurve) == 0x000200, "Member 'UGymCameraControl::CameraLockDecreasingRotatorOffsetCurve' has a wrong offset!");

// Class GYMGAME.GymGuiCreateMenuWidget
// 0x0060 (0x0398 - 0x0338)
class UGymGuiCreateMenuWidget : public UGymGuiGlobalMetaWidget
{
public:
	struct FGymLevelKit                           CurrentKit;                                        // 0x0338(0x0050)(BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FString                                 CurrentGameMode;                                   // 0x0388(0x0010)(BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	bool CreateLevel(const class FString& Name_0);
	bool CreateLevelWithBaseMap(const class FString& Name_0, int32 BaseMapIndex);
	void OnServerCreated(bool Success, const class FString& ConnectString);
	void SelectKit(const class FString& KitId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiCreateMenuWidget">();
	}
	static class UGymGuiCreateMenuWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiCreateMenuWidget>();
	}
};
static_assert(alignof(UGymGuiCreateMenuWidget) == 0x000008, "Wrong alignment on UGymGuiCreateMenuWidget");
static_assert(sizeof(UGymGuiCreateMenuWidget) == 0x000398, "Wrong size on UGymGuiCreateMenuWidget");
static_assert(offsetof(UGymGuiCreateMenuWidget, CurrentKit) == 0x000338, "Member 'UGymGuiCreateMenuWidget::CurrentKit' has a wrong offset!");
static_assert(offsetof(UGymGuiCreateMenuWidget, CurrentGameMode) == 0x000388, "Member 'UGymGuiCreateMenuWidget::CurrentGameMode' has a wrong offset!");

// Class GYMGAME.GymCameraShakeModifier
// 0x00A0 (0x0150 - 0x00B0)
class UGymCameraShakeModifier final : public UGymMetaCameraModifier
{
public:
	struct FGymCameraShakeModifierSettings        Settings;                                          // 0x00B0(0x001C)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymCameraShakeModifierProps           Props;                                             // 0x00D0(0x0030)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	struct FGymCameraShakeModifierSettings        TPSettings;                                        // 0x0100(0x001C)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymCameraShakeModifierProps           TPProps;                                           // 0x0120(0x0030)(Transient, NoDestructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCameraShakeModifier">();
	}
	static class UGymCameraShakeModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCameraShakeModifier>();
	}
};
static_assert(alignof(UGymCameraShakeModifier) == 0x000008, "Wrong alignment on UGymCameraShakeModifier");
static_assert(sizeof(UGymCameraShakeModifier) == 0x000150, "Wrong size on UGymCameraShakeModifier");
static_assert(offsetof(UGymCameraShakeModifier, Settings) == 0x0000B0, "Member 'UGymCameraShakeModifier::Settings' has a wrong offset!");
static_assert(offsetof(UGymCameraShakeModifier, Props) == 0x0000D0, "Member 'UGymCameraShakeModifier::Props' has a wrong offset!");
static_assert(offsetof(UGymCameraShakeModifier, TPSettings) == 0x000100, "Member 'UGymCameraShakeModifier::TPSettings' has a wrong offset!");
static_assert(offsetof(UGymCameraShakeModifier, TPProps) == 0x000120, "Member 'UGymCameraShakeModifier::TPProps' has a wrong offset!");

// Class GYMGAME.GymCameraTPAimAssistModifier
// 0x0058 (0x0108 - 0x00B0)
class UGymCameraTPAimAssistModifier final : public UGymMetaCameraModifier
{
public:
	struct FGymCameraTPAimAssistModifierSettings  Settings;                                          // 0x00B0(0x0020)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	struct FGymCameraTPAimAssistModifierProps     Props;                                             // 0x00D0(0x0038)(Transient, NoDestructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCameraTPAimAssistModifier">();
	}
	static class UGymCameraTPAimAssistModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCameraTPAimAssistModifier>();
	}
};
static_assert(alignof(UGymCameraTPAimAssistModifier) == 0x000008, "Wrong alignment on UGymCameraTPAimAssistModifier");
static_assert(sizeof(UGymCameraTPAimAssistModifier) == 0x000108, "Wrong size on UGymCameraTPAimAssistModifier");
static_assert(offsetof(UGymCameraTPAimAssistModifier, Settings) == 0x0000B0, "Member 'UGymCameraTPAimAssistModifier::Settings' has a wrong offset!");
static_assert(offsetof(UGymCameraTPAimAssistModifier, Props) == 0x0000D0, "Member 'UGymCameraTPAimAssistModifier::Props' has a wrong offset!");

// Class GYMGAME.GymGuiMainMenuWidget
// 0x0080 (0x03B8 - 0x0338)
class UGymGuiMainMenuWidget : public UGymGuiGlobalMetaWidget
{
public:
	TArray<class UGymGuiGlobalMetaWidget*>        AllPanels;                                         // 0x0338(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UGymGuiMetaWidget*>              Tabs;                                              // 0x0348(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_358[0x8];                                      // 0x0358(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymGuiPlayMenuWidget*                  CanvasPlayMenuWidget;                              // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymGuiGlobalMetaWidget*                CanvasCreateMenuWidget;                            // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymGuiGlobalMetaWidget*                CanvasExploreMenuWidget;                           // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymCharacterCustomizationWidget*       CanvasCharacterCustomizationWidget;                // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymGuiGlobalMetaWidget*                CanvasChooseItemWidget;                            // 0x0380(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymGuiGlobalMetaWidget*                CanvasChooseColorWidget;                           // 0x0388(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymGuiMetaWidget*                      SeasonWidget;                                      // 0x0390(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymGuiMetaWidget*                      ChallengesWidget;                                  // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymGuiMetaWidget*                      CareerWidget;                                      // 0x03A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymGuiMasterMenuWidget*                CanvasMasterMenuWidget;                            // 0x03A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymGuiBackgroundWidget*                Background;                                        // 0x03B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetTabActive(int32 CanvasIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiMainMenuWidget">();
	}
	static class UGymGuiMainMenuWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiMainMenuWidget>();
	}
};
static_assert(alignof(UGymGuiMainMenuWidget) == 0x000008, "Wrong alignment on UGymGuiMainMenuWidget");
static_assert(sizeof(UGymGuiMainMenuWidget) == 0x0003B8, "Wrong size on UGymGuiMainMenuWidget");
static_assert(offsetof(UGymGuiMainMenuWidget, AllPanels) == 0x000338, "Member 'UGymGuiMainMenuWidget::AllPanels' has a wrong offset!");
static_assert(offsetof(UGymGuiMainMenuWidget, Tabs) == 0x000348, "Member 'UGymGuiMainMenuWidget::Tabs' has a wrong offset!");
static_assert(offsetof(UGymGuiMainMenuWidget, CanvasPlayMenuWidget) == 0x000360, "Member 'UGymGuiMainMenuWidget::CanvasPlayMenuWidget' has a wrong offset!");
static_assert(offsetof(UGymGuiMainMenuWidget, CanvasCreateMenuWidget) == 0x000368, "Member 'UGymGuiMainMenuWidget::CanvasCreateMenuWidget' has a wrong offset!");
static_assert(offsetof(UGymGuiMainMenuWidget, CanvasExploreMenuWidget) == 0x000370, "Member 'UGymGuiMainMenuWidget::CanvasExploreMenuWidget' has a wrong offset!");
static_assert(offsetof(UGymGuiMainMenuWidget, CanvasCharacterCustomizationWidget) == 0x000378, "Member 'UGymGuiMainMenuWidget::CanvasCharacterCustomizationWidget' has a wrong offset!");
static_assert(offsetof(UGymGuiMainMenuWidget, CanvasChooseItemWidget) == 0x000380, "Member 'UGymGuiMainMenuWidget::CanvasChooseItemWidget' has a wrong offset!");
static_assert(offsetof(UGymGuiMainMenuWidget, CanvasChooseColorWidget) == 0x000388, "Member 'UGymGuiMainMenuWidget::CanvasChooseColorWidget' has a wrong offset!");
static_assert(offsetof(UGymGuiMainMenuWidget, SeasonWidget) == 0x000390, "Member 'UGymGuiMainMenuWidget::SeasonWidget' has a wrong offset!");
static_assert(offsetof(UGymGuiMainMenuWidget, ChallengesWidget) == 0x000398, "Member 'UGymGuiMainMenuWidget::ChallengesWidget' has a wrong offset!");
static_assert(offsetof(UGymGuiMainMenuWidget, CareerWidget) == 0x0003A0, "Member 'UGymGuiMainMenuWidget::CareerWidget' has a wrong offset!");
static_assert(offsetof(UGymGuiMainMenuWidget, CanvasMasterMenuWidget) == 0x0003A8, "Member 'UGymGuiMainMenuWidget::CanvasMasterMenuWidget' has a wrong offset!");
static_assert(offsetof(UGymGuiMainMenuWidget, Background) == 0x0003B0, "Member 'UGymGuiMainMenuWidget::Background' has a wrong offset!");

// Class GYMGAME.GymCancelVoteAction
// 0x0000 (0x00B8 - 0x00B8)
class UGymCancelVoteAction final : public UGymMetaAction
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCancelVoteAction">();
	}
	static class UGymCancelVoteAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCancelVoteAction>();
	}
};
static_assert(alignof(UGymCancelVoteAction) == 0x000008, "Wrong alignment on UGymCancelVoteAction");
static_assert(sizeof(UGymCancelVoteAction) == 0x0000B8, "Wrong size on UGymCancelVoteAction");

// Class GYMGAME.GymCareerFinalRules
// 0x0008 (0x01A0 - 0x0198)
class UGymCareerFinalRules final : public UGymCareerRules
{
public:
	bool                                          bDebugMode;                                        // 0x0198(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_199[0x7];                                      // 0x0199(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCareerFinalRules">();
	}
	static class UGymCareerFinalRules* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCareerFinalRules>();
	}
};
static_assert(alignof(UGymCareerFinalRules) == 0x000008, "Wrong alignment on UGymCareerFinalRules");
static_assert(sizeof(UGymCareerFinalRules) == 0x0001A0, "Wrong size on UGymCareerFinalRules");
static_assert(offsetof(UGymCareerFinalRules, bDebugMode) == 0x000198, "Member 'UGymCareerFinalRules::bDebugMode' has a wrong offset!");

// Class GYMGAME.GymGuiEditorWidget
// 0x0078 (0x03B0 - 0x0338)
class UGymGuiEditorWidget : public UGymGuiCharacterMetaWidget
{
public:
	EGymSnappingMode                              SnappingMode;                                      // 0x0338(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_339[0x14];                                     // 0x0339(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEditingAssetProperty;                             // 0x034D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBlockSelectVariant;                               // 0x034E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_34F[0x9];                                      // 0x034F(0x0009)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymLevelKit                           SelectedLevelKit;                                  // 0x0358(0x0050)(BlueprintVisible, Transient, Protected, NativeAccessSpecifierProtected)
	class UGymCategoryInfoList*                   CategoryInfo;                                      // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ContextualConfirm();
	void ContextualDecline();
	void ContextualDown();
	void ContextualLeft();
	void ContextualRight();
	void ContextualUp();
	void EditAssetProperty(class AGymStaticLevelAsset* Asset, const class FText& AssetName);
	class UTexture* GetThumbnail(const struct FGymLevelAssetVariant& Variant);
	bool IsMovingAsset();
	void LevelKitChanged();
	void OnEditAssetPropertyVariantChanged(class AGymStaticLevelAsset* Asset, const class FText& AssetName);
	void OnMovingAssetChanged(bool bIsMovingAsset);
	void OnPropertiesChangedForAsset(class AGymStaticLevelAsset* Asset);
	void OpenCategoryAndVariant(EGymEditorCategory Category, const struct FGymAssetVariantId& VariantId);
	void SelectVariant(const struct FGymAssetVariantId& VariantId);
	void SetOption(const struct FEditorGuiOption& Option);
	void SetTool(class UGymToolSetting* Tool);
	void UnsetTool();

	TArray<class UGymLevelAssetData*> GetCategoryAssetEntries(EGymEditorCategory Category) const;
	bool IsEditingAssetProperty() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiEditorWidget">();
	}
	static class UGymGuiEditorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiEditorWidget>();
	}
};
static_assert(alignof(UGymGuiEditorWidget) == 0x000008, "Wrong alignment on UGymGuiEditorWidget");
static_assert(sizeof(UGymGuiEditorWidget) == 0x0003B0, "Wrong size on UGymGuiEditorWidget");
static_assert(offsetof(UGymGuiEditorWidget, SnappingMode) == 0x000338, "Member 'UGymGuiEditorWidget::SnappingMode' has a wrong offset!");
static_assert(offsetof(UGymGuiEditorWidget, bEditingAssetProperty) == 0x00034D, "Member 'UGymGuiEditorWidget::bEditingAssetProperty' has a wrong offset!");
static_assert(offsetof(UGymGuiEditorWidget, bBlockSelectVariant) == 0x00034E, "Member 'UGymGuiEditorWidget::bBlockSelectVariant' has a wrong offset!");
static_assert(offsetof(UGymGuiEditorWidget, SelectedLevelKit) == 0x000358, "Member 'UGymGuiEditorWidget::SelectedLevelKit' has a wrong offset!");
static_assert(offsetof(UGymGuiEditorWidget, CategoryInfo) == 0x0003A8, "Member 'UGymGuiEditorWidget::CategoryInfo' has a wrong offset!");

// Class GYMGAME.GymCareerFirstRules
// 0x0020 (0x01B8 - 0x0198)
class UGymCareerFirstRules final : public UGymCareerRules
{
public:
	uint8                                         Pad_198[0x8];                                      // 0x0198(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Finishlines;                                       // 0x01A0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B0[0x8];                                      // 0x01B0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GoalReached(class AActor* Goal, class AGymCharacter* PlayerCharacter);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCareerFirstRules">();
	}
	static class UGymCareerFirstRules* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCareerFirstRules>();
	}
};
static_assert(alignof(UGymCareerFirstRules) == 0x000008, "Wrong alignment on UGymCareerFirstRules");
static_assert(sizeof(UGymCareerFirstRules) == 0x0001B8, "Wrong size on UGymCareerFirstRules");
static_assert(offsetof(UGymCareerFirstRules, Finishlines) == 0x0001A0, "Member 'UGymCareerFirstRules::Finishlines' has a wrong offset!");

// Class GYMGAME.GymCareerFloodedRules
// 0x0088 (0x0220 - 0x0198)
class UGymCareerFloodedRules final : public UGymCareerRules
{
public:
	class FString                                 NPCRacerRunData;                                   // 0x0198(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 NPCRacerCustomizationId;                           // 0x01A8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 NPCRacerName;                                      // 0x01B8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AGymCharacter>              CharacterClass;                                    // 0x01C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TideSpeed;                                         // 0x01D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1D4[0x4];                                      // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         FinalTaskHelicopterArrival;                        // 0x01D8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   FirstTaskCompletedWeather;                         // 0x01E0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ThreeTasksCompletedWeather;                        // 0x01E8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   SixTasksCompletedWeather;                          // 0x01F0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   FinalTaskWeather;                                  // 0x01F8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_200[0x8];                                      // 0x0200(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AGymCharacter*                          RacerCharacter;                                    // 0x0208(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AGymAIController*                       RunnerController;                                  // 0x0210(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ALevelSequenceActor*                    SequenceActor;                                     // 0x0218(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCareerFloodedRules">();
	}
	static class UGymCareerFloodedRules* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCareerFloodedRules>();
	}
};
static_assert(alignof(UGymCareerFloodedRules) == 0x000008, "Wrong alignment on UGymCareerFloodedRules");
static_assert(sizeof(UGymCareerFloodedRules) == 0x000220, "Wrong size on UGymCareerFloodedRules");
static_assert(offsetof(UGymCareerFloodedRules, NPCRacerRunData) == 0x000198, "Member 'UGymCareerFloodedRules::NPCRacerRunData' has a wrong offset!");
static_assert(offsetof(UGymCareerFloodedRules, NPCRacerCustomizationId) == 0x0001A8, "Member 'UGymCareerFloodedRules::NPCRacerCustomizationId' has a wrong offset!");
static_assert(offsetof(UGymCareerFloodedRules, NPCRacerName) == 0x0001B8, "Member 'UGymCareerFloodedRules::NPCRacerName' has a wrong offset!");
static_assert(offsetof(UGymCareerFloodedRules, CharacterClass) == 0x0001C8, "Member 'UGymCareerFloodedRules::CharacterClass' has a wrong offset!");
static_assert(offsetof(UGymCareerFloodedRules, TideSpeed) == 0x0001D0, "Member 'UGymCareerFloodedRules::TideSpeed' has a wrong offset!");
static_assert(offsetof(UGymCareerFloodedRules, FinalTaskHelicopterArrival) == 0x0001D8, "Member 'UGymCareerFloodedRules::FinalTaskHelicopterArrival' has a wrong offset!");
static_assert(offsetof(UGymCareerFloodedRules, FirstTaskCompletedWeather) == 0x0001E0, "Member 'UGymCareerFloodedRules::FirstTaskCompletedWeather' has a wrong offset!");
static_assert(offsetof(UGymCareerFloodedRules, ThreeTasksCompletedWeather) == 0x0001E8, "Member 'UGymCareerFloodedRules::ThreeTasksCompletedWeather' has a wrong offset!");
static_assert(offsetof(UGymCareerFloodedRules, SixTasksCompletedWeather) == 0x0001F0, "Member 'UGymCareerFloodedRules::SixTasksCompletedWeather' has a wrong offset!");
static_assert(offsetof(UGymCareerFloodedRules, FinalTaskWeather) == 0x0001F8, "Member 'UGymCareerFloodedRules::FinalTaskWeather' has a wrong offset!");
static_assert(offsetof(UGymCareerFloodedRules, RacerCharacter) == 0x000208, "Member 'UGymCareerFloodedRules::RacerCharacter' has a wrong offset!");
static_assert(offsetof(UGymCareerFloodedRules, RunnerController) == 0x000210, "Member 'UGymCareerFloodedRules::RunnerController' has a wrong offset!");
static_assert(offsetof(UGymCareerFloodedRules, SequenceActor) == 0x000218, "Member 'UGymCareerFloodedRules::SequenceActor' has a wrong offset!");

// Class GYMGAME.GymGuiControlPoint
// 0x0000 (0x0330 - 0x0330)
class UGymGuiControlPoint final : public UGymGuiMetaWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiControlPoint">();
	}
	static class UGymGuiControlPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiControlPoint>();
	}
};
static_assert(alignof(UGymGuiControlPoint) == 0x000008, "Wrong alignment on UGymGuiControlPoint");
static_assert(sizeof(UGymGuiControlPoint) == 0x000330, "Wrong size on UGymGuiControlPoint");

// Class GYMGAME.GymCareerRaveRules
// 0x00A8 (0x0240 - 0x0198)
class UGymCareerRaveRules final : public UGymCareerRules
{
public:
	class ULevelSequence*                         FirstTaskEndSequence;                              // 0x0198(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<float>                                 IceCreamObjectiveTimes;                            // 0x01A0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class FString>                         IceCreamDisableModes;                              // 0x01B0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class AGymCharacter>              CharacterClass;                                    // 0x01C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 Task05Custom;                                      // 0x01C8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 Task05RunData;                                     // 0x01D8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 Task06RunData;                                     // 0x01E8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1F8[0x48];                                     // 0x01F8(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BlowUpFuses();
	void FirstTaskEndCutsceneFinished();
	void OnIceCreamLocationCollided(class AGymLocationObjectiveActor* Location);
	void ResetGrindObjectives();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCareerRaveRules">();
	}
	static class UGymCareerRaveRules* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCareerRaveRules>();
	}
};
static_assert(alignof(UGymCareerRaveRules) == 0x000008, "Wrong alignment on UGymCareerRaveRules");
static_assert(sizeof(UGymCareerRaveRules) == 0x000240, "Wrong size on UGymCareerRaveRules");
static_assert(offsetof(UGymCareerRaveRules, FirstTaskEndSequence) == 0x000198, "Member 'UGymCareerRaveRules::FirstTaskEndSequence' has a wrong offset!");
static_assert(offsetof(UGymCareerRaveRules, IceCreamObjectiveTimes) == 0x0001A0, "Member 'UGymCareerRaveRules::IceCreamObjectiveTimes' has a wrong offset!");
static_assert(offsetof(UGymCareerRaveRules, IceCreamDisableModes) == 0x0001B0, "Member 'UGymCareerRaveRules::IceCreamDisableModes' has a wrong offset!");
static_assert(offsetof(UGymCareerRaveRules, CharacterClass) == 0x0001C0, "Member 'UGymCareerRaveRules::CharacterClass' has a wrong offset!");
static_assert(offsetof(UGymCareerRaveRules, Task05Custom) == 0x0001C8, "Member 'UGymCareerRaveRules::Task05Custom' has a wrong offset!");
static_assert(offsetof(UGymCareerRaveRules, Task05RunData) == 0x0001D8, "Member 'UGymCareerRaveRules::Task05RunData' has a wrong offset!");
static_assert(offsetof(UGymCareerRaveRules, Task06RunData) == 0x0001E8, "Member 'UGymCareerRaveRules::Task06RunData' has a wrong offset!");

// Class GYMGAME.GymCareerReplicatedData
// 0x0030 (0x00B8 - 0x0088)
class UGymCareerReplicatedData final : public UGymRuleReplicatedData
{
public:
	uint8                                         Pad_88[0x30];                                      // 0x0088(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Multi_SetCompletedtasks(const TArray<class FName>& Tasks);
	void Multi_SetCurrentTask(class UGymQuest* Task);
	void Multi_SetMaxTasks(int32 Tasks);
	void Multi_SetOverrideMusic(bool bOverride);
	void Multi_SetOverrideSegment(int32 Segment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCareerReplicatedData">();
	}
	static class UGymCareerReplicatedData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCareerReplicatedData>();
	}
};
static_assert(alignof(UGymCareerReplicatedData) == 0x000008, "Wrong alignment on UGymCareerReplicatedData");
static_assert(sizeof(UGymCareerReplicatedData) == 0x0000B8, "Wrong size on UGymCareerReplicatedData");

// Class GYMGAME.GymStaticLevelAsset
// 0x0190 (0x0428 - 0x0298)
class AGymStaticLevelAsset : public AActor
{
public:
	class USceneComponent*                        GymRoot;                                           // 0x0298(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UStaticMeshComponent*>           Ghosts;                                            // 0x02A0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<struct FVector>                        GhostOffsets;                                      // 0x02B0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<struct FRotator>                       GhostRotations;                                    // 0x02C0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class UStaticMeshComponent*>           GlowMeshes;                                        // 0x02D0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UGymAudioVolumeComponent*>       FoundAudioVolumeComponents;                        // 0x02E0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class AAudioVolume*>                   OwnedAudioVolumes;                                 // 0x02F0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_300[0x80];                                     // 0x0300(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bDoPlacementCollisionCheck;                        // 0x0380(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_381[0x3];                                      // 0x0381(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RecordId;                                          // 0x0384(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UStaticMeshComponent*>           Meshes;                                            // 0x0388(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UGymSnappingPoint*>              SnappingPoints;                                    // 0x0398(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UGymTrampolineMeshComponent*>    TrampolineSurfaces;                                // 0x03A8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          IsGymWall;                                         // 0x03B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGymFloor;                                        // 0x03B9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GhostX;                                            // 0x03BA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GhostY;                                            // 0x03BB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GhostZ;                                            // 0x03BC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAssetSpawnActor;                                // 0x03BD(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGymAssetSnapType                             SnapType;                                          // 0x03BE(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETubeType                                     TubeType;                                          // 0x03BF(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsStationary;                                     // 0x03C0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C1[0x7];                                      // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EGymAssetSurfaceFlag>                  AssetSurfaceFlags;                                 // 0x03C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ExposeOnSpawn, NativeAccessSpecifierPublic)
	struct FVector                                CollisionBoundCoeff;                               // 0x03D8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBeRemoved;                                     // 0x03F0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGymAssetType                                 AssetType;                                         // 0x03F1(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F2[0x16];                                     // 0x03F2(0x0016)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bAllowYawRotation;                                 // 0x0408(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowPitchRotation;                               // 0x0409(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowRollRotation;                                // 0x040A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40B[0x5];                                      // 0x040B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGymProperty>                   EditableProperties;                                // 0x0410(0x0010)(Edit, Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	class AGymMap*                                ParentMap;                                         // 0x0420(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void AssetPropertiesChanged();
	void BP_AssetPropertyChanged(const struct FGymProperty& Property);
	struct FBox GetBounds();
	struct FBox GetGridBounds(int32 GridSize);
	const TArray<struct FGymProperty> GetProperties();
	const struct FGymProperty GetProperty(class FName PropertyId);
	void OnEditorOpen(bool bOpen);

	int32 GetRecordId() const;
	bool HasRecordId() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymStaticLevelAsset">();
	}
	static class AGymStaticLevelAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymStaticLevelAsset>();
	}
};
static_assert(alignof(AGymStaticLevelAsset) == 0x000008, "Wrong alignment on AGymStaticLevelAsset");
static_assert(sizeof(AGymStaticLevelAsset) == 0x000428, "Wrong size on AGymStaticLevelAsset");
static_assert(offsetof(AGymStaticLevelAsset, GymRoot) == 0x000298, "Member 'AGymStaticLevelAsset::GymRoot' has a wrong offset!");
static_assert(offsetof(AGymStaticLevelAsset, Ghosts) == 0x0002A0, "Member 'AGymStaticLevelAsset::Ghosts' has a wrong offset!");
static_assert(offsetof(AGymStaticLevelAsset, GhostOffsets) == 0x0002B0, "Member 'AGymStaticLevelAsset::GhostOffsets' has a wrong offset!");
static_assert(offsetof(AGymStaticLevelAsset, GhostRotations) == 0x0002C0, "Member 'AGymStaticLevelAsset::GhostRotations' has a wrong offset!");
static_assert(offsetof(AGymStaticLevelAsset, GlowMeshes) == 0x0002D0, "Member 'AGymStaticLevelAsset::GlowMeshes' has a wrong offset!");
static_assert(offsetof(AGymStaticLevelAsset, FoundAudioVolumeComponents) == 0x0002E0, "Member 'AGymStaticLevelAsset::FoundAudioVolumeComponents' has a wrong offset!");
static_assert(offsetof(AGymStaticLevelAsset, OwnedAudioVolumes) == 0x0002F0, "Member 'AGymStaticLevelAsset::OwnedAudioVolumes' has a wrong offset!");
static_assert(offsetof(AGymStaticLevelAsset, bDoPlacementCollisionCheck) == 0x000380, "Member 'AGymStaticLevelAsset::bDoPlacementCollisionCheck' has a wrong offset!");
static_assert(offsetof(AGymStaticLevelAsset, RecordId) == 0x000384, "Member 'AGymStaticLevelAsset::RecordId' has a wrong offset!");
static_assert(offsetof(AGymStaticLevelAsset, Meshes) == 0x000388, "Member 'AGymStaticLevelAsset::Meshes' has a wrong offset!");
static_assert(offsetof(AGymStaticLevelAsset, SnappingPoints) == 0x000398, "Member 'AGymStaticLevelAsset::SnappingPoints' has a wrong offset!");
static_assert(offsetof(AGymStaticLevelAsset, TrampolineSurfaces) == 0x0003A8, "Member 'AGymStaticLevelAsset::TrampolineSurfaces' has a wrong offset!");
static_assert(offsetof(AGymStaticLevelAsset, IsGymWall) == 0x0003B8, "Member 'AGymStaticLevelAsset::IsGymWall' has a wrong offset!");
static_assert(offsetof(AGymStaticLevelAsset, IsGymFloor) == 0x0003B9, "Member 'AGymStaticLevelAsset::IsGymFloor' has a wrong offset!");
static_assert(offsetof(AGymStaticLevelAsset, GhostX) == 0x0003BA, "Member 'AGymStaticLevelAsset::GhostX' has a wrong offset!");
static_assert(offsetof(AGymStaticLevelAsset, GhostY) == 0x0003BB, "Member 'AGymStaticLevelAsset::GhostY' has a wrong offset!");
static_assert(offsetof(AGymStaticLevelAsset, GhostZ) == 0x0003BC, "Member 'AGymStaticLevelAsset::GhostZ' has a wrong offset!");
static_assert(offsetof(AGymStaticLevelAsset, bIsAssetSpawnActor) == 0x0003BD, "Member 'AGymStaticLevelAsset::bIsAssetSpawnActor' has a wrong offset!");
static_assert(offsetof(AGymStaticLevelAsset, SnapType) == 0x0003BE, "Member 'AGymStaticLevelAsset::SnapType' has a wrong offset!");
static_assert(offsetof(AGymStaticLevelAsset, TubeType) == 0x0003BF, "Member 'AGymStaticLevelAsset::TubeType' has a wrong offset!");
static_assert(offsetof(AGymStaticLevelAsset, bIsStationary) == 0x0003C0, "Member 'AGymStaticLevelAsset::bIsStationary' has a wrong offset!");
static_assert(offsetof(AGymStaticLevelAsset, AssetSurfaceFlags) == 0x0003C8, "Member 'AGymStaticLevelAsset::AssetSurfaceFlags' has a wrong offset!");
static_assert(offsetof(AGymStaticLevelAsset, CollisionBoundCoeff) == 0x0003D8, "Member 'AGymStaticLevelAsset::CollisionBoundCoeff' has a wrong offset!");
static_assert(offsetof(AGymStaticLevelAsset, bCanBeRemoved) == 0x0003F0, "Member 'AGymStaticLevelAsset::bCanBeRemoved' has a wrong offset!");
static_assert(offsetof(AGymStaticLevelAsset, AssetType) == 0x0003F1, "Member 'AGymStaticLevelAsset::AssetType' has a wrong offset!");
static_assert(offsetof(AGymStaticLevelAsset, bAllowYawRotation) == 0x000408, "Member 'AGymStaticLevelAsset::bAllowYawRotation' has a wrong offset!");
static_assert(offsetof(AGymStaticLevelAsset, bAllowPitchRotation) == 0x000409, "Member 'AGymStaticLevelAsset::bAllowPitchRotation' has a wrong offset!");
static_assert(offsetof(AGymStaticLevelAsset, bAllowRollRotation) == 0x00040A, "Member 'AGymStaticLevelAsset::bAllowRollRotation' has a wrong offset!");
static_assert(offsetof(AGymStaticLevelAsset, EditableProperties) == 0x000410, "Member 'AGymStaticLevelAsset::EditableProperties' has a wrong offset!");
static_assert(offsetof(AGymStaticLevelAsset, ParentMap) == 0x000420, "Member 'AGymStaticLevelAsset::ParentMap' has a wrong offset!");

// Class GYMGAME.GymMetaGameplayPiece
// 0x0000 (0x0428 - 0x0428)
class AGymMetaGameplayPiece : public AGymStaticLevelAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymMetaGameplayPiece">();
	}
	static class AGymMetaGameplayPiece* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymMetaGameplayPiece>();
	}
};
static_assert(alignof(AGymMetaGameplayPiece) == 0x000008, "Wrong alignment on AGymMetaGameplayPiece");
static_assert(sizeof(AGymMetaGameplayPiece) == 0x000428, "Wrong size on AGymMetaGameplayPiece");

// Class GYMGAME.GymRuleSpecificGameplayPiece
// 0x0008 (0x0430 - 0x0428)
class AGymRuleSpecificGameplayPiece : public AGymMetaGameplayPiece
{
public:
	class UGymGameModeComponent*                  GameModeComponent;                                 // 0x0428(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymRuleSpecificGameplayPiece">();
	}
	static class AGymRuleSpecificGameplayPiece* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymRuleSpecificGameplayPiece>();
	}
};
static_assert(alignof(AGymRuleSpecificGameplayPiece) == 0x000008, "Wrong alignment on AGymRuleSpecificGameplayPiece");
static_assert(sizeof(AGymRuleSpecificGameplayPiece) == 0x000430, "Wrong size on AGymRuleSpecificGameplayPiece");
static_assert(offsetof(AGymRuleSpecificGameplayPiece, GameModeComponent) == 0x000428, "Member 'AGymRuleSpecificGameplayPiece::GameModeComponent' has a wrong offset!");

// Class GYMGAME.GymLootActor
// 0x0030 (0x0460 - 0x0430)
class AGymLootActor final : public AGymRuleSpecificGameplayPiece
{
public:
	uint8                                         Pad_430[0x8];                                      // 0x0430(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USphereComponent*                       SphereComponent;                                   // 0x0438(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      CollectEffect;                                     // 0x0440(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        CollectSFX;                                        // 0x0448(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomSound;                                      // 0x0450(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_451[0x3];                                      // 0x0451(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxLootTypeNum;                                    // 0x0454(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_458[0x8];                                      // 0x0458(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetVisibility(bool bVisibility);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymLootActor">();
	}
	static class AGymLootActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymLootActor>();
	}
};
static_assert(alignof(AGymLootActor) == 0x000008, "Wrong alignment on AGymLootActor");
static_assert(sizeof(AGymLootActor) == 0x000460, "Wrong size on AGymLootActor");
static_assert(offsetof(AGymLootActor, SphereComponent) == 0x000438, "Member 'AGymLootActor::SphereComponent' has a wrong offset!");
static_assert(offsetof(AGymLootActor, CollectEffect) == 0x000440, "Member 'AGymLootActor::CollectEffect' has a wrong offset!");
static_assert(offsetof(AGymLootActor, CollectSFX) == 0x000448, "Member 'AGymLootActor::CollectSFX' has a wrong offset!");
static_assert(offsetof(AGymLootActor, bCustomSound) == 0x000450, "Member 'AGymLootActor::bCustomSound' has a wrong offset!");
static_assert(offsetof(AGymLootActor, MaxLootTypeNum) == 0x000454, "Member 'AGymLootActor::MaxLootTypeNum' has a wrong offset!");

// Class GYMGAME.GymCareerRuleMusicState
// 0x0010 (0x0100 - 0x00F0)
class UGymCareerRuleMusicState final : public UGymMetaRuleMusicState
{
public:
	uint8                                         Pad_F0[0x10];                                      // 0x00F0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCareerRuleMusicState">();
	}
	static class UGymCareerRuleMusicState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCareerRuleMusicState>();
	}
};
static_assert(alignof(UGymCareerRuleMusicState) == 0x000008, "Wrong alignment on UGymCareerRuleMusicState");
static_assert(sizeof(UGymCareerRuleMusicState) == 0x000100, "Wrong size on UGymCareerRuleMusicState");

// Class GYMGAME.GymCareerSkateRules
// 0x0000 (0x0198 - 0x0198)
class UGymCareerSkateRules final : public UGymCareerRules
{
public:
	void EndPoliceEvent();
	void StartPoliceEvent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCareerSkateRules">();
	}
	static class UGymCareerSkateRules* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCareerSkateRules>();
	}
};
static_assert(alignof(UGymCareerSkateRules) == 0x000008, "Wrong alignment on UGymCareerSkateRules");
static_assert(sizeof(UGymCareerSkateRules) == 0x000198, "Wrong size on UGymCareerSkateRules");

// Class GYMGAME.GymGuiPodiumNameplateWidget
// 0x0000 (0x02C0 - 0x02C0)
class UGymGuiPodiumNameplateWidget final : public UUserWidget
{
public:
	void BP_Hide();
	void BP_SetPlayerScore(const struct FGymPodiumScoreData& Score);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiPodiumNameplateWidget">();
	}
	static class UGymGuiPodiumNameplateWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiPodiumNameplateWidget>();
	}
};
static_assert(alignof(UGymGuiPodiumNameplateWidget) == 0x000008, "Wrong alignment on UGymGuiPodiumNameplateWidget");
static_assert(sizeof(UGymGuiPodiumNameplateWidget) == 0x0002C0, "Wrong size on UGymGuiPodiumNameplateWidget");

// Class GYMGAME.GymCareerSplashRules
// 0x0040 (0x01D8 - 0x0198)
class UGymCareerSplashRules final : public UGymCareerRules
{
public:
	class FString                                 CustomizationId;                                   // 0x0198(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AGymCharacter>              CharacterClass;                                    // 0x01A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RunData;                                           // 0x01B0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C0[0x8];                                      // 0x01C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AGymCharacter*                          Character;                                         // 0x01C8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AGymAIController*                       AIController;                                      // 0x01D0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCareerSplashRules">();
	}
	static class UGymCareerSplashRules* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCareerSplashRules>();
	}
};
static_assert(alignof(UGymCareerSplashRules) == 0x000008, "Wrong alignment on UGymCareerSplashRules");
static_assert(sizeof(UGymCareerSplashRules) == 0x0001D8, "Wrong size on UGymCareerSplashRules");
static_assert(offsetof(UGymCareerSplashRules, CustomizationId) == 0x000198, "Member 'UGymCareerSplashRules::CustomizationId' has a wrong offset!");
static_assert(offsetof(UGymCareerSplashRules, CharacterClass) == 0x0001A8, "Member 'UGymCareerSplashRules::CharacterClass' has a wrong offset!");
static_assert(offsetof(UGymCareerSplashRules, RunData) == 0x0001B0, "Member 'UGymCareerSplashRules::RunData' has a wrong offset!");
static_assert(offsetof(UGymCareerSplashRules, Character) == 0x0001C8, "Member 'UGymCareerSplashRules::Character' has a wrong offset!");
static_assert(offsetof(UGymCareerSplashRules, AIController) == 0x0001D0, "Member 'UGymCareerSplashRules::AIController' has a wrong offset!");

// Class GYMGAME.GymCareerStadiumRules
// 0x0000 (0x0198 - 0x0198)
class UGymCareerStadiumRules final : public UGymCareerRules
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCareerStadiumRules">();
	}
	static class UGymCareerStadiumRules* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCareerStadiumRules>();
	}
};
static_assert(alignof(UGymCareerStadiumRules) == 0x000008, "Wrong alignment on UGymCareerStadiumRules");
static_assert(sizeof(UGymCareerStadiumRules) == 0x000198, "Wrong size on UGymCareerStadiumRules");

// Class GYMGAME.GymLootRules
// 0x0048 (0x0180 - 0x0138)
class UGymLootRules : public UGymRules
{
public:
	uint8                                         Pad_138[0x8];                                      // 0x0138(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         AllLoots;                                          // 0x0140(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class AActor*>                         CollectedLoots;                                    // 0x0150(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	int32                                         MaxLootNum;                                        // 0x0160(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RaceTime;                                          // 0x0164(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinLootNeeded;                                     // 0x0168(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELootMode                                     LootMode;                                          // 0x016C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16D[0xB];                                      // 0x016D(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymLootReplicatedData*                 LootRepData;                                       // 0x0178(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnLootCollected(class AGymLootActor* LootActor, class AController* Player);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymLootRules">();
	}
	static class UGymLootRules* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymLootRules>();
	}
};
static_assert(alignof(UGymLootRules) == 0x000008, "Wrong alignment on UGymLootRules");
static_assert(sizeof(UGymLootRules) == 0x000180, "Wrong size on UGymLootRules");
static_assert(offsetof(UGymLootRules, AllLoots) == 0x000140, "Member 'UGymLootRules::AllLoots' has a wrong offset!");
static_assert(offsetof(UGymLootRules, CollectedLoots) == 0x000150, "Member 'UGymLootRules::CollectedLoots' has a wrong offset!");
static_assert(offsetof(UGymLootRules, MaxLootNum) == 0x000160, "Member 'UGymLootRules::MaxLootNum' has a wrong offset!");
static_assert(offsetof(UGymLootRules, RaceTime) == 0x000164, "Member 'UGymLootRules::RaceTime' has a wrong offset!");
static_assert(offsetof(UGymLootRules, MinLootNeeded) == 0x000168, "Member 'UGymLootRules::MinLootNeeded' has a wrong offset!");
static_assert(offsetof(UGymLootRules, LootMode) == 0x00016C, "Member 'UGymLootRules::LootMode' has a wrong offset!");
static_assert(offsetof(UGymLootRules, LootRepData) == 0x000178, "Member 'UGymLootRules::LootRepData' has a wrong offset!");

// Class GYMGAME.GymCareerStreetsRules
// 0x0088 (0x0220 - 0x0198)
class UGymCareerStreetsRules final : public UGymCareerRules
{
public:
	TArray<class FString>                         BombRunDatas;                                      // 0x0198(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FString                                 AJRunData;                                         // 0x01A8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 AJCustomization;                                   // 0x01B8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AGymTaggedPlayerMarker>     TagMarkerClass;                                    // 0x01C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AGymChasedPlayerMarker>     ChaseMarkerClass;                                  // 0x01D0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 BombChaseCustomization;                            // 0x01D8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AGymCharacter>              CharacterClass;                                    // 0x01E8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BombTimer;                                         // 0x01F0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1F4[0x2C];                                     // 0x01F4(0x002C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCareerStreetsRules">();
	}
	static class UGymCareerStreetsRules* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCareerStreetsRules>();
	}
};
static_assert(alignof(UGymCareerStreetsRules) == 0x000008, "Wrong alignment on UGymCareerStreetsRules");
static_assert(sizeof(UGymCareerStreetsRules) == 0x000220, "Wrong size on UGymCareerStreetsRules");
static_assert(offsetof(UGymCareerStreetsRules, BombRunDatas) == 0x000198, "Member 'UGymCareerStreetsRules::BombRunDatas' has a wrong offset!");
static_assert(offsetof(UGymCareerStreetsRules, AJRunData) == 0x0001A8, "Member 'UGymCareerStreetsRules::AJRunData' has a wrong offset!");
static_assert(offsetof(UGymCareerStreetsRules, AJCustomization) == 0x0001B8, "Member 'UGymCareerStreetsRules::AJCustomization' has a wrong offset!");
static_assert(offsetof(UGymCareerStreetsRules, TagMarkerClass) == 0x0001C8, "Member 'UGymCareerStreetsRules::TagMarkerClass' has a wrong offset!");
static_assert(offsetof(UGymCareerStreetsRules, ChaseMarkerClass) == 0x0001D0, "Member 'UGymCareerStreetsRules::ChaseMarkerClass' has a wrong offset!");
static_assert(offsetof(UGymCareerStreetsRules, BombChaseCustomization) == 0x0001D8, "Member 'UGymCareerStreetsRules::BombChaseCustomization' has a wrong offset!");
static_assert(offsetof(UGymCareerStreetsRules, CharacterClass) == 0x0001E8, "Member 'UGymCareerStreetsRules::CharacterClass' has a wrong offset!");
static_assert(offsetof(UGymCareerStreetsRules, BombTimer) == 0x0001F0, "Member 'UGymCareerStreetsRules::BombTimer' has a wrong offset!");

// Class GYMGAME.GymCharacter
// 0x0240 (0x08C0 - 0x0680)
class AGymCharacter : public ACharacter
{
public:
	uint8                                         Pad_678[0x20];                                     // 0x0678(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          InEditMode;                                        // 0x0698(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EPhysicalSurface                              CurrentPhysicsSurface;                             // 0x0699(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_69A[0x2];                                      // 0x069A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CapsuleRadius;                                     // 0x069C(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CapsuleHalfHeight;                                 // 0x06A0(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6A4[0x29];                                     // 0x06A4(0x0029)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          AnimationDebugModeActive;                          // 0x06CD(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6CE[0x2];                                      // 0x06CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RepVaultCount;                                     // 0x06D0(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D4[0x9C];                                     // 0x06D4(0x009C)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymConfigMovement*                     MovementConfig;                                    // 0x0770(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymConfigCameraDataAsset*              CameraConfig;                                      // 0x0778(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymConfigEditorDataAsset*              EditorConfig;                                      // 0x0780(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymConfigAnimationDataAsset*           AnimationConfig;                                   // 0x0788(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymConfigAudioDataAsset*               AudioConfig;                                       // 0x0790(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymConfigForceFeedback*                ForceFeedbackConfig;                               // 0x0798(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A0[0x20];                                     // 0x07A0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymEditorControl*                      MapEditorControl;                                  // 0x07C0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C8[0x28];                                     // 0x07C8(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymCustomizationControl*               CustomizationControl;                              // 0x07F0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7F8[0x38];                                     // 0x07F8(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class APostProcessVolume*                     PostProcessVolume;                                 // 0x0830(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymPivot*                              CameraYawPivot;                                    // 0x0838(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraComponent*                       Camera;                                            // 0x0840(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpringArmComponent*                    SpringArm;                                         // 0x0848(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       Spline;                                            // 0x0850(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USphereComponent*                       InteractionSphere;                                 // 0x0858(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 BaseSkeletalMeshComponent;                         // 0x0860(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDisplayModel;                                    // 0x0868(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverridePoseTick;                                 // 0x0869(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPossessedBy;                                    // 0x086A(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_86B[0x5];                                      // 0x086B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGymCharacterMetaControl*>       AllControls;                                       // 0x0870(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_880[0x8];                                      // 0x0880(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InitialLocation;                                   // 0x0888(0x0018)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                               InitialRotation;                                   // 0x08A0(0x0018)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8B8[0x8];                                      // 0x08B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EnableBotTick(bool bEnable);
	void ForceSetPlayerLocationAndRotation(const struct FVector& Location, const struct FRotator& Rotation);
	void ForceStateSyncEventRPC(double Timestamp, float EventInSeconds, const struct FVector& Loc, bool FireOnServer, bool FireOnClient, bool ClientIgnoreEventIfLate);
	void Multi_EndRagdoll();
	void Multi_ImportAndPlayRecord(const class FString& Filename);
	void Multi_Ragdoll(bool bGetUpWhenPossible);
	void Multi_Ragdoll_AddForce(const struct FVector& Impulse);
	void OnAnimationDebugModeReset();
	void OnRep_PossessedBy();
	void OnRepInitialLocation();
	void OnRepInitialRotation();
	void RespawnPlayerToStartRPC();
	void Server_ImportAndPlayRecord(const class FString& Filename);
	void SetControlTickEnabled(bool bEnabled, const class FString& Name_0);
	void SetEditMode_Server(bool Value);
	void ToggleInputRecord();
	void UpdateManualServerWorldTimeDeltaRPC(double ServerWorldTime);

	class UGymAnimationControl* GetAnimationControl() const;
	class UGymCameraControl* GetCameraControl() const;
	class UGymCustomizationControl* GetCustomizationControl() const;
	class UGymDialogueControl* GetDialogueControl() const;
	class UGymEditorControl* GetEditorControl() const;
	class AGymPlayerController* GetGymController() const;
	class AGymPlayerState* GetGymPlayerState() const;
	class UGymInputControl* GetInputControl() const;
	class UGymRuleControl* GetRuleControl() const;
	void RenderAssetThumbnails(const class FString& Arg1) const;
	void RenderCustomizationPreviews(const class FString& Arg1, const class FString& Arg2) const;
	void RenderCustomizationThumbnails(const class FString& Arg1, const class FString& Arg2) const;
	void ReplaceAssetThumbnails(const class FString& Arg1) const;
	void ReplaceCustomizationPreviews(const class FString& Arg1) const;
	void ReplaceCustomizationThumbnails(const class FString& Arg1) const;
	void RepNotify_UpdateVaultCount() const;
	bool WaitingForRespawn() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCharacter">();
	}
	static class AGymCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymCharacter>();
	}
};
static_assert(alignof(AGymCharacter) == 0x000010, "Wrong alignment on AGymCharacter");
static_assert(sizeof(AGymCharacter) == 0x0008C0, "Wrong size on AGymCharacter");
static_assert(offsetof(AGymCharacter, InEditMode) == 0x000698, "Member 'AGymCharacter::InEditMode' has a wrong offset!");
static_assert(offsetof(AGymCharacter, CurrentPhysicsSurface) == 0x000699, "Member 'AGymCharacter::CurrentPhysicsSurface' has a wrong offset!");
static_assert(offsetof(AGymCharacter, CapsuleRadius) == 0x00069C, "Member 'AGymCharacter::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(AGymCharacter, CapsuleHalfHeight) == 0x0006A0, "Member 'AGymCharacter::CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(AGymCharacter, AnimationDebugModeActive) == 0x0006CD, "Member 'AGymCharacter::AnimationDebugModeActive' has a wrong offset!");
static_assert(offsetof(AGymCharacter, RepVaultCount) == 0x0006D0, "Member 'AGymCharacter::RepVaultCount' has a wrong offset!");
static_assert(offsetof(AGymCharacter, MovementConfig) == 0x000770, "Member 'AGymCharacter::MovementConfig' has a wrong offset!");
static_assert(offsetof(AGymCharacter, CameraConfig) == 0x000778, "Member 'AGymCharacter::CameraConfig' has a wrong offset!");
static_assert(offsetof(AGymCharacter, EditorConfig) == 0x000780, "Member 'AGymCharacter::EditorConfig' has a wrong offset!");
static_assert(offsetof(AGymCharacter, AnimationConfig) == 0x000788, "Member 'AGymCharacter::AnimationConfig' has a wrong offset!");
static_assert(offsetof(AGymCharacter, AudioConfig) == 0x000790, "Member 'AGymCharacter::AudioConfig' has a wrong offset!");
static_assert(offsetof(AGymCharacter, ForceFeedbackConfig) == 0x000798, "Member 'AGymCharacter::ForceFeedbackConfig' has a wrong offset!");
static_assert(offsetof(AGymCharacter, MapEditorControl) == 0x0007C0, "Member 'AGymCharacter::MapEditorControl' has a wrong offset!");
static_assert(offsetof(AGymCharacter, CustomizationControl) == 0x0007F0, "Member 'AGymCharacter::CustomizationControl' has a wrong offset!");
static_assert(offsetof(AGymCharacter, PostProcessVolume) == 0x000830, "Member 'AGymCharacter::PostProcessVolume' has a wrong offset!");
static_assert(offsetof(AGymCharacter, CameraYawPivot) == 0x000838, "Member 'AGymCharacter::CameraYawPivot' has a wrong offset!");
static_assert(offsetof(AGymCharacter, Camera) == 0x000840, "Member 'AGymCharacter::Camera' has a wrong offset!");
static_assert(offsetof(AGymCharacter, SpringArm) == 0x000848, "Member 'AGymCharacter::SpringArm' has a wrong offset!");
static_assert(offsetof(AGymCharacter, Spline) == 0x000850, "Member 'AGymCharacter::Spline' has a wrong offset!");
static_assert(offsetof(AGymCharacter, InteractionSphere) == 0x000858, "Member 'AGymCharacter::InteractionSphere' has a wrong offset!");
static_assert(offsetof(AGymCharacter, BaseSkeletalMeshComponent) == 0x000860, "Member 'AGymCharacter::BaseSkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(AGymCharacter, IsDisplayModel) == 0x000868, "Member 'AGymCharacter::IsDisplayModel' has a wrong offset!");
static_assert(offsetof(AGymCharacter, bOverridePoseTick) == 0x000869, "Member 'AGymCharacter::bOverridePoseTick' has a wrong offset!");
static_assert(offsetof(AGymCharacter, bIsPossessedBy) == 0x00086A, "Member 'AGymCharacter::bIsPossessedBy' has a wrong offset!");
static_assert(offsetof(AGymCharacter, AllControls) == 0x000870, "Member 'AGymCharacter::AllControls' has a wrong offset!");
static_assert(offsetof(AGymCharacter, InitialLocation) == 0x000888, "Member 'AGymCharacter::InitialLocation' has a wrong offset!");
static_assert(offsetof(AGymCharacter, InitialRotation) == 0x0008A0, "Member 'AGymCharacter::InitialRotation' has a wrong offset!");

// Class GYMGAME.GymLocationMarker
// 0x0000 (0x0298 - 0x0298)
class AGymLocationMarker : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymLocationMarker">();
	}
	static class AGymLocationMarker* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymLocationMarker>();
	}
};
static_assert(alignof(AGymLocationMarker) == 0x000008, "Wrong alignment on AGymLocationMarker");
static_assert(sizeof(AGymLocationMarker) == 0x000298, "Wrong size on AGymLocationMarker");

// Class GYMGAME.GymCharacterAnimInstance
// 0x0370 (0x06C0 - 0x0350)
class UGymCharacterAnimInstance : public UAnimInstance
{
public:
	class FName                                   CurrentMovementState;                              // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BodyOffset;                                        // 0x0350(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsWoman;                                           // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnBasicMovement;                                   // 0x0369(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36A[0x6];                                      // 0x036A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymBasicAnimatorProps                 BasicMovement;                                     // 0x0370(0x0098)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGymSwimmingAnimatorProps              Swimming;                                          // 0x0408(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGymUtilityAnimatorProps               Utility;                                           // 0x0428(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGymFootIKAnimatorProps                FootIK;                                            // 0x0440(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGymVaultingAnimatorProps              Vaulting;                                          // 0x0488(0x0080)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGymWallRunningAnimatorProps           WallRunning;                                       // 0x0508(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_514[0x4];                                      // 0x0514(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymGrindingAnimatorProps              Grinding;                                          // 0x0518(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGymWireWalkingAnimatorProps           WireWalking;                                       // 0x0540(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGymRollingAnimatorProps               Rolling;                                           // 0x054C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGymSlidingAnimatorProps               Sliding;                                           // 0x0558(0x0003)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_55B[0x1];                                      // 0x055B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymWallScrambleAnimatorProps          WallScramble;                                      // 0x055C(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGYmZiplineAnimatorProps               Zipline;                                           // 0x0574(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGymIdleAnimatorProps                  Idle;                                              // 0x057C(0x0002)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_57E[0x2];                                      // 0x057E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymTauntAnimatorProps                 Taunt;                                             // 0x0580(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          AimIKEnabled;                                      // 0x05F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F1[0x7];                                      // 0x05F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AimFocusPoint;                                     // 0x05F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGymHandsIKAnimatorProps               HankIK;                                            // 0x0610(0x00A0)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class UGymAnimationControl*                   Control;                                           // 0x06B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6B8[0x8];                                      // 0x06B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAnimationNotify(const class FString& Name_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCharacterAnimInstance">();
	}
	static class UGymCharacterAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCharacterAnimInstance>();
	}
};
static_assert(alignof(UGymCharacterAnimInstance) == 0x000010, "Wrong alignment on UGymCharacterAnimInstance");
static_assert(sizeof(UGymCharacterAnimInstance) == 0x0006C0, "Wrong size on UGymCharacterAnimInstance");
static_assert(offsetof(UGymCharacterAnimInstance, CurrentMovementState) == 0x000348, "Member 'UGymCharacterAnimInstance::CurrentMovementState' has a wrong offset!");
static_assert(offsetof(UGymCharacterAnimInstance, BodyOffset) == 0x000350, "Member 'UGymCharacterAnimInstance::BodyOffset' has a wrong offset!");
static_assert(offsetof(UGymCharacterAnimInstance, IsWoman) == 0x000368, "Member 'UGymCharacterAnimInstance::IsWoman' has a wrong offset!");
static_assert(offsetof(UGymCharacterAnimInstance, OnBasicMovement) == 0x000369, "Member 'UGymCharacterAnimInstance::OnBasicMovement' has a wrong offset!");
static_assert(offsetof(UGymCharacterAnimInstance, BasicMovement) == 0x000370, "Member 'UGymCharacterAnimInstance::BasicMovement' has a wrong offset!");
static_assert(offsetof(UGymCharacterAnimInstance, Swimming) == 0x000408, "Member 'UGymCharacterAnimInstance::Swimming' has a wrong offset!");
static_assert(offsetof(UGymCharacterAnimInstance, Utility) == 0x000428, "Member 'UGymCharacterAnimInstance::Utility' has a wrong offset!");
static_assert(offsetof(UGymCharacterAnimInstance, FootIK) == 0x000440, "Member 'UGymCharacterAnimInstance::FootIK' has a wrong offset!");
static_assert(offsetof(UGymCharacterAnimInstance, Vaulting) == 0x000488, "Member 'UGymCharacterAnimInstance::Vaulting' has a wrong offset!");
static_assert(offsetof(UGymCharacterAnimInstance, WallRunning) == 0x000508, "Member 'UGymCharacterAnimInstance::WallRunning' has a wrong offset!");
static_assert(offsetof(UGymCharacterAnimInstance, Grinding) == 0x000518, "Member 'UGymCharacterAnimInstance::Grinding' has a wrong offset!");
static_assert(offsetof(UGymCharacterAnimInstance, WireWalking) == 0x000540, "Member 'UGymCharacterAnimInstance::WireWalking' has a wrong offset!");
static_assert(offsetof(UGymCharacterAnimInstance, Rolling) == 0x00054C, "Member 'UGymCharacterAnimInstance::Rolling' has a wrong offset!");
static_assert(offsetof(UGymCharacterAnimInstance, Sliding) == 0x000558, "Member 'UGymCharacterAnimInstance::Sliding' has a wrong offset!");
static_assert(offsetof(UGymCharacterAnimInstance, WallScramble) == 0x00055C, "Member 'UGymCharacterAnimInstance::WallScramble' has a wrong offset!");
static_assert(offsetof(UGymCharacterAnimInstance, Zipline) == 0x000574, "Member 'UGymCharacterAnimInstance::Zipline' has a wrong offset!");
static_assert(offsetof(UGymCharacterAnimInstance, Idle) == 0x00057C, "Member 'UGymCharacterAnimInstance::Idle' has a wrong offset!");
static_assert(offsetof(UGymCharacterAnimInstance, Taunt) == 0x000580, "Member 'UGymCharacterAnimInstance::Taunt' has a wrong offset!");
static_assert(offsetof(UGymCharacterAnimInstance, AimIKEnabled) == 0x0005F0, "Member 'UGymCharacterAnimInstance::AimIKEnabled' has a wrong offset!");
static_assert(offsetof(UGymCharacterAnimInstance, AimFocusPoint) == 0x0005F8, "Member 'UGymCharacterAnimInstance::AimFocusPoint' has a wrong offset!");
static_assert(offsetof(UGymCharacterAnimInstance, HankIK) == 0x000610, "Member 'UGymCharacterAnimInstance::HankIK' has a wrong offset!");
static_assert(offsetof(UGymCharacterAnimInstance, Control) == 0x0006B0, "Member 'UGymCharacterAnimInstance::Control' has a wrong offset!");

// Class GYMGAME.GymCharacterCustomizationSave
// 0x0010 (0x0038 - 0x0028)
class UGymCharacterCustomizationSave final : public USaveGame
{
public:
	struct FGymCharacterCustomization             Customization;                                     // 0x0028(0x0010)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCharacterCustomizationSave">();
	}
	static class UGymCharacterCustomizationSave* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCharacterCustomizationSave>();
	}
};
static_assert(alignof(UGymCharacterCustomizationSave) == 0x000008, "Wrong alignment on UGymCharacterCustomizationSave");
static_assert(sizeof(UGymCharacterCustomizationSave) == 0x000038, "Wrong size on UGymCharacterCustomizationSave");
static_assert(offsetof(UGymCharacterCustomizationSave, Customization) == 0x000028, "Member 'UGymCharacterCustomizationSave::Customization' has a wrong offset!");

// Class GYMGAME.GymGuiPlaylistWidget
// 0x0050 (0x0388 - 0x0338)
class UGymGuiPlaylistWidget : public UGymGuiGlobalMetaWidget
{
public:
	struct FGymPlayerScoreboard                   ScoreboardData;                                    // 0x0338(0x0048)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	bool                                          IsFinal;                                           // 0x0380(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EGymPlaylistType                              PlayListType;                                      // 0x0381(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_382[0x2];                                      // 0x0382(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToLevelTravel;                                 // 0x0384(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class FString GetPlaylistName();
	void LoadNextLevel();
	void OpenScoreboard(bool bIsValidLevel);
	void OrderByLastLevelTotalScore();
	void OrderByThisLevelStanding();
	void OrderByTotalScore();
	void Restart();
	void ReturnToMainMenu();

	int32 GetLevelCount() const;
	bool IsLocalAndFinal() const;
	bool IsLocalPlaylist() const;
	bool IsSingleCareerLevel() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiPlaylistWidget">();
	}
	static class UGymGuiPlaylistWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiPlaylistWidget>();
	}
};
static_assert(alignof(UGymGuiPlaylistWidget) == 0x000008, "Wrong alignment on UGymGuiPlaylistWidget");
static_assert(sizeof(UGymGuiPlaylistWidget) == 0x000388, "Wrong size on UGymGuiPlaylistWidget");
static_assert(offsetof(UGymGuiPlaylistWidget, ScoreboardData) == 0x000338, "Member 'UGymGuiPlaylistWidget::ScoreboardData' has a wrong offset!");
static_assert(offsetof(UGymGuiPlaylistWidget, IsFinal) == 0x000380, "Member 'UGymGuiPlaylistWidget::IsFinal' has a wrong offset!");
static_assert(offsetof(UGymGuiPlaylistWidget, PlayListType) == 0x000381, "Member 'UGymGuiPlaylistWidget::PlayListType' has a wrong offset!");
static_assert(offsetof(UGymGuiPlaylistWidget, TimeToLevelTravel) == 0x000384, "Member 'UGymGuiPlaylistWidget::TimeToLevelTravel' has a wrong offset!");

// Class GYMGAME.GymGuiRuleStateWidget
// 0x0008 (0x0340 - 0x0338)
class UGymGuiRuleStateWidget : public UGymGuiCharacterMetaWidget
{
public:
	uint8                                         Pad_338[0x8];                                      // 0x0338(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEliminated(const EEliminationReason EliminationReason);
	void OnFinished(bool bIsRoyale);
	void ParticipantReachedCheckpoint(int32 Index_0);

	class UGymParticipantRepData* GetBasicParticipantData() const;
	class UGymRuleReplicatedData* GetBasicRuleData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiRuleStateWidget">();
	}
	static class UGymGuiRuleStateWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiRuleStateWidget>();
	}
};
static_assert(alignof(UGymGuiRuleStateWidget) == 0x000008, "Wrong alignment on UGymGuiRuleStateWidget");
static_assert(sizeof(UGymGuiRuleStateWidget) == 0x000340, "Wrong size on UGymGuiRuleStateWidget");

// Class GYMGAME.GymCharacterCustomizationWidget
// 0x01B8 (0x04F0 - 0x0338)
class UGymCharacterCustomizationWidget : public UGymGuiGlobalMetaWidget
{
public:
	uint8                                         Pad_338[0x8];                                      // 0x0338(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCustomizationOptionCache              HairOptions;                                       // 0x0340(0x0020)(NativeAccessSpecifierPrivate)
	struct FCustomizationOptionCache              HeadOptions;                                       // 0x0360(0x0020)(NativeAccessSpecifierPrivate)
	struct FCustomizationOptionCache              ShirtOptions;                                      // 0x0380(0x0020)(NativeAccessSpecifierPrivate)
	struct FCustomizationOptionCache              BodyOptions;                                       // 0x03A0(0x0020)(NativeAccessSpecifierPrivate)
	struct FCustomizationOptionCache              PantsOptions;                                      // 0x03C0(0x0020)(NativeAccessSpecifierPrivate)
	struct FCustomizationOptionCache              ArmsOptions;                                       // 0x03E0(0x0020)(NativeAccessSpecifierPrivate)
	struct FCustomizationOptionCache              WaistOptions;                                      // 0x0400(0x0020)(NativeAccessSpecifierPrivate)
	struct FCustomizationOptionCache              LegsOptions;                                       // 0x0420(0x0020)(NativeAccessSpecifierPrivate)
	struct FCustomizationOptionCache              EyeWearOptions;                                    // 0x0440(0x0020)(NativeAccessSpecifierPrivate)
	struct FCustomizationOptionCache              FaceExtrasOptions;                                 // 0x0460(0x0020)(NativeAccessSpecifierPrivate)
	struct FCustomizationOptionCache              ShoesOptions;                                      // 0x0480(0x0020)(NativeAccessSpecifierPrivate)
	struct FCustomizationOptionCache              GlovesOptions;                                     // 0x04A0(0x0020)(NativeAccessSpecifierPrivate)
	struct FCustomizationOptionCache              HatOptions;                                        // 0x04C0(0x0020)(NativeAccessSpecifierPrivate)
	TArray<struct FGymCharacterCustomizationGUIOption> EmptyOptions;                                      // 0x04E0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static bool IsAssetOwned(const struct FGymInventory& Inventory, const class UGymCustomizationAsset* Asset);

	const TArray<struct FGymCharacterCustomizationGUIOption> GetOptions(class FName CharacterSlot);
	void OnAssetListUpdated();
	void RandomizeCharacter();

	void ApplyCustomizationAttribute(const struct FGymCharacterCustomizationGUIOption& Option) const;
	struct FGymCharacterCustomizationGUIOption GetCurrentOptionForSlot(class FName CharacterSlot) const;
	TArray<struct FGymCharacterCustomizationGUIOption> GetSlots() const;
	bool IsEverySlotInUse() const;
	void ResetCharacter() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCharacterCustomizationWidget">();
	}
	static class UGymCharacterCustomizationWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCharacterCustomizationWidget>();
	}
};
static_assert(alignof(UGymCharacterCustomizationWidget) == 0x000008, "Wrong alignment on UGymCharacterCustomizationWidget");
static_assert(sizeof(UGymCharacterCustomizationWidget) == 0x0004F0, "Wrong size on UGymCharacterCustomizationWidget");
static_assert(offsetof(UGymCharacterCustomizationWidget, HairOptions) == 0x000340, "Member 'UGymCharacterCustomizationWidget::HairOptions' has a wrong offset!");
static_assert(offsetof(UGymCharacterCustomizationWidget, HeadOptions) == 0x000360, "Member 'UGymCharacterCustomizationWidget::HeadOptions' has a wrong offset!");
static_assert(offsetof(UGymCharacterCustomizationWidget, ShirtOptions) == 0x000380, "Member 'UGymCharacterCustomizationWidget::ShirtOptions' has a wrong offset!");
static_assert(offsetof(UGymCharacterCustomizationWidget, BodyOptions) == 0x0003A0, "Member 'UGymCharacterCustomizationWidget::BodyOptions' has a wrong offset!");
static_assert(offsetof(UGymCharacterCustomizationWidget, PantsOptions) == 0x0003C0, "Member 'UGymCharacterCustomizationWidget::PantsOptions' has a wrong offset!");
static_assert(offsetof(UGymCharacterCustomizationWidget, ArmsOptions) == 0x0003E0, "Member 'UGymCharacterCustomizationWidget::ArmsOptions' has a wrong offset!");
static_assert(offsetof(UGymCharacterCustomizationWidget, WaistOptions) == 0x000400, "Member 'UGymCharacterCustomizationWidget::WaistOptions' has a wrong offset!");
static_assert(offsetof(UGymCharacterCustomizationWidget, LegsOptions) == 0x000420, "Member 'UGymCharacterCustomizationWidget::LegsOptions' has a wrong offset!");
static_assert(offsetof(UGymCharacterCustomizationWidget, EyeWearOptions) == 0x000440, "Member 'UGymCharacterCustomizationWidget::EyeWearOptions' has a wrong offset!");
static_assert(offsetof(UGymCharacterCustomizationWidget, FaceExtrasOptions) == 0x000460, "Member 'UGymCharacterCustomizationWidget::FaceExtrasOptions' has a wrong offset!");
static_assert(offsetof(UGymCharacterCustomizationWidget, ShoesOptions) == 0x000480, "Member 'UGymCharacterCustomizationWidget::ShoesOptions' has a wrong offset!");
static_assert(offsetof(UGymCharacterCustomizationWidget, GlovesOptions) == 0x0004A0, "Member 'UGymCharacterCustomizationWidget::GlovesOptions' has a wrong offset!");
static_assert(offsetof(UGymCharacterCustomizationWidget, HatOptions) == 0x0004C0, "Member 'UGymCharacterCustomizationWidget::HatOptions' has a wrong offset!");
static_assert(offsetof(UGymCharacterCustomizationWidget, EmptyOptions) == 0x0004E0, "Member 'UGymCharacterCustomizationWidget::EmptyOptions' has a wrong offset!");

// Class GYMGAME.GymCharacterMovementComponent
// 0x0520 (0x1470 - 0x0F50)
class UGymCharacterMovementComponent final : public UCharacterMovementComponent
{
public:
	uint8                                         Pad_F48[0x8];                                      // 0x0F48(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LandingHitSurfaceActor;                            // 0x0F50(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UActorComponent*                        LandingHitSurfaceComponent;                        // 0x0F58(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F60[0x409];                                    // 0x0F60(0x0409)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bMeshRelativeToZero;                               // 0x1369(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_136A[0x106];                                   // 0x136A(0x0106)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCharacterMovementComponent">();
	}
	static class UGymCharacterMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCharacterMovementComponent>();
	}
};
static_assert(alignof(UGymCharacterMovementComponent) == 0x000010, "Wrong alignment on UGymCharacterMovementComponent");
static_assert(sizeof(UGymCharacterMovementComponent) == 0x001470, "Wrong size on UGymCharacterMovementComponent");
static_assert(offsetof(UGymCharacterMovementComponent, LandingHitSurfaceActor) == 0x000F50, "Member 'UGymCharacterMovementComponent::LandingHitSurfaceActor' has a wrong offset!");
static_assert(offsetof(UGymCharacterMovementComponent, LandingHitSurfaceComponent) == 0x000F58, "Member 'UGymCharacterMovementComponent::LandingHitSurfaceComponent' has a wrong offset!");
static_assert(offsetof(UGymCharacterMovementComponent, bMeshRelativeToZero) == 0x001369, "Member 'UGymCharacterMovementComponent::bMeshRelativeToZero' has a wrong offset!");

// Class GYMGAME.GymGuiPreflowWidget
// 0x0000 (0x0338 - 0x0338)
class UGymGuiPreflowWidget : public UGymGuiGlobalMetaWidget
{
public:
	void SetupWidget();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiPreflowWidget">();
	}
	static class UGymGuiPreflowWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiPreflowWidget>();
	}
};
static_assert(alignof(UGymGuiPreflowWidget) == 0x000008, "Wrong alignment on UGymGuiPreflowWidget");
static_assert(sizeof(UGymGuiPreflowWidget) == 0x000338, "Wrong size on UGymGuiPreflowWidget");

// Class GYMGAME.GymChasedPlayerMarker
// 0x0060 (0x02F8 - 0x0298)
class AGymChasedPlayerMarker : public AActor
{
public:
	class UMaterialInterface*                     ParentMaterial;                                    // 0x0298(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           CooldownColor;                                     // 0x02A0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           DefaultColor;                                      // 0x02B0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AGymCharacter>           ActorToFollow;                                     // 0x02C0(0x0008)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AActor>                  LastTickActor;                                     // 0x02C8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x02D0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D8[0x3];                                      // 0x02D8(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bInCooldown;                                       // 0x02DB(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2DC[0x1C];                                     // 0x02DC(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetOnCooldown(float Time);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymChasedPlayerMarker">();
	}
	static class AGymChasedPlayerMarker* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymChasedPlayerMarker>();
	}
};
static_assert(alignof(AGymChasedPlayerMarker) == 0x000008, "Wrong alignment on AGymChasedPlayerMarker");
static_assert(sizeof(AGymChasedPlayerMarker) == 0x0002F8, "Wrong size on AGymChasedPlayerMarker");
static_assert(offsetof(AGymChasedPlayerMarker, ParentMaterial) == 0x000298, "Member 'AGymChasedPlayerMarker::ParentMaterial' has a wrong offset!");
static_assert(offsetof(AGymChasedPlayerMarker, CooldownColor) == 0x0002A0, "Member 'AGymChasedPlayerMarker::CooldownColor' has a wrong offset!");
static_assert(offsetof(AGymChasedPlayerMarker, DefaultColor) == 0x0002B0, "Member 'AGymChasedPlayerMarker::DefaultColor' has a wrong offset!");
static_assert(offsetof(AGymChasedPlayerMarker, ActorToFollow) == 0x0002C0, "Member 'AGymChasedPlayerMarker::ActorToFollow' has a wrong offset!");
static_assert(offsetof(AGymChasedPlayerMarker, LastTickActor) == 0x0002C8, "Member 'AGymChasedPlayerMarker::LastTickActor' has a wrong offset!");
static_assert(offsetof(AGymChasedPlayerMarker, DynamicMaterial) == 0x0002D0, "Member 'AGymChasedPlayerMarker::DynamicMaterial' has a wrong offset!");
static_assert(offsetof(AGymChasedPlayerMarker, bInCooldown) == 0x0002DB, "Member 'AGymChasedPlayerMarker::bInCooldown' has a wrong offset!");

// Class GYMGAME.GymGuiPhotoModeWidget
// 0x0008 (0x0340 - 0x0338)
class UGymGuiPhotoModeWidget : public UGymGuiCharacterMetaWidget
{
public:
	bool                                          IsGalleryOpen;                                     // 0x0338(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseThumbnailMode;                                 // 0x0339(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33A[0x6];                                      // 0x033A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BPCloseGallery();
	void BPOpenGallery();
	void CloseGallery();
	void ClosePhotoMode();
	TArray<class FString> GetLocalPhotosPaths(int32 MaxPhotoCount);
	void GetUniquePhotoFileNames(class FString* FullSizeFileName, class FString* ThumbnailFileName, bool Overwrite);
	bool IsMapOwner();
	bool IsPhotoFromThisLevel(const class FString& PhotoFilePath);
	void NotifyThumbnailUpdated(const class FString& LocalFilePath);
	void OpenGallery();
	bool SetPhotoAsThumbnail(const class FString& PhotoFilePath);
	void TakeScreenshot(const class FString& FilePath, const struct FIntPoint& Dimensions);
	void ToggleGallery();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiPhotoModeWidget">();
	}
	static class UGymGuiPhotoModeWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiPhotoModeWidget>();
	}
};
static_assert(alignof(UGymGuiPhotoModeWidget) == 0x000008, "Wrong alignment on UGymGuiPhotoModeWidget");
static_assert(sizeof(UGymGuiPhotoModeWidget) == 0x000340, "Wrong size on UGymGuiPhotoModeWidget");
static_assert(offsetof(UGymGuiPhotoModeWidget, IsGalleryOpen) == 0x000338, "Member 'UGymGuiPhotoModeWidget::IsGalleryOpen' has a wrong offset!");
static_assert(offsetof(UGymGuiPhotoModeWidget, bUseThumbnailMode) == 0x000339, "Member 'UGymGuiPhotoModeWidget::bUseThumbnailMode' has a wrong offset!");

// Class GYMGAME.GymGuiREScoreboardWidget
// 0x0020 (0x0358 - 0x0338)
class UGymGuiREScoreboardWidget : public UGymGuiGlobalMetaWidget
{
public:
	uint8                                         Pad_338[0x10];                                     // 0x0338(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UUniformGridPanel*                      GridPanel;                                         // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UButton*                                CloseButton;                                       // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void NotifyRaceRestartIn(float Time);
	void OnCloseButtonPressed();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiREScoreboardWidget">();
	}
	static class UGymGuiREScoreboardWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiREScoreboardWidget>();
	}
};
static_assert(alignof(UGymGuiREScoreboardWidget) == 0x000008, "Wrong alignment on UGymGuiREScoreboardWidget");
static_assert(sizeof(UGymGuiREScoreboardWidget) == 0x000358, "Wrong size on UGymGuiREScoreboardWidget");
static_assert(offsetof(UGymGuiREScoreboardWidget, GridPanel) == 0x000348, "Member 'UGymGuiREScoreboardWidget::GridPanel' has a wrong offset!");
static_assert(offsetof(UGymGuiREScoreboardWidget, CloseButton) == 0x000350, "Member 'UGymGuiREScoreboardWidget::CloseButton' has a wrong offset!");

// Class GYMGAME.GymCheckpointPiece
// 0x0030 (0x0460 - 0x0430)
class AGymCheckpointPiece : public AGymRuleSpecificGameplayPiece
{
public:
	uint8                                         Pad_430[0x8];                                      // 0x0430(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CheckpointCollision;                               // 0x0438(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      CheckpointVisibleEffect;                           // 0x0440(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      CheckpointReachedEffect;                           // 0x0448(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CheckpointIndex;                                   // 0x0450(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_454[0xC];                                      // 0x0454(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_IndexChanged();
	void OnActorOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnCheckpointIndexChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCheckpointPiece">();
	}
	static class AGymCheckpointPiece* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymCheckpointPiece>();
	}
};
static_assert(alignof(AGymCheckpointPiece) == 0x000008, "Wrong alignment on AGymCheckpointPiece");
static_assert(sizeof(AGymCheckpointPiece) == 0x000460, "Wrong size on AGymCheckpointPiece");
static_assert(offsetof(AGymCheckpointPiece, CheckpointCollision) == 0x000438, "Member 'AGymCheckpointPiece::CheckpointCollision' has a wrong offset!");
static_assert(offsetof(AGymCheckpointPiece, CheckpointVisibleEffect) == 0x000440, "Member 'AGymCheckpointPiece::CheckpointVisibleEffect' has a wrong offset!");
static_assert(offsetof(AGymCheckpointPiece, CheckpointReachedEffect) == 0x000448, "Member 'AGymCheckpointPiece::CheckpointReachedEffect' has a wrong offset!");
static_assert(offsetof(AGymCheckpointPiece, CheckpointIndex) == 0x000450, "Member 'AGymCheckpointPiece::CheckpointIndex' has a wrong offset!");

// Class GYMGAME.GymCheckpointBanner
// 0x0018 (0x0478 - 0x0460)
class AGymCheckpointBanner final : public AGymCheckpointPiece
{
public:
	float                                         ExtentToNiagaraWidth;                              // 0x0460(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0464(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AGymSplinePlaceable*>            Placeables;                                        // 0x0468(0x0010)(Net, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void OnRep_Width();
	void SetPlaceables(const TArray<class AGymSplinePlaceable*>& SplinePlaceables);
	void SetWidth(float NewWidth);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCheckpointBanner">();
	}
	static class AGymCheckpointBanner* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymCheckpointBanner>();
	}
};
static_assert(alignof(AGymCheckpointBanner) == 0x000008, "Wrong alignment on AGymCheckpointBanner");
static_assert(sizeof(AGymCheckpointBanner) == 0x000478, "Wrong size on AGymCheckpointBanner");
static_assert(offsetof(AGymCheckpointBanner, ExtentToNiagaraWidth) == 0x000460, "Member 'AGymCheckpointBanner::ExtentToNiagaraWidth' has a wrong offset!");
static_assert(offsetof(AGymCheckpointBanner, Width) == 0x000464, "Member 'AGymCheckpointBanner::Width' has a wrong offset!");
static_assert(offsetof(AGymCheckpointBanner, Placeables) == 0x000468, "Member 'AGymCheckpointBanner::Placeables' has a wrong offset!");

// Class GYMGAME.GymGuiRuleStateWidgetTide
// 0x0000 (0x0340 - 0x0340)
class UGymGuiRuleStateWidgetTide : public UGymGuiRuleStateWidget
{
public:
	class UGymParticipantRepDataSprint* GetParticipantData();

	class UGymRuleReplicatedData* GetRuleData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiRuleStateWidgetTide">();
	}
	static class UGymGuiRuleStateWidgetTide* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiRuleStateWidgetTide>();
	}
};
static_assert(alignof(UGymGuiRuleStateWidgetTide) == 0x000008, "Wrong alignment on UGymGuiRuleStateWidgetTide");
static_assert(sizeof(UGymGuiRuleStateWidgetTide) == 0x000340, "Wrong size on UGymGuiRuleStateWidgetTide");

// Class GYMGAME.GymCheckpointInterface
// 0x0000 (0x0028 - 0x0028)
class IGymCheckpointInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCheckpointInterface">();
	}
	static class IGymCheckpointInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IGymCheckpointInterface>();
	}
};
static_assert(alignof(IGymCheckpointInterface) == 0x000008, "Wrong alignment on IGymCheckpointInterface");
static_assert(sizeof(IGymCheckpointInterface) == 0x000028, "Wrong size on IGymCheckpointInterface");

// Class GYMGAME.GymCheckpointManager
// 0x0010 (0x00B0 - 0x00A0)
class UGymCheckpointManager final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x10];                                      // 0x00A0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetCheckpointCount();
	int32 GetHighestCheckpointIndex();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCheckpointManager">();
	}
	static class UGymCheckpointManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCheckpointManager>();
	}
};
static_assert(alignof(UGymCheckpointManager) == 0x000008, "Wrong alignment on UGymCheckpointManager");
static_assert(sizeof(UGymCheckpointManager) == 0x0000B0, "Wrong size on UGymCheckpointManager");

// Class GYMGAME.GymGuiRuleStateWidgetBombMode
// 0x0000 (0x0340 - 0x0340)
class UGymGuiRuleStateWidgetBombMode : public UGymGuiRuleStateWidget
{
public:
	float GetBombTimer();
	bool GetIsBombTicking();
	float GetRoundStartTime();
	class UGymBombModeReplicatedData* GetRuleData();
	void OnBombAssigned();
	void OnBombNotAssigned();
	void OnPlayerTagged(class AGymPlayerState* OtherPlayer, float Cooldown);
	void OnTaggedByPlayer(class AGymPlayerState* OtherPlayer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiRuleStateWidgetBombMode">();
	}
	static class UGymGuiRuleStateWidgetBombMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiRuleStateWidgetBombMode>();
	}
};
static_assert(alignof(UGymGuiRuleStateWidgetBombMode) == 0x000008, "Wrong alignment on UGymGuiRuleStateWidgetBombMode");
static_assert(sizeof(UGymGuiRuleStateWidgetBombMode) == 0x000340, "Wrong size on UGymGuiRuleStateWidgetBombMode");

// Class GYMGAME.GymCheckpointObjective
// 0x0038 (0x00F8 - 0x00C0)
class UGymCheckpointObjective final : public UGymObjective
{
public:
	ECheckpointObjectiveType                      ObjectiveType;                                     // 0x00C0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Laps;                                              // 0x00C4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C8[0x18];                                      // 0x00C8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AGymCheckpointPiece*>            SpawnedCheckpoints;                                // 0x00E0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCheckpointReached(class AGymCheckpointPiece* CheckpointActor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCheckpointObjective">();
	}
	static class UGymCheckpointObjective* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCheckpointObjective>();
	}
};
static_assert(alignof(UGymCheckpointObjective) == 0x000008, "Wrong alignment on UGymCheckpointObjective");
static_assert(sizeof(UGymCheckpointObjective) == 0x0000F8, "Wrong size on UGymCheckpointObjective");
static_assert(offsetof(UGymCheckpointObjective, ObjectiveType) == 0x0000C0, "Member 'UGymCheckpointObjective::ObjectiveType' has a wrong offset!");
static_assert(offsetof(UGymCheckpointObjective, Laps) == 0x0000C4, "Member 'UGymCheckpointObjective::Laps' has a wrong offset!");
static_assert(offsetof(UGymCheckpointObjective, SpawnedCheckpoints) == 0x0000E0, "Member 'UGymCheckpointObjective::SpawnedCheckpoints' has a wrong offset!");

// Class GYMGAME.GymGuiRadialWidget
// 0x0090 (0x03C8 - 0x0338)
class UGymGuiRadialWidget : public UGymGuiGlobalMetaWidget
{
public:
	uint8                                         Pad_338[0x30];                                     // 0x0338(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentPage;                                       // 0x0368(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSelectionRadius;                                // 0x036C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MouseSensitivity;                                  // 0x0370(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SelectionRadius;                                   // 0x0374(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FirstSegmentCenterAngle;                           // 0x0378(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_37C[0x4];                                      // 0x037C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CursorLocation;                                    // 0x0380(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<float>                                 SegmentProportions;                                // 0x0390(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A0[0x28];                                     // 0x03A0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddSelectionWidget(class UGymGuiRadialSelectionWidget* SelectionWidget);
	void BP_OpenPage(int32 Page);
	TArray<class UGymGuiRadialSelectionWidget*> GetSelectionWidgets(int32 Page);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiRadialWidget">();
	}
	static class UGymGuiRadialWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiRadialWidget>();
	}
};
static_assert(alignof(UGymGuiRadialWidget) == 0x000008, "Wrong alignment on UGymGuiRadialWidget");
static_assert(sizeof(UGymGuiRadialWidget) == 0x0003C8, "Wrong size on UGymGuiRadialWidget");
static_assert(offsetof(UGymGuiRadialWidget, CurrentPage) == 0x000368, "Member 'UGymGuiRadialWidget::CurrentPage' has a wrong offset!");
static_assert(offsetof(UGymGuiRadialWidget, MinSelectionRadius) == 0x00036C, "Member 'UGymGuiRadialWidget::MinSelectionRadius' has a wrong offset!");
static_assert(offsetof(UGymGuiRadialWidget, MouseSensitivity) == 0x000370, "Member 'UGymGuiRadialWidget::MouseSensitivity' has a wrong offset!");
static_assert(offsetof(UGymGuiRadialWidget, SelectionRadius) == 0x000374, "Member 'UGymGuiRadialWidget::SelectionRadius' has a wrong offset!");
static_assert(offsetof(UGymGuiRadialWidget, FirstSegmentCenterAngle) == 0x000378, "Member 'UGymGuiRadialWidget::FirstSegmentCenterAngle' has a wrong offset!");
static_assert(offsetof(UGymGuiRadialWidget, CursorLocation) == 0x000380, "Member 'UGymGuiRadialWidget::CursorLocation' has a wrong offset!");
static_assert(offsetof(UGymGuiRadialWidget, SegmentProportions) == 0x000390, "Member 'UGymGuiRadialWidget::SegmentProportions' has a wrong offset!");

// Class GYMGAME.GymSplinePlaceable
// 0x0038 (0x0460 - 0x0428)
class AGymSplinePlaceable : public AGymStaticLevelAsset
{
public:
	class AGymSplinePlacer*                       SplinePlacer;                                      // 0x0428(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AGymSplinePlacer>           SplinePlacerAsset;                                 // 0x0430(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPoints;                                         // 0x0438(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43C[0x4];                                      // 0x043C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SplinePointOffset;                                 // 0x0440(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEndPiece;                                       // 0x0458(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_459[0x7];                                      // 0x0459(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FVector GetSplinePointOffset();
	void SetVisible(const bool State);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSplinePlaceable">();
	}
	static class AGymSplinePlaceable* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymSplinePlaceable>();
	}
};
static_assert(alignof(AGymSplinePlaceable) == 0x000008, "Wrong alignment on AGymSplinePlaceable");
static_assert(sizeof(AGymSplinePlaceable) == 0x000460, "Wrong size on AGymSplinePlaceable");
static_assert(offsetof(AGymSplinePlaceable, SplinePlacer) == 0x000428, "Member 'AGymSplinePlaceable::SplinePlacer' has a wrong offset!");
static_assert(offsetof(AGymSplinePlaceable, SplinePlacerAsset) == 0x000430, "Member 'AGymSplinePlaceable::SplinePlacerAsset' has a wrong offset!");
static_assert(offsetof(AGymSplinePlaceable, MaxPoints) == 0x000438, "Member 'AGymSplinePlaceable::MaxPoints' has a wrong offset!");
static_assert(offsetof(AGymSplinePlaceable, SplinePointOffset) == 0x000440, "Member 'AGymSplinePlaceable::SplinePointOffset' has a wrong offset!");
static_assert(offsetof(AGymSplinePlaceable, bIsEndPiece) == 0x000458, "Member 'AGymSplinePlaceable::bIsEndPiece' has a wrong offset!");

// Class GYMGAME.GymFinishlinePlaceable
// 0x0010 (0x0470 - 0x0460)
class AGymFinishlinePlaceable : public AGymSplinePlaceable
{
public:
	class UGymGameModeComponent*                  GameModeComponent;                                 // 0x0460(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_468[0x8];                                      // 0x0468(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_SetIsEndPoint(bool bEndPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymFinishlinePlaceable">();
	}
	static class AGymFinishlinePlaceable* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymFinishlinePlaceable>();
	}
};
static_assert(alignof(AGymFinishlinePlaceable) == 0x000008, "Wrong alignment on AGymFinishlinePlaceable");
static_assert(sizeof(AGymFinishlinePlaceable) == 0x000470, "Wrong size on AGymFinishlinePlaceable");
static_assert(offsetof(AGymFinishlinePlaceable, GameModeComponent) == 0x000460, "Member 'AGymFinishlinePlaceable::GameModeComponent' has a wrong offset!");

// Class GYMGAME.GymGuiRuleStateWidgetObstacle
// 0x0000 (0x0340 - 0x0340)
class UGymGuiRuleStateWidgetObstacle : public UGymGuiRuleStateWidget
{
public:
	class UGymParticipantRepDataObby* GetParticipantData() const;
	class UGymOCReplicatedData* GetRuleData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiRuleStateWidgetObstacle">();
	}
	static class UGymGuiRuleStateWidgetObstacle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiRuleStateWidgetObstacle>();
	}
};
static_assert(alignof(UGymGuiRuleStateWidgetObstacle) == 0x000008, "Wrong alignment on UGymGuiRuleStateWidgetObstacle");
static_assert(sizeof(UGymGuiRuleStateWidgetObstacle) == 0x000340, "Wrong size on UGymGuiRuleStateWidgetObstacle");

// Class GYMGAME.GymCheckpointPlaceable
// 0x0010 (0x0480 - 0x0470)
class AGymCheckpointPlaceable final : public AGymFinishlinePlaceable
{
public:
	uint8                                         Pad_470[0x10];                                     // 0x0470(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCheckpointPlaceable">();
	}
	static class AGymCheckpointPlaceable* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymCheckpointPlaceable>();
	}
};
static_assert(alignof(AGymCheckpointPlaceable) == 0x000008, "Wrong alignment on AGymCheckpointPlaceable");
static_assert(sizeof(AGymCheckpointPlaceable) == 0x000480, "Wrong size on AGymCheckpointPlaceable");

// Class GYMGAME.GymCheckpointSpawn
// 0x0020 (0x0448 - 0x0428)
class AGymCheckpointSpawn final : public AGymStaticLevelAsset
{
public:
	TSubclassOf<class AGymCheckpointPiece>        CheckpointClass;                                   // 0x0428(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SpawnerID;                                         // 0x0430(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0440(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_444[0x4];                                      // 0x0444(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetIndex() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCheckpointSpawn">();
	}
	static class AGymCheckpointSpawn* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymCheckpointSpawn>();
	}
};
static_assert(alignof(AGymCheckpointSpawn) == 0x000008, "Wrong alignment on AGymCheckpointSpawn");
static_assert(sizeof(AGymCheckpointSpawn) == 0x000448, "Wrong size on AGymCheckpointSpawn");
static_assert(offsetof(AGymCheckpointSpawn, CheckpointClass) == 0x000428, "Member 'AGymCheckpointSpawn::CheckpointClass' has a wrong offset!");
static_assert(offsetof(AGymCheckpointSpawn, SpawnerID) == 0x000430, "Member 'AGymCheckpointSpawn::SpawnerID' has a wrong offset!");
static_assert(offsetof(AGymCheckpointSpawn, Index_0) == 0x000440, "Member 'AGymCheckpointSpawn::Index_0' has a wrong offset!");

// Class GYMGAME.GymSpectatorGuiMetaWidget
// 0x0008 (0x0338 - 0x0330)
class UGymSpectatorGuiMetaWidget : public UGymGuiMetaWidget
{
public:
	class UGymSpectatorGuiControl*                Control;                                           // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSpectatorGuiMetaWidget">();
	}
	static class UGymSpectatorGuiMetaWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymSpectatorGuiMetaWidget>();
	}
};
static_assert(alignof(UGymSpectatorGuiMetaWidget) == 0x000008, "Wrong alignment on UGymSpectatorGuiMetaWidget");
static_assert(sizeof(UGymSpectatorGuiMetaWidget) == 0x000338, "Wrong size on UGymSpectatorGuiMetaWidget");
static_assert(offsetof(UGymSpectatorGuiMetaWidget, Control) == 0x000330, "Member 'UGymSpectatorGuiMetaWidget::Control' has a wrong offset!");

// Class GYMGAME.GymGuiSpectatorRuleMetaWidget
// 0x0008 (0x0340 - 0x0338)
class UGymGuiSpectatorRuleMetaWidget : public UGymSpectatorGuiMetaWidget
{
public:
	uint8                                         Pad_338[0x8];                                      // 0x0338(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEliminated(const EEliminationReason EliminationReason);
	void ParticipantReachedCheckpoint(int32 Index_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiSpectatorRuleMetaWidget">();
	}
	static class UGymGuiSpectatorRuleMetaWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiSpectatorRuleMetaWidget>();
	}
};
static_assert(alignof(UGymGuiSpectatorRuleMetaWidget) == 0x000008, "Wrong alignment on UGymGuiSpectatorRuleMetaWidget");
static_assert(sizeof(UGymGuiSpectatorRuleMetaWidget) == 0x000340, "Wrong size on UGymGuiSpectatorRuleMetaWidget");

// Class GYMGAME.GymGuiSpectatorRuleWidgetLoot
// 0x0000 (0x0340 - 0x0340)
class UGymGuiSpectatorRuleWidgetLoot : public UGymGuiSpectatorRuleMetaWidget
{
public:
	void OnLootCollected(int32 Collected, int32 LootLeft);

	class UGymParticipantRepDataLoot* GetParticipantData() const;
	class UGymLootReplicatedData* GetRuleData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiSpectatorRuleWidgetLoot">();
	}
	static class UGymGuiSpectatorRuleWidgetLoot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiSpectatorRuleWidgetLoot>();
	}
};
static_assert(alignof(UGymGuiSpectatorRuleWidgetLoot) == 0x000008, "Wrong alignment on UGymGuiSpectatorRuleWidgetLoot");
static_assert(sizeof(UGymGuiSpectatorRuleWidgetLoot) == 0x000340, "Wrong size on UGymGuiSpectatorRuleWidgetLoot");

// Class GYMGAME.GymCheckpointSplinePlacer
// 0x0080 (0x03B0 - 0x0330)
class AGymCheckpointSplinePlacer final : public AGymSplinePlacer
{
public:
	float                                         ShortDistance;                                     // 0x0330(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LongDistance;                                      // 0x0334(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AGymStaticLevelAsset>       AssetShortType;                                    // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AGymStaticLevelAsset>       PillarFillerType;                                  // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AGymStaticLevelAsset>       PreviewPillarType;                                 // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AGymCheckpointBanner>       FinishLineBannerType;                              // 0x0350(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_358[0x18];                                     // 0x0358(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class AGymCheckpointBanner*                   FinishLineBanner;                                  // 0x0370(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AGymFinishlinePlaceable*                EndPointPreview;                                   // 0x0378(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class AGymStaticLevelAsset*>           LongPreviewSpawnedArray;                           // 0x0380(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class AGymStaticLevelAsset*>           ShortPreviewSpawnedArray;                          // 0x0390(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class AGymStaticLevelAsset*>           PreviewPillarsFillers;                             // 0x03A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCheckpointSplinePlacer">();
	}
	static class AGymCheckpointSplinePlacer* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymCheckpointSplinePlacer>();
	}
};
static_assert(alignof(AGymCheckpointSplinePlacer) == 0x000008, "Wrong alignment on AGymCheckpointSplinePlacer");
static_assert(sizeof(AGymCheckpointSplinePlacer) == 0x0003B0, "Wrong size on AGymCheckpointSplinePlacer");
static_assert(offsetof(AGymCheckpointSplinePlacer, ShortDistance) == 0x000330, "Member 'AGymCheckpointSplinePlacer::ShortDistance' has a wrong offset!");
static_assert(offsetof(AGymCheckpointSplinePlacer, LongDistance) == 0x000334, "Member 'AGymCheckpointSplinePlacer::LongDistance' has a wrong offset!");
static_assert(offsetof(AGymCheckpointSplinePlacer, AssetShortType) == 0x000338, "Member 'AGymCheckpointSplinePlacer::AssetShortType' has a wrong offset!");
static_assert(offsetof(AGymCheckpointSplinePlacer, PillarFillerType) == 0x000340, "Member 'AGymCheckpointSplinePlacer::PillarFillerType' has a wrong offset!");
static_assert(offsetof(AGymCheckpointSplinePlacer, PreviewPillarType) == 0x000348, "Member 'AGymCheckpointSplinePlacer::PreviewPillarType' has a wrong offset!");
static_assert(offsetof(AGymCheckpointSplinePlacer, FinishLineBannerType) == 0x000350, "Member 'AGymCheckpointSplinePlacer::FinishLineBannerType' has a wrong offset!");
static_assert(offsetof(AGymCheckpointSplinePlacer, FinishLineBanner) == 0x000370, "Member 'AGymCheckpointSplinePlacer::FinishLineBanner' has a wrong offset!");
static_assert(offsetof(AGymCheckpointSplinePlacer, EndPointPreview) == 0x000378, "Member 'AGymCheckpointSplinePlacer::EndPointPreview' has a wrong offset!");
static_assert(offsetof(AGymCheckpointSplinePlacer, LongPreviewSpawnedArray) == 0x000380, "Member 'AGymCheckpointSplinePlacer::LongPreviewSpawnedArray' has a wrong offset!");
static_assert(offsetof(AGymCheckpointSplinePlacer, ShortPreviewSpawnedArray) == 0x000390, "Member 'AGymCheckpointSplinePlacer::ShortPreviewSpawnedArray' has a wrong offset!");
static_assert(offsetof(AGymCheckpointSplinePlacer, PreviewPillarsFillers) == 0x0003A0, "Member 'AGymCheckpointSplinePlacer::PreviewPillarsFillers' has a wrong offset!");

// Class GYMGAME.GymGuiScoreboardWidget
// 0x0020 (0x0358 - 0x0338)
class UGymGuiScoreboardWidget : public UGymGuiGlobalMetaWidget
{
public:
	TArray<class UGymGuiScoreboardEntryWidget*>   AllScoreboardEntries;                              // 0x0338(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UPanelWidget*                           PlayerList;                                        // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGymGuiScoreboardEntryWidget> ScoreboardEntryWidgetClass;                        // 0x0350(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnPostUpdateScoreboard();
	void OnPreUpdateScoreboard();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiScoreboardWidget">();
	}
	static class UGymGuiScoreboardWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiScoreboardWidget>();
	}
};
static_assert(alignof(UGymGuiScoreboardWidget) == 0x000008, "Wrong alignment on UGymGuiScoreboardWidget");
static_assert(sizeof(UGymGuiScoreboardWidget) == 0x000358, "Wrong size on UGymGuiScoreboardWidget");
static_assert(offsetof(UGymGuiScoreboardWidget, AllScoreboardEntries) == 0x000338, "Member 'UGymGuiScoreboardWidget::AllScoreboardEntries' has a wrong offset!");
static_assert(offsetof(UGymGuiScoreboardWidget, PlayerList) == 0x000348, "Member 'UGymGuiScoreboardWidget::PlayerList' has a wrong offset!");
static_assert(offsetof(UGymGuiScoreboardWidget, ScoreboardEntryWidgetClass) == 0x000350, "Member 'UGymGuiScoreboardWidget::ScoreboardEntryWidgetClass' has a wrong offset!");

// Class GYMGAME.GymRuleModifier
// 0x0008 (0x0438 - 0x0430)
class AGymRuleModifier : public AGymRuleSpecificGameplayPiece
{
public:
	class FName                                   ModifierID;                                        // 0x0430(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	class FText GetDisplayText();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymRuleModifier">();
	}
	static class AGymRuleModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymRuleModifier>();
	}
};
static_assert(alignof(AGymRuleModifier) == 0x000008, "Wrong alignment on AGymRuleModifier");
static_assert(sizeof(AGymRuleModifier) == 0x000438, "Wrong size on AGymRuleModifier");
static_assert(offsetof(AGymRuleModifier, ModifierID) == 0x000430, "Member 'AGymRuleModifier::ModifierID' has a wrong offset!");

// Class GYMGAME.GymCircuitLapModifier
// 0x0008 (0x0440 - 0x0438)
class AGymCircuitLapModifier final : public AGymRuleModifier
{
public:
	int32                                         LapNum;                                            // 0x0438(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43C[0x4];                                      // 0x043C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCircuitLapModifier">();
	}
	static class AGymCircuitLapModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymCircuitLapModifier>();
	}
};
static_assert(alignof(AGymCircuitLapModifier) == 0x000008, "Wrong alignment on AGymCircuitLapModifier");
static_assert(sizeof(AGymCircuitLapModifier) == 0x000440, "Wrong size on AGymCircuitLapModifier");
static_assert(offsetof(AGymCircuitLapModifier, LapNum) == 0x000438, "Member 'AGymCircuitLapModifier::LapNum' has a wrong offset!");

// Class GYMGAME.GymGuiRuleStateWidgetCircuit
// 0x0000 (0x0340 - 0x0340)
class UGymGuiRuleStateWidgetCircuit : public UGymGuiRuleStateWidget
{
public:
	class UGymCircuitReplicatedData* GetRuleData();

	class UGymParticipantRepDataCircuit* GetParticipantData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiRuleStateWidgetCircuit">();
	}
	static class UGymGuiRuleStateWidgetCircuit* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiRuleStateWidgetCircuit>();
	}
};
static_assert(alignof(UGymGuiRuleStateWidgetCircuit) == 0x000008, "Wrong alignment on UGymGuiRuleStateWidgetCircuit");
static_assert(sizeof(UGymGuiRuleStateWidgetCircuit) == 0x000340, "Wrong size on UGymGuiRuleStateWidgetCircuit");

// Class GYMGAME.GymCircuitMusicState
// 0x0020 (0x0110 - 0x00F0)
class UGymCircuitMusicState final : public UGymMetaRuleMusicState
{
public:
	uint8                                         Pad_F0[0x20];                                      // 0x00F0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCircuitMusicState">();
	}
	static class UGymCircuitMusicState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCircuitMusicState>();
	}
};
static_assert(alignof(UGymCircuitMusicState) == 0x000008, "Wrong alignment on UGymCircuitMusicState");
static_assert(sizeof(UGymCircuitMusicState) == 0x000110, "Wrong size on UGymCircuitMusicState");

// Class GYMGAME.GymCircuitReplicatedData
// 0x0008 (0x0090 - 0x0088)
class UGymCircuitReplicatedData final : public UGymRuleReplicatedData
{
public:
	int32                                         LapsNum;                                           // 0x0088(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetLapNum(int32 Laps);

	int32 GetLapNum() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCircuitReplicatedData">();
	}
	static class UGymCircuitReplicatedData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCircuitReplicatedData>();
	}
};
static_assert(alignof(UGymCircuitReplicatedData) == 0x000008, "Wrong alignment on UGymCircuitReplicatedData");
static_assert(sizeof(UGymCircuitReplicatedData) == 0x000090, "Wrong size on UGymCircuitReplicatedData");
static_assert(offsetof(UGymCircuitReplicatedData, LapsNum) == 0x000088, "Member 'UGymCircuitReplicatedData::LapsNum' has a wrong offset!");

// Class GYMGAME.GymGlobalMusicStateControl
// 0x0070 (0x0118 - 0x00A8)
class UGymGlobalMusicStateControl final : public UGymGlobalMetaControl
{
public:
	uint8                                         Pad_A8[0x10];                                      // 0x00A8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymSprintMusicState*                   SprintState;                                       // 0x00B8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymTideMusicState*                     TideState;                                         // 0x00C0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymBombMusicState*                     BombState;                                         // 0x00C8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymLootMusicState*                     LootState;                                         // 0x00D0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymCircuitMusicState*                  CircuitState;                                      // 0x00D8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymObbyMusicState*                     ObbyState;                                         // 0x00E0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymMetaRuleMusicState*                 PlaylistLobbyState;                                // 0x00E8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymBasicTutorialMusicState*            BasicsTutorialMusicState;                          // 0x00F0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymCareerRuleMusicState*               CareerMusicState;                                  // 0x00F8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_100[0x18];                                     // 0x0100(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGlobalMusicStateControl">();
	}
	static class UGymGlobalMusicStateControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGlobalMusicStateControl>();
	}
};
static_assert(alignof(UGymGlobalMusicStateControl) == 0x000008, "Wrong alignment on UGymGlobalMusicStateControl");
static_assert(sizeof(UGymGlobalMusicStateControl) == 0x000118, "Wrong size on UGymGlobalMusicStateControl");
static_assert(offsetof(UGymGlobalMusicStateControl, SprintState) == 0x0000B8, "Member 'UGymGlobalMusicStateControl::SprintState' has a wrong offset!");
static_assert(offsetof(UGymGlobalMusicStateControl, TideState) == 0x0000C0, "Member 'UGymGlobalMusicStateControl::TideState' has a wrong offset!");
static_assert(offsetof(UGymGlobalMusicStateControl, BombState) == 0x0000C8, "Member 'UGymGlobalMusicStateControl::BombState' has a wrong offset!");
static_assert(offsetof(UGymGlobalMusicStateControl, LootState) == 0x0000D0, "Member 'UGymGlobalMusicStateControl::LootState' has a wrong offset!");
static_assert(offsetof(UGymGlobalMusicStateControl, CircuitState) == 0x0000D8, "Member 'UGymGlobalMusicStateControl::CircuitState' has a wrong offset!");
static_assert(offsetof(UGymGlobalMusicStateControl, ObbyState) == 0x0000E0, "Member 'UGymGlobalMusicStateControl::ObbyState' has a wrong offset!");
static_assert(offsetof(UGymGlobalMusicStateControl, PlaylistLobbyState) == 0x0000E8, "Member 'UGymGlobalMusicStateControl::PlaylistLobbyState' has a wrong offset!");
static_assert(offsetof(UGymGlobalMusicStateControl, BasicsTutorialMusicState) == 0x0000F0, "Member 'UGymGlobalMusicStateControl::BasicsTutorialMusicState' has a wrong offset!");
static_assert(offsetof(UGymGlobalMusicStateControl, CareerMusicState) == 0x0000F8, "Member 'UGymGlobalMusicStateControl::CareerMusicState' has a wrong offset!");

// Class GYMGAME.GymCircuitRules
// 0x0038 (0x0170 - 0x0138)
class UGymCircuitRules : public UGymRules
{
public:
	uint8                                         Pad_138[0x10];                                     // 0x0138(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         GoalPieces;                                        // 0x0148(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	float                                         WaitBeforeCloseWhenNoOneFinished;                  // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LapsNum;                                           // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MinCheckpoints;                                    // 0x0160(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymCircuitReplicatedData*              CircuitRepData;                                    // 0x0168(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void GoalReached(class AActor* GoalPiece, class AGymCharacter* PlayerCharacter);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCircuitRules">();
	}
	static class UGymCircuitRules* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCircuitRules>();
	}
};
static_assert(alignof(UGymCircuitRules) == 0x000008, "Wrong alignment on UGymCircuitRules");
static_assert(sizeof(UGymCircuitRules) == 0x000170, "Wrong size on UGymCircuitRules");
static_assert(offsetof(UGymCircuitRules, GoalPieces) == 0x000148, "Member 'UGymCircuitRules::GoalPieces' has a wrong offset!");
static_assert(offsetof(UGymCircuitRules, WaitBeforeCloseWhenNoOneFinished) == 0x000158, "Member 'UGymCircuitRules::WaitBeforeCloseWhenNoOneFinished' has a wrong offset!");
static_assert(offsetof(UGymCircuitRules, LapsNum) == 0x00015C, "Member 'UGymCircuitRules::LapsNum' has a wrong offset!");
static_assert(offsetof(UGymCircuitRules, MinCheckpoints) == 0x000160, "Member 'UGymCircuitRules::MinCheckpoints' has a wrong offset!");
static_assert(offsetof(UGymCircuitRules, CircuitRepData) == 0x000168, "Member 'UGymCircuitRules::CircuitRepData' has a wrong offset!");

// Class GYMGAME.GymClampCameraModifier
// 0x0040 (0x00F0 - 0x00B0)
class UGymClampCameraModifier final : public UGymMetaCameraModifier
{
public:
	struct FGymClampCameraModifierSettings        Settings;                                          // 0x00B0(0x0020)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	struct FGymClampCameraModifierProps           Props;                                             // 0x00D0(0x0020)(Transient, NoDestructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymClampCameraModifier">();
	}
	static class UGymClampCameraModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymClampCameraModifier>();
	}
};
static_assert(alignof(UGymClampCameraModifier) == 0x000008, "Wrong alignment on UGymClampCameraModifier");
static_assert(sizeof(UGymClampCameraModifier) == 0x0000F0, "Wrong size on UGymClampCameraModifier");
static_assert(offsetof(UGymClampCameraModifier, Settings) == 0x0000B0, "Member 'UGymClampCameraModifier::Settings' has a wrong offset!");
static_assert(offsetof(UGymClampCameraModifier, Props) == 0x0000D0, "Member 'UGymClampCameraModifier::Props' has a wrong offset!");

// Class GYMGAME.GymGuiVideoPlayer
// 0x0000 (0x02E0 - 0x02E0)
class UGymGuiVideoPlayer final : public UCommonVideoPlayer
{
public:
	void BP_Play();
	void BP_SetLooping(bool bShouldLoopPlayback);
	void BP_SetVideo(class UMediaSource* MediaSource);
	void BP_Stop();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiVideoPlayer">();
	}
	static class UGymGuiVideoPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiVideoPlayer>();
	}
};
static_assert(alignof(UGymGuiVideoPlayer) == 0x000010, "Wrong alignment on UGymGuiVideoPlayer");
static_assert(sizeof(UGymGuiVideoPlayer) == 0x0002E0, "Wrong size on UGymGuiVideoPlayer");

// Class GYMGAME.GymCloudApi
// 0x0530 (0x0560 - 0x0030)
class UGymCloudApi final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x1C8];                                     // 0x0030(0x01C8)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymXPManager*                          XPManager;                                         // 0x01F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnClientLoggedInAndReady;                          // 0x0200(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnRegionSelected;                                  // 0x0210(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_220[0x10];                                     // 0x0220(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnCloudError;                                      // 0x0230(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnLoginComplete;                                   // 0x0240(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnLogoutComplete;                                  // 0x0250(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FGymServerInfo>                 ServerList;                                        // 0x0260(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnServerListUpdated;                               // 0x0270(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCreateGymServer;                                 // 0x0280(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnServerDetailsReceived;                           // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMapDetailsReceived;                              // 0x02A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnLobbyMapDetailsReceived;                         // 0x02B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlaylistDetailsReceived;                         // 0x02C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FGymMapSearchResult>            MapSearchResults;                                  // 0x02D0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MapSearchPages;                                    // 0x02E0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E4[0x4];                                      // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnMapSearchComplete;                               // 0x02E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F8[0x30];                                     // 0x02F8(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RawMapString;                                      // 0x0328(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_338[0x10];                                     // 0x0338(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnJoinServerRequestComplete;                       // 0x0348(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlaylistSearchComplete;                          // 0x0358(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FGymPlaylistSearchResult>       PlaylistSearchResults;                             // 0x0368(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlaylistCreateComplete;                          // 0x0378(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlaylistAddComplete;                             // 0x0388(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlaylistRemovalComplete;                         // 0x0398(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlaylistDeleteComplete;                          // 0x03A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPhotoUploadComplete;                             // 0x03B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPhotoSearchComplete;                             // 0x03C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FPhotoSearchResult>             PhotoSearchResults;                                // 0x03D8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMapRenameComplete;                               // 0x03E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSeasonRequestComplete;                           // 0x03F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGymSeason                             CurrentSeason;                                     // 0x0408(0x0060)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnUnclaimedRequestComplete;                        // 0x0468(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChallengeRequestComplete;                        // 0x0478(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnInventoryRequestComplete;                        // 0x0488(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGymInventory                          Inventory;                                         // 0x0498(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A8[0x18];                                     // 0x04A8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnCheatXPGranted;                                  // 0x04C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMapVoteComplete;                                 // 0x04D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTOSAccepted;                                     // 0x04E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnLeaderboardReceived;                             // 0x04F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnDailyPlaylistsReceived;                          // 0x0500(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMapPublished;                                    // 0x0510(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_520[0x20];                                     // 0x0520(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnRandomPlaylistReceived;                          // 0x0540(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMapReported;                                     // 0x0550(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void AcceptTOS_Client(const class FString& TOSVersion);
	void AddToPlaylist_Client(const class FString& PlaylistId, const class FString& MapId);
	void AdminSession();
	void ClaimChallenge_Client(const class FString& ChallengeId);
	void ClaimCheatXP_Client(const int32 Amount);
	void ClientLoggedInAndReady__DelegateSignature();
	void CreatePlaylist_Client(const class FString& PlaylistName, const class FString& Type);
	void DeletePlaylist_Client(const class FString& PlaylistId);
	void DownvoteMap_Client(const class FString& MapId, bool Remove);
	void FavouriteMap_Client(const class FString& MapId, bool Remove);
	void FeatureMap_Client(const class FString& MapId, bool Remove);
	void GetCurrentChallenges_Client();
	void GetCurrentSeason_Client();
	void GetDailyPlaylists_Client();
	void GetFavouritedMaps_Client(int32 Page);
	void GetFeaturedMaps_Client(int32 Page);
	void GetInventory();
	void GetLeaderboard_Client(const class FString& MapId, const int32 MapVersion);
	void GetMapDetails_Client(const class FString& MapId, bool bIsLobby);
	void GetMaps_Client(const struct FGymMapSearchFilters& Filters, int32 Page);
	void GetOwnMaps_Client(int32 Page);
	void GetOwnPlaylists_Client();
	void GetPhotos_Client(int32 Count, int32 Page);
	void GetPhotosFiltered_Client(const struct FPhotoSearchFilters& Filters, int32 Count, int32 Page);
	void GetPlaylistDetails_Client(const class FString& PlaylistId);
	void GetPlaylists_Client();
	void GetRandomPlaylist_Client(const class FString& PlayListType, const int32 Length);
	void GetUnclaimedRewards_Client();
	void GymServerJoinRequestComplete__DelegateSignature(bool Success, const class FString& JoinUrl);
	void LoginComplete__DelegateSignature(bool Success);
	void LogoutComplete__DelegateSignature();
	void MapSearchComplete__DelegateSignature(bool Success);
	void OnChallengeRequestComplete__DelegateSignature(bool Success, const struct FGymCHallengeResponse& Challenges);
	void OnCheatXPGranted__DelegateSignature(bool Success);
	void OnCloudError__DelegateSignature(const class FText& Message);
	void OnCreateGymServer__DelegateSignature(bool Success, const class FString& ConnectString);
	void OnDailyPlaylistsReceived__DelegateSignature(bool Success, const TArray<struct FGymDailyPlaylist>& Playlists);
	void OnInventoryRequestComplete__DelegateSignature(bool Success);
	void OnLeaderboardReceived__DelegateSignature(bool Success, const struct FGymLeaderboard& Leaderboard);
	void OnMapDetailsReceived__DelegateSignature(bool Success, const struct FGymMapDetailsResult& Details);
	void OnMapPublished__DelegateSignature(bool Success);
	void OnMapRenameComplete__DelegateSignature(bool Success);
	void OnMapReported__DelegateSignature(bool Success);
	void OnMapVoteComplete__DelegateSignature(bool Success);
	void OnPlaylistDetailsReceived__DelegateSignature(bool Success, const struct FGymPlaylistDetailsResult& Details);
	void OnRandomPlaylistReceived__DelegateSignature(bool Success, const class FString& PlaylistId);
	void OnSeasonRequestComplete__DelegateSignature(bool Success);
	void OnServerDetailsReceived__DelegateSignature(bool Success);
	void OnTOSAccepted__DelegateSignature(bool Success);
	void OnUnclaimedRequestComplete__DelegateSignature(bool Success, const struct FGymUnclaimedRewardResponse& Response);
	void PhotoSearchComplete__DelegateSignature(bool Success);
	void PhotoUploadComplete__DelegateSignature(bool Success);
	void PlaylistAddComplete__DelegateSignature(bool Success);
	void PlaylistCreateComplete__DelegateSignature(bool Success, const class FString& ID);
	void PlaylistDeleteComplete__DelegateSignature(bool Success);
	void PlaylistRemovalComplete__DelegateSignature(bool Success);
	void PlaylistSearchComplete__DelegateSignature(bool Success);
	void PublishMap_Client(const class FString& MapId);
	void RegionSelected__DelegateSignature();
	void RemoveFromPlaylist_Client(const class FString& PlaylistId, int32 Index_0);
	void RenameMap_Client(const class FString& MapId, const class FString& Name_0);
	void ReportMap_Client(const class FString& MapId, const class FString& Description);
	void RequestDeleteMap_Client(const class FString& MapId);
	void ServerListUpdated__DelegateSignature(bool Success);
	void SetCloudName_Client(const class FString& Name_0);
	void SteamLogin(const class FString& Ticket, const class FString& SteamName);
	void TestLogin(const class FString& ID);
	void UnpublishMap_Client(const class FString& MapId);
	void UploadPhotoWithMeta_Client(const class FString& PhotoPath, const struct FPhotoMetaData& Meta);
	void UpvoteMap_Client(const class FString& MapId, bool Remove);

	class FString GetBaseUrl() const;
	class FString GetJoinToken() const;
	struct FGymServerInfo GetServerInfo() const;
	class FString GetServerVersion() const;
	bool HasClientAcceptedTos() const;
	bool IsClientAdmin() const;
	bool IsClientLoggedIn() const;
	bool IsLobbyOwner() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCloudApi">();
	}
	static class UGymCloudApi* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCloudApi>();
	}
};
static_assert(alignof(UGymCloudApi) == 0x000008, "Wrong alignment on UGymCloudApi");
static_assert(sizeof(UGymCloudApi) == 0x000560, "Wrong size on UGymCloudApi");
static_assert(offsetof(UGymCloudApi, XPManager) == 0x0001F8, "Member 'UGymCloudApi::XPManager' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, OnClientLoggedInAndReady) == 0x000200, "Member 'UGymCloudApi::OnClientLoggedInAndReady' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, OnRegionSelected) == 0x000210, "Member 'UGymCloudApi::OnRegionSelected' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, OnCloudError) == 0x000230, "Member 'UGymCloudApi::OnCloudError' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, OnLoginComplete) == 0x000240, "Member 'UGymCloudApi::OnLoginComplete' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, OnLogoutComplete) == 0x000250, "Member 'UGymCloudApi::OnLogoutComplete' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, ServerList) == 0x000260, "Member 'UGymCloudApi::ServerList' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, OnServerListUpdated) == 0x000270, "Member 'UGymCloudApi::OnServerListUpdated' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, OnCreateGymServer) == 0x000280, "Member 'UGymCloudApi::OnCreateGymServer' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, OnServerDetailsReceived) == 0x000290, "Member 'UGymCloudApi::OnServerDetailsReceived' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, OnMapDetailsReceived) == 0x0002A0, "Member 'UGymCloudApi::OnMapDetailsReceived' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, OnLobbyMapDetailsReceived) == 0x0002B0, "Member 'UGymCloudApi::OnLobbyMapDetailsReceived' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, OnPlaylistDetailsReceived) == 0x0002C0, "Member 'UGymCloudApi::OnPlaylistDetailsReceived' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, MapSearchResults) == 0x0002D0, "Member 'UGymCloudApi::MapSearchResults' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, MapSearchPages) == 0x0002E0, "Member 'UGymCloudApi::MapSearchPages' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, OnMapSearchComplete) == 0x0002E8, "Member 'UGymCloudApi::OnMapSearchComplete' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, RawMapString) == 0x000328, "Member 'UGymCloudApi::RawMapString' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, OnJoinServerRequestComplete) == 0x000348, "Member 'UGymCloudApi::OnJoinServerRequestComplete' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, OnPlaylistSearchComplete) == 0x000358, "Member 'UGymCloudApi::OnPlaylistSearchComplete' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, PlaylistSearchResults) == 0x000368, "Member 'UGymCloudApi::PlaylistSearchResults' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, OnPlaylistCreateComplete) == 0x000378, "Member 'UGymCloudApi::OnPlaylistCreateComplete' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, OnPlaylistAddComplete) == 0x000388, "Member 'UGymCloudApi::OnPlaylistAddComplete' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, OnPlaylistRemovalComplete) == 0x000398, "Member 'UGymCloudApi::OnPlaylistRemovalComplete' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, OnPlaylistDeleteComplete) == 0x0003A8, "Member 'UGymCloudApi::OnPlaylistDeleteComplete' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, OnPhotoUploadComplete) == 0x0003B8, "Member 'UGymCloudApi::OnPhotoUploadComplete' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, OnPhotoSearchComplete) == 0x0003C8, "Member 'UGymCloudApi::OnPhotoSearchComplete' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, PhotoSearchResults) == 0x0003D8, "Member 'UGymCloudApi::PhotoSearchResults' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, OnMapRenameComplete) == 0x0003E8, "Member 'UGymCloudApi::OnMapRenameComplete' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, OnSeasonRequestComplete) == 0x0003F8, "Member 'UGymCloudApi::OnSeasonRequestComplete' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, CurrentSeason) == 0x000408, "Member 'UGymCloudApi::CurrentSeason' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, OnUnclaimedRequestComplete) == 0x000468, "Member 'UGymCloudApi::OnUnclaimedRequestComplete' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, OnChallengeRequestComplete) == 0x000478, "Member 'UGymCloudApi::OnChallengeRequestComplete' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, OnInventoryRequestComplete) == 0x000488, "Member 'UGymCloudApi::OnInventoryRequestComplete' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, Inventory) == 0x000498, "Member 'UGymCloudApi::Inventory' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, OnCheatXPGranted) == 0x0004C0, "Member 'UGymCloudApi::OnCheatXPGranted' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, OnMapVoteComplete) == 0x0004D0, "Member 'UGymCloudApi::OnMapVoteComplete' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, OnTOSAccepted) == 0x0004E0, "Member 'UGymCloudApi::OnTOSAccepted' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, OnLeaderboardReceived) == 0x0004F0, "Member 'UGymCloudApi::OnLeaderboardReceived' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, OnDailyPlaylistsReceived) == 0x000500, "Member 'UGymCloudApi::OnDailyPlaylistsReceived' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, OnMapPublished) == 0x000510, "Member 'UGymCloudApi::OnMapPublished' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, OnRandomPlaylistReceived) == 0x000540, "Member 'UGymCloudApi::OnRandomPlaylistReceived' has a wrong offset!");
static_assert(offsetof(UGymCloudApi, OnMapReported) == 0x000550, "Member 'UGymCloudApi::OnMapReported' has a wrong offset!");

// Class GYMGAME.GymCloudConfig
// 0x0058 (0x0088 - 0x0030)
class UGymCloudConfig final : public UDataAsset
{
public:
	class FString                                 ClientApiUrl;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerApiUrl;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         HubMaps;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         QuickplayStartDelay;                               // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QuickplayStartDelayJoinExtend;                     // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         LobbyMapIds;                                       // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FString>                         TournamentLobbyIds;                                // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCloudConfig">();
	}
	static class UGymCloudConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCloudConfig>();
	}
};
static_assert(alignof(UGymCloudConfig) == 0x000008, "Wrong alignment on UGymCloudConfig");
static_assert(sizeof(UGymCloudConfig) == 0x000088, "Wrong size on UGymCloudConfig");
static_assert(offsetof(UGymCloudConfig, ClientApiUrl) == 0x000030, "Member 'UGymCloudConfig::ClientApiUrl' has a wrong offset!");
static_assert(offsetof(UGymCloudConfig, ServerApiUrl) == 0x000040, "Member 'UGymCloudConfig::ServerApiUrl' has a wrong offset!");
static_assert(offsetof(UGymCloudConfig, HubMaps) == 0x000050, "Member 'UGymCloudConfig::HubMaps' has a wrong offset!");
static_assert(offsetof(UGymCloudConfig, QuickplayStartDelay) == 0x000060, "Member 'UGymCloudConfig::QuickplayStartDelay' has a wrong offset!");
static_assert(offsetof(UGymCloudConfig, QuickplayStartDelayJoinExtend) == 0x000064, "Member 'UGymCloudConfig::QuickplayStartDelayJoinExtend' has a wrong offset!");
static_assert(offsetof(UGymCloudConfig, LobbyMapIds) == 0x000068, "Member 'UGymCloudConfig::LobbyMapIds' has a wrong offset!");
static_assert(offsetof(UGymCloudConfig, TournamentLobbyIds) == 0x000078, "Member 'UGymCloudConfig::TournamentLobbyIds' has a wrong offset!");

// Class GYMGAME.GymGoalInterface
// 0x0000 (0x0028 - 0x0028)
class IGymGoalInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGoalInterface">();
	}
	static class IGymGoalInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IGymGoalInterface>();
	}
};
static_assert(alignof(IGymGoalInterface) == 0x000008, "Wrong alignment on IGymGoalInterface");
static_assert(sizeof(IGymGoalInterface) == 0x000028, "Wrong size on IGymGoalInterface");

// Class GYMGAME.GymCollectibleObjective
// 0x0038 (0x00F8 - 0x00C0)
class UGymCollectibleObjective final : public UGymObjective
{
public:
	ECollectibleObjectiveType                     ObjectiveType;                                     // 0x00C0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C1[0x37];                                      // 0x00C1(0x0037)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BPLootCollected(class AGymLootActor* Loot);
	void Client_SetLootVisible(class AGymLootActor* LootActor, bool bVisibility);
	void OnCollected(class AGymLootActor* Loot);

	class FText GetLootCollectedText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCollectibleObjective">();
	}
	static class UGymCollectibleObjective* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCollectibleObjective>();
	}
};
static_assert(alignof(UGymCollectibleObjective) == 0x000008, "Wrong alignment on UGymCollectibleObjective");
static_assert(sizeof(UGymCollectibleObjective) == 0x0000F8, "Wrong size on UGymCollectibleObjective");
static_assert(offsetof(UGymCollectibleObjective, ObjectiveType) == 0x0000C0, "Member 'UGymCollectibleObjective::ObjectiveType' has a wrong offset!");

// Class GYMGAME.GymObjectiveCriterion
// 0x0010 (0x0038 - 0x0028)
class UGymObjectiveCriterion : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymObjectiveCriterion">();
	}
	static class UGymObjectiveCriterion* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymObjectiveCriterion>();
	}
};
static_assert(alignof(UGymObjectiveCriterion) == 0x000008, "Wrong alignment on UGymObjectiveCriterion");
static_assert(sizeof(UGymObjectiveCriterion) == 0x000038, "Wrong size on UGymObjectiveCriterion");

// Class GYMGAME.GymGlobalModifierAsset
// 0x0010 (0x0438 - 0x0428)
class AGymGlobalModifierAsset final : public AGymStaticLevelAsset
{
public:
	bool                                          Initialized;                                       // 0x0428(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_429[0x3];                                      // 0x0429(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ModifierTypeId;                                    // 0x042C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSingleton;                                       // 0x0434(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_435[0x3];                                      // 0x0435(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnActivateBP();
	void OnDeactivateBP();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGlobalModifierAsset">();
	}
	static class AGymGlobalModifierAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymGlobalModifierAsset>();
	}
};
static_assert(alignof(AGymGlobalModifierAsset) == 0x000008, "Wrong alignment on AGymGlobalModifierAsset");
static_assert(sizeof(AGymGlobalModifierAsset) == 0x000438, "Wrong size on AGymGlobalModifierAsset");
static_assert(offsetof(AGymGlobalModifierAsset, Initialized) == 0x000428, "Member 'AGymGlobalModifierAsset::Initialized' has a wrong offset!");
static_assert(offsetof(AGymGlobalModifierAsset, ModifierTypeId) == 0x00042C, "Member 'AGymGlobalModifierAsset::ModifierTypeId' has a wrong offset!");
static_assert(offsetof(AGymGlobalModifierAsset, IsSingleton) == 0x000434, "Member 'AGymGlobalModifierAsset::IsSingleton' has a wrong offset!");

// Class GYMGAME.GymCompleteOthersCriterion
// 0x0000 (0x0038 - 0x0038)
class UGymCompleteOthersCriterion final : public UGymObjectiveCriterion
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCompleteOthersCriterion">();
	}
	static class UGymCompleteOthersCriterion* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCompleteOthersCriterion>();
	}
};
static_assert(alignof(UGymCompleteOthersCriterion) == 0x000008, "Wrong alignment on UGymCompleteOthersCriterion");
static_assert(sizeof(UGymCompleteOthersCriterion) == 0x000038, "Wrong size on UGymCompleteOthersCriterion");

// Class GYMGAME.GymConfigDataAsset
// 0x0000 (0x0030 - 0x0030)
class UGymConfigDataAsset : public UPrimaryDataAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymConfigDataAsset">();
	}
	static class UGymConfigDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymConfigDataAsset>();
	}
};
static_assert(alignof(UGymConfigDataAsset) == 0x000008, "Wrong alignment on UGymConfigDataAsset");
static_assert(sizeof(UGymConfigDataAsset) == 0x000030, "Wrong size on UGymConfigDataAsset");

// Class GYMGAME.GymGuiTickerMessageWidget
// 0x0038 (0x0368 - 0x0330)
class UGymGuiTickerMessageWidget : public UGymGuiMetaWidget
{
public:
	class UCommonRichTextBlock*                   LeftMessage;                                       // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 IconWidget;                                        // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonRichTextBlock*                   RightMessage;                                      // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETickerPosition                               TickerPosition;                                    // 0x0348(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_349[0x3];                                      // 0x0349(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DisplayTime;                                       // 0x034C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MessageId;                                         // 0x0350(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Slots;                                             // 0x0358(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35C[0xC];                                      // 0x035C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UTexture2D* GetTexture(const class FString& IconTextureId);
	void TickerPopout();
	void TickerPopup();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiTickerMessageWidget">();
	}
	static class UGymGuiTickerMessageWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiTickerMessageWidget>();
	}
};
static_assert(alignof(UGymGuiTickerMessageWidget) == 0x000008, "Wrong alignment on UGymGuiTickerMessageWidget");
static_assert(sizeof(UGymGuiTickerMessageWidget) == 0x000368, "Wrong size on UGymGuiTickerMessageWidget");
static_assert(offsetof(UGymGuiTickerMessageWidget, LeftMessage) == 0x000330, "Member 'UGymGuiTickerMessageWidget::LeftMessage' has a wrong offset!");
static_assert(offsetof(UGymGuiTickerMessageWidget, IconWidget) == 0x000338, "Member 'UGymGuiTickerMessageWidget::IconWidget' has a wrong offset!");
static_assert(offsetof(UGymGuiTickerMessageWidget, RightMessage) == 0x000340, "Member 'UGymGuiTickerMessageWidget::RightMessage' has a wrong offset!");
static_assert(offsetof(UGymGuiTickerMessageWidget, TickerPosition) == 0x000348, "Member 'UGymGuiTickerMessageWidget::TickerPosition' has a wrong offset!");
static_assert(offsetof(UGymGuiTickerMessageWidget, DisplayTime) == 0x00034C, "Member 'UGymGuiTickerMessageWidget::DisplayTime' has a wrong offset!");
static_assert(offsetof(UGymGuiTickerMessageWidget, MessageId) == 0x000350, "Member 'UGymGuiTickerMessageWidget::MessageId' has a wrong offset!");
static_assert(offsetof(UGymGuiTickerMessageWidget, Slots) == 0x000358, "Member 'UGymGuiTickerMessageWidget::Slots' has a wrong offset!");

// Class GYMGAME.GymConfigAnimationDataAsset
// 0x00C8 (0x00F8 - 0x0030)
class UGymConfigAnimationDataAsset : public UGymConfigDataAsset
{
public:
	class USkeleton*                              PlayerBaseSkeleton;                                // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGymCompatibleSkeletonAsset>    PlayerCompatibleSkeletons;                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, NativeAccessSpecifierPublic)
	TSubclassOf<class UGymCharacterAnimInstance>  FirstPersonAnimationBP;                            // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGymCharacterAnimInstance>  ThirdPersonAnimationBP;                            // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialParameterCollection*           CharacterFXMPC;                                    // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SidewaysDampeningMax;                              // 0x0060(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     HiddenBodypartMaterial;                            // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            PelvisOffsetLandingCurve;                          // 0x0070(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinReactiveZVelocity;                              // 0x0078(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxReactiveZVelocity;                              // 0x007C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PelvisMaxZOffset;                                  // 0x0080(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PelvisMaxZOffset3pp;                               // 0x0084(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LeftHandIKJumpEuler;                               // 0x0088(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RightHandIKJumpEuler;                              // 0x00A0(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HandIKOffsetMin;                                   // 0x00B8(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HandIKOffsetMax;                                   // 0x00D0(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             TauntDatatable;                                    // 0x00E8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             SprayDataTable;                                    // 0x00F0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymConfigAnimationDataAsset">();
	}
	static class UGymConfigAnimationDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymConfigAnimationDataAsset>();
	}
};
static_assert(alignof(UGymConfigAnimationDataAsset) == 0x000008, "Wrong alignment on UGymConfigAnimationDataAsset");
static_assert(sizeof(UGymConfigAnimationDataAsset) == 0x0000F8, "Wrong size on UGymConfigAnimationDataAsset");
static_assert(offsetof(UGymConfigAnimationDataAsset, PlayerBaseSkeleton) == 0x000030, "Member 'UGymConfigAnimationDataAsset::PlayerBaseSkeleton' has a wrong offset!");
static_assert(offsetof(UGymConfigAnimationDataAsset, PlayerCompatibleSkeletons) == 0x000038, "Member 'UGymConfigAnimationDataAsset::PlayerCompatibleSkeletons' has a wrong offset!");
static_assert(offsetof(UGymConfigAnimationDataAsset, FirstPersonAnimationBP) == 0x000048, "Member 'UGymConfigAnimationDataAsset::FirstPersonAnimationBP' has a wrong offset!");
static_assert(offsetof(UGymConfigAnimationDataAsset, ThirdPersonAnimationBP) == 0x000050, "Member 'UGymConfigAnimationDataAsset::ThirdPersonAnimationBP' has a wrong offset!");
static_assert(offsetof(UGymConfigAnimationDataAsset, CharacterFXMPC) == 0x000058, "Member 'UGymConfigAnimationDataAsset::CharacterFXMPC' has a wrong offset!");
static_assert(offsetof(UGymConfigAnimationDataAsset, SidewaysDampeningMax) == 0x000060, "Member 'UGymConfigAnimationDataAsset::SidewaysDampeningMax' has a wrong offset!");
static_assert(offsetof(UGymConfigAnimationDataAsset, HiddenBodypartMaterial) == 0x000068, "Member 'UGymConfigAnimationDataAsset::HiddenBodypartMaterial' has a wrong offset!");
static_assert(offsetof(UGymConfigAnimationDataAsset, PelvisOffsetLandingCurve) == 0x000070, "Member 'UGymConfigAnimationDataAsset::PelvisOffsetLandingCurve' has a wrong offset!");
static_assert(offsetof(UGymConfigAnimationDataAsset, MinReactiveZVelocity) == 0x000078, "Member 'UGymConfigAnimationDataAsset::MinReactiveZVelocity' has a wrong offset!");
static_assert(offsetof(UGymConfigAnimationDataAsset, MaxReactiveZVelocity) == 0x00007C, "Member 'UGymConfigAnimationDataAsset::MaxReactiveZVelocity' has a wrong offset!");
static_assert(offsetof(UGymConfigAnimationDataAsset, PelvisMaxZOffset) == 0x000080, "Member 'UGymConfigAnimationDataAsset::PelvisMaxZOffset' has a wrong offset!");
static_assert(offsetof(UGymConfigAnimationDataAsset, PelvisMaxZOffset3pp) == 0x000084, "Member 'UGymConfigAnimationDataAsset::PelvisMaxZOffset3pp' has a wrong offset!");
static_assert(offsetof(UGymConfigAnimationDataAsset, LeftHandIKJumpEuler) == 0x000088, "Member 'UGymConfigAnimationDataAsset::LeftHandIKJumpEuler' has a wrong offset!");
static_assert(offsetof(UGymConfigAnimationDataAsset, RightHandIKJumpEuler) == 0x0000A0, "Member 'UGymConfigAnimationDataAsset::RightHandIKJumpEuler' has a wrong offset!");
static_assert(offsetof(UGymConfigAnimationDataAsset, HandIKOffsetMin) == 0x0000B8, "Member 'UGymConfigAnimationDataAsset::HandIKOffsetMin' has a wrong offset!");
static_assert(offsetof(UGymConfigAnimationDataAsset, HandIKOffsetMax) == 0x0000D0, "Member 'UGymConfigAnimationDataAsset::HandIKOffsetMax' has a wrong offset!");
static_assert(offsetof(UGymConfigAnimationDataAsset, TauntDatatable) == 0x0000E8, "Member 'UGymConfigAnimationDataAsset::TauntDatatable' has a wrong offset!");
static_assert(offsetof(UGymConfigAnimationDataAsset, SprayDataTable) == 0x0000F0, "Member 'UGymConfigAnimationDataAsset::SprayDataTable' has a wrong offset!");

// Class GYMGAME.GymConfigAudioDataAsset
// 0x0088 (0x00B8 - 0x0030)
class UGymConfigAudioDataAsset : public UGymConfigDataAsset
{
public:
	TSubclassOf<class AGymAudioPlayerActor>       DefaultAudioPlayerBPClass;                         // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           Submix;                                            // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           PipeSubmix;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGymSoundBaseEntry>             AmbientMetaSounds;                                 // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, NativeAccessSpecifierPublic)
	TArray<struct FGymSoundBaseEntry>             SprintMetaSounds;                                  // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, NativeAccessSpecifierPublic)
	TArray<struct FGymSoundBaseEntry>             StringerMetaSounds;                                // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, NativeAccessSpecifierPublic)
	TArray<struct FGymSoundBaseEntry>             BasicMovementMetaSounds;                           // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, NativeAccessSpecifierPublic)
	class USoundMix*                              SoundMix;                                          // 0x0088(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundClass*                            MasterSoundClass;                                  // 0x0090(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundClass*                            MusicSoundClass;                                   // 0x0098(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundClass*                            UISoundClass;                                      // 0x00A0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundClass*                            AmbienceSoundClass;                                // 0x00A8(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundClass*                            SFXSoundClass;                                     // 0x00B0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymConfigAudioDataAsset">();
	}
	static class UGymConfigAudioDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymConfigAudioDataAsset>();
	}
};
static_assert(alignof(UGymConfigAudioDataAsset) == 0x000008, "Wrong alignment on UGymConfigAudioDataAsset");
static_assert(sizeof(UGymConfigAudioDataAsset) == 0x0000B8, "Wrong size on UGymConfigAudioDataAsset");
static_assert(offsetof(UGymConfigAudioDataAsset, DefaultAudioPlayerBPClass) == 0x000030, "Member 'UGymConfigAudioDataAsset::DefaultAudioPlayerBPClass' has a wrong offset!");
static_assert(offsetof(UGymConfigAudioDataAsset, Submix) == 0x000038, "Member 'UGymConfigAudioDataAsset::Submix' has a wrong offset!");
static_assert(offsetof(UGymConfigAudioDataAsset, PipeSubmix) == 0x000040, "Member 'UGymConfigAudioDataAsset::PipeSubmix' has a wrong offset!");
static_assert(offsetof(UGymConfigAudioDataAsset, AmbientMetaSounds) == 0x000048, "Member 'UGymConfigAudioDataAsset::AmbientMetaSounds' has a wrong offset!");
static_assert(offsetof(UGymConfigAudioDataAsset, SprintMetaSounds) == 0x000058, "Member 'UGymConfigAudioDataAsset::SprintMetaSounds' has a wrong offset!");
static_assert(offsetof(UGymConfigAudioDataAsset, StringerMetaSounds) == 0x000068, "Member 'UGymConfigAudioDataAsset::StringerMetaSounds' has a wrong offset!");
static_assert(offsetof(UGymConfigAudioDataAsset, BasicMovementMetaSounds) == 0x000078, "Member 'UGymConfigAudioDataAsset::BasicMovementMetaSounds' has a wrong offset!");
static_assert(offsetof(UGymConfigAudioDataAsset, SoundMix) == 0x000088, "Member 'UGymConfigAudioDataAsset::SoundMix' has a wrong offset!");
static_assert(offsetof(UGymConfigAudioDataAsset, MasterSoundClass) == 0x000090, "Member 'UGymConfigAudioDataAsset::MasterSoundClass' has a wrong offset!");
static_assert(offsetof(UGymConfigAudioDataAsset, MusicSoundClass) == 0x000098, "Member 'UGymConfigAudioDataAsset::MusicSoundClass' has a wrong offset!");
static_assert(offsetof(UGymConfigAudioDataAsset, UISoundClass) == 0x0000A0, "Member 'UGymConfigAudioDataAsset::UISoundClass' has a wrong offset!");
static_assert(offsetof(UGymConfigAudioDataAsset, AmbienceSoundClass) == 0x0000A8, "Member 'UGymConfigAudioDataAsset::AmbienceSoundClass' has a wrong offset!");
static_assert(offsetof(UGymConfigAudioDataAsset, SFXSoundClass) == 0x0000B0, "Member 'UGymConfigAudioDataAsset::SFXSoundClass' has a wrong offset!");

// Class GYMGAME.GymInteractableInterface
// 0x0000 (0x0028 - 0x0028)
class IGymInteractableInterface final : public IInterface
{
public:
	bool CanInteractThroughWall();
	bool CanInteractWith(class AGymCharacter* Character, class UPrimitiveComponent* Component);
	void DisableInteract(class AGymCharacter* Character, class UPrimitiveComponent* Component);
	void EnableInteract(class AGymCharacter* Character, class UPrimitiveComponent* Component);
	void EndInteract(class AGymCharacter* Character, class UPrimitiveComponent* Component);
	EInteractionType GetInteractionType(class UPrimitiveComponent* Component);
	float GetLineDistance();
	float GetSphereDistance();
	void Interact(class AGymCharacter* Character, class UPrimitiveComponent* Component);
	bool IsForEditMode();
	bool ShouldAutoInteract();
	bool SupportsLineTrace();
	bool SupportsSphereTrace();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymInteractableInterface">();
	}
	static class IGymInteractableInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IGymInteractableInterface>();
	}
};
static_assert(alignof(IGymInteractableInterface) == 0x000008, "Wrong alignment on IGymInteractableInterface");
static_assert(sizeof(IGymInteractableInterface) == 0x000028, "Wrong size on IGymInteractableInterface");

// Class GYMGAME.GymConfigCameraDataAsset
// 0x0190 (0x01C0 - 0x0030)
class UGymConfigCameraDataAsset : public UGymConfigDataAsset
{
public:
	bool                                          SupermovesExtraNauseaMode;                         // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            GamepadSensitivityX;                               // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            GamepadSensitivityY;                               // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationRate1pp;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationRate3pp;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RollCameraLocationLockOffset;                      // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FPCameraOffset;                                    // 0x0068(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FPHandsOffset;                                     // 0x0080(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           FPHandsOffsetOverTiltCurve;                        // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           FPHandsOffsetOverTiltCurveSprint;                  // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           FPSprintPopCurveAmplitude;                         // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           TPSprintPopCurveAmplitude;                         // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           FPSprintPopCurveFrequency;                         // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           TPSprintPopCurveFrequency;                         // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           FPFallingPopCurveAmplitude;                        // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           FPFallingPopCurveFrequency;                        // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           TPFallingPopCurveAmplitude;                        // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           TPFallingPopCurveFrequency;                        // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SprintTransitionStart;                             // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SprintTransitionEnd;                               // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SprintTransitionStartHeadPop;                      // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SprintTransitionEndHeadPop;                        // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FPHandsRotationDir;                                // 0x00F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinTilt;                                           // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTilt;                                           // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TPCameraFollowStiffness;                           // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TPVelocityOffsetPower;                             // 0x0120(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZoomSensitivity;                                   // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZoomSmoothness;                                    // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinZoom;                                           // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxZoom;                                           // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TPZoom;                                            // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TPCameraOffset;                                    // 0x0150(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityVignetteMax;                               // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityMotionBlurMax;                             // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRotTilt;                                        // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRotTilt;                                        // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRotTiltFreq;                                    // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRotTiltFreq;                                    // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ZiplineAngleDampingCurve;                          // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpTime;                                        // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZiplinePitchLimitMax;                              // 0x018C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZiplinePitchLimitMin;                              // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_194[0x4];                                      // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            BlurVignetteCurve;                                 // 0x0198(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            VelocityFovCurve;                                  // 0x01A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FOVVelocityBoost;                                  // 0x01A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CameraVelocityOffsetCurve;                         // 0x01B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CameraLandingOffsetCurve;                          // 0x01B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymConfigCameraDataAsset">();
	}
	static class UGymConfigCameraDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymConfigCameraDataAsset>();
	}
};
static_assert(alignof(UGymConfigCameraDataAsset) == 0x000008, "Wrong alignment on UGymConfigCameraDataAsset");
static_assert(sizeof(UGymConfigCameraDataAsset) == 0x0001C0, "Wrong size on UGymConfigCameraDataAsset");
static_assert(offsetof(UGymConfigCameraDataAsset, SupermovesExtraNauseaMode) == 0x000030, "Member 'UGymConfigCameraDataAsset::SupermovesExtraNauseaMode' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, GamepadSensitivityX) == 0x000038, "Member 'UGymConfigCameraDataAsset::GamepadSensitivityX' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, GamepadSensitivityY) == 0x000040, "Member 'UGymConfigCameraDataAsset::GamepadSensitivityY' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, RotationRate1pp) == 0x000048, "Member 'UGymConfigCameraDataAsset::RotationRate1pp' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, RotationRate3pp) == 0x00004C, "Member 'UGymConfigCameraDataAsset::RotationRate3pp' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, RollCameraLocationLockOffset) == 0x000050, "Member 'UGymConfigCameraDataAsset::RollCameraLocationLockOffset' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, FPCameraOffset) == 0x000068, "Member 'UGymConfigCameraDataAsset::FPCameraOffset' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, FPHandsOffset) == 0x000080, "Member 'UGymConfigCameraDataAsset::FPHandsOffset' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, FPHandsOffsetOverTiltCurve) == 0x000098, "Member 'UGymConfigCameraDataAsset::FPHandsOffsetOverTiltCurve' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, FPHandsOffsetOverTiltCurveSprint) == 0x0000A0, "Member 'UGymConfigCameraDataAsset::FPHandsOffsetOverTiltCurveSprint' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, FPSprintPopCurveAmplitude) == 0x0000A8, "Member 'UGymConfigCameraDataAsset::FPSprintPopCurveAmplitude' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, TPSprintPopCurveAmplitude) == 0x0000B0, "Member 'UGymConfigCameraDataAsset::TPSprintPopCurveAmplitude' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, FPSprintPopCurveFrequency) == 0x0000B8, "Member 'UGymConfigCameraDataAsset::FPSprintPopCurveFrequency' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, TPSprintPopCurveFrequency) == 0x0000C0, "Member 'UGymConfigCameraDataAsset::TPSprintPopCurveFrequency' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, FPFallingPopCurveAmplitude) == 0x0000C8, "Member 'UGymConfigCameraDataAsset::FPFallingPopCurveAmplitude' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, FPFallingPopCurveFrequency) == 0x0000D0, "Member 'UGymConfigCameraDataAsset::FPFallingPopCurveFrequency' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, TPFallingPopCurveAmplitude) == 0x0000D8, "Member 'UGymConfigCameraDataAsset::TPFallingPopCurveAmplitude' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, TPFallingPopCurveFrequency) == 0x0000E0, "Member 'UGymConfigCameraDataAsset::TPFallingPopCurveFrequency' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, SprintTransitionStart) == 0x0000E8, "Member 'UGymConfigCameraDataAsset::SprintTransitionStart' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, SprintTransitionEnd) == 0x0000EC, "Member 'UGymConfigCameraDataAsset::SprintTransitionEnd' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, SprintTransitionStartHeadPop) == 0x0000F0, "Member 'UGymConfigCameraDataAsset::SprintTransitionStartHeadPop' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, SprintTransitionEndHeadPop) == 0x0000F4, "Member 'UGymConfigCameraDataAsset::SprintTransitionEndHeadPop' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, FPHandsRotationDir) == 0x0000F8, "Member 'UGymConfigCameraDataAsset::FPHandsRotationDir' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, MinTilt) == 0x000110, "Member 'UGymConfigCameraDataAsset::MinTilt' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, MaxTilt) == 0x000114, "Member 'UGymConfigCameraDataAsset::MaxTilt' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, TPCameraFollowStiffness) == 0x000118, "Member 'UGymConfigCameraDataAsset::TPCameraFollowStiffness' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, TPVelocityOffsetPower) == 0x000120, "Member 'UGymConfigCameraDataAsset::TPVelocityOffsetPower' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, ZoomSensitivity) == 0x000138, "Member 'UGymConfigCameraDataAsset::ZoomSensitivity' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, ZoomSmoothness) == 0x00013C, "Member 'UGymConfigCameraDataAsset::ZoomSmoothness' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, MinZoom) == 0x000140, "Member 'UGymConfigCameraDataAsset::MinZoom' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, MaxZoom) == 0x000144, "Member 'UGymConfigCameraDataAsset::MaxZoom' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, TPZoom) == 0x000148, "Member 'UGymConfigCameraDataAsset::TPZoom' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, TPCameraOffset) == 0x000150, "Member 'UGymConfigCameraDataAsset::TPCameraOffset' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, VelocityVignetteMax) == 0x000168, "Member 'UGymConfigCameraDataAsset::VelocityVignetteMax' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, VelocityMotionBlurMax) == 0x00016C, "Member 'UGymConfigCameraDataAsset::VelocityMotionBlurMax' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, MaxRotTilt) == 0x000170, "Member 'UGymConfigCameraDataAsset::MaxRotTilt' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, MinRotTilt) == 0x000174, "Member 'UGymConfigCameraDataAsset::MinRotTilt' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, MaxRotTiltFreq) == 0x000178, "Member 'UGymConfigCameraDataAsset::MaxRotTiltFreq' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, MinRotTiltFreq) == 0x00017C, "Member 'UGymConfigCameraDataAsset::MinRotTiltFreq' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, ZiplineAngleDampingCurve) == 0x000180, "Member 'UGymConfigCameraDataAsset::ZiplineAngleDampingCurve' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, InterpTime) == 0x000188, "Member 'UGymConfigCameraDataAsset::InterpTime' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, ZiplinePitchLimitMax) == 0x00018C, "Member 'UGymConfigCameraDataAsset::ZiplinePitchLimitMax' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, ZiplinePitchLimitMin) == 0x000190, "Member 'UGymConfigCameraDataAsset::ZiplinePitchLimitMin' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, BlurVignetteCurve) == 0x000198, "Member 'UGymConfigCameraDataAsset::BlurVignetteCurve' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, VelocityFovCurve) == 0x0001A0, "Member 'UGymConfigCameraDataAsset::VelocityFovCurve' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, FOVVelocityBoost) == 0x0001A8, "Member 'UGymConfigCameraDataAsset::FOVVelocityBoost' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, CameraVelocityOffsetCurve) == 0x0001B0, "Member 'UGymConfigCameraDataAsset::CameraVelocityOffsetCurve' has a wrong offset!");
static_assert(offsetof(UGymConfigCameraDataAsset, CameraLandingOffsetCurve) == 0x0001B8, "Member 'UGymConfigCameraDataAsset::CameraLandingOffsetCurve' has a wrong offset!");

// Class GYMGAME.GymChallengeLocalizationAsset
// 0x0010 (0x0040 - 0x0030)
class UGymChallengeLocalizationAsset final : public UPrimaryDataAsset
{
public:
	TArray<struct FGymChallengeLocalization>      ChallengeDisplayNames;                             // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymChallengeLocalizationAsset">();
	}
	static class UGymChallengeLocalizationAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymChallengeLocalizationAsset>();
	}
};
static_assert(alignof(UGymChallengeLocalizationAsset) == 0x000008, "Wrong alignment on UGymChallengeLocalizationAsset");
static_assert(sizeof(UGymChallengeLocalizationAsset) == 0x000040, "Wrong size on UGymChallengeLocalizationAsset");
static_assert(offsetof(UGymChallengeLocalizationAsset, ChallengeDisplayNames) == 0x000030, "Member 'UGymChallengeLocalizationAsset::ChallengeDisplayNames' has a wrong offset!");

// Class GYMGAME.GymHeadMovementCameraModifier
// 0x00F0 (0x01A0 - 0x00B0)
class UGymHeadMovementCameraModifier final : public UGymMetaCameraModifier
{
public:
	struct FGymHeadMovementCameraModifierSettings Settings;                                          // 0x00B0(0x0028)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	struct FGymHeadMovementCameraModifierProps    Props;                                             // 0x00D8(0x0050)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	struct FGymHeadMovementCameraModifierSettings TPSettings;                                        // 0x0128(0x0028)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	struct FGymHeadMovementCameraModifierProps    TPProps;                                           // 0x0150(0x0050)(Transient, NoDestructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymHeadMovementCameraModifier">();
	}
	static class UGymHeadMovementCameraModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymHeadMovementCameraModifier>();
	}
};
static_assert(alignof(UGymHeadMovementCameraModifier) == 0x000008, "Wrong alignment on UGymHeadMovementCameraModifier");
static_assert(sizeof(UGymHeadMovementCameraModifier) == 0x0001A0, "Wrong size on UGymHeadMovementCameraModifier");
static_assert(offsetof(UGymHeadMovementCameraModifier, Settings) == 0x0000B0, "Member 'UGymHeadMovementCameraModifier::Settings' has a wrong offset!");
static_assert(offsetof(UGymHeadMovementCameraModifier, Props) == 0x0000D8, "Member 'UGymHeadMovementCameraModifier::Props' has a wrong offset!");
static_assert(offsetof(UGymHeadMovementCameraModifier, TPSettings) == 0x000128, "Member 'UGymHeadMovementCameraModifier::TPSettings' has a wrong offset!");
static_assert(offsetof(UGymHeadMovementCameraModifier, TPProps) == 0x000150, "Member 'UGymHeadMovementCameraModifier::TPProps' has a wrong offset!");

// Class GYMGAME.GymConfigCreateMenu
// 0x0010 (0x0040 - 0x0030)
class UGymConfigCreateMenu final : public UGymConfigDataAsset
{
public:
	TArray<struct FGymLevelKit>                   Kits;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymConfigCreateMenu">();
	}
	static class UGymConfigCreateMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymConfigCreateMenu>();
	}
};
static_assert(alignof(UGymConfigCreateMenu) == 0x000008, "Wrong alignment on UGymConfigCreateMenu");
static_assert(sizeof(UGymConfigCreateMenu) == 0x000040, "Wrong size on UGymConfigCreateMenu");
static_assert(offsetof(UGymConfigCreateMenu, Kits) == 0x000030, "Member 'UGymConfigCreateMenu::Kits' has a wrong offset!");

// Class GYMGAME.GymConfigEditorDataAsset
// 0x0060 (0x0090 - 0x0030)
class UGymConfigEditorDataAsset : public UGymConfigDataAsset
{
public:
	TSubclassOf<class UGymGuiCharacterMetaWidget> EditorGuiClass;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     EditorGhostMaterial;                               // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     EditorGlowModifiableMaterial;                      // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     EditorGlowNonModifiableMaterial;                   // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     EditorPhysicsPreviewMaterial;                      // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EditorRotatePower;                                 // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ASnappingGrid>              SnappingGrid;                                      // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AEditorGizmo>               EditorGizmo;                                       // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuildActionCooldown;                               // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AActor>                     WallHighlightActor;                                // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     OverlayMaterial;                                   // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialParameterCollection*           GymUtilityParameterCollection;                     // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymConfigEditorDataAsset">();
	}
	static class UGymConfigEditorDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymConfigEditorDataAsset>();
	}
};
static_assert(alignof(UGymConfigEditorDataAsset) == 0x000008, "Wrong alignment on UGymConfigEditorDataAsset");
static_assert(sizeof(UGymConfigEditorDataAsset) == 0x000090, "Wrong size on UGymConfigEditorDataAsset");
static_assert(offsetof(UGymConfigEditorDataAsset, EditorGuiClass) == 0x000030, "Member 'UGymConfigEditorDataAsset::EditorGuiClass' has a wrong offset!");
static_assert(offsetof(UGymConfigEditorDataAsset, EditorGhostMaterial) == 0x000038, "Member 'UGymConfigEditorDataAsset::EditorGhostMaterial' has a wrong offset!");
static_assert(offsetof(UGymConfigEditorDataAsset, EditorGlowModifiableMaterial) == 0x000040, "Member 'UGymConfigEditorDataAsset::EditorGlowModifiableMaterial' has a wrong offset!");
static_assert(offsetof(UGymConfigEditorDataAsset, EditorGlowNonModifiableMaterial) == 0x000048, "Member 'UGymConfigEditorDataAsset::EditorGlowNonModifiableMaterial' has a wrong offset!");
static_assert(offsetof(UGymConfigEditorDataAsset, EditorPhysicsPreviewMaterial) == 0x000050, "Member 'UGymConfigEditorDataAsset::EditorPhysicsPreviewMaterial' has a wrong offset!");
static_assert(offsetof(UGymConfigEditorDataAsset, EditorRotatePower) == 0x000058, "Member 'UGymConfigEditorDataAsset::EditorRotatePower' has a wrong offset!");
static_assert(offsetof(UGymConfigEditorDataAsset, SnappingGrid) == 0x000060, "Member 'UGymConfigEditorDataAsset::SnappingGrid' has a wrong offset!");
static_assert(offsetof(UGymConfigEditorDataAsset, EditorGizmo) == 0x000068, "Member 'UGymConfigEditorDataAsset::EditorGizmo' has a wrong offset!");
static_assert(offsetof(UGymConfigEditorDataAsset, BuildActionCooldown) == 0x000070, "Member 'UGymConfigEditorDataAsset::BuildActionCooldown' has a wrong offset!");
static_assert(offsetof(UGymConfigEditorDataAsset, WallHighlightActor) == 0x000078, "Member 'UGymConfigEditorDataAsset::WallHighlightActor' has a wrong offset!");
static_assert(offsetof(UGymConfigEditorDataAsset, OverlayMaterial) == 0x000080, "Member 'UGymConfigEditorDataAsset::OverlayMaterial' has a wrong offset!");
static_assert(offsetof(UGymConfigEditorDataAsset, GymUtilityParameterCollection) == 0x000088, "Member 'UGymConfigEditorDataAsset::GymUtilityParameterCollection' has a wrong offset!");

// Class GYMGAME.GymGuiTextInputUtils
// 0x0048 (0x0070 - 0x0028)
class UGymGuiTextInputUtils final : public UObject
{
public:
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bGameOverlayActive;                                // 0x0048(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bInputInProgress;                                  // 0x0049(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                TextWidget;                                        // 0x0050(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_58[0x18];                                      // 0x0058(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiTextInputUtils">();
	}
	static class UGymGuiTextInputUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiTextInputUtils>();
	}
};
static_assert(alignof(UGymGuiTextInputUtils) == 0x000008, "Wrong alignment on UGymGuiTextInputUtils");
static_assert(sizeof(UGymGuiTextInputUtils) == 0x000070, "Wrong size on UGymGuiTextInputUtils");
static_assert(offsetof(UGymGuiTextInputUtils, bGameOverlayActive) == 0x000048, "Member 'UGymGuiTextInputUtils::bGameOverlayActive' has a wrong offset!");
static_assert(offsetof(UGymGuiTextInputUtils, bInputInProgress) == 0x000049, "Member 'UGymGuiTextInputUtils::bInputInProgress' has a wrong offset!");
static_assert(offsetof(UGymGuiTextInputUtils, TextWidget) == 0x000050, "Member 'UGymGuiTextInputUtils::TextWidget' has a wrong offset!");

// Class GYMGAME.GymConfigForceFeedback
// 0x0098 (0x00C8 - 0x0030)
class UGymConfigForceFeedback final : public UGymConfigDataAsset
{
public:
	class UForceFeedbackEffect*                   SupermoveUsed;                                     // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   BombTagged;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   LootCollected;                                     // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   Overspeed;                                         // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   VoteStart;                                         // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   Eliminated;                                        // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   Rolled;                                            // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   FragileFloorStart;                                 // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   Trampoline;                                        // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   SpinnerHit;                                        // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   BoulderHit;                                        // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   Grinding;                                          // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   Ziplining;                                         // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   WallRunning;                                       // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   Checkpoint;                                        // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   Goal;                                              // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   Countdown;                                         // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   KillZone;                                          // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   SlowZone;                                          // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymConfigForceFeedback">();
	}
	static class UGymConfigForceFeedback* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymConfigForceFeedback>();
	}
};
static_assert(alignof(UGymConfigForceFeedback) == 0x000008, "Wrong alignment on UGymConfigForceFeedback");
static_assert(sizeof(UGymConfigForceFeedback) == 0x0000C8, "Wrong size on UGymConfigForceFeedback");
static_assert(offsetof(UGymConfigForceFeedback, SupermoveUsed) == 0x000030, "Member 'UGymConfigForceFeedback::SupermoveUsed' has a wrong offset!");
static_assert(offsetof(UGymConfigForceFeedback, BombTagged) == 0x000038, "Member 'UGymConfigForceFeedback::BombTagged' has a wrong offset!");
static_assert(offsetof(UGymConfigForceFeedback, LootCollected) == 0x000040, "Member 'UGymConfigForceFeedback::LootCollected' has a wrong offset!");
static_assert(offsetof(UGymConfigForceFeedback, Overspeed) == 0x000048, "Member 'UGymConfigForceFeedback::Overspeed' has a wrong offset!");
static_assert(offsetof(UGymConfigForceFeedback, VoteStart) == 0x000050, "Member 'UGymConfigForceFeedback::VoteStart' has a wrong offset!");
static_assert(offsetof(UGymConfigForceFeedback, Eliminated) == 0x000058, "Member 'UGymConfigForceFeedback::Eliminated' has a wrong offset!");
static_assert(offsetof(UGymConfigForceFeedback, Rolled) == 0x000060, "Member 'UGymConfigForceFeedback::Rolled' has a wrong offset!");
static_assert(offsetof(UGymConfigForceFeedback, FragileFloorStart) == 0x000068, "Member 'UGymConfigForceFeedback::FragileFloorStart' has a wrong offset!");
static_assert(offsetof(UGymConfigForceFeedback, Trampoline) == 0x000070, "Member 'UGymConfigForceFeedback::Trampoline' has a wrong offset!");
static_assert(offsetof(UGymConfigForceFeedback, SpinnerHit) == 0x000078, "Member 'UGymConfigForceFeedback::SpinnerHit' has a wrong offset!");
static_assert(offsetof(UGymConfigForceFeedback, BoulderHit) == 0x000080, "Member 'UGymConfigForceFeedback::BoulderHit' has a wrong offset!");
static_assert(offsetof(UGymConfigForceFeedback, Grinding) == 0x000088, "Member 'UGymConfigForceFeedback::Grinding' has a wrong offset!");
static_assert(offsetof(UGymConfigForceFeedback, Ziplining) == 0x000090, "Member 'UGymConfigForceFeedback::Ziplining' has a wrong offset!");
static_assert(offsetof(UGymConfigForceFeedback, WallRunning) == 0x000098, "Member 'UGymConfigForceFeedback::WallRunning' has a wrong offset!");
static_assert(offsetof(UGymConfigForceFeedback, Checkpoint) == 0x0000A0, "Member 'UGymConfigForceFeedback::Checkpoint' has a wrong offset!");
static_assert(offsetof(UGymConfigForceFeedback, Goal) == 0x0000A8, "Member 'UGymConfigForceFeedback::Goal' has a wrong offset!");
static_assert(offsetof(UGymConfigForceFeedback, Countdown) == 0x0000B0, "Member 'UGymConfigForceFeedback::Countdown' has a wrong offset!");
static_assert(offsetof(UGymConfigForceFeedback, KillZone) == 0x0000B8, "Member 'UGymConfigForceFeedback::KillZone' has a wrong offset!");
static_assert(offsetof(UGymConfigForceFeedback, SlowZone) == 0x0000C0, "Member 'UGymConfigForceFeedback::SlowZone' has a wrong offset!");

// Class GYMGAME.GymConfigGUIDataAsset
// 0x0208 (0x0238 - 0x0030)
class UGymConfigGUIDataAsset : public UGymConfigDataAsset
{
public:
	TSubclassOf<class UGymGuiCharacterMetaWidget> CursorGuiClass;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGymGuiGrindMeter>          GrindMeterGuiClass;                                // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGymGuiMainMenuWidget>      MainMenuGuiClass;                                  // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGymGuiPauseMenu>           PauseMenuGuiClass;                                 // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGymGuiPlayerIdentityNameplate> PlayerIdentityNameplateGuiClass;                   // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGymGuiMasterRuleStateWidget> RuleStateGuiClass;                                 // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGymGuiSettingsWidget>      SettingsWidgetGuiClass;                            // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Widget3DGuiBaseMaterial;                           // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGymGuiChooseLevelSlot>     ChooseLevelSlotGuiClass;                           // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGymGuiScoreboardEntryWidget> ScoreboardEntryGuiClass;                           // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGymGuiREScoreboardWidget>  RaceEndScoreboardGuiClass;                         // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGymGuiGlobalMetaWidget>    PlaylistScoreboardGuiClass;                        // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGymGuiREScoreboardEntryWidget> RaceEndScoreboardEntryGuiClass;                    // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGymLoadingScreen>          LoadingScreenWidgetClass;                          // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGymGuiRadialWidget>        TauntWidgetGuiClass;                               // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGymGuiPreflowCountdownWidget> GuiPreflowCountdownGuiClass;                       // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGymGuiTickerMetaWidget>    TickerWidgetGuiClass;                              // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGymGuiChooseLevelSlotInfo>     AvailableLevelsForDemo;                            // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, NativeAccessSpecifierPublic)
	TSubclassOf<class UGymGuiConfirmWidget>       ConfirmWidgetGuiClass;                             // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGymGuiGlobalMetaWidget>    ErrorPopupWidgetClass;                             // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGymGuiGlobalMetaWidget>    InfoPopupWidgetClass;                              // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGymGuiDialogueWidget>      DialogueWidgetClass;                               // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGymQuestWidget>            QuestWidgetClass;                                  // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGymGuiPreflowWidget>       PreflowWidgetGuiClass;                             // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGymFadeWidget>             FadeWidget;                                        // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGymGuiGlobalChatWidget>    ChatWidgetClass;                                   // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UseTutorialLevelURL;                               // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UseTutorialLevelID;                                // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UseFeatured01LevelID;                              // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UseFeatured02LevelID;                              // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UseFeatured03LevelID;                              // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UseFeatured04LevelID;                              // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPreviewUIWidget>               PreviewGUIWidgets;                                 // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, ExposeOnSpawn, NativeAccessSpecifierPublic)
	struct FGymGuiChooseLevelSlotInfo             LevelSlotTemplate;                                 // 0x0178(0x0090)(Edit, BlueprintVisible, ExposeOnSpawn, NativeAccessSpecifierPublic)
	bool                                          UseMinMaxVisibilityRange;                          // 0x0208(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_209[0x3];                                      // 0x0209(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinVisibilityRange;                                // 0x020C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxVisibilityRange;                                // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeSpeed;                                         // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGymSpectatorGuiMainWidget> SpectatorMainWidgetClass;                          // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGymSpectatorGuiMasterRuleWidget> SpectatorMasterRuleWidgetClass;                    // 0x0220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             GameModeDisplaydata;                               // 0x0228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGymGuiPhotoModeWidget>     PhotoModeGuiClass;                                 // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymConfigGUIDataAsset">();
	}
	static class UGymConfigGUIDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymConfigGUIDataAsset>();
	}
};
static_assert(alignof(UGymConfigGUIDataAsset) == 0x000008, "Wrong alignment on UGymConfigGUIDataAsset");
static_assert(sizeof(UGymConfigGUIDataAsset) == 0x000238, "Wrong size on UGymConfigGUIDataAsset");
static_assert(offsetof(UGymConfigGUIDataAsset, CursorGuiClass) == 0x000030, "Member 'UGymConfigGUIDataAsset::CursorGuiClass' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, GrindMeterGuiClass) == 0x000038, "Member 'UGymConfigGUIDataAsset::GrindMeterGuiClass' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, MainMenuGuiClass) == 0x000040, "Member 'UGymConfigGUIDataAsset::MainMenuGuiClass' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, PauseMenuGuiClass) == 0x000048, "Member 'UGymConfigGUIDataAsset::PauseMenuGuiClass' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, PlayerIdentityNameplateGuiClass) == 0x000050, "Member 'UGymConfigGUIDataAsset::PlayerIdentityNameplateGuiClass' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, RuleStateGuiClass) == 0x000058, "Member 'UGymConfigGUIDataAsset::RuleStateGuiClass' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, SettingsWidgetGuiClass) == 0x000060, "Member 'UGymConfigGUIDataAsset::SettingsWidgetGuiClass' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, Widget3DGuiBaseMaterial) == 0x000068, "Member 'UGymConfigGUIDataAsset::Widget3DGuiBaseMaterial' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, ChooseLevelSlotGuiClass) == 0x000070, "Member 'UGymConfigGUIDataAsset::ChooseLevelSlotGuiClass' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, ScoreboardEntryGuiClass) == 0x000078, "Member 'UGymConfigGUIDataAsset::ScoreboardEntryGuiClass' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, RaceEndScoreboardGuiClass) == 0x000080, "Member 'UGymConfigGUIDataAsset::RaceEndScoreboardGuiClass' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, PlaylistScoreboardGuiClass) == 0x000088, "Member 'UGymConfigGUIDataAsset::PlaylistScoreboardGuiClass' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, RaceEndScoreboardEntryGuiClass) == 0x000090, "Member 'UGymConfigGUIDataAsset::RaceEndScoreboardEntryGuiClass' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, LoadingScreenWidgetClass) == 0x000098, "Member 'UGymConfigGUIDataAsset::LoadingScreenWidgetClass' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, TauntWidgetGuiClass) == 0x0000A0, "Member 'UGymConfigGUIDataAsset::TauntWidgetGuiClass' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, GuiPreflowCountdownGuiClass) == 0x0000A8, "Member 'UGymConfigGUIDataAsset::GuiPreflowCountdownGuiClass' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, TickerWidgetGuiClass) == 0x0000B0, "Member 'UGymConfigGUIDataAsset::TickerWidgetGuiClass' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, AvailableLevelsForDemo) == 0x0000B8, "Member 'UGymConfigGUIDataAsset::AvailableLevelsForDemo' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, ConfirmWidgetGuiClass) == 0x0000C8, "Member 'UGymConfigGUIDataAsset::ConfirmWidgetGuiClass' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, ErrorPopupWidgetClass) == 0x0000D0, "Member 'UGymConfigGUIDataAsset::ErrorPopupWidgetClass' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, InfoPopupWidgetClass) == 0x0000D8, "Member 'UGymConfigGUIDataAsset::InfoPopupWidgetClass' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, DialogueWidgetClass) == 0x0000E0, "Member 'UGymConfigGUIDataAsset::DialogueWidgetClass' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, QuestWidgetClass) == 0x0000E8, "Member 'UGymConfigGUIDataAsset::QuestWidgetClass' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, PreflowWidgetGuiClass) == 0x0000F0, "Member 'UGymConfigGUIDataAsset::PreflowWidgetGuiClass' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, FadeWidget) == 0x0000F8, "Member 'UGymConfigGUIDataAsset::FadeWidget' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, ChatWidgetClass) == 0x000100, "Member 'UGymConfigGUIDataAsset::ChatWidgetClass' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, UseTutorialLevelURL) == 0x000108, "Member 'UGymConfigGUIDataAsset::UseTutorialLevelURL' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, UseTutorialLevelID) == 0x000118, "Member 'UGymConfigGUIDataAsset::UseTutorialLevelID' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, UseFeatured01LevelID) == 0x000128, "Member 'UGymConfigGUIDataAsset::UseFeatured01LevelID' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, UseFeatured02LevelID) == 0x000138, "Member 'UGymConfigGUIDataAsset::UseFeatured02LevelID' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, UseFeatured03LevelID) == 0x000148, "Member 'UGymConfigGUIDataAsset::UseFeatured03LevelID' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, UseFeatured04LevelID) == 0x000158, "Member 'UGymConfigGUIDataAsset::UseFeatured04LevelID' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, PreviewGUIWidgets) == 0x000168, "Member 'UGymConfigGUIDataAsset::PreviewGUIWidgets' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, LevelSlotTemplate) == 0x000178, "Member 'UGymConfigGUIDataAsset::LevelSlotTemplate' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, UseMinMaxVisibilityRange) == 0x000208, "Member 'UGymConfigGUIDataAsset::UseMinMaxVisibilityRange' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, MinVisibilityRange) == 0x00020C, "Member 'UGymConfigGUIDataAsset::MinVisibilityRange' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, MaxVisibilityRange) == 0x000210, "Member 'UGymConfigGUIDataAsset::MaxVisibilityRange' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, FadeSpeed) == 0x000214, "Member 'UGymConfigGUIDataAsset::FadeSpeed' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, SpectatorMainWidgetClass) == 0x000218, "Member 'UGymConfigGUIDataAsset::SpectatorMainWidgetClass' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, SpectatorMasterRuleWidgetClass) == 0x000220, "Member 'UGymConfigGUIDataAsset::SpectatorMasterRuleWidgetClass' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, GameModeDisplaydata) == 0x000228, "Member 'UGymConfigGUIDataAsset::GameModeDisplaydata' has a wrong offset!");
static_assert(offsetof(UGymConfigGUIDataAsset, PhotoModeGuiClass) == 0x000230, "Member 'UGymConfigGUIDataAsset::PhotoModeGuiClass' has a wrong offset!");

// Class GYMGAME.GymInputRecorder
// 0x01A0 (0x01C8 - 0x0028)
class UGymInputRecorder final : public UObject
{
public:
	bool                                          bAutoRecord;                                       // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AutoRecordFile;                                    // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x188];                                     // 0x0040(0x0188)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EndRecording();
	void ExportInputRecord(const class FString& Filename, const bool bForce);
	void ImportAndPlayRecord(const class FString& Filename);
	void ImportInputRecord(const class FString& Filename);
	void SetAutoRecordOn(bool AutoRecord, int32 StartLocation, const class FString& RecordFileName);
	void StartRecording();

	bool GetIsRecording() const;
	float GetRecordTime() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymInputRecorder">();
	}
	static class UGymInputRecorder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymInputRecorder>();
	}
};
static_assert(alignof(UGymInputRecorder) == 0x000008, "Wrong alignment on UGymInputRecorder");
static_assert(sizeof(UGymInputRecorder) == 0x0001C8, "Wrong size on UGymInputRecorder");
static_assert(offsetof(UGymInputRecorder, bAutoRecord) == 0x000028, "Member 'UGymInputRecorder::bAutoRecord' has a wrong offset!");
static_assert(offsetof(UGymInputRecorder, AutoRecordFile) == 0x000030, "Member 'UGymInputRecorder::AutoRecordFile' has a wrong offset!");

// Class GYMGAME.GymConfigMovement
// 0x02F0 (0x0320 - 0x0030)
class UGymConfigMovement final : public UGymConfigDataAsset
{
public:
	bool                                          Seves1PPFov_Enabled;                               // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Seves1PPFov_Depth;                                 // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Seves1PPFov_Scale;                                 // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Seves1PPFov_Skew;                                  // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            RollCamera1ppLockLerp;                             // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            RollCamera1ppPlayRate;                             // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            RollCamera1ppPitchOffset;                          // 0x0050(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollCamera1ppPitchOffsetAmount;                    // 0x0058(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SuperMoveFrontFlipForceBase;                       // 0x0060(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SuperMoveFrontFlipForcePowered;                    // 0x0078(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SuperMoveBackFlipForceBase;                        // 0x0090(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SuperMoveBackFlipForcePowered;                     // 0x00A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharacterBaseGravityScale;                         // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallDamageZForceThreshold;                         // 0x00C4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallFatalZForceThreshold;                          // 0x00C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            BasicOverspeedCurve;                               // 0x00D0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ForwardSpeedCapCurve;                              // 0x00D8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            BackwardSpeedCapCurve;                             // 0x00E0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpZVelocity;                                     // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardMaxSpeed;                                   // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SidewaysMaxSpeed;                                  // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackwardMaxSpeed;                                  // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UphillVelocityMultiplier;                          // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownhillVelocityMultiplier;                        // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleColliderHalfHeight;                         // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleColliderRadius;                             // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwimmingForwardMaxSpeed;                           // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwimmingSidewaysMaxSpeed;                          // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwimmingBackwardMaxSpeed;                          // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrictionMultiAfterSecond;                          // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            FlatCurve;                                         // 0x0118(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            LinearCurve;                                       // 0x0120(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardMaxSpeedCrouched;                           // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SidewaysMaxSpeedCrouched;                          // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackwardMaxSpeedCrouched;                          // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTubeAssistDist;                                 // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTubeAssistAcceleration;                         // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGymVaultingEngineVariantAsset*> VaultingVariantAssets;                             // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         AirControlSidewaysBase;                            // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirControlBackwardBase;                            // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirControlForwardBase;                             // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpTimerAfterStartFalling;                        // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChainJumpMaxAngle;                                 // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxChainJumps;                                     // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandingFrictionMultiAfterTime;                     // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandingTimeSeconds;                                // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrindingZOffsetAdjust;                             // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrindingZOffsetAdjustSuperMove;                    // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrindingCooldownSeconds;                           // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrindingSpeed;                                     // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrindingPeak;                                      // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrindingSpeedStartMultiplier;                      // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrindingZOffset;                                   // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrindingCameraMinPitch;                            // 0x018C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrindingAimAssistDelay;                            // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrindingCameraMaxPitch;                            // 0x0194(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrindingCameraMinYaw;                              // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrindingCameraMaxYaw;                              // 0x019C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            GrindingDifficultyOverTimeCurve;                   // 0x01A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            GrindingAccelerationCurve;                         // 0x01A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            GrindingMaxSpeedCurve;                             // 0x01B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WireWalkingCooldownSeconds;                        // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WireWalkingMaxSpeed;                               // 0x01BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WireWalkingCartwheelSpeed;                         // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WireWalkingZOffset;                                // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WireWalkingAccelerationPower;                      // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WireWalkingFriction;                               // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WireWalkingCameraMinPitch;                         // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WireWalkingCameraMaxPitch;                         // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WireWalkingCameraMinYaw;                           // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WireWalkingCameraMaxYaw;                           // 0x01DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WireWalkingAimAssistDelay;                         // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            WireWalkingInitialSpeedCurve;                      // 0x01E8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            WireWalkingDifficultyOverTimeCurve;                // 0x01F0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlideVelocityBoostPower;                           // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlideSidewaysControl;                              // 0x01FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlideForwardControl;                               // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSlideTimeSeconds;                               // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlideEndCooldown;                                  // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlideFriction;                                     // 0x020C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSlideStartSpeed;                                // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSlidingSpeed;                                   // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KeepSlidingZSpeedThreshold;                        // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownhillSlidingVelocityMultiplier;                 // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UphillSlidingVelocityMultiplier;                   // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            SlidingLifeTimeVelocityMulti;                      // 0x0228(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            UpHillSlidingCurve;                                // 0x0230(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            DownHillSlidingCurve;                              // 0x0238(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlideLeapSpeedBoost;                               // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlideLeapJumpBoost;                                // 0x0244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlideLeapBoostDelay;                               // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollingVelocityBoostPower;                         // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollingFriction;                                   // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_254[0x4];                                      // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            RollingTimeCurve;                                  // 0x0258(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SpeedBoostCurve;                                   // 0x0260(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            RollingOverspeedCurve;                             // 0x0268(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinStartZSpeedThreshold;                           // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallScrambleMinWallUpVelocity;                     // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallScrambleMaxWallUpVelocity;                     // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallScrambleMaxClimbHeightCM;                      // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallScrambleUseCooldownSeconds;                    // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallFlipSpeedBoost;                                // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallFlipJumpBoost;                                 // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28C[0x4];                                      // 0x028C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            WallRunningTimeCurve;                              // 0x0290(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            WallRunningGravityCurve;                           // 0x0298(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            WallRunningHorizontalVelocityCurve;                // 0x02A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallRunningMaxBaseSpeed;                           // 0x02A8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallRunningMaxOverSpeed;                           // 0x02AC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallRunningMinOverSpeed;                           // 0x02B0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallRunningPositiveOverSpeedPenalty;               // 0x02B4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallRunningStartVelocityMultiplier;                // 0x02B8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurveBaseTime;                                     // 0x02BC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallRunningHorizontalVelocityCurveTime;            // 0x02C0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallRunningGravityMultiplier;                      // 0x02C4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallRunningMinDownDistance;                        // 0x02C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallRunningMaxVelocity;                            // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallRunningPlayerOffsetFromWall;                   // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallRunningPlayerTiltDegrees;                      // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallRunningMinAlongWallSpeed;                      // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallRunningFlatXYWallJumpOffAmount;                // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallRunningFlatZWallJumpOffAmount;                 // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallRunningCooldown;                               // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallRunningSameDirectionCooldown;                  // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlyMaxSpeed;                                       // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlyBraking;                                        // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZiplineOffset;                                     // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ZiplineSpeedCurve;                                 // 0x02F8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CurveUp;                                           // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CurveDown;                                         // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZiplineCooldown;                                   // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZiplineJumpZVelocity;                              // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZiplineMaxXYSpeed;                                 // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZiplineJumpCooldown;                               // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymConfigMovement">();
	}
	static class UGymConfigMovement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymConfigMovement>();
	}
};
static_assert(alignof(UGymConfigMovement) == 0x000008, "Wrong alignment on UGymConfigMovement");
static_assert(sizeof(UGymConfigMovement) == 0x000320, "Wrong size on UGymConfigMovement");
static_assert(offsetof(UGymConfigMovement, Seves1PPFov_Enabled) == 0x000030, "Member 'UGymConfigMovement::Seves1PPFov_Enabled' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, Seves1PPFov_Depth) == 0x000034, "Member 'UGymConfigMovement::Seves1PPFov_Depth' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, Seves1PPFov_Scale) == 0x000038, "Member 'UGymConfigMovement::Seves1PPFov_Scale' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, Seves1PPFov_Skew) == 0x00003C, "Member 'UGymConfigMovement::Seves1PPFov_Skew' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, RollCamera1ppLockLerp) == 0x000040, "Member 'UGymConfigMovement::RollCamera1ppLockLerp' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, RollCamera1ppPlayRate) == 0x000048, "Member 'UGymConfigMovement::RollCamera1ppPlayRate' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, RollCamera1ppPitchOffset) == 0x000050, "Member 'UGymConfigMovement::RollCamera1ppPitchOffset' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, RollCamera1ppPitchOffsetAmount) == 0x000058, "Member 'UGymConfigMovement::RollCamera1ppPitchOffsetAmount' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, SuperMoveFrontFlipForceBase) == 0x000060, "Member 'UGymConfigMovement::SuperMoveFrontFlipForceBase' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, SuperMoveFrontFlipForcePowered) == 0x000078, "Member 'UGymConfigMovement::SuperMoveFrontFlipForcePowered' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, SuperMoveBackFlipForceBase) == 0x000090, "Member 'UGymConfigMovement::SuperMoveBackFlipForceBase' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, SuperMoveBackFlipForcePowered) == 0x0000A8, "Member 'UGymConfigMovement::SuperMoveBackFlipForcePowered' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, CharacterBaseGravityScale) == 0x0000C0, "Member 'UGymConfigMovement::CharacterBaseGravityScale' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, FallDamageZForceThreshold) == 0x0000C4, "Member 'UGymConfigMovement::FallDamageZForceThreshold' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, FallFatalZForceThreshold) == 0x0000C8, "Member 'UGymConfigMovement::FallFatalZForceThreshold' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, BasicOverspeedCurve) == 0x0000D0, "Member 'UGymConfigMovement::BasicOverspeedCurve' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, ForwardSpeedCapCurve) == 0x0000D8, "Member 'UGymConfigMovement::ForwardSpeedCapCurve' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, BackwardSpeedCapCurve) == 0x0000E0, "Member 'UGymConfigMovement::BackwardSpeedCapCurve' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, JumpZVelocity) == 0x0000E8, "Member 'UGymConfigMovement::JumpZVelocity' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, ForwardMaxSpeed) == 0x0000EC, "Member 'UGymConfigMovement::ForwardMaxSpeed' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, SidewaysMaxSpeed) == 0x0000F0, "Member 'UGymConfigMovement::SidewaysMaxSpeed' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, BackwardMaxSpeed) == 0x0000F4, "Member 'UGymConfigMovement::BackwardMaxSpeed' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, UphillVelocityMultiplier) == 0x0000F8, "Member 'UGymConfigMovement::UphillVelocityMultiplier' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, DownhillVelocityMultiplier) == 0x0000FC, "Member 'UGymConfigMovement::DownhillVelocityMultiplier' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, CapsuleColliderHalfHeight) == 0x000100, "Member 'UGymConfigMovement::CapsuleColliderHalfHeight' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, CapsuleColliderRadius) == 0x000104, "Member 'UGymConfigMovement::CapsuleColliderRadius' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, SwimmingForwardMaxSpeed) == 0x000108, "Member 'UGymConfigMovement::SwimmingForwardMaxSpeed' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, SwimmingSidewaysMaxSpeed) == 0x00010C, "Member 'UGymConfigMovement::SwimmingSidewaysMaxSpeed' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, SwimmingBackwardMaxSpeed) == 0x000110, "Member 'UGymConfigMovement::SwimmingBackwardMaxSpeed' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, FrictionMultiAfterSecond) == 0x000114, "Member 'UGymConfigMovement::FrictionMultiAfterSecond' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, FlatCurve) == 0x000118, "Member 'UGymConfigMovement::FlatCurve' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, LinearCurve) == 0x000120, "Member 'UGymConfigMovement::LinearCurve' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, ForwardMaxSpeedCrouched) == 0x000128, "Member 'UGymConfigMovement::ForwardMaxSpeedCrouched' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, SidewaysMaxSpeedCrouched) == 0x00012C, "Member 'UGymConfigMovement::SidewaysMaxSpeedCrouched' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, BackwardMaxSpeedCrouched) == 0x000130, "Member 'UGymConfigMovement::BackwardMaxSpeedCrouched' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, MaxTubeAssistDist) == 0x000134, "Member 'UGymConfigMovement::MaxTubeAssistDist' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, MaxTubeAssistAcceleration) == 0x000138, "Member 'UGymConfigMovement::MaxTubeAssistAcceleration' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, VaultingVariantAssets) == 0x000140, "Member 'UGymConfigMovement::VaultingVariantAssets' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, AirControlSidewaysBase) == 0x000150, "Member 'UGymConfigMovement::AirControlSidewaysBase' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, AirControlBackwardBase) == 0x000154, "Member 'UGymConfigMovement::AirControlBackwardBase' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, AirControlForwardBase) == 0x000158, "Member 'UGymConfigMovement::AirControlForwardBase' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, JumpTimerAfterStartFalling) == 0x00015C, "Member 'UGymConfigMovement::JumpTimerAfterStartFalling' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, ChainJumpMaxAngle) == 0x000160, "Member 'UGymConfigMovement::ChainJumpMaxAngle' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, MaxChainJumps) == 0x000164, "Member 'UGymConfigMovement::MaxChainJumps' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, LandingFrictionMultiAfterTime) == 0x000168, "Member 'UGymConfigMovement::LandingFrictionMultiAfterTime' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, LandingTimeSeconds) == 0x00016C, "Member 'UGymConfigMovement::LandingTimeSeconds' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, GrindingZOffsetAdjust) == 0x000170, "Member 'UGymConfigMovement::GrindingZOffsetAdjust' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, GrindingZOffsetAdjustSuperMove) == 0x000174, "Member 'UGymConfigMovement::GrindingZOffsetAdjustSuperMove' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, GrindingCooldownSeconds) == 0x000178, "Member 'UGymConfigMovement::GrindingCooldownSeconds' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, GrindingSpeed) == 0x00017C, "Member 'UGymConfigMovement::GrindingSpeed' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, GrindingPeak) == 0x000180, "Member 'UGymConfigMovement::GrindingPeak' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, GrindingSpeedStartMultiplier) == 0x000184, "Member 'UGymConfigMovement::GrindingSpeedStartMultiplier' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, GrindingZOffset) == 0x000188, "Member 'UGymConfigMovement::GrindingZOffset' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, GrindingCameraMinPitch) == 0x00018C, "Member 'UGymConfigMovement::GrindingCameraMinPitch' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, GrindingAimAssistDelay) == 0x000190, "Member 'UGymConfigMovement::GrindingAimAssistDelay' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, GrindingCameraMaxPitch) == 0x000194, "Member 'UGymConfigMovement::GrindingCameraMaxPitch' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, GrindingCameraMinYaw) == 0x000198, "Member 'UGymConfigMovement::GrindingCameraMinYaw' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, GrindingCameraMaxYaw) == 0x00019C, "Member 'UGymConfigMovement::GrindingCameraMaxYaw' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, GrindingDifficultyOverTimeCurve) == 0x0001A0, "Member 'UGymConfigMovement::GrindingDifficultyOverTimeCurve' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, GrindingAccelerationCurve) == 0x0001A8, "Member 'UGymConfigMovement::GrindingAccelerationCurve' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, GrindingMaxSpeedCurve) == 0x0001B0, "Member 'UGymConfigMovement::GrindingMaxSpeedCurve' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WireWalkingCooldownSeconds) == 0x0001B8, "Member 'UGymConfigMovement::WireWalkingCooldownSeconds' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WireWalkingMaxSpeed) == 0x0001BC, "Member 'UGymConfigMovement::WireWalkingMaxSpeed' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WireWalkingCartwheelSpeed) == 0x0001C0, "Member 'UGymConfigMovement::WireWalkingCartwheelSpeed' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WireWalkingZOffset) == 0x0001C4, "Member 'UGymConfigMovement::WireWalkingZOffset' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WireWalkingAccelerationPower) == 0x0001C8, "Member 'UGymConfigMovement::WireWalkingAccelerationPower' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WireWalkingFriction) == 0x0001CC, "Member 'UGymConfigMovement::WireWalkingFriction' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WireWalkingCameraMinPitch) == 0x0001D0, "Member 'UGymConfigMovement::WireWalkingCameraMinPitch' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WireWalkingCameraMaxPitch) == 0x0001D4, "Member 'UGymConfigMovement::WireWalkingCameraMaxPitch' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WireWalkingCameraMinYaw) == 0x0001D8, "Member 'UGymConfigMovement::WireWalkingCameraMinYaw' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WireWalkingCameraMaxYaw) == 0x0001DC, "Member 'UGymConfigMovement::WireWalkingCameraMaxYaw' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WireWalkingAimAssistDelay) == 0x0001E0, "Member 'UGymConfigMovement::WireWalkingAimAssistDelay' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WireWalkingInitialSpeedCurve) == 0x0001E8, "Member 'UGymConfigMovement::WireWalkingInitialSpeedCurve' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WireWalkingDifficultyOverTimeCurve) == 0x0001F0, "Member 'UGymConfigMovement::WireWalkingDifficultyOverTimeCurve' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, SlideVelocityBoostPower) == 0x0001F8, "Member 'UGymConfigMovement::SlideVelocityBoostPower' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, SlideSidewaysControl) == 0x0001FC, "Member 'UGymConfigMovement::SlideSidewaysControl' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, SlideForwardControl) == 0x000200, "Member 'UGymConfigMovement::SlideForwardControl' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, MinSlideTimeSeconds) == 0x000204, "Member 'UGymConfigMovement::MinSlideTimeSeconds' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, SlideEndCooldown) == 0x000208, "Member 'UGymConfigMovement::SlideEndCooldown' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, SlideFriction) == 0x00020C, "Member 'UGymConfigMovement::SlideFriction' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, MinSlideStartSpeed) == 0x000210, "Member 'UGymConfigMovement::MinSlideStartSpeed' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, MaxSlidingSpeed) == 0x000214, "Member 'UGymConfigMovement::MaxSlidingSpeed' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, KeepSlidingZSpeedThreshold) == 0x000218, "Member 'UGymConfigMovement::KeepSlidingZSpeedThreshold' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, DownhillSlidingVelocityMultiplier) == 0x00021C, "Member 'UGymConfigMovement::DownhillSlidingVelocityMultiplier' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, UphillSlidingVelocityMultiplier) == 0x000220, "Member 'UGymConfigMovement::UphillSlidingVelocityMultiplier' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, SlidingLifeTimeVelocityMulti) == 0x000228, "Member 'UGymConfigMovement::SlidingLifeTimeVelocityMulti' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, UpHillSlidingCurve) == 0x000230, "Member 'UGymConfigMovement::UpHillSlidingCurve' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, DownHillSlidingCurve) == 0x000238, "Member 'UGymConfigMovement::DownHillSlidingCurve' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, SlideLeapSpeedBoost) == 0x000240, "Member 'UGymConfigMovement::SlideLeapSpeedBoost' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, SlideLeapJumpBoost) == 0x000244, "Member 'UGymConfigMovement::SlideLeapJumpBoost' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, SlideLeapBoostDelay) == 0x000248, "Member 'UGymConfigMovement::SlideLeapBoostDelay' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, RollingVelocityBoostPower) == 0x00024C, "Member 'UGymConfigMovement::RollingVelocityBoostPower' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, RollingFriction) == 0x000250, "Member 'UGymConfigMovement::RollingFriction' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, RollingTimeCurve) == 0x000258, "Member 'UGymConfigMovement::RollingTimeCurve' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, SpeedBoostCurve) == 0x000260, "Member 'UGymConfigMovement::SpeedBoostCurve' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, RollingOverspeedCurve) == 0x000268, "Member 'UGymConfigMovement::RollingOverspeedCurve' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, MinStartZSpeedThreshold) == 0x000270, "Member 'UGymConfigMovement::MinStartZSpeedThreshold' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WallScrambleMinWallUpVelocity) == 0x000274, "Member 'UGymConfigMovement::WallScrambleMinWallUpVelocity' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WallScrambleMaxWallUpVelocity) == 0x000278, "Member 'UGymConfigMovement::WallScrambleMaxWallUpVelocity' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WallScrambleMaxClimbHeightCM) == 0x00027C, "Member 'UGymConfigMovement::WallScrambleMaxClimbHeightCM' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WallScrambleUseCooldownSeconds) == 0x000280, "Member 'UGymConfigMovement::WallScrambleUseCooldownSeconds' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WallFlipSpeedBoost) == 0x000284, "Member 'UGymConfigMovement::WallFlipSpeedBoost' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WallFlipJumpBoost) == 0x000288, "Member 'UGymConfigMovement::WallFlipJumpBoost' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WallRunningTimeCurve) == 0x000290, "Member 'UGymConfigMovement::WallRunningTimeCurve' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WallRunningGravityCurve) == 0x000298, "Member 'UGymConfigMovement::WallRunningGravityCurve' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WallRunningHorizontalVelocityCurve) == 0x0002A0, "Member 'UGymConfigMovement::WallRunningHorizontalVelocityCurve' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WallRunningMaxBaseSpeed) == 0x0002A8, "Member 'UGymConfigMovement::WallRunningMaxBaseSpeed' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WallRunningMaxOverSpeed) == 0x0002AC, "Member 'UGymConfigMovement::WallRunningMaxOverSpeed' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WallRunningMinOverSpeed) == 0x0002B0, "Member 'UGymConfigMovement::WallRunningMinOverSpeed' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WallRunningPositiveOverSpeedPenalty) == 0x0002B4, "Member 'UGymConfigMovement::WallRunningPositiveOverSpeedPenalty' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WallRunningStartVelocityMultiplier) == 0x0002B8, "Member 'UGymConfigMovement::WallRunningStartVelocityMultiplier' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, CurveBaseTime) == 0x0002BC, "Member 'UGymConfigMovement::CurveBaseTime' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WallRunningHorizontalVelocityCurveTime) == 0x0002C0, "Member 'UGymConfigMovement::WallRunningHorizontalVelocityCurveTime' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WallRunningGravityMultiplier) == 0x0002C4, "Member 'UGymConfigMovement::WallRunningGravityMultiplier' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WallRunningMinDownDistance) == 0x0002C8, "Member 'UGymConfigMovement::WallRunningMinDownDistance' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WallRunningMaxVelocity) == 0x0002CC, "Member 'UGymConfigMovement::WallRunningMaxVelocity' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WallRunningPlayerOffsetFromWall) == 0x0002D0, "Member 'UGymConfigMovement::WallRunningPlayerOffsetFromWall' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WallRunningPlayerTiltDegrees) == 0x0002D4, "Member 'UGymConfigMovement::WallRunningPlayerTiltDegrees' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WallRunningMinAlongWallSpeed) == 0x0002D8, "Member 'UGymConfigMovement::WallRunningMinAlongWallSpeed' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WallRunningFlatXYWallJumpOffAmount) == 0x0002DC, "Member 'UGymConfigMovement::WallRunningFlatXYWallJumpOffAmount' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WallRunningFlatZWallJumpOffAmount) == 0x0002E0, "Member 'UGymConfigMovement::WallRunningFlatZWallJumpOffAmount' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WallRunningCooldown) == 0x0002E4, "Member 'UGymConfigMovement::WallRunningCooldown' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, WallRunningSameDirectionCooldown) == 0x0002E8, "Member 'UGymConfigMovement::WallRunningSameDirectionCooldown' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, FlyMaxSpeed) == 0x0002EC, "Member 'UGymConfigMovement::FlyMaxSpeed' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, FlyBraking) == 0x0002F0, "Member 'UGymConfigMovement::FlyBraking' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, ZiplineOffset) == 0x0002F4, "Member 'UGymConfigMovement::ZiplineOffset' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, ZiplineSpeedCurve) == 0x0002F8, "Member 'UGymConfigMovement::ZiplineSpeedCurve' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, CurveUp) == 0x000300, "Member 'UGymConfigMovement::CurveUp' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, CurveDown) == 0x000308, "Member 'UGymConfigMovement::CurveDown' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, ZiplineCooldown) == 0x000310, "Member 'UGymConfigMovement::ZiplineCooldown' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, ZiplineJumpZVelocity) == 0x000314, "Member 'UGymConfigMovement::ZiplineJumpZVelocity' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, ZiplineMaxXYSpeed) == 0x000318, "Member 'UGymConfigMovement::ZiplineMaxXYSpeed' has a wrong offset!");
static_assert(offsetof(UGymConfigMovement, ZiplineJumpCooldown) == 0x00031C, "Member 'UGymConfigMovement::ZiplineJumpCooldown' has a wrong offset!");

// Class GYMGAME.GymConfigNPCAnimDataAsset
// 0x0010 (0x0040 - 0x0030)
class UGymConfigNPCAnimDataAsset final : public UGymConfigDataAsset
{
public:
	TArray<class UAnimMontage*>                   DialogueMontages;                                  // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymConfigNPCAnimDataAsset">();
	}
	static class UGymConfigNPCAnimDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymConfigNPCAnimDataAsset>();
	}
};
static_assert(alignof(UGymConfigNPCAnimDataAsset) == 0x000008, "Wrong alignment on UGymConfigNPCAnimDataAsset");
static_assert(sizeof(UGymConfigNPCAnimDataAsset) == 0x000040, "Wrong size on UGymConfigNPCAnimDataAsset");
static_assert(offsetof(UGymConfigNPCAnimDataAsset, DialogueMontages) == 0x000030, "Member 'UGymConfigNPCAnimDataAsset::DialogueMontages' has a wrong offset!");

// Class GYMGAME.GymLoadingScreenContent
// 0x0040 (0x0300 - 0x02C0)
class UGymLoadingScreenContent final : public UUserWidget
{
public:
	class UCommonTextBlock*                       GameMode;                                          // 0x02C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       GameModeDescription;                               // 0x02C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FText                                   GameModeText;                                      // 0x02D0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   GameModeDescriptionText;                           // 0x02E8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymLoadingScreenContent">();
	}
	static class UGymLoadingScreenContent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymLoadingScreenContent>();
	}
};
static_assert(alignof(UGymLoadingScreenContent) == 0x000008, "Wrong alignment on UGymLoadingScreenContent");
static_assert(sizeof(UGymLoadingScreenContent) == 0x000300, "Wrong size on UGymLoadingScreenContent");
static_assert(offsetof(UGymLoadingScreenContent, GameMode) == 0x0002C0, "Member 'UGymLoadingScreenContent::GameMode' has a wrong offset!");
static_assert(offsetof(UGymLoadingScreenContent, GameModeDescription) == 0x0002C8, "Member 'UGymLoadingScreenContent::GameModeDescription' has a wrong offset!");
static_assert(offsetof(UGymLoadingScreenContent, GameModeText) == 0x0002D0, "Member 'UGymLoadingScreenContent::GameModeText' has a wrong offset!");
static_assert(offsetof(UGymLoadingScreenContent, GameModeDescriptionText) == 0x0002E8, "Member 'UGymLoadingScreenContent::GameModeDescriptionText' has a wrong offset!");

// Class GYMGAME.GymConfigXP
// 0x0020 (0x0050 - 0x0030)
class UGymConfigXP final : public UPrimaryDataAsset
{
public:
	TArray<struct FGymXP>                         XPDefaults;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FGymXPMultiplier>               MultiplierDefaults;                                // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymConfigXP">();
	}
	static class UGymConfigXP* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymConfigXP>();
	}
};
static_assert(alignof(UGymConfigXP) == 0x000008, "Wrong alignment on UGymConfigXP");
static_assert(sizeof(UGymConfigXP) == 0x000050, "Wrong size on UGymConfigXP");
static_assert(offsetof(UGymConfigXP, XPDefaults) == 0x000030, "Member 'UGymConfigXP::XPDefaults' has a wrong offset!");
static_assert(offsetof(UGymConfigXP, MultiplierDefaults) == 0x000040, "Member 'UGymConfigXP::MultiplierDefaults' has a wrong offset!");

// Class GYMGAME.GymCrowd
// 0x0010 (0x0438 - 0x0428)
class AGymCrowd final : public AGymStaticLevelAsset
{
public:
	bool                                          bUseEditorTick;                                    // 0x0428(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_429[0x3];                                      // 0x0429(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDensity;                                        // 0x042C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SettingsFraction;                                  // 0x0430(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_434[0x4];                                      // 0x0434(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BlueprintEditorTick(float DeltaTime);
	void OnInitializeCrowd();
	void SetCrowdState(const class FString& State);

	bool IsInPlayMode() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCrowd">();
	}
	static class AGymCrowd* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymCrowd>();
	}
};
static_assert(alignof(AGymCrowd) == 0x000008, "Wrong alignment on AGymCrowd");
static_assert(sizeof(AGymCrowd) == 0x000438, "Wrong size on AGymCrowd");
static_assert(offsetof(AGymCrowd, bUseEditorTick) == 0x000428, "Member 'AGymCrowd::bUseEditorTick' has a wrong offset!");
static_assert(offsetof(AGymCrowd, MaxDensity) == 0x00042C, "Member 'AGymCrowd::MaxDensity' has a wrong offset!");
static_assert(offsetof(AGymCrowd, SettingsFraction) == 0x000430, "Member 'AGymCrowd::SettingsFraction' has a wrong offset!");

// Class GYMGAME.GymLastCharacterSave
// 0x0010 (0x0038 - 0x0028)
class UGymLastCharacterSave final : public USaveGame
{
public:
	class FString                                 LastBody;                                          // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymLastCharacterSave">();
	}
	static class UGymLastCharacterSave* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymLastCharacterSave>();
	}
};
static_assert(alignof(UGymLastCharacterSave) == 0x000008, "Wrong alignment on UGymLastCharacterSave");
static_assert(sizeof(UGymLastCharacterSave) == 0x000038, "Wrong size on UGymLastCharacterSave");
static_assert(offsetof(UGymLastCharacterSave, LastBody) == 0x000028, "Member 'UGymLastCharacterSave::LastBody' has a wrong offset!");

// Class GYMGAME.GymCustomizationAsset
// 0x0190 (0x01C0 - 0x0030)
class UGymCustomizationAsset final : public UPrimaryDataAsset
{
public:
	bool                                          ForceHideFromLocker;                               // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ID;                                                // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InventoryId;                                       // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DlcId;                                             // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0068(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          StarterAsset;                                      // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumCareerCompletions;                              // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           SeasonTags;                                        // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UGymCustomizationAsset*>         StyleVariants;                                     // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGymCustomizationClippingMask          ArmsClippingMask;                                  // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FGymCustomizationClippingMask          TorsoClippingMask;                                 // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FGymCustomizationClippingMask          LegsClippingMask;                                  // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         SortingPriority;                                   // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Thumbnail;                                         // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               Preview;                                           // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGymCustomizationColors                VariantColors;                                     // 0x00F0(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          Mesh;                                              // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     OverrideMaterial;                                  // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCharacterMaterialSlotOverride> SlotMaterialOverrides;                             // 0x0118(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         NiagaraEffect;                                     // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Slot;                                              // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Extra;                                             // 0x0138(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         CoveredParts;                                      // 0x0148(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ExlusiveWithSlots;                                 // 0x0158(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterPartShapekeyModifier> ShapekeyModifiers;                                 // 0x0168(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           HideExtraMaterialsFromSlots;                       // 0x0178(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          FirstPersonChest;                                  // 0x0188(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          FirstPersonHands;                                  // 0x0190(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          FirstPersonLegs;                                   // 0x0198(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     BodyMaterialTorso;                                 // 0x01A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     BodyMaterialHands;                                 // 0x01A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     BodyMaterialLegs;                                  // 0x01B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BodyTypeId;                                        // 0x01B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCustomizationAsset">();
	}
	static class UGymCustomizationAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCustomizationAsset>();
	}
};
static_assert(alignof(UGymCustomizationAsset) == 0x000008, "Wrong alignment on UGymCustomizationAsset");
static_assert(sizeof(UGymCustomizationAsset) == 0x0001C0, "Wrong size on UGymCustomizationAsset");
static_assert(offsetof(UGymCustomizationAsset, ForceHideFromLocker) == 0x000030, "Member 'UGymCustomizationAsset::ForceHideFromLocker' has a wrong offset!");
static_assert(offsetof(UGymCustomizationAsset, ID) == 0x000038, "Member 'UGymCustomizationAsset::ID' has a wrong offset!");
static_assert(offsetof(UGymCustomizationAsset, InventoryId) == 0x000048, "Member 'UGymCustomizationAsset::InventoryId' has a wrong offset!");
static_assert(offsetof(UGymCustomizationAsset, DlcId) == 0x000058, "Member 'UGymCustomizationAsset::DlcId' has a wrong offset!");
static_assert(offsetof(UGymCustomizationAsset, DisplayName) == 0x000068, "Member 'UGymCustomizationAsset::DisplayName' has a wrong offset!");
static_assert(offsetof(UGymCustomizationAsset, StarterAsset) == 0x000080, "Member 'UGymCustomizationAsset::StarterAsset' has a wrong offset!");
static_assert(offsetof(UGymCustomizationAsset, NumCareerCompletions) == 0x000084, "Member 'UGymCustomizationAsset::NumCareerCompletions' has a wrong offset!");
static_assert(offsetof(UGymCustomizationAsset, SeasonTags) == 0x000088, "Member 'UGymCustomizationAsset::SeasonTags' has a wrong offset!");
static_assert(offsetof(UGymCustomizationAsset, StyleVariants) == 0x000098, "Member 'UGymCustomizationAsset::StyleVariants' has a wrong offset!");
static_assert(offsetof(UGymCustomizationAsset, ArmsClippingMask) == 0x0000A8, "Member 'UGymCustomizationAsset::ArmsClippingMask' has a wrong offset!");
static_assert(offsetof(UGymCustomizationAsset, TorsoClippingMask) == 0x0000B8, "Member 'UGymCustomizationAsset::TorsoClippingMask' has a wrong offset!");
static_assert(offsetof(UGymCustomizationAsset, LegsClippingMask) == 0x0000C8, "Member 'UGymCustomizationAsset::LegsClippingMask' has a wrong offset!");
static_assert(offsetof(UGymCustomizationAsset, SortingPriority) == 0x0000D8, "Member 'UGymCustomizationAsset::SortingPriority' has a wrong offset!");
static_assert(offsetof(UGymCustomizationAsset, Thumbnail) == 0x0000E0, "Member 'UGymCustomizationAsset::Thumbnail' has a wrong offset!");
static_assert(offsetof(UGymCustomizationAsset, Preview) == 0x0000E8, "Member 'UGymCustomizationAsset::Preview' has a wrong offset!");
static_assert(offsetof(UGymCustomizationAsset, VariantColors) == 0x0000F0, "Member 'UGymCustomizationAsset::VariantColors' has a wrong offset!");
static_assert(offsetof(UGymCustomizationAsset, Mesh) == 0x000108, "Member 'UGymCustomizationAsset::Mesh' has a wrong offset!");
static_assert(offsetof(UGymCustomizationAsset, OverrideMaterial) == 0x000110, "Member 'UGymCustomizationAsset::OverrideMaterial' has a wrong offset!");
static_assert(offsetof(UGymCustomizationAsset, SlotMaterialOverrides) == 0x000118, "Member 'UGymCustomizationAsset::SlotMaterialOverrides' has a wrong offset!");
static_assert(offsetof(UGymCustomizationAsset, NiagaraEffect) == 0x000128, "Member 'UGymCustomizationAsset::NiagaraEffect' has a wrong offset!");
static_assert(offsetof(UGymCustomizationAsset, Slot) == 0x000130, "Member 'UGymCustomizationAsset::Slot' has a wrong offset!");
static_assert(offsetof(UGymCustomizationAsset, Extra) == 0x000138, "Member 'UGymCustomizationAsset::Extra' has a wrong offset!");
static_assert(offsetof(UGymCustomizationAsset, CoveredParts) == 0x000148, "Member 'UGymCustomizationAsset::CoveredParts' has a wrong offset!");
static_assert(offsetof(UGymCustomizationAsset, ExlusiveWithSlots) == 0x000158, "Member 'UGymCustomizationAsset::ExlusiveWithSlots' has a wrong offset!");
static_assert(offsetof(UGymCustomizationAsset, ShapekeyModifiers) == 0x000168, "Member 'UGymCustomizationAsset::ShapekeyModifiers' has a wrong offset!");
static_assert(offsetof(UGymCustomizationAsset, HideExtraMaterialsFromSlots) == 0x000178, "Member 'UGymCustomizationAsset::HideExtraMaterialsFromSlots' has a wrong offset!");
static_assert(offsetof(UGymCustomizationAsset, FirstPersonChest) == 0x000188, "Member 'UGymCustomizationAsset::FirstPersonChest' has a wrong offset!");
static_assert(offsetof(UGymCustomizationAsset, FirstPersonHands) == 0x000190, "Member 'UGymCustomizationAsset::FirstPersonHands' has a wrong offset!");
static_assert(offsetof(UGymCustomizationAsset, FirstPersonLegs) == 0x000198, "Member 'UGymCustomizationAsset::FirstPersonLegs' has a wrong offset!");
static_assert(offsetof(UGymCustomizationAsset, BodyMaterialTorso) == 0x0001A0, "Member 'UGymCustomizationAsset::BodyMaterialTorso' has a wrong offset!");
static_assert(offsetof(UGymCustomizationAsset, BodyMaterialHands) == 0x0001A8, "Member 'UGymCustomizationAsset::BodyMaterialHands' has a wrong offset!");
static_assert(offsetof(UGymCustomizationAsset, BodyMaterialLegs) == 0x0001B0, "Member 'UGymCustomizationAsset::BodyMaterialLegs' has a wrong offset!");
static_assert(offsetof(UGymCustomizationAsset, BodyTypeId) == 0x0001B8, "Member 'UGymCustomizationAsset::BodyTypeId' has a wrong offset!");

// Class GYMGAME.GymCustomizationColorSet
// 0x0050 (0x0080 - 0x0030)
class UGymCustomizationColorSet final : public UPrimaryDataAsset
{
public:
	class FName                                   ID;                                                // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Category;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FGymCustomizationColor>         Colors;                                            // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          PrimariesAsDetails;                                // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGymCustomizationColor>         DetailColors;                                      // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCustomizationColorSet">();
	}
	static class UGymCustomizationColorSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCustomizationColorSet>();
	}
};
static_assert(alignof(UGymCustomizationColorSet) == 0x000008, "Wrong alignment on UGymCustomizationColorSet");
static_assert(sizeof(UGymCustomizationColorSet) == 0x000080, "Wrong size on UGymCustomizationColorSet");
static_assert(offsetof(UGymCustomizationColorSet, ID) == 0x000030, "Member 'UGymCustomizationColorSet::ID' has a wrong offset!");
static_assert(offsetof(UGymCustomizationColorSet, Category) == 0x000038, "Member 'UGymCustomizationColorSet::Category' has a wrong offset!");
static_assert(offsetof(UGymCustomizationColorSet, DisplayName) == 0x000040, "Member 'UGymCustomizationColorSet::DisplayName' has a wrong offset!");
static_assert(offsetof(UGymCustomizationColorSet, Colors) == 0x000058, "Member 'UGymCustomizationColorSet::Colors' has a wrong offset!");
static_assert(offsetof(UGymCustomizationColorSet, PrimariesAsDetails) == 0x000068, "Member 'UGymCustomizationColorSet::PrimariesAsDetails' has a wrong offset!");
static_assert(offsetof(UGymCustomizationColorSet, DetailColors) == 0x000070, "Member 'UGymCustomizationColorSet::DetailColors' has a wrong offset!");

// Class GYMGAME.GymIdleAnimator
// 0x0008 (0x00B0 - 0x00A8)
class UGymIdleAnimator final : public UGymMetaAnimator
{
public:
	struct FGymIdleAnimatorProps                  Props;                                             // 0x00A8(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FGymIdleAnimatorPropsReplicated        ReplicatedProps;                                   // 0x00AA(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_AB[0x5];                                       // 0x00AB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymIdleAnimator">();
	}
	static class UGymIdleAnimator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymIdleAnimator>();
	}
};
static_assert(alignof(UGymIdleAnimator) == 0x000008, "Wrong alignment on UGymIdleAnimator");
static_assert(sizeof(UGymIdleAnimator) == 0x0000B0, "Wrong size on UGymIdleAnimator");
static_assert(offsetof(UGymIdleAnimator, Props) == 0x0000A8, "Member 'UGymIdleAnimator::Props' has a wrong offset!");
static_assert(offsetof(UGymIdleAnimator, ReplicatedProps) == 0x0000AA, "Member 'UGymIdleAnimator::ReplicatedProps' has a wrong offset!");

// Class GYMGAME.GymCustomizationControl
// 0x0078 (0x0130 - 0x00B8)
class UGymCustomizationControl final : public UGymCharacterMetaControl
{
public:
	struct FGymCharacterCustomization             Customization;                                     // 0x00B8(0x0010)(Net, Transient, RepNotify, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SelectedTaunts;                                    // 0x00C8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SelectedSprays;                                    // 0x00D8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<struct FGymCustomizationMesh>          CurrentMeshes;                                     // 0x00E8(0x0010)(ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F8[0x3];                                       // 0x00F8(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          IsStandalone;                                      // 0x00FB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_FC[0x14];                                      // 0x00FC(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsTauntingEnabled;                                // 0x0110(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomCustomization;                           // 0x0111(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_112[0x6];                                      // 0x0112(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CustomCustomizationSaveFile;                       // 0x0118(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             SpraySound;                                        // 0x0128(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static void DEBUGUnlockAll();
	static bool GetLoadedAssets(TArray<class UGymCustomizationAsset*>* Assets);

	TArray<class USkeletalMeshComponent*> GetCurrentSKMeshes();
	void Multi_SpawnSpray(const struct FVector& Location, const struct FRotator& Rotation, TSubclassOf<class AGymStaticLevelAsset> AssetClass);
	void OnCustomizationChanged();
	void SendAttribute(const struct FGymCustomizationAttribute& Attribute);
	void SendCustomization(const struct FGymCharacterCustomization& NewCustomization);
	void Server_SelectSpray(class FName SprayID);
	void Server_SelectTaunt(class FName TauntID);
	void SetTauntID(class FName TauntID);

	TArray<class FName> GetSelectedSprays() const;
	TArray<class FName> GetSelectedTaunts() const;
	void SaveCustomizationToFile(const class FString& Filename, bool bForce) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCustomizationControl">();
	}
	static class UGymCustomizationControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCustomizationControl>();
	}
};
static_assert(alignof(UGymCustomizationControl) == 0x000008, "Wrong alignment on UGymCustomizationControl");
static_assert(sizeof(UGymCustomizationControl) == 0x000130, "Wrong size on UGymCustomizationControl");
static_assert(offsetof(UGymCustomizationControl, Customization) == 0x0000B8, "Member 'UGymCustomizationControl::Customization' has a wrong offset!");
static_assert(offsetof(UGymCustomizationControl, SelectedTaunts) == 0x0000C8, "Member 'UGymCustomizationControl::SelectedTaunts' has a wrong offset!");
static_assert(offsetof(UGymCustomizationControl, SelectedSprays) == 0x0000D8, "Member 'UGymCustomizationControl::SelectedSprays' has a wrong offset!");
static_assert(offsetof(UGymCustomizationControl, CurrentMeshes) == 0x0000E8, "Member 'UGymCustomizationControl::CurrentMeshes' has a wrong offset!");
static_assert(offsetof(UGymCustomizationControl, IsStandalone) == 0x0000FB, "Member 'UGymCustomizationControl::IsStandalone' has a wrong offset!");
static_assert(offsetof(UGymCustomizationControl, bIsTauntingEnabled) == 0x000110, "Member 'UGymCustomizationControl::bIsTauntingEnabled' has a wrong offset!");
static_assert(offsetof(UGymCustomizationControl, bUseCustomCustomization) == 0x000111, "Member 'UGymCustomizationControl::bUseCustomCustomization' has a wrong offset!");
static_assert(offsetof(UGymCustomizationControl, CustomCustomizationSaveFile) == 0x000118, "Member 'UGymCustomizationControl::CustomCustomizationSaveFile' has a wrong offset!");
static_assert(offsetof(UGymCustomizationControl, SpraySound) == 0x000128, "Member 'UGymCustomizationControl::SpraySound' has a wrong offset!");

// Class GYMGAME.GymCustomizationMannequin
// 0x0010 (0x02A8 - 0x0298)
class AGymCustomizationMannequin final : public AActor
{
public:
	int32                                         PartyPlayerIndex;                                  // 0x0298(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymCustomizationControl*               CustomizationControl;                              // 0x02A0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void BeginPlay();
	void PartyMannequinJoined(int32 Index_0, const struct FGymPlayerPartyInfo& PlayerInfo);
	void PartyMannequinLeft(int32 PartyIndex, const class FString& PlayerId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCustomizationMannequin">();
	}
	static class AGymCustomizationMannequin* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymCustomizationMannequin>();
	}
};
static_assert(alignof(AGymCustomizationMannequin) == 0x000008, "Wrong alignment on AGymCustomizationMannequin");
static_assert(sizeof(AGymCustomizationMannequin) == 0x0002A8, "Wrong size on AGymCustomizationMannequin");
static_assert(offsetof(AGymCustomizationMannequin, PartyPlayerIndex) == 0x000298, "Member 'AGymCustomizationMannequin::PartyPlayerIndex' has a wrong offset!");
static_assert(offsetof(AGymCustomizationMannequin, CustomizationControl) == 0x0002A0, "Member 'AGymCustomizationMannequin::CustomizationControl' has a wrong offset!");

// Class GYMGAME.GymLevelTriggerVolume
// 0x0000 (0x02D0 - 0x02D0)
class AGymLevelTriggerVolume : public ATriggerVolume
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymLevelTriggerVolume">();
	}
	static class AGymLevelTriggerVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymLevelTriggerVolume>();
	}
};
static_assert(alignof(AGymLevelTriggerVolume) == 0x000008, "Wrong alignment on AGymLevelTriggerVolume");
static_assert(sizeof(AGymLevelTriggerVolume) == 0x0002D0, "Wrong size on AGymLevelTriggerVolume");

// Class GYMGAME.GymLevelKillZoneVolume
// 0x0000 (0x02D0 - 0x02D0)
class AGymLevelKillZoneVolume final : public AGymLevelTriggerVolume
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymLevelKillZoneVolume">();
	}
	static class AGymLevelKillZoneVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymLevelKillZoneVolume>();
	}
};
static_assert(alignof(AGymLevelKillZoneVolume) == 0x000008, "Wrong alignment on AGymLevelKillZoneVolume");
static_assert(sizeof(AGymLevelKillZoneVolume) == 0x0002D0, "Wrong size on AGymLevelKillZoneVolume");

// Class GYMGAME.GymCustomizationUtils
// 0x0000 (0x0028 - 0x0028)
class UGymCustomizationUtils final : public UBlueprintFunctionLibrary
{
public:
	static TArray<struct FGymCharacterCustomizationGUIOption> GetVariants(const class FString& AssetId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCustomizationUtils">();
	}
	static class UGymCustomizationUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCustomizationUtils>();
	}
};
static_assert(alignof(UGymCustomizationUtils) == 0x000008, "Wrong alignment on UGymCustomizationUtils");
static_assert(sizeof(UGymCustomizationUtils) == 0x000028, "Wrong size on UGymCustomizationUtils");

// Class GYMGAME.GymDevWordLists
// 0x0000 (0x0028 - 0x0028)
class UGymDevWordLists final : public UObject
{
public:
	static class FString GetAdjective();
	static class FString GetAnimal();
	static class FString GetNoun();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymDevWordLists">();
	}
	static class UGymDevWordLists* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymDevWordLists>();
	}
};
static_assert(alignof(UGymDevWordLists) == 0x000008, "Wrong alignment on UGymDevWordLists");
static_assert(sizeof(UGymDevWordLists) == 0x000028, "Wrong size on UGymDevWordLists");

// Class GYMGAME.GymLootMusicState
// 0x0010 (0x0100 - 0x00F0)
class UGymLootMusicState final : public UGymMetaRuleMusicState
{
public:
	uint8                                         Pad_F0[0x10];                                      // 0x00F0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymLootMusicState">();
	}
	static class UGymLootMusicState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymLootMusicState>();
	}
};
static_assert(alignof(UGymLootMusicState) == 0x000008, "Wrong alignment on UGymLootMusicState");
static_assert(sizeof(UGymLootMusicState) == 0x000100, "Wrong size on UGymLootMusicState");

// Class GYMGAME.GymDialogueControl
// 0x0058 (0x0110 - 0x00B8)
class UGymDialogueControl final : public UGymCharacterMetaControl
{
public:
	bool                                          bUseDialogueCamera;                                // 0x00B8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraBlendTime;                                   // 0x00BC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CameraBlendExp;                                    // 0x00C0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLockOutgoing;                                     // 0x00C4(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EViewTargetBlendFunction                      BlendFunction;                                     // 0x00C5(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableTestQuery;                                  // 0x00C6(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C7[0x1];                                       // 0x00C7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TestQueryInterval;                                 // 0x00C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_CC[0x34];                                      // 0x00CC(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGymTestQueryData>              Tests;                                             // 0x0100(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	void Client_BeginDialogue(class AGymNPC* ConversationParticipant);
	void Client_EndDialogue();
	void EndDialogue();
	void QueryNPCObjectiveMarkerVisibilityComplete(class AAIController* TestController, class AGymNPC* NPC, bool bActorVisibility);
	void Server_EndDialogue();
	void SetNPCSpeech(const class FText& NPCText);
	void SetPlayerAnswers(const TArray<struct FGymAnswer>& Answers);
	void StartRules();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymDialogueControl">();
	}
	static class UGymDialogueControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymDialogueControl>();
	}
};
static_assert(alignof(UGymDialogueControl) == 0x000008, "Wrong alignment on UGymDialogueControl");
static_assert(sizeof(UGymDialogueControl) == 0x000110, "Wrong size on UGymDialogueControl");
static_assert(offsetof(UGymDialogueControl, bUseDialogueCamera) == 0x0000B8, "Member 'UGymDialogueControl::bUseDialogueCamera' has a wrong offset!");
static_assert(offsetof(UGymDialogueControl, CameraBlendTime) == 0x0000BC, "Member 'UGymDialogueControl::CameraBlendTime' has a wrong offset!");
static_assert(offsetof(UGymDialogueControl, CameraBlendExp) == 0x0000C0, "Member 'UGymDialogueControl::CameraBlendExp' has a wrong offset!");
static_assert(offsetof(UGymDialogueControl, bLockOutgoing) == 0x0000C4, "Member 'UGymDialogueControl::bLockOutgoing' has a wrong offset!");
static_assert(offsetof(UGymDialogueControl, BlendFunction) == 0x0000C5, "Member 'UGymDialogueControl::BlendFunction' has a wrong offset!");
static_assert(offsetof(UGymDialogueControl, bEnableTestQuery) == 0x0000C6, "Member 'UGymDialogueControl::bEnableTestQuery' has a wrong offset!");
static_assert(offsetof(UGymDialogueControl, TestQueryInterval) == 0x0000C8, "Member 'UGymDialogueControl::TestQueryInterval' has a wrong offset!");
static_assert(offsetof(UGymDialogueControl, Tests) == 0x000100, "Member 'UGymDialogueControl::Tests' has a wrong offset!");

// Class GYMGAME.GymDialogueTree
// 0x0030 (0x00D0 - 0x00A0)
class UGymDialogueTree final : public UActorComponent
{
public:
	TArray<struct FGymTaskQueryStruct>            AvailableTasks;                                    // 0x00A0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UGymDialogueTreeAsyncAction*            WaitForPlayerAnswer;                               // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanTalkWhenTaskInProgress;                        // 0x00B8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGymCharacter*                          ConversationParticipant;                           // 0x00C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AGymNPC*                                ParentNPC;                                         // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void AddTask(TSubclassOf<class UGymQuest> TaskType, bool bSetActive);
	void BPAllTasksComplete(const TArray<class FName>& TaskIDs, EGymDTBranch* Result);
	void BPAnyTaskFailed(const TArray<class FName>& TaskIDs, EGymDTBranch* Result);
	void BPHasTask(class FName TaskID, EGymDTBranch* Result);
	void BPIsActiveTaskInProgress(EGymDTBranch* Result);
	void BPIsObjectiveCompleted(class FName TaskID, EGymDTBranch* Result);
	void BPIsTaskCompleted(class FName TaskID, EGymDTBranch* Result);
	void BPIsTaskFailed(class FName TaskID, EGymDTBranch* Result);
	void BPIsTaskInProgress(class FName TaskID, EGymDTBranch* Result);
	void BPSwitchOnTaskState(class FName TaskID, EGymDTTaskStatus* Result);
	void EndDialogue();
	class AGymNPC* GetNPC();
	class UGymObjectiveControl* GetObjectiveControl();
	bool IsOtherObjectiveInProgress(const TArray<class FName>& ExcludeTasks);
	void PlayerAnswered(int32 AnswerIndex);
	void RestartTask(class FName TaskID);
	void SetAnswerVisibility(bool bVisible);
	void StartDialogue();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymDialogueTree">();
	}
	static class UGymDialogueTree* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymDialogueTree>();
	}
};
static_assert(alignof(UGymDialogueTree) == 0x000008, "Wrong alignment on UGymDialogueTree");
static_assert(sizeof(UGymDialogueTree) == 0x0000D0, "Wrong size on UGymDialogueTree");
static_assert(offsetof(UGymDialogueTree, AvailableTasks) == 0x0000A0, "Member 'UGymDialogueTree::AvailableTasks' has a wrong offset!");
static_assert(offsetof(UGymDialogueTree, WaitForPlayerAnswer) == 0x0000B0, "Member 'UGymDialogueTree::WaitForPlayerAnswer' has a wrong offset!");
static_assert(offsetof(UGymDialogueTree, bCanTalkWhenTaskInProgress) == 0x0000B8, "Member 'UGymDialogueTree::bCanTalkWhenTaskInProgress' has a wrong offset!");
static_assert(offsetof(UGymDialogueTree, ConversationParticipant) == 0x0000C0, "Member 'UGymDialogueTree::ConversationParticipant' has a wrong offset!");
static_assert(offsetof(UGymDialogueTree, ParentNPC) == 0x0000C8, "Member 'UGymDialogueTree::ParentNPC' has a wrong offset!");

// Class GYMGAME.GymLocationCriterionActor
// 0x0020 (0x0448 - 0x0428)
class AGymLocationCriterionActor final : public AGymStaticLevelAsset
{
public:
	class UBoxComponent*                          BoxCollision;                                      // 0x0428(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ObjectiveCriterionId;                              // 0x0430(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocationID;                                        // 0x0440(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocationFinished;                                 // 0x0444(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_445[0x3];                                      // 0x0445(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static TArray<class AGymLocationCriterionActor*> GetLocationCriteria(class UObject* WorldContext, const class FString& ObjectiveID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymLocationCriterionActor">();
	}
	static class AGymLocationCriterionActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymLocationCriterionActor>();
	}
};
static_assert(alignof(AGymLocationCriterionActor) == 0x000008, "Wrong alignment on AGymLocationCriterionActor");
static_assert(sizeof(AGymLocationCriterionActor) == 0x000448, "Wrong size on AGymLocationCriterionActor");
static_assert(offsetof(AGymLocationCriterionActor, BoxCollision) == 0x000428, "Member 'AGymLocationCriterionActor::BoxCollision' has a wrong offset!");
static_assert(offsetof(AGymLocationCriterionActor, ObjectiveCriterionId) == 0x000430, "Member 'AGymLocationCriterionActor::ObjectiveCriterionId' has a wrong offset!");
static_assert(offsetof(AGymLocationCriterionActor, LocationID) == 0x000440, "Member 'AGymLocationCriterionActor::LocationID' has a wrong offset!");
static_assert(offsetof(AGymLocationCriterionActor, bLocationFinished) == 0x000444, "Member 'AGymLocationCriterionActor::bLocationFinished' has a wrong offset!");

// Class GYMGAME.GymDialogueTreeAsyncAction
// 0x0018 (0x0048 - 0x0030)
class UGymDialogueTreeAsyncAction final : public UBlueprintAsyncActionBase
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             PlayerAnswered;                                    // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)

public:
	static class UGymDialogueTreeAsyncAction* NPCSpeechNode(class UGymDialogueTree* DialogueTree, const class FText& NPCText, const TArray<struct FGymAnswer>& Answers, const class FString& Emotion);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymDialogueTreeAsyncAction">();
	}
	static class UGymDialogueTreeAsyncAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymDialogueTreeAsyncAction>();
	}
};
static_assert(alignof(UGymDialogueTreeAsyncAction) == 0x000008, "Wrong alignment on UGymDialogueTreeAsyncAction");
static_assert(sizeof(UGymDialogueTreeAsyncAction) == 0x000048, "Wrong size on UGymDialogueTreeAsyncAction");
static_assert(offsetof(UGymDialogueTreeAsyncAction, PlayerAnswered) == 0x000038, "Member 'UGymDialogueTreeAsyncAction::PlayerAnswered' has a wrong offset!");

// Class GYMGAME.GymEditorMetaFeature
// 0x0008 (0x00A8 - 0x00A0)
class UGymEditorMetaFeature : public UActorComponent
{
public:
	class UGymEditorControl*                      Control;                                           // 0x00A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymEditorMetaFeature">();
	}
	static class UGymEditorMetaFeature* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymEditorMetaFeature>();
	}
};
static_assert(alignof(UGymEditorMetaFeature) == 0x000008, "Wrong alignment on UGymEditorMetaFeature");
static_assert(sizeof(UGymEditorMetaFeature) == 0x0000A8, "Wrong size on UGymEditorMetaFeature");
static_assert(offsetof(UGymEditorMetaFeature, Control) == 0x0000A0, "Member 'UGymEditorMetaFeature::Control' has a wrong offset!");

// Class GYMGAME.GymLevelAssetData
// 0x0088 (0x00B8 - 0x0030)
class UGymLevelAssetData final : public UPrimaryDataAsset
{
public:
	class FName                                   AssetName;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0038(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn, NativeAccessSpecifierPublic)
	bool                                          GlobalAsset;                                       // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LevelKit;                                          // 0x0054(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LevelKits;                                         // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, NativeAccessSpecifierPublic)
	bool                                          bSupportAllRules;                                  // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UGymRules>>          Rules;                                             // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, UObjectWrapper, NativeAccessSpecifierPublic)
	EGymEditorCategory                            Category;                                          // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Thumbnail;                                         // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMultiPlaceType                               MultiPlace;                                        // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGymLevelAssetVariant>          AssetVariants;                                     // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, NativeAccessSpecifierPublic)
	int32                                         AssetPriority;                                     // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLegacyAsset;                                      // 0x00B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCareerCompleted;                                  // 0x00B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B6[0x2];                                       // 0x00B6(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymLevelAssetData">();
	}
	static class UGymLevelAssetData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymLevelAssetData>();
	}
};
static_assert(alignof(UGymLevelAssetData) == 0x000008, "Wrong alignment on UGymLevelAssetData");
static_assert(sizeof(UGymLevelAssetData) == 0x0000B8, "Wrong size on UGymLevelAssetData");
static_assert(offsetof(UGymLevelAssetData, AssetName) == 0x000030, "Member 'UGymLevelAssetData::AssetName' has a wrong offset!");
static_assert(offsetof(UGymLevelAssetData, DisplayName) == 0x000038, "Member 'UGymLevelAssetData::DisplayName' has a wrong offset!");
static_assert(offsetof(UGymLevelAssetData, GlobalAsset) == 0x000050, "Member 'UGymLevelAssetData::GlobalAsset' has a wrong offset!");
static_assert(offsetof(UGymLevelAssetData, LevelKit) == 0x000054, "Member 'UGymLevelAssetData::LevelKit' has a wrong offset!");
static_assert(offsetof(UGymLevelAssetData, LevelKits) == 0x000060, "Member 'UGymLevelAssetData::LevelKits' has a wrong offset!");
static_assert(offsetof(UGymLevelAssetData, bSupportAllRules) == 0x000070, "Member 'UGymLevelAssetData::bSupportAllRules' has a wrong offset!");
static_assert(offsetof(UGymLevelAssetData, Rules) == 0x000078, "Member 'UGymLevelAssetData::Rules' has a wrong offset!");
static_assert(offsetof(UGymLevelAssetData, Category) == 0x000088, "Member 'UGymLevelAssetData::Category' has a wrong offset!");
static_assert(offsetof(UGymLevelAssetData, Thumbnail) == 0x000090, "Member 'UGymLevelAssetData::Thumbnail' has a wrong offset!");
static_assert(offsetof(UGymLevelAssetData, MultiPlace) == 0x000098, "Member 'UGymLevelAssetData::MultiPlace' has a wrong offset!");
static_assert(offsetof(UGymLevelAssetData, AssetVariants) == 0x0000A0, "Member 'UGymLevelAssetData::AssetVariants' has a wrong offset!");
static_assert(offsetof(UGymLevelAssetData, AssetPriority) == 0x0000B0, "Member 'UGymLevelAssetData::AssetPriority' has a wrong offset!");
static_assert(offsetof(UGymLevelAssetData, bLegacyAsset) == 0x0000B4, "Member 'UGymLevelAssetData::bLegacyAsset' has a wrong offset!");
static_assert(offsetof(UGymLevelAssetData, bCareerCompleted) == 0x0000B5, "Member 'UGymLevelAssetData::bCareerCompleted' has a wrong offset!");

// Class GYMGAME.GymEditorBoundsFeature
// 0x0040 (0x00E8 - 0x00A8)
class UGymEditorBoundsFeature final : public UGymEditorMetaFeature
{
public:
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGymWallPiece*>                  Selection;                                         // 0x00B0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class AActor*>                         VisualizationActors;                               // 0x00C0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D0[0x8];                                       // 0x00D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AGymStaticLevelAsset*                   LastPointedWall;                                   // 0x00D8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E0[0x8];                                       // 0x00E0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Action(const struct FGymWallLocator& Locator, const EGymBoundsPushMode Mode, const int32 Value);
	void IssueAction(const struct FGymWallLocator& Locator, const EGymBoundsPushMode Mode, const int32 Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymEditorBoundsFeature">();
	}
	static class UGymEditorBoundsFeature* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymEditorBoundsFeature>();
	}
};
static_assert(alignof(UGymEditorBoundsFeature) == 0x000008, "Wrong alignment on UGymEditorBoundsFeature");
static_assert(sizeof(UGymEditorBoundsFeature) == 0x0000E8, "Wrong size on UGymEditorBoundsFeature");
static_assert(offsetof(UGymEditorBoundsFeature, Selection) == 0x0000B0, "Member 'UGymEditorBoundsFeature::Selection' has a wrong offset!");
static_assert(offsetof(UGymEditorBoundsFeature, VisualizationActors) == 0x0000C0, "Member 'UGymEditorBoundsFeature::VisualizationActors' has a wrong offset!");
static_assert(offsetof(UGymEditorBoundsFeature, LastPointedWall) == 0x0000D8, "Member 'UGymEditorBoundsFeature::LastPointedWall' has a wrong offset!");

// Class GYMGAME.GymEditorControl
// 0x0450 (0x0508 - 0x00B8)
class UGymEditorControl final : public UGymCharacterMetaControl
{
public:
	class AGymMap*                                Map;                                               // 0x00B8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AGymWallSystem*                         WallSystem;                                        // 0x00C0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymEditorSnappingFeature*              SnappingFeature;                                   // 0x00C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymEditorBoundsFeature*                BoundsEditFeature;                                 // 0x00D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymEditorWallStyleFeature*             WallStyleFeature;                                  // 0x00D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymEditorRotationFeature*              RotationFeature;                                   // 0x00E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UGymEditorMetaFeature*>          Features;                                          // 0x00E8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class AGymSplinePlacer*                       CurrentSplinePlacer;                               // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialParameterCollectionInstance*   ParameterCollectionInstance;                       // 0x0100(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymToolSetting*                        CurrentTool;                                       // 0x0108(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class UMaterialInterface*, class UMaterialInterface*> GlowMats;                                          // 0x0110(0x0050)(Transient, NativeAccessSpecifierPrivate)
	class AGymStaticLevelAsset*                   SelectedAssetSpawn;                                // 0x0160(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymLevelAssetData*                     SelectedAssetSpawnMeta;                            // 0x0168(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bSelectedAssetSpawnPlacementValid;                 // 0x0170(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_171[0x3];                                      // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymAssetVariantId                     SelectedSpawnId;                                   // 0x0174(0x0010)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGymStaticLevelAsset*                   CurrentParentCandidate;                            // 0x0188(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AGymStaticLevelAsset*                   LastEditedAsset;                                   // 0x0190(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                SelectedSpawnLocation;                             // 0x0198(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                               SelectedSpawnRotation;                             // 0x01B0(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FRotator                               LastNonSurfaceRotation;                            // 0x01C8(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	class UMaterialParameterCollectionInstance*   GymUtilMPC;                                        // 0x01E0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AGymSplinePlaceable*                    LastBuiltSplinePart;                               // 0x01E8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AGymSplinePlaceable*                    PotentialLastBuiltSplinePart;                      // 0x01F0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bHasLastBuiltSplinePartStartOfFrame;               // 0x01F8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1F9[0x2F];                                     // 0x01F9(0x002F)(Fixing Size After Last Property [ Dumper-7 ])
	class AGymStaticLevelAsset*                   SelectedLevelAsset;                                // 0x0228(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_230[0x18];                                     // 0x0230(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymEditorMetaFeature*                  HostageFeature;                                    // 0x0248(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_250[0x1D0];                                    // 0x0250(0x01D0)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             SoundAssetPlaceLight;                              // 0x0420(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             SoundAssetPlaceBasic;                              // 0x0428(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             SoundAssetPlaceHeavy;                              // 0x0430(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             SoundAssetRemove;                                  // 0x0438(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_440[0x8];                                      // 0x0440(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PropertiesToCopyFrom;                              // 0x0448(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44C[0x14];                                     // 0x044C(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StackFillStartActorLocation;                       // 0x0460(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                StackFillStartBoundsLocation;                      // 0x0478(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FMultiBuildParams                      StackFillParams;                                   // 0x0490(0x0038)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	bool                                          bStackFillStarted;                                 // 0x04C8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C9[0x3F];                                     // 0x04C9(0x003F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AssetRemoved(const struct FGymAssetVariantId& AssetId, const struct FVector& Location);
	void Build(const struct FGymAssetVariantId& AssetId, int32 RecordId, const struct FVector& Location, const struct FRotator& Rotator, class AGymStaticLevelAsset* Parent, const TArray<struct FGymMapAssetLink>& Links, const struct FUndoParams& UndoParams);
	void CancelSelectAsset_Server(int32 AssetRecordId);
	void ClearSelectedAssetSpawn_Server();
	void Client_ClearGhostAssetRotation();
	void Client_ClearSplinePreview(class AGymSplinePlacer* Spline);
	void Client_ShowPlacementResponse(const struct FRuleAdvanceResponse& Response);
	void CopyPropertiesToAsset(int32 FromRecordId, int32 ToRecordId);
	void CopyPropertiesToAssetResponse(bool bSuccess, int32 RecordId);
	void DebugExport(const class FString& File);
	void DebugExportToFile(const class FString& File, bool bForce);
	void DebugImport(const class FString& File);
	void DebugImportFromFile(const class FString& File);
	void DebugPrepopulateMap(const class FString& GameMode);
	void EndSelectedAssetMove_Client(int32 AssetRecordId, const struct FVector& Location, const struct FRotator& Rotator);
	void EndSelectedAssetMove_Server(int32 AssetRecordId);
	bool GetShowDevAssets();
	class AGymStaticLevelAsset* GetTraceHitAsset();
	void IssueBuild(const struct FGymAssetVariantId& AssetId, const struct FVector& Location, const struct FRotator& Rotator, class AGymStaticLevelAsset* Parent, const TArray<struct FGymMapAssetLink>& Links, const struct FUndoParams& UndoParams, bool bSkipPlacementCheck);
	void IssueBuildWithAssetRecordId(const struct FGymAssetVariantId& AssetId, int32 RecordId, const struct FVector& Location, const struct FRotator& Rotator, int32 ParentAssetRecordId, const struct FBox& Bounds, const struct FVector& Scale, const TArray<struct FGymMapAssetLink>& Links, const struct FUndoParams& UndoParams);
	void IssueMove_Client(class AGymStaticLevelAsset* Asset, const struct FVector& Location, const struct FRotator& Rotator);
	void IssueMove_Server(int32 AssetRecordId, const struct FVector& Location, const struct FRotator& Rotator, const struct FUndoParams& UndoParams);
	void IssueMultiBuild(const struct FGymAssetVariantId& AssetId, const struct FVector& Location, const struct FRotator& Rotator, const struct FMultiBuildParams& Params_0, class AGymStaticLevelAsset* Parent, const struct FUndoParams& UndoParams);
	void IssueRemove(class AGymStaticLevelAsset* Asset, const struct FUndoParams& UndoParams);
	void IssueRemoveWithAssetRecordId(int32 AssetRecordId, const struct FUndoParams& UndoParams);
	void OnAssetSpawnChanged();
	void PrepopulateFinishline(const struct FVector& StartLocation, const struct FVector& EndLocation);
	void RecreateVariant(int32 OldAssetRecordId, const struct FGymAssetVariantId& NewVariantId);
	void RecreateVariantResponse(const bool bSuccess, const int32 NewAssetRecordId);
	void Redo();
	void SelectAsset_Client(const struct FGymAssetVariantId& AssetVariantId);
	void SelectAsset_Server(class AGymStaticLevelAsset* Asset);
	void SelectCopyOfAsset(class AGymStaticLevelAsset* Asset);
	void Server_EditAssetProperty(class AGymStaticLevelAsset* Asset, const struct FGymPropertyValues& PropertyVal);
	void SetFloatModifier(const class FName& ModifierID, const float& Value);
	void SetIntModifier(const class FName& ModifierID, const int32& Value);
	void SetMusic(const class FName& Music);
	void SetPropertiesToCopyFrom(int32 RecordId);
	void SetRule(const class FName& RuleId);
	void SetSelectedAssetSpawn_Server(const struct FGymAssetVariantId& AssetId);
	void SetSelectedAssetSpawnTransformServer(const struct FVector_NetQuantize10& Location, const struct FRotator& Rotator);
	void SetStringModifier(const class FName& ModifierID, const class FString& Value);
	void TryInitPrepopulated(const class FString& GameMode);
	void Undo();

	bool GetEditingAllowed() const;
	void SetPhysicsPreviewDuration(const float Duration, const bool InfinitePhysicsPreview) const;
	void SetTime(const float NewTime) const;
	void SetWeather(const class FName& NewWeather) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymEditorControl">();
	}
	static class UGymEditorControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymEditorControl>();
	}
};
static_assert(alignof(UGymEditorControl) == 0x000008, "Wrong alignment on UGymEditorControl");
static_assert(sizeof(UGymEditorControl) == 0x000508, "Wrong size on UGymEditorControl");
static_assert(offsetof(UGymEditorControl, Map) == 0x0000B8, "Member 'UGymEditorControl::Map' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, WallSystem) == 0x0000C0, "Member 'UGymEditorControl::WallSystem' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, SnappingFeature) == 0x0000C8, "Member 'UGymEditorControl::SnappingFeature' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, BoundsEditFeature) == 0x0000D0, "Member 'UGymEditorControl::BoundsEditFeature' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, WallStyleFeature) == 0x0000D8, "Member 'UGymEditorControl::WallStyleFeature' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, RotationFeature) == 0x0000E0, "Member 'UGymEditorControl::RotationFeature' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, Features) == 0x0000E8, "Member 'UGymEditorControl::Features' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, CurrentSplinePlacer) == 0x0000F8, "Member 'UGymEditorControl::CurrentSplinePlacer' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, ParameterCollectionInstance) == 0x000100, "Member 'UGymEditorControl::ParameterCollectionInstance' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, CurrentTool) == 0x000108, "Member 'UGymEditorControl::CurrentTool' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, GlowMats) == 0x000110, "Member 'UGymEditorControl::GlowMats' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, SelectedAssetSpawn) == 0x000160, "Member 'UGymEditorControl::SelectedAssetSpawn' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, SelectedAssetSpawnMeta) == 0x000168, "Member 'UGymEditorControl::SelectedAssetSpawnMeta' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, bSelectedAssetSpawnPlacementValid) == 0x000170, "Member 'UGymEditorControl::bSelectedAssetSpawnPlacementValid' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, SelectedSpawnId) == 0x000174, "Member 'UGymEditorControl::SelectedSpawnId' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, CurrentParentCandidate) == 0x000188, "Member 'UGymEditorControl::CurrentParentCandidate' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, LastEditedAsset) == 0x000190, "Member 'UGymEditorControl::LastEditedAsset' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, SelectedSpawnLocation) == 0x000198, "Member 'UGymEditorControl::SelectedSpawnLocation' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, SelectedSpawnRotation) == 0x0001B0, "Member 'UGymEditorControl::SelectedSpawnRotation' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, LastNonSurfaceRotation) == 0x0001C8, "Member 'UGymEditorControl::LastNonSurfaceRotation' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, GymUtilMPC) == 0x0001E0, "Member 'UGymEditorControl::GymUtilMPC' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, LastBuiltSplinePart) == 0x0001E8, "Member 'UGymEditorControl::LastBuiltSplinePart' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, PotentialLastBuiltSplinePart) == 0x0001F0, "Member 'UGymEditorControl::PotentialLastBuiltSplinePart' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, bHasLastBuiltSplinePartStartOfFrame) == 0x0001F8, "Member 'UGymEditorControl::bHasLastBuiltSplinePartStartOfFrame' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, SelectedLevelAsset) == 0x000228, "Member 'UGymEditorControl::SelectedLevelAsset' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, HostageFeature) == 0x000248, "Member 'UGymEditorControl::HostageFeature' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, SoundAssetPlaceLight) == 0x000420, "Member 'UGymEditorControl::SoundAssetPlaceLight' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, SoundAssetPlaceBasic) == 0x000428, "Member 'UGymEditorControl::SoundAssetPlaceBasic' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, SoundAssetPlaceHeavy) == 0x000430, "Member 'UGymEditorControl::SoundAssetPlaceHeavy' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, SoundAssetRemove) == 0x000438, "Member 'UGymEditorControl::SoundAssetRemove' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, PropertiesToCopyFrom) == 0x000448, "Member 'UGymEditorControl::PropertiesToCopyFrom' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, StackFillStartActorLocation) == 0x000460, "Member 'UGymEditorControl::StackFillStartActorLocation' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, StackFillStartBoundsLocation) == 0x000478, "Member 'UGymEditorControl::StackFillStartBoundsLocation' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, StackFillParams) == 0x000490, "Member 'UGymEditorControl::StackFillParams' has a wrong offset!");
static_assert(offsetof(UGymEditorControl, bStackFillStarted) == 0x0004C8, "Member 'UGymEditorControl::bStackFillStarted' has a wrong offset!");

// Class GYMGAME.GymEditorRotationFeature
// 0x0038 (0x00E0 - 0x00A8)
class UGymEditorRotationFeature final : public UGymEditorMetaFeature
{
public:
	bool                                          bAllowYawRotation;                                 // 0x00A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowPitchRotation;                               // 0x00A9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowRollRotation;                                // 0x00AA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_AB[0x1];                                       // 0x00AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SnapRotationStep;                                  // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRotateInWorldSpace;                               // 0x00B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AEditorGizmo*                           EditorGizmo;                                       // 0x00B8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C0[0x20];                                      // 0x00C0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymEditorRotationFeature">();
	}
	static class UGymEditorRotationFeature* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymEditorRotationFeature>();
	}
};
static_assert(alignof(UGymEditorRotationFeature) == 0x000008, "Wrong alignment on UGymEditorRotationFeature");
static_assert(sizeof(UGymEditorRotationFeature) == 0x0000E0, "Wrong size on UGymEditorRotationFeature");
static_assert(offsetof(UGymEditorRotationFeature, bAllowYawRotation) == 0x0000A8, "Member 'UGymEditorRotationFeature::bAllowYawRotation' has a wrong offset!");
static_assert(offsetof(UGymEditorRotationFeature, bAllowPitchRotation) == 0x0000A9, "Member 'UGymEditorRotationFeature::bAllowPitchRotation' has a wrong offset!");
static_assert(offsetof(UGymEditorRotationFeature, bAllowRollRotation) == 0x0000AA, "Member 'UGymEditorRotationFeature::bAllowRollRotation' has a wrong offset!");
static_assert(offsetof(UGymEditorRotationFeature, SnapRotationStep) == 0x0000AC, "Member 'UGymEditorRotationFeature::SnapRotationStep' has a wrong offset!");
static_assert(offsetof(UGymEditorRotationFeature, bRotateInWorldSpace) == 0x0000B0, "Member 'UGymEditorRotationFeature::bRotateInWorldSpace' has a wrong offset!");
static_assert(offsetof(UGymEditorRotationFeature, EditorGizmo) == 0x0000B8, "Member 'UGymEditorRotationFeature::EditorGizmo' has a wrong offset!");

// Class GYMGAME.GymEditorSnappingFeature
// 0x0060 (0x0108 - 0x00A8)
class UGymEditorSnappingFeature final : public UGymEditorMetaFeature
{
public:
	uint8                                         Pad_A8[0x20];                                      // 0x00A8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     GhostMaterial;                                     // 0x00C8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ASnappingGrid*                          Grid;                                              // 0x00D0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AGymStaticLevelAsset*                   GhostObject;                                       // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         FloorSnapSize;                                     // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SnapRotationStep;                                  // 0x00E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UInstancedStaticMeshComponent*>  GhostsStackFill;                                   // 0x00E8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x10];                                      // 0x00F8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymEditorSnappingFeature">();
	}
	static class UGymEditorSnappingFeature* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymEditorSnappingFeature>();
	}
};
static_assert(alignof(UGymEditorSnappingFeature) == 0x000008, "Wrong alignment on UGymEditorSnappingFeature");
static_assert(sizeof(UGymEditorSnappingFeature) == 0x000108, "Wrong size on UGymEditorSnappingFeature");
static_assert(offsetof(UGymEditorSnappingFeature, GhostMaterial) == 0x0000C8, "Member 'UGymEditorSnappingFeature::GhostMaterial' has a wrong offset!");
static_assert(offsetof(UGymEditorSnappingFeature, Grid) == 0x0000D0, "Member 'UGymEditorSnappingFeature::Grid' has a wrong offset!");
static_assert(offsetof(UGymEditorSnappingFeature, GhostObject) == 0x0000D8, "Member 'UGymEditorSnappingFeature::GhostObject' has a wrong offset!");
static_assert(offsetof(UGymEditorSnappingFeature, FloorSnapSize) == 0x0000E0, "Member 'UGymEditorSnappingFeature::FloorSnapSize' has a wrong offset!");
static_assert(offsetof(UGymEditorSnappingFeature, SnapRotationStep) == 0x0000E4, "Member 'UGymEditorSnappingFeature::SnapRotationStep' has a wrong offset!");
static_assert(offsetof(UGymEditorSnappingFeature, GhostsStackFill) == 0x0000E8, "Member 'UGymEditorSnappingFeature::GhostsStackFill' has a wrong offset!");

// Class GYMGAME.GymCategoryInfoList
// 0x0010 (0x0040 - 0x0030)
class UGymCategoryInfoList final : public UDataAsset
{
public:
	TArray<struct FGymCategoryInfo>               Categories;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymCategoryInfoList">();
	}
	static class UGymCategoryInfoList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymCategoryInfoList>();
	}
};
static_assert(alignof(UGymCategoryInfoList) == 0x000008, "Wrong alignment on UGymCategoryInfoList");
static_assert(sizeof(UGymCategoryInfoList) == 0x000040, "Wrong size on UGymCategoryInfoList");
static_assert(offsetof(UGymCategoryInfoList, Categories) == 0x000030, "Member 'UGymCategoryInfoList::Categories' has a wrong offset!");

// Class GYMGAME.GymEditorWallStyleFeature
// 0x0030 (0x00D8 - 0x00A8)
class UGymEditorWallStyleFeature final : public UGymEditorMetaFeature
{
public:
	TArray<class UGymWallPiece*>                  Selection;                                         // 0x00A8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class AActor*>                         VisualizationActors;                               // 0x00B8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AGymStaticLevelAsset*                   LastPointedWall;                                   // 0x00D0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void Action(const class AGymStaticLevelAsset* WallPiece, const int32 Value);
	void IssueAction(const class AGymStaticLevelAsset* WallPiece, const int32 Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymEditorWallStyleFeature">();
	}
	static class UGymEditorWallStyleFeature* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymEditorWallStyleFeature>();
	}
};
static_assert(alignof(UGymEditorWallStyleFeature) == 0x000008, "Wrong alignment on UGymEditorWallStyleFeature");
static_assert(sizeof(UGymEditorWallStyleFeature) == 0x0000D8, "Wrong size on UGymEditorWallStyleFeature");
static_assert(offsetof(UGymEditorWallStyleFeature, Selection) == 0x0000A8, "Member 'UGymEditorWallStyleFeature::Selection' has a wrong offset!");
static_assert(offsetof(UGymEditorWallStyleFeature, VisualizationActors) == 0x0000B8, "Member 'UGymEditorWallStyleFeature::VisualizationActors' has a wrong offset!");
static_assert(offsetof(UGymEditorWallStyleFeature, LastPointedWall) == 0x0000D0, "Member 'UGymEditorWallStyleFeature::LastPointedWall' has a wrong offset!");

// Class GYMGAME.GymEndMatchAction
// 0x0000 (0x00B8 - 0x00B8)
class UGymEndMatchAction final : public UGymMetaAction
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymEndMatchAction">();
	}
	static class UGymEndMatchAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymEndMatchAction>();
	}
};
static_assert(alignof(UGymEndMatchAction) == 0x000008, "Wrong alignment on UGymEndMatchAction");
static_assert(sizeof(UGymEndMatchAction) == 0x0000B8, "Wrong size on UGymEndMatchAction");

// Class GYMGAME.GymFadeWidget
// 0x0000 (0x0338 - 0x0338)
class UGymFadeWidget : public UGymGuiGlobalMetaWidget
{
public:
	void Fade(float FadeInTime, float FadedTime, float FadeOutTime, int32 Layer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymFadeWidget">();
	}
	static class UGymFadeWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymFadeWidget>();
	}
};
static_assert(alignof(UGymFadeWidget) == 0x000008, "Wrong alignment on UGymFadeWidget");
static_assert(sizeof(UGymFadeWidget) == 0x000338, "Wrong size on UGymFadeWidget");

// Class GYMGAME.GymFinishlineBanner
// 0x0048 (0x0470 - 0x0428)
class AGymFinishlineBanner final : public AGymStaticLevelAsset
{
public:
	uint8                                         Pad_428[0x28];                                     // 0x0428(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UBoxComponent*                          CheckpointCollision;                               // 0x0450(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      VisibleEffect;                                     // 0x0458(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      ActivatedEffect;                                   // 0x0460(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtentToNiagaraWidth;                              // 0x0468(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x046C(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnRep_Width();
	void SetWidth(float NewWidth);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymFinishlineBanner">();
	}
	static class AGymFinishlineBanner* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymFinishlineBanner>();
	}
};
static_assert(alignof(AGymFinishlineBanner) == 0x000008, "Wrong alignment on AGymFinishlineBanner");
static_assert(sizeof(AGymFinishlineBanner) == 0x000470, "Wrong size on AGymFinishlineBanner");
static_assert(offsetof(AGymFinishlineBanner, CheckpointCollision) == 0x000450, "Member 'AGymFinishlineBanner::CheckpointCollision' has a wrong offset!");
static_assert(offsetof(AGymFinishlineBanner, VisibleEffect) == 0x000458, "Member 'AGymFinishlineBanner::VisibleEffect' has a wrong offset!");
static_assert(offsetof(AGymFinishlineBanner, ActivatedEffect) == 0x000460, "Member 'AGymFinishlineBanner::ActivatedEffect' has a wrong offset!");
static_assert(offsetof(AGymFinishlineBanner, ExtentToNiagaraWidth) == 0x000468, "Member 'AGymFinishlineBanner::ExtentToNiagaraWidth' has a wrong offset!");
static_assert(offsetof(AGymFinishlineBanner, Width) == 0x00046C, "Member 'AGymFinishlineBanner::Width' has a wrong offset!");

// Class GYMGAME.GymFootIKAnimator
// 0x0048 (0x00F0 - 0x00A8)
class UGymFootIKAnimator final : public UGymMetaAnimator
{
public:
	uint8                                         Pad_A8[0x48];                                      // 0x00A8(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymFootIKAnimator">();
	}
	static class UGymFootIKAnimator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymFootIKAnimator>();
	}
};
static_assert(alignof(UGymFootIKAnimator) == 0x000008, "Wrong alignment on UGymFootIKAnimator");
static_assert(sizeof(UGymFootIKAnimator) == 0x0000F0, "Wrong size on UGymFootIKAnimator");

// Class GYMGAME.GymFOVCameraModifier
// 0x0010 (0x00C0 - 0x00B0)
class UGymFOVCameraModifier final : public UGymMetaCameraModifier
{
public:
	struct FGymFOVCameraModifierSettings          Settings;                                          // 0x00B0(0x0008)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	struct FGymFOVBlurCameraModifierProps         Props;                                             // 0x00B8(0x0008)(Transient, NoDestructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymFOVCameraModifier">();
	}
	static class UGymFOVCameraModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymFOVCameraModifier>();
	}
};
static_assert(alignof(UGymFOVCameraModifier) == 0x000008, "Wrong alignment on UGymFOVCameraModifier");
static_assert(sizeof(UGymFOVCameraModifier) == 0x0000C0, "Wrong size on UGymFOVCameraModifier");
static_assert(offsetof(UGymFOVCameraModifier, Settings) == 0x0000B0, "Member 'UGymFOVCameraModifier::Settings' has a wrong offset!");
static_assert(offsetof(UGymFOVCameraModifier, Props) == 0x0000B8, "Member 'UGymFOVCameraModifier::Props' has a wrong offset!");

// Class GYMGAME.GymFragileFloor
// 0x0048 (0x0470 - 0x0428)
class AGymFragileFloor final : public AGymMetaGameplayPiece
{
public:
	uint8                                         Pad_428[0x8];                                      // 0x0428(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EFragileFloorStatus                           Status;                                            // 0x0430(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_431[0x3];                                      // 0x0431(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BreakDelay;                                        // 0x0434(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RecoverDelay;                                      // 0x0438(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CrackingVisualUpdateFrequency;                     // 0x043C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxHP;                                             // 0x0440(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         InitialDamage;                                     // 0x0444(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsSimulating;                                     // 0x0448(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_449[0x27];                                     // 0x0449(0x0027)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Multi_Break();
	void Multi_EndPhysics();
	void Multi_Recover();
	void Multi_StartBreaking(double ServerTimestamp);
	void Multi_StartPhysics();
	void OnBreakBP();
	void OnInitialCrackingStartedBP();
	void OnRecoverBP();
	void OnResetBP();
	void UpdateVisualsBP(float TotalCrackingRatio);

	float GetBrokenRatio(int32 OptionalHP) const;
	float GetCrackingRatio() const;
	float GetRecoverRatio() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymFragileFloor">();
	}
	static class AGymFragileFloor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymFragileFloor>();
	}
};
static_assert(alignof(AGymFragileFloor) == 0x000008, "Wrong alignment on AGymFragileFloor");
static_assert(sizeof(AGymFragileFloor) == 0x000470, "Wrong size on AGymFragileFloor");
static_assert(offsetof(AGymFragileFloor, Status) == 0x000430, "Member 'AGymFragileFloor::Status' has a wrong offset!");
static_assert(offsetof(AGymFragileFloor, BreakDelay) == 0x000434, "Member 'AGymFragileFloor::BreakDelay' has a wrong offset!");
static_assert(offsetof(AGymFragileFloor, RecoverDelay) == 0x000438, "Member 'AGymFragileFloor::RecoverDelay' has a wrong offset!");
static_assert(offsetof(AGymFragileFloor, CrackingVisualUpdateFrequency) == 0x00043C, "Member 'AGymFragileFloor::CrackingVisualUpdateFrequency' has a wrong offset!");
static_assert(offsetof(AGymFragileFloor, MaxHP) == 0x000440, "Member 'AGymFragileFloor::MaxHP' has a wrong offset!");
static_assert(offsetof(AGymFragileFloor, InitialDamage) == 0x000444, "Member 'AGymFragileFloor::InitialDamage' has a wrong offset!");
static_assert(offsetof(AGymFragileFloor, bIsSimulating) == 0x000448, "Member 'AGymFragileFloor::bIsSimulating' has a wrong offset!");

// Class GYMGAME.GymGameInstance
// 0x03A8 (0x0568 - 0x01C0)
class UGymGameInstance : public UGameInstance
{
public:
	uint8                                         Pad_1C0[0x20];                                     // 0x01C0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymServerHeartbeat*                    Heartbeat;                                         // 0x01E0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EServerInstanceReadyStatus                    ServerReadyToStart;                                // 0x01E8(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E9[0x7];                                      // 0x01E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RequestedServerId;                                 // 0x01F0(0x0010)(BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          OneShot;                                           // 0x0200(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_201[0x7];                                      // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCustomLevelFileInfo                   CurrentLevelFileInfo;                              // 0x0208(0x0060)(BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class UGymAchievements*                       GymAchievements;                                   // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymConfigCreateMenu*                   CreateConfig;                                      // 0x0270(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymConfigMovement*                     MovementConfig;                                    // 0x0278(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymConfigForceFeedback*                ForceFeedbackConfig;                               // 0x0280(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymCloudConfig*                        CloudConfig;                                       // 0x0288(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymConfigGUIDataAsset*                 GUIConfig;                                         // 0x0290(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymConfigEditorDataAsset*              EditorConfig;                                      // 0x0298(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymConfigXP*                           XPConfig;                                          // 0x02A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             AIPersonaDatatable;                                // 0x02A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymNetInterface*                       NetInterface;                                      // 0x02B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymMapUtils*                           MapUtils;                                          // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymServerAnalytics*                    ServerAnalytics;                                   // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymPlaylist*                           Playlist;                                          // 0x02C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D0[0x10];                                     // 0x02D0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymConfigAssetPointers                ConfigAssetPointers;                               // 0x02E0(0x0078)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGymConfigObjectInstances              Configs;                                           // 0x0358(0x0018)(NoDestructor, NativeAccessSpecifierPublic)
	bool                                          CreatingNewMap;                                    // 0x0370(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_371[0x57];                                     // 0x0371(0x0057)(Fixing Size After Last Property [ Dumper-7 ])
	class AGymMap*                                CurrentGymMap;                                     // 0x03C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGymLoadingScreenOptions               LoadingScreenOptions;                              // 0x03D0(0x0058)(BlueprintVisible, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                LoadingScreen;                                     // 0x0428(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                MovieLoadingScreen;                                // 0x0430(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymSettingsManager*                    SettingsManager;                                   // 0x0438(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SimulateInput;                                     // 0x0440(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_441[0x3];                                      // 0x0441(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LoadingScreenRemoveTimer;                          // 0x0444(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_448[0x108];                                    // 0x0448(0x0108)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymLoadingScreen*                      LoadingScreenWidget;                               // 0x0550(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_558[0x10];                                     // 0x0558(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BeginLoadingScreen(const class FString& MapName);
	void CreateLoadingScreen(const float HideIn, const class FString& Message);
	void DestroyLoadingScreen();
	void Disconnect();
	void EndLoadingScreen(class UWorld* InLoadedWorld);
	void FindAndJoinHub(const class FString& URL);
	void GetNewLoadingScreenTip();
	void InitialLoadingComplete_Server_BP();
	void JoinHub();
	void LoadMainMenu();
	bool OnGSDKHealthCheck();
	void OnGSDKReadyForPlayers();
	void OnGSDKServerActive();
	void OnGSDKShutdown();
	void RestartCareerPlaylist();
	void SessionCookieReceived();
	void SetLevelFileName(const class FString& Name_0);
	void SetLoadingScreenData(const struct FGymLoadingScreenOptions& Options);
	void SetLobbyMapDetails(bool bSuccess, const struct FGymMapDetailsResult& Result);
	void SetPlaylist(const struct FGymPlaylistDetailsResult& Details);
	void StartCareerPlaylist(const TArray<struct FGymCareerPlaylistMapInfo>& PlaylistMaps, const class FString& PlaylistName, const TArray<struct FGymAISelectionData>& NPCs);

	struct FCustomLevelFileInfo GetCurrentMapInfo() const;
	class FString GetRequestedServerId() const;
	bool IsServerReadyToStart() const;
	void ShutdownServer() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGameInstance">();
	}
	static class UGymGameInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGameInstance>();
	}
};
static_assert(alignof(UGymGameInstance) == 0x000008, "Wrong alignment on UGymGameInstance");
static_assert(sizeof(UGymGameInstance) == 0x000568, "Wrong size on UGymGameInstance");
static_assert(offsetof(UGymGameInstance, Heartbeat) == 0x0001E0, "Member 'UGymGameInstance::Heartbeat' has a wrong offset!");
static_assert(offsetof(UGymGameInstance, ServerReadyToStart) == 0x0001E8, "Member 'UGymGameInstance::ServerReadyToStart' has a wrong offset!");
static_assert(offsetof(UGymGameInstance, RequestedServerId) == 0x0001F0, "Member 'UGymGameInstance::RequestedServerId' has a wrong offset!");
static_assert(offsetof(UGymGameInstance, OneShot) == 0x000200, "Member 'UGymGameInstance::OneShot' has a wrong offset!");
static_assert(offsetof(UGymGameInstance, CurrentLevelFileInfo) == 0x000208, "Member 'UGymGameInstance::CurrentLevelFileInfo' has a wrong offset!");
static_assert(offsetof(UGymGameInstance, GymAchievements) == 0x000268, "Member 'UGymGameInstance::GymAchievements' has a wrong offset!");
static_assert(offsetof(UGymGameInstance, CreateConfig) == 0x000270, "Member 'UGymGameInstance::CreateConfig' has a wrong offset!");
static_assert(offsetof(UGymGameInstance, MovementConfig) == 0x000278, "Member 'UGymGameInstance::MovementConfig' has a wrong offset!");
static_assert(offsetof(UGymGameInstance, ForceFeedbackConfig) == 0x000280, "Member 'UGymGameInstance::ForceFeedbackConfig' has a wrong offset!");
static_assert(offsetof(UGymGameInstance, CloudConfig) == 0x000288, "Member 'UGymGameInstance::CloudConfig' has a wrong offset!");
static_assert(offsetof(UGymGameInstance, GUIConfig) == 0x000290, "Member 'UGymGameInstance::GUIConfig' has a wrong offset!");
static_assert(offsetof(UGymGameInstance, EditorConfig) == 0x000298, "Member 'UGymGameInstance::EditorConfig' has a wrong offset!");
static_assert(offsetof(UGymGameInstance, XPConfig) == 0x0002A0, "Member 'UGymGameInstance::XPConfig' has a wrong offset!");
static_assert(offsetof(UGymGameInstance, AIPersonaDatatable) == 0x0002A8, "Member 'UGymGameInstance::AIPersonaDatatable' has a wrong offset!");
static_assert(offsetof(UGymGameInstance, NetInterface) == 0x0002B0, "Member 'UGymGameInstance::NetInterface' has a wrong offset!");
static_assert(offsetof(UGymGameInstance, MapUtils) == 0x0002B8, "Member 'UGymGameInstance::MapUtils' has a wrong offset!");
static_assert(offsetof(UGymGameInstance, ServerAnalytics) == 0x0002C0, "Member 'UGymGameInstance::ServerAnalytics' has a wrong offset!");
static_assert(offsetof(UGymGameInstance, Playlist) == 0x0002C8, "Member 'UGymGameInstance::Playlist' has a wrong offset!");
static_assert(offsetof(UGymGameInstance, ConfigAssetPointers) == 0x0002E0, "Member 'UGymGameInstance::ConfigAssetPointers' has a wrong offset!");
static_assert(offsetof(UGymGameInstance, Configs) == 0x000358, "Member 'UGymGameInstance::Configs' has a wrong offset!");
static_assert(offsetof(UGymGameInstance, CreatingNewMap) == 0x000370, "Member 'UGymGameInstance::CreatingNewMap' has a wrong offset!");
static_assert(offsetof(UGymGameInstance, CurrentGymMap) == 0x0003C8, "Member 'UGymGameInstance::CurrentGymMap' has a wrong offset!");
static_assert(offsetof(UGymGameInstance, LoadingScreenOptions) == 0x0003D0, "Member 'UGymGameInstance::LoadingScreenOptions' has a wrong offset!");
static_assert(offsetof(UGymGameInstance, LoadingScreen) == 0x000428, "Member 'UGymGameInstance::LoadingScreen' has a wrong offset!");
static_assert(offsetof(UGymGameInstance, MovieLoadingScreen) == 0x000430, "Member 'UGymGameInstance::MovieLoadingScreen' has a wrong offset!");
static_assert(offsetof(UGymGameInstance, SettingsManager) == 0x000438, "Member 'UGymGameInstance::SettingsManager' has a wrong offset!");
static_assert(offsetof(UGymGameInstance, SimulateInput) == 0x000440, "Member 'UGymGameInstance::SimulateInput' has a wrong offset!");
static_assert(offsetof(UGymGameInstance, LoadingScreenRemoveTimer) == 0x000444, "Member 'UGymGameInstance::LoadingScreenRemoveTimer' has a wrong offset!");
static_assert(offsetof(UGymGameInstance, LoadingScreenWidget) == 0x000550, "Member 'UGymGameInstance::LoadingScreenWidget' has a wrong offset!");

// Class GYMGAME.GymGameModeComponent
// 0x0018 (0x00B8 - 0x00A0)
class UGymGameModeComponent final : public UActorComponent
{
public:
	bool                                          bSupportAllRules;                                  // 0x00A0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UGymRules>>          SupportedRules;                                    // 0x00A8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGameModeComponent">();
	}
	static class UGymGameModeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGameModeComponent>();
	}
};
static_assert(alignof(UGymGameModeComponent) == 0x000008, "Wrong alignment on UGymGameModeComponent");
static_assert(sizeof(UGymGameModeComponent) == 0x0000B8, "Wrong size on UGymGameModeComponent");
static_assert(offsetof(UGymGameModeComponent, bSupportAllRules) == 0x0000A0, "Member 'UGymGameModeComponent::bSupportAllRules' has a wrong offset!");
static_assert(offsetof(UGymGameModeComponent, SupportedRules) == 0x0000A8, "Member 'UGymGameModeComponent::SupportedRules' has a wrong offset!");

// Class GYMGAME.GymGameState
// 0x03E8 (0x06D8 - 0x02F0)
class AGymGameState final : public AGameStateBase
{
public:
	bool                                          EditingAllowedInSession;                           // 0x02F0(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2F1[0x7];                                      // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymCheckpointManager*                  CheckpointManager;                                 // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGymServerInfo                         ServerInfo;                                        // 0x0300(0x0158)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGymMapDetailsResult                   MapDetails;                                        // 0x0458(0x00C8)(BlueprintVisible, BlueprintReadOnly, Net, NativeAccessSpecifierPublic)
	class FString                                 CurrentRuleId;                                     // 0x0520(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrentRuleDataId;                                 // 0x0530(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGymMapDetailsResult                   CurrentLobbyDetails;                               // 0x0540(0x00C8)(BlueprintVisible, BlueprintReadOnly, Net, NativeAccessSpecifierPublic)
	TSubclassOf<class UGymRules>                  CurrentRuleClass;                                  // 0x0608(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlaylist;                                       // 0x0610(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGymPlaylistType                              PlayListType;                                      // 0x0611(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_612[0x6];                                      // 0x0612(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCustomLevelFileInfo                   LevelFileInfo;                                     // 0x0618(0x0060)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	bool                                          bLobbyScoreStage;                                  // 0x0678(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_679[0x7];                                      // 0x0679(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGymScoreboardEntry>            ScoreboardData;                                    // 0x0680(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	bool                                          bRespawnAllowed;                                   // 0x0690(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoteState                                    VoteState;                                         // 0x0691(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_692[0x6];                                      // 0x0692(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnVoteStateChangedDelegate;                        // 0x0698(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             LevelInfoUpdated;                                  // 0x06A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             ServerInfoChanged;                                 // 0x06B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UGymRuleReplicatedData*                 RuleReplicatedData;                                // 0x06C8(0x0008)(Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6D0[0x8];                                      // 0x06D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BeginPlay();
	void Multi_SetScoreboard(const TArray<struct FGymScoreboardEntry>& Scoreboard);
	void OnLevelInfoUpdated__DelegateSignature(const struct FCustomLevelFileInfo& LevelInfo);
	void OnMapDetailsReceived(bool Success, const struct FGymMapDetailsResult& Details);
	void OnRep_LevelInfo();
	void OnRep_ScoreBoardData();
	void OnRep_ServerInfo();
	void OnRep_VoteStateChanged();
	void OnServerInfoChanged__DelegateSignature(const struct FGymServerInfo& ServerInfo_0);
	void OnVoteStateChanged__DelegateSignature(EVoteState VoteState_0);

	class UGymRuleReplicatedData* GetBasicRuleData() const;
	bool IsPlayMode() const;
	bool IsSandboxMode() const;
	bool MapEditingAllowed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGameState">();
	}
	static class AGymGameState* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymGameState>();
	}
};
static_assert(alignof(AGymGameState) == 0x000008, "Wrong alignment on AGymGameState");
static_assert(sizeof(AGymGameState) == 0x0006D8, "Wrong size on AGymGameState");
static_assert(offsetof(AGymGameState, EditingAllowedInSession) == 0x0002F0, "Member 'AGymGameState::EditingAllowedInSession' has a wrong offset!");
static_assert(offsetof(AGymGameState, CheckpointManager) == 0x0002F8, "Member 'AGymGameState::CheckpointManager' has a wrong offset!");
static_assert(offsetof(AGymGameState, ServerInfo) == 0x000300, "Member 'AGymGameState::ServerInfo' has a wrong offset!");
static_assert(offsetof(AGymGameState, MapDetails) == 0x000458, "Member 'AGymGameState::MapDetails' has a wrong offset!");
static_assert(offsetof(AGymGameState, CurrentRuleId) == 0x000520, "Member 'AGymGameState::CurrentRuleId' has a wrong offset!");
static_assert(offsetof(AGymGameState, CurrentRuleDataId) == 0x000530, "Member 'AGymGameState::CurrentRuleDataId' has a wrong offset!");
static_assert(offsetof(AGymGameState, CurrentLobbyDetails) == 0x000540, "Member 'AGymGameState::CurrentLobbyDetails' has a wrong offset!");
static_assert(offsetof(AGymGameState, CurrentRuleClass) == 0x000608, "Member 'AGymGameState::CurrentRuleClass' has a wrong offset!");
static_assert(offsetof(AGymGameState, bIsPlaylist) == 0x000610, "Member 'AGymGameState::bIsPlaylist' has a wrong offset!");
static_assert(offsetof(AGymGameState, PlayListType) == 0x000611, "Member 'AGymGameState::PlayListType' has a wrong offset!");
static_assert(offsetof(AGymGameState, LevelFileInfo) == 0x000618, "Member 'AGymGameState::LevelFileInfo' has a wrong offset!");
static_assert(offsetof(AGymGameState, bLobbyScoreStage) == 0x000678, "Member 'AGymGameState::bLobbyScoreStage' has a wrong offset!");
static_assert(offsetof(AGymGameState, ScoreboardData) == 0x000680, "Member 'AGymGameState::ScoreboardData' has a wrong offset!");
static_assert(offsetof(AGymGameState, bRespawnAllowed) == 0x000690, "Member 'AGymGameState::bRespawnAllowed' has a wrong offset!");
static_assert(offsetof(AGymGameState, VoteState) == 0x000691, "Member 'AGymGameState::VoteState' has a wrong offset!");
static_assert(offsetof(AGymGameState, OnVoteStateChangedDelegate) == 0x000698, "Member 'AGymGameState::OnVoteStateChangedDelegate' has a wrong offset!");
static_assert(offsetof(AGymGameState, LevelInfoUpdated) == 0x0006A8, "Member 'AGymGameState::LevelInfoUpdated' has a wrong offset!");
static_assert(offsetof(AGymGameState, ServerInfoChanged) == 0x0006B8, "Member 'AGymGameState::ServerInfoChanged' has a wrong offset!");
static_assert(offsetof(AGymGameState, RuleReplicatedData) == 0x0006C8, "Member 'AGymGameState::RuleReplicatedData' has a wrong offset!");

// Class GYMGAME.GymGlobalMetaAudioPlayer
// 0x0020 (0x00C0 - 0x00A0)
class UGymGlobalMetaAudioPlayer : public UActorComponent
{
public:
	TArray<class AGymAudioPlayerActor*>           AudioSourceActors;                                 // 0x00A0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B0[0x10];                                      // 0x00B0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGlobalMetaAudioPlayer">();
	}
	static class UGymGlobalMetaAudioPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGlobalMetaAudioPlayer>();
	}
};
static_assert(alignof(UGymGlobalMetaAudioPlayer) == 0x000008, "Wrong alignment on UGymGlobalMetaAudioPlayer");
static_assert(sizeof(UGymGlobalMetaAudioPlayer) == 0x0000C0, "Wrong size on UGymGlobalMetaAudioPlayer");
static_assert(offsetof(UGymGlobalMetaAudioPlayer, AudioSourceActors) == 0x0000A0, "Member 'UGymGlobalMetaAudioPlayer::AudioSourceActors' has a wrong offset!");

// Class GYMGAME.GymGlobalAmbienceAudioPlayer
// 0x0000 (0x00C0 - 0x00C0)
class UGymGlobalAmbienceAudioPlayer final : public UGymGlobalMetaAudioPlayer
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGlobalAmbienceAudioPlayer">();
	}
	static class UGymGlobalAmbienceAudioPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGlobalAmbienceAudioPlayer>();
	}
};
static_assert(alignof(UGymGlobalAmbienceAudioPlayer) == 0x000008, "Wrong alignment on UGymGlobalAmbienceAudioPlayer");
static_assert(sizeof(UGymGlobalAmbienceAudioPlayer) == 0x0000C0, "Wrong size on UGymGlobalAmbienceAudioPlayer");

// Class GYMGAME.GymGlobalAudioControl
// 0x0040 (0x00E8 - 0x00A8)
class UGymGlobalAudioControl final : public UGymGlobalMetaControl
{
public:
	uint8                                         Pad_A8[0x10];                                      // 0x00A8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymGlobalMusicAudioPlayer*             MusicAudioPlayer;                                  // 0x00B8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymGlobalStingerAudioPlayer*           StingerAudioPlayer;                                // 0x00C0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymGlobalAmbienceAudioPlayer*          AmbienceAudioPlayer;                               // 0x00C8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D0[0x8];                                       // 0x00D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        Muters;                                            // 0x00D8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	void Client_PlayAmbientAudio(class FName TriggerName, bool bRulesRunningOnly);
	void Client_PlayStingerAudio(class FName TriggerName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGlobalAudioControl">();
	}
	static class UGymGlobalAudioControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGlobalAudioControl>();
	}
};
static_assert(alignof(UGymGlobalAudioControl) == 0x000008, "Wrong alignment on UGymGlobalAudioControl");
static_assert(sizeof(UGymGlobalAudioControl) == 0x0000E8, "Wrong size on UGymGlobalAudioControl");
static_assert(offsetof(UGymGlobalAudioControl, MusicAudioPlayer) == 0x0000B8, "Member 'UGymGlobalAudioControl::MusicAudioPlayer' has a wrong offset!");
static_assert(offsetof(UGymGlobalAudioControl, StingerAudioPlayer) == 0x0000C0, "Member 'UGymGlobalAudioControl::StingerAudioPlayer' has a wrong offset!");
static_assert(offsetof(UGymGlobalAudioControl, AmbienceAudioPlayer) == 0x0000C8, "Member 'UGymGlobalAudioControl::AmbienceAudioPlayer' has a wrong offset!");
static_assert(offsetof(UGymGlobalAudioControl, Muters) == 0x0000D8, "Member 'UGymGlobalAudioControl::Muters' has a wrong offset!");

// Class GYMGAME.GymGlobalInputControl
// 0x0030 (0x00D8 - 0x00A8)
class UGymGlobalInputControl final : public UGymGlobalMetaControl
{
public:
	class UInputComponent*                        InputComponent;                                    // 0x00A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B0[0x28];                                      // 0x00B0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGlobalInputControl">();
	}
	static class UGymGlobalInputControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGlobalInputControl>();
	}
};
static_assert(alignof(UGymGlobalInputControl) == 0x000008, "Wrong alignment on UGymGlobalInputControl");
static_assert(sizeof(UGymGlobalInputControl) == 0x0000D8, "Wrong size on UGymGlobalInputControl");
static_assert(offsetof(UGymGlobalInputControl, InputComponent) == 0x0000A8, "Member 'UGymGlobalInputControl::InputComponent' has a wrong offset!");

// Class GYMGAME.GymGlobalMusicAudioPlayer
// 0x0008 (0x00C8 - 0x00C0)
class UGymGlobalMusicAudioPlayer final : public UGymGlobalMetaAudioPlayer
{
public:
	uint8                                         Pad_C0[0x8];                                       // 0x00C0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGlobalMusicAudioPlayer">();
	}
	static class UGymGlobalMusicAudioPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGlobalMusicAudioPlayer>();
	}
};
static_assert(alignof(UGymGlobalMusicAudioPlayer) == 0x000008, "Wrong alignment on UGymGlobalMusicAudioPlayer");
static_assert(sizeof(UGymGlobalMusicAudioPlayer) == 0x0000C8, "Wrong size on UGymGlobalMusicAudioPlayer");

// Class GYMGAME.GymGlobalStingerAudioPlayer
// 0x0000 (0x00C0 - 0x00C0)
class UGymGlobalStingerAudioPlayer final : public UGymGlobalMetaAudioPlayer
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGlobalStingerAudioPlayer">();
	}
	static class UGymGlobalStingerAudioPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGlobalStingerAudioPlayer>();
	}
};
static_assert(alignof(UGymGlobalStingerAudioPlayer) == 0x000008, "Wrong alignment on UGymGlobalStingerAudioPlayer");
static_assert(sizeof(UGymGlobalStingerAudioPlayer) == 0x0000C0, "Wrong size on UGymGlobalStingerAudioPlayer");

// Class GYMGAME.GymGlobalWidgetControl
// 0x01C0 (0x0268 - 0x00A8)
class UGymGlobalWidgetControl final : public UGymGlobalMetaControl
{
public:
	class UGymGuiMainMenuWidget*                  MainMenuWidget;                                    // 0x00A8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymGuiSettingsWidget*                  SettingsWidget;                                    // 0x00B0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymGuiREScoreboardWidget*              RaceEndScoreboardWidget;                           // 0x00B8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymGuiGlobalMetaWidget*                ErrorPopupWidget;                                  // 0x00C0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymGuiGlobalMetaWidget*                InfoPopupWidget;                                   // 0x00C8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymGuiPlaylistWidget*                  PlaylistScoreboardWidget;                          // 0x00D0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymGuiGlobalChatWidget*                ChatWidget;                                        // 0x00D8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymGuiPreflowWidget*                   PreflowWidget;                                     // 0x00E0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymGuiTickerMetaWidget*                TickerWidget;                                      // 0x00E8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymFadeWidget*                         FadeWidget;                                        // 0x00F0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymLoadingScreen*                      LoadingScreen;                                     // 0x00F8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymGuiRadialWidget*                    ActionWheel;                                       // 0x0100(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymGuiPauseMenu*                       PauseMenuWidget;                                   // 0x0108(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UGymGuiGlobalMetaWidget*>        AllRegisteredGymGUIWidgets;                        // 0x0110(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UGymGuiTextInputUtils*                  GamepadTextInputUtils;                             // 0x0120(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_128[0x30];                                     // 0x0128(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymGuiConfirmWidget*                   ConfirmWidget;                                     // 0x0158(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonGenericInputActionDataTable*     CommonInputTable;                                  // 0x0160(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCommonInputBaseControllerData> CommonInputTypeA;                                  // 0x0168(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCommonInputBaseControllerData> CommonInputTypeB;                                  // 0x0170(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class UGymGuiMetaWidget>> ActiveUIModeWidgetsForMovement;                    // 0x0178(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class UGymGuiMetaWidget>> ActiveUIModeWidgetsForLook;                        // 0x0188(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class UGymGuiMetaWidget>> AllActiveUIModeWidgets;                            // 0x0198(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UObject*>                        MenuObjectsOpen;                                   // 0x01A8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B8[0x10];                                     // 0x01B8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGymGuiGlobalMetaWidget*>        RootWidgets;                                       // 0x01C8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UGymGlobalMetaControl*>          ClientsControllers;                                // 0x01D8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E8[0x80];                                     // 0x01E8(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetDistanceToPreviousFocusedWidget(const struct FGeometry& Geometry);
	bool IsMenuOpen();
	bool IsSettingsOpen();
	void OnGameOverlayActivityChanged(bool bIsOverlayActive);
	void OnGamepadConnectionChanged(EInputDeviceConnectionState NewConnectionState, const struct FPlatformUserId& PlatformUserId, const struct FInputDeviceId& InputDeviceId);
	void OnWindowFocusChanged(bool bIsFocused);
	void SetUIMode(const bool UIMode, class UGymGuiMetaWidget* WidgetResponsible, const bool bPreventMoving, const bool bPreventLooking);
	void UpdateCommonInputTable();

	class UGymGuiRadialWidget* GetActionWheel() const;
	class UGymGuiGlobalChatWidget* GetChatWidget() const;
	class UGymFadeWidget* GetFadeWidget() const;
	bool GetHideAllWidgets() const;
	class UGymGuiGlobalMetaWidget* GetInfoPopup() const;
	class UGymGuiMainMenuWidget* GetMainMenu() const;
	class UGymGuiPauseMenu* GetPauseMenu() const;
	bool IsPopupOrConfirmOpen() const;
	void OpenPlaylistScoreboard(const struct FGymPlayerScoreboard& Scoreboard, EGymPlaylistType PlayListType, bool IsFinal, bool bIsValidLevel) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGlobalWidgetControl">();
	}
	static class UGymGlobalWidgetControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGlobalWidgetControl>();
	}
};
static_assert(alignof(UGymGlobalWidgetControl) == 0x000008, "Wrong alignment on UGymGlobalWidgetControl");
static_assert(sizeof(UGymGlobalWidgetControl) == 0x000268, "Wrong size on UGymGlobalWidgetControl");
static_assert(offsetof(UGymGlobalWidgetControl, MainMenuWidget) == 0x0000A8, "Member 'UGymGlobalWidgetControl::MainMenuWidget' has a wrong offset!");
static_assert(offsetof(UGymGlobalWidgetControl, SettingsWidget) == 0x0000B0, "Member 'UGymGlobalWidgetControl::SettingsWidget' has a wrong offset!");
static_assert(offsetof(UGymGlobalWidgetControl, RaceEndScoreboardWidget) == 0x0000B8, "Member 'UGymGlobalWidgetControl::RaceEndScoreboardWidget' has a wrong offset!");
static_assert(offsetof(UGymGlobalWidgetControl, ErrorPopupWidget) == 0x0000C0, "Member 'UGymGlobalWidgetControl::ErrorPopupWidget' has a wrong offset!");
static_assert(offsetof(UGymGlobalWidgetControl, InfoPopupWidget) == 0x0000C8, "Member 'UGymGlobalWidgetControl::InfoPopupWidget' has a wrong offset!");
static_assert(offsetof(UGymGlobalWidgetControl, PlaylistScoreboardWidget) == 0x0000D0, "Member 'UGymGlobalWidgetControl::PlaylistScoreboardWidget' has a wrong offset!");
static_assert(offsetof(UGymGlobalWidgetControl, ChatWidget) == 0x0000D8, "Member 'UGymGlobalWidgetControl::ChatWidget' has a wrong offset!");
static_assert(offsetof(UGymGlobalWidgetControl, PreflowWidget) == 0x0000E0, "Member 'UGymGlobalWidgetControl::PreflowWidget' has a wrong offset!");
static_assert(offsetof(UGymGlobalWidgetControl, TickerWidget) == 0x0000E8, "Member 'UGymGlobalWidgetControl::TickerWidget' has a wrong offset!");
static_assert(offsetof(UGymGlobalWidgetControl, FadeWidget) == 0x0000F0, "Member 'UGymGlobalWidgetControl::FadeWidget' has a wrong offset!");
static_assert(offsetof(UGymGlobalWidgetControl, LoadingScreen) == 0x0000F8, "Member 'UGymGlobalWidgetControl::LoadingScreen' has a wrong offset!");
static_assert(offsetof(UGymGlobalWidgetControl, ActionWheel) == 0x000100, "Member 'UGymGlobalWidgetControl::ActionWheel' has a wrong offset!");
static_assert(offsetof(UGymGlobalWidgetControl, PauseMenuWidget) == 0x000108, "Member 'UGymGlobalWidgetControl::PauseMenuWidget' has a wrong offset!");
static_assert(offsetof(UGymGlobalWidgetControl, AllRegisteredGymGUIWidgets) == 0x000110, "Member 'UGymGlobalWidgetControl::AllRegisteredGymGUIWidgets' has a wrong offset!");
static_assert(offsetof(UGymGlobalWidgetControl, GamepadTextInputUtils) == 0x000120, "Member 'UGymGlobalWidgetControl::GamepadTextInputUtils' has a wrong offset!");
static_assert(offsetof(UGymGlobalWidgetControl, ConfirmWidget) == 0x000158, "Member 'UGymGlobalWidgetControl::ConfirmWidget' has a wrong offset!");
static_assert(offsetof(UGymGlobalWidgetControl, CommonInputTable) == 0x000160, "Member 'UGymGlobalWidgetControl::CommonInputTable' has a wrong offset!");
static_assert(offsetof(UGymGlobalWidgetControl, CommonInputTypeA) == 0x000168, "Member 'UGymGlobalWidgetControl::CommonInputTypeA' has a wrong offset!");
static_assert(offsetof(UGymGlobalWidgetControl, CommonInputTypeB) == 0x000170, "Member 'UGymGlobalWidgetControl::CommonInputTypeB' has a wrong offset!");
static_assert(offsetof(UGymGlobalWidgetControl, ActiveUIModeWidgetsForMovement) == 0x000178, "Member 'UGymGlobalWidgetControl::ActiveUIModeWidgetsForMovement' has a wrong offset!");
static_assert(offsetof(UGymGlobalWidgetControl, ActiveUIModeWidgetsForLook) == 0x000188, "Member 'UGymGlobalWidgetControl::ActiveUIModeWidgetsForLook' has a wrong offset!");
static_assert(offsetof(UGymGlobalWidgetControl, AllActiveUIModeWidgets) == 0x000198, "Member 'UGymGlobalWidgetControl::AllActiveUIModeWidgets' has a wrong offset!");
static_assert(offsetof(UGymGlobalWidgetControl, MenuObjectsOpen) == 0x0001A8, "Member 'UGymGlobalWidgetControl::MenuObjectsOpen' has a wrong offset!");
static_assert(offsetof(UGymGlobalWidgetControl, RootWidgets) == 0x0001C8, "Member 'UGymGlobalWidgetControl::RootWidgets' has a wrong offset!");
static_assert(offsetof(UGymGlobalWidgetControl, ClientsControllers) == 0x0001D8, "Member 'UGymGlobalWidgetControl::ClientsControllers' has a wrong offset!");

// Class GYMGAME.GymGoalPiece
// 0x0040 (0x0470 - 0x0430)
class AGymGoalPiece final : public AGymRuleSpecificGameplayPiece
{
public:
	uint8                                         Pad_430[0x20];                                     // 0x0430(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class USphereComponent*                       SphereCollision;                                   // 0x0450(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      VisibleEffect;                                     // 0x0458(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      ActivatedEffect;                                   // 0x0460(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_468[0x8];                                      // 0x0468(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGoalPiece">();
	}
	static class AGymGoalPiece* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymGoalPiece>();
	}
};
static_assert(alignof(AGymGoalPiece) == 0x000008, "Wrong alignment on AGymGoalPiece");
static_assert(sizeof(AGymGoalPiece) == 0x000470, "Wrong size on AGymGoalPiece");
static_assert(offsetof(AGymGoalPiece, SphereCollision) == 0x000450, "Member 'AGymGoalPiece::SphereCollision' has a wrong offset!");
static_assert(offsetof(AGymGoalPiece, VisibleEffect) == 0x000458, "Member 'AGymGoalPiece::VisibleEffect' has a wrong offset!");
static_assert(offsetof(AGymGoalPiece, ActivatedEffect) == 0x000460, "Member 'AGymGoalPiece::ActivatedEffect' has a wrong offset!");

// Class GYMGAME.GymGrindingAnimator
// 0x0028 (0x00D0 - 0x00A8)
class UGymGrindingAnimator final : public UGymMetaAnimator
{
public:
	struct FGymGrindingAnimatorProps              Props;                                             // 0x00A8(0x0028)(Net, NoDestructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGrindingAnimator">();
	}
	static class UGymGrindingAnimator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGrindingAnimator>();
	}
};
static_assert(alignof(UGymGrindingAnimator) == 0x000008, "Wrong alignment on UGymGrindingAnimator");
static_assert(sizeof(UGymGrindingAnimator) == 0x0000D0, "Wrong size on UGymGrindingAnimator");
static_assert(offsetof(UGymGrindingAnimator, Props) == 0x0000A8, "Member 'UGymGrindingAnimator::Props' has a wrong offset!");

// Class GYMGAME.GymGui3DTournamentLobbyWidget
// 0x00C8 (0x0388 - 0x02C0)
class UGymGui3DTournamentLobbyWidget final : public UUserWidget
{
public:
	uint8                                         Pad_2C0[0x18];                                     // 0x02C0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlay*                               AllOverlay;                                        // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNamedSlot*                             GameModeView;                                      // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScaleBox*                              ModeTournamentTitle;                               // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScaleBox*                              ModeRoyaleTitle;                                   // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonTextBlock*                       ModeTournamentDescription;                         // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonTextBlock*                       ModeRoyaleDescription;                             // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonTextBlock*                       PlayercountText;                                   // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetSwitcher*                        WidgetSwitcher;                                    // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVerticalBox*                           Default;                                           // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVerticalBox*                           WaitAdmin;                                         // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVerticalBox*                           WaitPlayer;                                        // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVerticalBox*                           CountdownAdmin;                                    // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVerticalBox*                           CountdownPlayer;                                   // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVerticalBox*                           Ready;                                             // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonTextBlock*                       StartingCounterAdmin;                              // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonTextBlock*                       StartingCounterPlayer;                             // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonTextBlock*                       CountdownPromptAsSpectator;                        // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonTextBlock*                       CountdownPromptAsPlayer;                           // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHorizontalBox*                         JoinRace;                                          // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHorizontalBox*                         JoinAsSpectator;                                   // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHorizontalBox*                         ForceStartAdmin;                                   // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHorizontalBox*                         CancelCheckAdmin;                                  // 0x0380(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGui3DTournamentLobbyWidget">();
	}
	static class UGymGui3DTournamentLobbyWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGui3DTournamentLobbyWidget>();
	}
};
static_assert(alignof(UGymGui3DTournamentLobbyWidget) == 0x000008, "Wrong alignment on UGymGui3DTournamentLobbyWidget");
static_assert(sizeof(UGymGui3DTournamentLobbyWidget) == 0x000388, "Wrong size on UGymGui3DTournamentLobbyWidget");
static_assert(offsetof(UGymGui3DTournamentLobbyWidget, AllOverlay) == 0x0002D8, "Member 'UGymGui3DTournamentLobbyWidget::AllOverlay' has a wrong offset!");
static_assert(offsetof(UGymGui3DTournamentLobbyWidget, GameModeView) == 0x0002E0, "Member 'UGymGui3DTournamentLobbyWidget::GameModeView' has a wrong offset!");
static_assert(offsetof(UGymGui3DTournamentLobbyWidget, ModeTournamentTitle) == 0x0002E8, "Member 'UGymGui3DTournamentLobbyWidget::ModeTournamentTitle' has a wrong offset!");
static_assert(offsetof(UGymGui3DTournamentLobbyWidget, ModeRoyaleTitle) == 0x0002F0, "Member 'UGymGui3DTournamentLobbyWidget::ModeRoyaleTitle' has a wrong offset!");
static_assert(offsetof(UGymGui3DTournamentLobbyWidget, ModeTournamentDescription) == 0x0002F8, "Member 'UGymGui3DTournamentLobbyWidget::ModeTournamentDescription' has a wrong offset!");
static_assert(offsetof(UGymGui3DTournamentLobbyWidget, ModeRoyaleDescription) == 0x000300, "Member 'UGymGui3DTournamentLobbyWidget::ModeRoyaleDescription' has a wrong offset!");
static_assert(offsetof(UGymGui3DTournamentLobbyWidget, PlayercountText) == 0x000308, "Member 'UGymGui3DTournamentLobbyWidget::PlayercountText' has a wrong offset!");
static_assert(offsetof(UGymGui3DTournamentLobbyWidget, WidgetSwitcher) == 0x000310, "Member 'UGymGui3DTournamentLobbyWidget::WidgetSwitcher' has a wrong offset!");
static_assert(offsetof(UGymGui3DTournamentLobbyWidget, Default) == 0x000318, "Member 'UGymGui3DTournamentLobbyWidget::Default' has a wrong offset!");
static_assert(offsetof(UGymGui3DTournamentLobbyWidget, WaitAdmin) == 0x000320, "Member 'UGymGui3DTournamentLobbyWidget::WaitAdmin' has a wrong offset!");
static_assert(offsetof(UGymGui3DTournamentLobbyWidget, WaitPlayer) == 0x000328, "Member 'UGymGui3DTournamentLobbyWidget::WaitPlayer' has a wrong offset!");
static_assert(offsetof(UGymGui3DTournamentLobbyWidget, CountdownAdmin) == 0x000330, "Member 'UGymGui3DTournamentLobbyWidget::CountdownAdmin' has a wrong offset!");
static_assert(offsetof(UGymGui3DTournamentLobbyWidget, CountdownPlayer) == 0x000338, "Member 'UGymGui3DTournamentLobbyWidget::CountdownPlayer' has a wrong offset!");
static_assert(offsetof(UGymGui3DTournamentLobbyWidget, Ready) == 0x000340, "Member 'UGymGui3DTournamentLobbyWidget::Ready' has a wrong offset!");
static_assert(offsetof(UGymGui3DTournamentLobbyWidget, StartingCounterAdmin) == 0x000348, "Member 'UGymGui3DTournamentLobbyWidget::StartingCounterAdmin' has a wrong offset!");
static_assert(offsetof(UGymGui3DTournamentLobbyWidget, StartingCounterPlayer) == 0x000350, "Member 'UGymGui3DTournamentLobbyWidget::StartingCounterPlayer' has a wrong offset!");
static_assert(offsetof(UGymGui3DTournamentLobbyWidget, CountdownPromptAsSpectator) == 0x000358, "Member 'UGymGui3DTournamentLobbyWidget::CountdownPromptAsSpectator' has a wrong offset!");
static_assert(offsetof(UGymGui3DTournamentLobbyWidget, CountdownPromptAsPlayer) == 0x000360, "Member 'UGymGui3DTournamentLobbyWidget::CountdownPromptAsPlayer' has a wrong offset!");
static_assert(offsetof(UGymGui3DTournamentLobbyWidget, JoinRace) == 0x000368, "Member 'UGymGui3DTournamentLobbyWidget::JoinRace' has a wrong offset!");
static_assert(offsetof(UGymGui3DTournamentLobbyWidget, JoinAsSpectator) == 0x000370, "Member 'UGymGui3DTournamentLobbyWidget::JoinAsSpectator' has a wrong offset!");
static_assert(offsetof(UGymGui3DTournamentLobbyWidget, ForceStartAdmin) == 0x000378, "Member 'UGymGui3DTournamentLobbyWidget::ForceStartAdmin' has a wrong offset!");
static_assert(offsetof(UGymGui3DTournamentLobbyWidget, CancelCheckAdmin) == 0x000380, "Member 'UGymGui3DTournamentLobbyWidget::CancelCheckAdmin' has a wrong offset!");

// Class GYMGAME.GymGuiBackgroundWidget
// 0x0028 (0x0360 - 0x0338)
class UGymGuiBackgroundWidget : public UGymGuiGlobalMetaWidget
{
public:
	class UOverlay*                               BlurAllBG_Cyan;                                    // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOverlay*                               BlurAllBG_Gray;                                    // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOverlay*                               BlurAllBG_Red;                                     // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_350[0x10];                                     // 0x0350(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiBackgroundWidget">();
	}
	static class UGymGuiBackgroundWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiBackgroundWidget>();
	}
};
static_assert(alignof(UGymGuiBackgroundWidget) == 0x000008, "Wrong alignment on UGymGuiBackgroundWidget");
static_assert(sizeof(UGymGuiBackgroundWidget) == 0x000360, "Wrong size on UGymGuiBackgroundWidget");
static_assert(offsetof(UGymGuiBackgroundWidget, BlurAllBG_Cyan) == 0x000338, "Member 'UGymGuiBackgroundWidget::BlurAllBG_Cyan' has a wrong offset!");
static_assert(offsetof(UGymGuiBackgroundWidget, BlurAllBG_Gray) == 0x000340, "Member 'UGymGuiBackgroundWidget::BlurAllBG_Gray' has a wrong offset!");
static_assert(offsetof(UGymGuiBackgroundWidget, BlurAllBG_Red) == 0x000348, "Member 'UGymGuiBackgroundWidget::BlurAllBG_Red' has a wrong offset!");

// Class GYMGAME.GymGuiCanvasLobbyListWidget
// 0x0038 (0x0370 - 0x0338)
class UGymGuiCanvasLobbyListWidget : public UGymGuiGlobalMetaWidget
{
public:
	uint8                                         Pad_338[0x18];                                     // 0x0338(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymGuiGenericButton*                   BackButton;                                        // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOverlay*                               LobbyOverlay;                                      // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGymNetSessionInfo>             LobbyListSessionInfos;                             // 0x0360(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)

public:
	void OnBackButtonPressed();
	void OnCreateBackButtonPressed();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiCanvasLobbyListWidget">();
	}
	static class UGymGuiCanvasLobbyListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiCanvasLobbyListWidget>();
	}
};
static_assert(alignof(UGymGuiCanvasLobbyListWidget) == 0x000008, "Wrong alignment on UGymGuiCanvasLobbyListWidget");
static_assert(sizeof(UGymGuiCanvasLobbyListWidget) == 0x000370, "Wrong size on UGymGuiCanvasLobbyListWidget");
static_assert(offsetof(UGymGuiCanvasLobbyListWidget, BackButton) == 0x000350, "Member 'UGymGuiCanvasLobbyListWidget::BackButton' has a wrong offset!");
static_assert(offsetof(UGymGuiCanvasLobbyListWidget, LobbyOverlay) == 0x000358, "Member 'UGymGuiCanvasLobbyListWidget::LobbyOverlay' has a wrong offset!");
static_assert(offsetof(UGymGuiCanvasLobbyListWidget, LobbyListSessionInfos) == 0x000360, "Member 'UGymGuiCanvasLobbyListWidget::LobbyListSessionInfos' has a wrong offset!");

// Class GYMGAME.GymGuiChooseLevelSlot
// 0x00B0 (0x03E8 - 0x0338)
class UGymGuiChooseLevelSlot : public UGymGuiGlobalMetaWidget
{
public:
	struct FGymGuiChooseLevelSlotInfo             SlotLevelInfo;                                     // 0x0338(0x0090)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C8[0x8];                                      // 0x03C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UButton*                                LevelSlotButton;                                   // 0x03D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             LevelInfoText;                                     // 0x03D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 LevelInfoImage;                                    // 0x03E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnLevelSlotButtonPressed();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiChooseLevelSlot">();
	}
	static class UGymGuiChooseLevelSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiChooseLevelSlot>();
	}
};
static_assert(alignof(UGymGuiChooseLevelSlot) == 0x000008, "Wrong alignment on UGymGuiChooseLevelSlot");
static_assert(sizeof(UGymGuiChooseLevelSlot) == 0x0003E8, "Wrong size on UGymGuiChooseLevelSlot");
static_assert(offsetof(UGymGuiChooseLevelSlot, SlotLevelInfo) == 0x000338, "Member 'UGymGuiChooseLevelSlot::SlotLevelInfo' has a wrong offset!");
static_assert(offsetof(UGymGuiChooseLevelSlot, LevelSlotButton) == 0x0003D0, "Member 'UGymGuiChooseLevelSlot::LevelSlotButton' has a wrong offset!");
static_assert(offsetof(UGymGuiChooseLevelSlot, LevelInfoText) == 0x0003D8, "Member 'UGymGuiChooseLevelSlot::LevelInfoText' has a wrong offset!");
static_assert(offsetof(UGymGuiChooseLevelSlot, LevelInfoImage) == 0x0003E0, "Member 'UGymGuiChooseLevelSlot::LevelInfoImage' has a wrong offset!");

// Class GYMGAME.GymGuiCompCProgressBar
// 0x0000 (0x02C0 - 0x02C0)
class UGymGuiCompCProgressBar final : public UUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiCompCProgressBar">();
	}
	static class UGymGuiCompCProgressBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiCompCProgressBar>();
	}
};
static_assert(alignof(UGymGuiCompCProgressBar) == 0x000008, "Wrong alignment on UGymGuiCompCProgressBar");
static_assert(sizeof(UGymGuiCompCProgressBar) == 0x0002C0, "Wrong size on UGymGuiCompCProgressBar");

// Class GYMGAME.GymGuiControl
// 0x00B8 (0x0170 - 0x00B8)
class UGymGuiControl final : public UGymCharacterMetaControl
{
public:
	class UGymGuiEditorWidget*                    EditorWidget;                                      // 0x00B8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymGuiPhotoModeWidget*                 PhotoModeWidget;                                   // 0x00C0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymGuiGrindMeter*                      GrindMeterWidget;                                  // 0x00C8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymGuiCursorWidget*                    CursorWidget;                                      // 0x00D0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymGuiPlayerIdentityNameplate*         PlayerIdentityNamePlate;                           // 0x00D8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymGuiMasterRuleStateWidget*           MasterRuleStateWidget;                             // 0x00E0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymGuiPreflowCountdownWidget*          GuiPreflowCountdownWidget;                         // 0x00E8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymGuiDialogueWidget*                  DialogueWidget;                                    // 0x00F0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymQuestWidget*                        QuestWidget;                                       // 0x00F8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UGymGuiCharacterMetaWidget*>     AllRegisteredGymGUIWidgets;                        // 0x0100(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_110[0x30];                                     // 0x0110(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGymGuiCharacterMetaWidget*>     RootWidgets;                                       // 0x0140(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UGymGui3DMetaWidget*>            RootWidgets3D;                                     // 0x0150(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UGymCharacterMetaControl*>       ClientsControllers;                                // 0x0160(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void Client_AddQuestMessage(const class FText& Text, bool bGoodMessage);
	void SetUIMode(const bool UIMode, class UGymGuiMetaWidget* WidgetResponsible, const bool bPreventMovement, const bool bPreventLooking);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiControl">();
	}
	static class UGymGuiControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiControl>();
	}
};
static_assert(alignof(UGymGuiControl) == 0x000008, "Wrong alignment on UGymGuiControl");
static_assert(sizeof(UGymGuiControl) == 0x000170, "Wrong size on UGymGuiControl");
static_assert(offsetof(UGymGuiControl, EditorWidget) == 0x0000B8, "Member 'UGymGuiControl::EditorWidget' has a wrong offset!");
static_assert(offsetof(UGymGuiControl, PhotoModeWidget) == 0x0000C0, "Member 'UGymGuiControl::PhotoModeWidget' has a wrong offset!");
static_assert(offsetof(UGymGuiControl, GrindMeterWidget) == 0x0000C8, "Member 'UGymGuiControl::GrindMeterWidget' has a wrong offset!");
static_assert(offsetof(UGymGuiControl, CursorWidget) == 0x0000D0, "Member 'UGymGuiControl::CursorWidget' has a wrong offset!");
static_assert(offsetof(UGymGuiControl, PlayerIdentityNamePlate) == 0x0000D8, "Member 'UGymGuiControl::PlayerIdentityNamePlate' has a wrong offset!");
static_assert(offsetof(UGymGuiControl, MasterRuleStateWidget) == 0x0000E0, "Member 'UGymGuiControl::MasterRuleStateWidget' has a wrong offset!");
static_assert(offsetof(UGymGuiControl, GuiPreflowCountdownWidget) == 0x0000E8, "Member 'UGymGuiControl::GuiPreflowCountdownWidget' has a wrong offset!");
static_assert(offsetof(UGymGuiControl, DialogueWidget) == 0x0000F0, "Member 'UGymGuiControl::DialogueWidget' has a wrong offset!");
static_assert(offsetof(UGymGuiControl, QuestWidget) == 0x0000F8, "Member 'UGymGuiControl::QuestWidget' has a wrong offset!");
static_assert(offsetof(UGymGuiControl, AllRegisteredGymGUIWidgets) == 0x000100, "Member 'UGymGuiControl::AllRegisteredGymGUIWidgets' has a wrong offset!");
static_assert(offsetof(UGymGuiControl, RootWidgets) == 0x000140, "Member 'UGymGuiControl::RootWidgets' has a wrong offset!");
static_assert(offsetof(UGymGuiControl, RootWidgets3D) == 0x000150, "Member 'UGymGuiControl::RootWidgets3D' has a wrong offset!");
static_assert(offsetof(UGymGuiControl, ClientsControllers) == 0x000160, "Member 'UGymGuiControl::ClientsControllers' has a wrong offset!");

// Class GYMGAME.GymGuiCreateLevelWidget
// 0x0008 (0x0340 - 0x0338)
class UGymGuiCreateLevelWidget final : public UGymGuiGlobalMetaWidget
{
public:
	class UEditableText*                          LevelName;                                         // 0x0338(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	bool CreateLevel(const class FString& Name_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiCreateLevelWidget">();
	}
	static class UGymGuiCreateLevelWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiCreateLevelWidget>();
	}
};
static_assert(alignof(UGymGuiCreateLevelWidget) == 0x000008, "Wrong alignment on UGymGuiCreateLevelWidget");
static_assert(sizeof(UGymGuiCreateLevelWidget) == 0x000340, "Wrong size on UGymGuiCreateLevelWidget");
static_assert(offsetof(UGymGuiCreateLevelWidget, LevelName) == 0x000338, "Member 'UGymGuiCreateLevelWidget::LevelName' has a wrong offset!");

// Class GYMGAME.GymGuiCursorWidget
// 0x0018 (0x0350 - 0x0338)
class UGymGuiCursorWidget : public UGymGuiCharacterMetaWidget
{
public:
	float                                         SuperMoveStamina01;                                // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33C[0x4];                                      // 0x033C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNamedSlot*                             SuperMoveStaminaMeterSlot;                         // 0x0340(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BPOnSupermoveReadyChanged(const int32& IsReady);
	void UpdateSupermoveStamina(float Stamina);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiCursorWidget">();
	}
	static class UGymGuiCursorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiCursorWidget>();
	}
};
static_assert(alignof(UGymGuiCursorWidget) == 0x000008, "Wrong alignment on UGymGuiCursorWidget");
static_assert(sizeof(UGymGuiCursorWidget) == 0x000350, "Wrong size on UGymGuiCursorWidget");
static_assert(offsetof(UGymGuiCursorWidget, SuperMoveStamina01) == 0x000338, "Member 'UGymGuiCursorWidget::SuperMoveStamina01' has a wrong offset!");
static_assert(offsetof(UGymGuiCursorWidget, SuperMoveStaminaMeterSlot) == 0x000340, "Member 'UGymGuiCursorWidget::SuperMoveStaminaMeterSlot' has a wrong offset!");

// Class GYMGAME.GymGuiDialogueWidget
// 0x0000 (0x0338 - 0x0338)
class UGymGuiDialogueWidget : public UGymGuiCharacterMetaWidget
{
public:
	void BPSetNPCName(const class FName& NPCName);
	void BPSetNPCSpeech(const class FText& NPCSPeech);
	void BPSetPlayerAnswers(const TArray<struct FGymAnswer>& PlayerAnswers);
	void CloseDialogue();
	void PlayerAnswered(int32 Index_0);
	void SetAnswerVisible(bool bVisible);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiDialogueWidget">();
	}
	static class UGymGuiDialogueWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiDialogueWidget>();
	}
};
static_assert(alignof(UGymGuiDialogueWidget) == 0x000008, "Wrong alignment on UGymGuiDialogueWidget");
static_assert(sizeof(UGymGuiDialogueWidget) == 0x000338, "Wrong size on UGymGuiDialogueWidget");

// Class GYMGAME.GymGuiGenericButton
// 0x0028 (0x02E8 - 0x02C0)
class UGymGuiGenericButton : public UUserWidget
{
public:
	class UButton*                                ButtonObject;                                      // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnClicked;                                         // 0x02C8(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnClickedDisabled;                                 // 0x02D8(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void Clicked();
	void FocusAndHover(bool bFocusToButtonObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiGenericButton">();
	}
	static class UGymGuiGenericButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiGenericButton>();
	}
};
static_assert(alignof(UGymGuiGenericButton) == 0x000008, "Wrong alignment on UGymGuiGenericButton");
static_assert(sizeof(UGymGuiGenericButton) == 0x0002E8, "Wrong size on UGymGuiGenericButton");
static_assert(offsetof(UGymGuiGenericButton, ButtonObject) == 0x0002C0, "Member 'UGymGuiGenericButton::ButtonObject' has a wrong offset!");
static_assert(offsetof(UGymGuiGenericButton, OnClicked) == 0x0002C8, "Member 'UGymGuiGenericButton::OnClicked' has a wrong offset!");
static_assert(offsetof(UGymGuiGenericButton, OnClickedDisabled) == 0x0002D8, "Member 'UGymGuiGenericButton::OnClickedDisabled' has a wrong offset!");

// Class GYMGAME.GymGuiGenericTab
// 0x0048 (0x0308 - 0x02C0)
class UGymGuiGenericTab : public UUserWidget
{
public:
	class UPanelWidget*                           Container;                                         // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNamedSlot*                             NamedSlot;                                         // 0x02C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTabButtonSelected;                               // 0x02D0(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTabButtonReselected;                             // 0x02E0(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         CurrentSelection;                                  // 0x02F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F4[0x14];                                     // 0x02F4(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddButton(class UGymGuiGenericTabButton* Button);
	void Clear();
	void ClickCurrentButton(bool bForceClick);
	void GetAllButtons(TArray<class UGymGuiGenericTabButton*>* AllButtons);
	class UGymGuiGenericTabButton* GetCurrentButton();
	void InitializeTab();
	void OnTabButtonSelected__DelegateSignature(int32 Index_0);
	void PreInitializeTab();
	void SetTabActive(int32 Index_0);
	void SetTabVisuallySelected(int32 Index_0, bool bHover);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiGenericTab">();
	}
	static class UGymGuiGenericTab* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiGenericTab>();
	}
};
static_assert(alignof(UGymGuiGenericTab) == 0x000008, "Wrong alignment on UGymGuiGenericTab");
static_assert(sizeof(UGymGuiGenericTab) == 0x000308, "Wrong size on UGymGuiGenericTab");
static_assert(offsetof(UGymGuiGenericTab, Container) == 0x0002C0, "Member 'UGymGuiGenericTab::Container' has a wrong offset!");
static_assert(offsetof(UGymGuiGenericTab, NamedSlot) == 0x0002C8, "Member 'UGymGuiGenericTab::NamedSlot' has a wrong offset!");
static_assert(offsetof(UGymGuiGenericTab, OnTabButtonSelected) == 0x0002D0, "Member 'UGymGuiGenericTab::OnTabButtonSelected' has a wrong offset!");
static_assert(offsetof(UGymGuiGenericTab, OnTabButtonReselected) == 0x0002E0, "Member 'UGymGuiGenericTab::OnTabButtonReselected' has a wrong offset!");
static_assert(offsetof(UGymGuiGenericTab, CurrentSelection) == 0x0002F0, "Member 'UGymGuiGenericTab::CurrentSelection' has a wrong offset!");

// Class GYMGAME.GymGuiGenericTabButton
// 0x0020 (0x0308 - 0x02E8)
class UGymGuiGenericTabButton : public UGymGuiGenericButton
{
public:
	uint8                                         Pad_2E8[0x18];                                     // 0x02E8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsButtonEnabled;                                  // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Select();
	void TabButtonSelected();
	void Unselect();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiGenericTabButton">();
	}
	static class UGymGuiGenericTabButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiGenericTabButton>();
	}
};
static_assert(alignof(UGymGuiGenericTabButton) == 0x000008, "Wrong alignment on UGymGuiGenericTabButton");
static_assert(sizeof(UGymGuiGenericTabButton) == 0x000308, "Wrong size on UGymGuiGenericTabButton");
static_assert(offsetof(UGymGuiGenericTabButton, bIsButtonEnabled) == 0x000300, "Member 'UGymGuiGenericTabButton::bIsButtonEnabled' has a wrong offset!");

// Class GYMGAME.GymGuiGlobalChatWidget
// 0x0000 (0x0338 - 0x0338)
class UGymGuiGlobalChatWidget : public UGymGuiGlobalMetaWidget
{
public:
	void ReceiveMessage(const class FString& PlayerName, const class FString& Message);
	void SendMessage(const class FString& PlayerName, const class FString& Message);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiGlobalChatWidget">();
	}
	static class UGymGuiGlobalChatWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiGlobalChatWidget>();
	}
};
static_assert(alignof(UGymGuiGlobalChatWidget) == 0x000008, "Wrong alignment on UGymGuiGlobalChatWidget");
static_assert(sizeof(UGymGuiGlobalChatWidget) == 0x000338, "Wrong size on UGymGuiGlobalChatWidget");

// Class GYMGAME.GymGuiGrindMeter
// 0x0018 (0x0350 - 0x0338)
class UGymGuiGrindMeter : public UGymGuiCharacterMetaWidget
{
public:
	uint8                                         Pad_338[0x8];                                      // 0x0338(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 GrindNeedle;                                       // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       GrindMeterNeedleAnimation;                         // 0x0348(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiGrindMeter">();
	}
	static class UGymGuiGrindMeter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiGrindMeter>();
	}
};
static_assert(alignof(UGymGuiGrindMeter) == 0x000008, "Wrong alignment on UGymGuiGrindMeter");
static_assert(sizeof(UGymGuiGrindMeter) == 0x000350, "Wrong size on UGymGuiGrindMeter");
static_assert(offsetof(UGymGuiGrindMeter, GrindNeedle) == 0x000340, "Member 'UGymGuiGrindMeter::GrindNeedle' has a wrong offset!");
static_assert(offsetof(UGymGuiGrindMeter, GrindMeterNeedleAnimation) == 0x000348, "Member 'UGymGuiGrindMeter::GrindMeterNeedleAnimation' has a wrong offset!");

// Class GYMGAME.GymGuiMasterMenuWidget
// 0x0030 (0x0368 - 0x0338)
class UGymGuiMasterMenuWidget : public UGymGuiGlobalMetaWidget
{
public:
	TArray<class UHighlightableElement*>          Buttons;                                           // 0x0338(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UImage*                                 PlayerAvatarImage;                                 // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             PlayerName;                                        // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UButton*                                SettingsButton;                                    // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UButton*                                CloseGameButton;                                   // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void CreateTabButton(const class FText& ButtonTitle, int32 TabIndex, class UGymGuiMainMenuWidget* MainPanel, bool Hidden);
	void OnSettingsButtonPressed();
	void SetNotificationCount(int32 TabIndex, int32 Count);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiMasterMenuWidget">();
	}
	static class UGymGuiMasterMenuWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiMasterMenuWidget>();
	}
};
static_assert(alignof(UGymGuiMasterMenuWidget) == 0x000008, "Wrong alignment on UGymGuiMasterMenuWidget");
static_assert(sizeof(UGymGuiMasterMenuWidget) == 0x000368, "Wrong size on UGymGuiMasterMenuWidget");
static_assert(offsetof(UGymGuiMasterMenuWidget, Buttons) == 0x000338, "Member 'UGymGuiMasterMenuWidget::Buttons' has a wrong offset!");
static_assert(offsetof(UGymGuiMasterMenuWidget, PlayerAvatarImage) == 0x000348, "Member 'UGymGuiMasterMenuWidget::PlayerAvatarImage' has a wrong offset!");
static_assert(offsetof(UGymGuiMasterMenuWidget, PlayerName) == 0x000350, "Member 'UGymGuiMasterMenuWidget::PlayerName' has a wrong offset!");
static_assert(offsetof(UGymGuiMasterMenuWidget, SettingsButton) == 0x000358, "Member 'UGymGuiMasterMenuWidget::SettingsButton' has a wrong offset!");
static_assert(offsetof(UGymGuiMasterMenuWidget, CloseGameButton) == 0x000360, "Member 'UGymGuiMasterMenuWidget::CloseGameButton' has a wrong offset!");

// Class GYMGAME.GymGuiMasterRuleStateWidget
// 0x0070 (0x03A8 - 0x0338)
class UGymGuiMasterRuleStateWidget : public UGymGuiCharacterMetaWidget
{
public:
	TSubclassOf<class UGymGuiRuleStateWidgetSprint> SprintWidget;                                      // 0x0338(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UGymGuiRuleStateWidgetTide> TideWidget;                                        // 0x0340(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UGymGuiRuleStateWidgetBombMode> BombWidget;                                        // 0x0348(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UGymGuiRuleStateWidgetLoot> LootWidget;                                        // 0x0350(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UGymGuiRuleStateWidgetObstacle> ObbyWidget;                                        // 0x0358(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UGymGuiRuleStateWidgetCircuit> CircuitWidget;                                     // 0x0360(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UGymGuiRuleStateWidget>     PlaylistWidget;                                    // 0x0368(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UGymGuiRuleStateWidgetBasics> BasicsWidget;                                      // 0x0370(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UGymGuiRuleStateWidgetCareer> CareerWidget;                                      // 0x0378(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UGymGuiRuleStateWidget*>         AllWidgets;                                        // 0x0380(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_390[0x10];                                     // 0x0390(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymGuiRuleStateWidget*                 CurrentRuleStateWidget;                            // 0x03A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void AddRuleStateWidget(class UGymGuiRuleStateWidget* Widget);
	void OnTapeCollected();
	void ParticipantReachedCheckpoint(int32 Index_0);
	void ShowRuleInfoText(const class FText& Text);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiMasterRuleStateWidget">();
	}
	static class UGymGuiMasterRuleStateWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiMasterRuleStateWidget>();
	}
};
static_assert(alignof(UGymGuiMasterRuleStateWidget) == 0x000008, "Wrong alignment on UGymGuiMasterRuleStateWidget");
static_assert(sizeof(UGymGuiMasterRuleStateWidget) == 0x0003A8, "Wrong size on UGymGuiMasterRuleStateWidget");
static_assert(offsetof(UGymGuiMasterRuleStateWidget, SprintWidget) == 0x000338, "Member 'UGymGuiMasterRuleStateWidget::SprintWidget' has a wrong offset!");
static_assert(offsetof(UGymGuiMasterRuleStateWidget, TideWidget) == 0x000340, "Member 'UGymGuiMasterRuleStateWidget::TideWidget' has a wrong offset!");
static_assert(offsetof(UGymGuiMasterRuleStateWidget, BombWidget) == 0x000348, "Member 'UGymGuiMasterRuleStateWidget::BombWidget' has a wrong offset!");
static_assert(offsetof(UGymGuiMasterRuleStateWidget, LootWidget) == 0x000350, "Member 'UGymGuiMasterRuleStateWidget::LootWidget' has a wrong offset!");
static_assert(offsetof(UGymGuiMasterRuleStateWidget, ObbyWidget) == 0x000358, "Member 'UGymGuiMasterRuleStateWidget::ObbyWidget' has a wrong offset!");
static_assert(offsetof(UGymGuiMasterRuleStateWidget, CircuitWidget) == 0x000360, "Member 'UGymGuiMasterRuleStateWidget::CircuitWidget' has a wrong offset!");
static_assert(offsetof(UGymGuiMasterRuleStateWidget, PlaylistWidget) == 0x000368, "Member 'UGymGuiMasterRuleStateWidget::PlaylistWidget' has a wrong offset!");
static_assert(offsetof(UGymGuiMasterRuleStateWidget, BasicsWidget) == 0x000370, "Member 'UGymGuiMasterRuleStateWidget::BasicsWidget' has a wrong offset!");
static_assert(offsetof(UGymGuiMasterRuleStateWidget, CareerWidget) == 0x000378, "Member 'UGymGuiMasterRuleStateWidget::CareerWidget' has a wrong offset!");
static_assert(offsetof(UGymGuiMasterRuleStateWidget, AllWidgets) == 0x000380, "Member 'UGymGuiMasterRuleStateWidget::AllWidgets' has a wrong offset!");
static_assert(offsetof(UGymGuiMasterRuleStateWidget, CurrentRuleStateWidget) == 0x0003A0, "Member 'UGymGuiMasterRuleStateWidget::CurrentRuleStateWidget' has a wrong offset!");

// Class GYMGAME.GymGuiPauseMenu
// 0x0010 (0x0348 - 0x0338)
class UGymGuiPauseMenu : public UGymGuiGlobalMetaWidget
{
public:
	class UGymGuiScoreboardWidget*                Scoreboard;                                        // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenedDirectlyToLevelSettings;                    // 0x0340(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnThumbnailUpdated(const class FString& LocalFilePath);
	struct FCustomLevelFileInfo GetCurrentMapData();
	class FString GetPlaylistName();
	bool IsLobbyOwner();
	bool IsValidLevel(const struct FCustomLevelFileInfo& LevelInfo);
	void LeaveServerPressed();
	void OnControllerDisconnected();
	void OnMapSaved();
	void OpenDirectlyToLevelSettings();
	void OpenLevelSettingsMenu();
	void RestartCareerPressed();
	void SettingsMenuPressed();
	void TryOpenThumbnailMode();
	void TryStartPlay();
	void UpdateLevelInfo(const struct FCustomLevelFileInfo& LevelInfo);
	void UpdateServerInfo(const struct FGymServerInfo& ServerInfo);

	bool IsCareer() const;
	bool IsCareerRace() const;
	bool IsGoalMap() const;
	bool IsMapOwner() const;
	bool IsQuickplay() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiPauseMenu">();
	}
	static class UGymGuiPauseMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiPauseMenu>();
	}
};
static_assert(alignof(UGymGuiPauseMenu) == 0x000008, "Wrong alignment on UGymGuiPauseMenu");
static_assert(sizeof(UGymGuiPauseMenu) == 0x000348, "Wrong size on UGymGuiPauseMenu");
static_assert(offsetof(UGymGuiPauseMenu, Scoreboard) == 0x000338, "Member 'UGymGuiPauseMenu::Scoreboard' has a wrong offset!");
static_assert(offsetof(UGymGuiPauseMenu, bOpenedDirectlyToLevelSettings) == 0x000340, "Member 'UGymGuiPauseMenu::bOpenedDirectlyToLevelSettings' has a wrong offset!");

// Class GYMGAME.GymGuiPlayerIdentityNameplate
// 0x0050 (0x0388 - 0x0338)
class UGymGuiPlayerIdentityNameplate : public UGymGuiCharacterMetaWidget
{
public:
	uint8                                         Pad_338[0x8];                                      // 0x0338(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        WidgetParts;                                       // 0x0340(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class AGymCharacter*                          CurrentNameplateInfoFromPlayer;                    // 0x0350(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBorder*                                Badge;                                             // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGridPanel*                             GridPanel;                                         // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScaleBox*                              AvatarScaleBox;                                    // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 PlayerAvatarImage;                                 // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             PlayerName;                                        // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_380[0x8];                                      // 0x0380(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_UpdatePlayerIdentityInfo(class AGymCharacter* OtherPlayer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiPlayerIdentityNameplate">();
	}
	static class UGymGuiPlayerIdentityNameplate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiPlayerIdentityNameplate>();
	}
};
static_assert(alignof(UGymGuiPlayerIdentityNameplate) == 0x000008, "Wrong alignment on UGymGuiPlayerIdentityNameplate");
static_assert(sizeof(UGymGuiPlayerIdentityNameplate) == 0x000388, "Wrong size on UGymGuiPlayerIdentityNameplate");
static_assert(offsetof(UGymGuiPlayerIdentityNameplate, WidgetParts) == 0x000340, "Member 'UGymGuiPlayerIdentityNameplate::WidgetParts' has a wrong offset!");
static_assert(offsetof(UGymGuiPlayerIdentityNameplate, CurrentNameplateInfoFromPlayer) == 0x000350, "Member 'UGymGuiPlayerIdentityNameplate::CurrentNameplateInfoFromPlayer' has a wrong offset!");
static_assert(offsetof(UGymGuiPlayerIdentityNameplate, Badge) == 0x000358, "Member 'UGymGuiPlayerIdentityNameplate::Badge' has a wrong offset!");
static_assert(offsetof(UGymGuiPlayerIdentityNameplate, GridPanel) == 0x000360, "Member 'UGymGuiPlayerIdentityNameplate::GridPanel' has a wrong offset!");
static_assert(offsetof(UGymGuiPlayerIdentityNameplate, AvatarScaleBox) == 0x000368, "Member 'UGymGuiPlayerIdentityNameplate::AvatarScaleBox' has a wrong offset!");
static_assert(offsetof(UGymGuiPlayerIdentityNameplate, PlayerAvatarImage) == 0x000370, "Member 'UGymGuiPlayerIdentityNameplate::PlayerAvatarImage' has a wrong offset!");
static_assert(offsetof(UGymGuiPlayerIdentityNameplate, PlayerName) == 0x000378, "Member 'UGymGuiPlayerIdentityNameplate::PlayerName' has a wrong offset!");

// Class GYMGAME.GymGuiPlayMenuWidget
// 0x0040 (0x0378 - 0x0338)
class UGymGuiPlayMenuWidget : public UGymGuiGlobalMetaWidget
{
public:
	uint8                                         Pad_338[0x8];                                      // 0x0338(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGymGuiGlobalMetaWidget*>        MenuStateWidgets;                                  // 0x0340(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UGymGuiCanvasLobbyListWidget*           CanvasLobbyListWidget;                             // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymGuiChooseLevelWidget*               CanvasChooseLevelWidget;                           // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymGuiScoreboardWidget*                CanvasScoreboardWidget;                            // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasPanel*                           CanvasPlayOverlay;                                 // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymGuiGenericButton*                   MakeYourOwnButton;                                 // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void LeaveGymPressed();
	void OnAllLevelsButtonPressed();
	void OnJoinLobbyButtonPressed();
	void OnMakeYourOwnButtonPressed();

	bool IsInHostedGame() const;
	bool ShouldShowMapOwnerOptions() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiPlayMenuWidget">();
	}
	static class UGymGuiPlayMenuWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiPlayMenuWidget>();
	}
};
static_assert(alignof(UGymGuiPlayMenuWidget) == 0x000008, "Wrong alignment on UGymGuiPlayMenuWidget");
static_assert(sizeof(UGymGuiPlayMenuWidget) == 0x000378, "Wrong size on UGymGuiPlayMenuWidget");
static_assert(offsetof(UGymGuiPlayMenuWidget, MenuStateWidgets) == 0x000340, "Member 'UGymGuiPlayMenuWidget::MenuStateWidgets' has a wrong offset!");
static_assert(offsetof(UGymGuiPlayMenuWidget, CanvasLobbyListWidget) == 0x000350, "Member 'UGymGuiPlayMenuWidget::CanvasLobbyListWidget' has a wrong offset!");
static_assert(offsetof(UGymGuiPlayMenuWidget, CanvasChooseLevelWidget) == 0x000358, "Member 'UGymGuiPlayMenuWidget::CanvasChooseLevelWidget' has a wrong offset!");
static_assert(offsetof(UGymGuiPlayMenuWidget, CanvasScoreboardWidget) == 0x000360, "Member 'UGymGuiPlayMenuWidget::CanvasScoreboardWidget' has a wrong offset!");
static_assert(offsetof(UGymGuiPlayMenuWidget, CanvasPlayOverlay) == 0x000368, "Member 'UGymGuiPlayMenuWidget::CanvasPlayOverlay' has a wrong offset!");
static_assert(offsetof(UGymGuiPlayMenuWidget, MakeYourOwnButton) == 0x000370, "Member 'UGymGuiPlayMenuWidget::MakeYourOwnButton' has a wrong offset!");

// Class GYMGAME.GymGuiPreflowCountdownWidget
// 0x0020 (0x0358 - 0x0338)
class UGymGuiPreflowCountdownWidget : public UGymGuiCharacterMetaWidget
{
public:
	uint8                                         Pad_338[0x10];                                     // 0x0338(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       Countdown;                                         // 0x0348(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiPreflowCountdownWidget">();
	}
	static class UGymGuiPreflowCountdownWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiPreflowCountdownWidget>();
	}
};
static_assert(alignof(UGymGuiPreflowCountdownWidget) == 0x000008, "Wrong alignment on UGymGuiPreflowCountdownWidget");
static_assert(sizeof(UGymGuiPreflowCountdownWidget) == 0x000358, "Wrong size on UGymGuiPreflowCountdownWidget");
static_assert(offsetof(UGymGuiPreflowCountdownWidget, Countdown) == 0x000348, "Member 'UGymGuiPreflowCountdownWidget::Countdown' has a wrong offset!");

// Class GYMGAME.GymGuiRadialSelectionWidget
// 0x0010 (0x0340 - 0x0330)
class UGymGuiRadialSelectionWidget : public UGymGuiMetaWidget
{
public:
	int32                                         Index_0;                                           // 0x0330(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SelectionId;                                       // 0x0334(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33C[0x4];                                      // 0x033C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Highlight();
	void UnHighlight();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiRadialSelectionWidget">();
	}
	static class UGymGuiRadialSelectionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiRadialSelectionWidget>();
	}
};
static_assert(alignof(UGymGuiRadialSelectionWidget) == 0x000008, "Wrong alignment on UGymGuiRadialSelectionWidget");
static_assert(sizeof(UGymGuiRadialSelectionWidget) == 0x000340, "Wrong size on UGymGuiRadialSelectionWidget");
static_assert(offsetof(UGymGuiRadialSelectionWidget, Index_0) == 0x000330, "Member 'UGymGuiRadialSelectionWidget::Index_0' has a wrong offset!");
static_assert(offsetof(UGymGuiRadialSelectionWidget, SelectionId) == 0x000334, "Member 'UGymGuiRadialSelectionWidget::SelectionId' has a wrong offset!");

// Class GYMGAME.GymGuiREScoreboardEntryWidget
// 0x0018 (0x0350 - 0x0338)
class UGymGuiREScoreboardEntryWidget : public UGymGuiGlobalMetaWidget
{
public:
	class UImage*                                 PlayerAvatar;                                      // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             PlayerName;                                        // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             ScoreInfo;                                         // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiREScoreboardEntryWidget">();
	}
	static class UGymGuiREScoreboardEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiREScoreboardEntryWidget>();
	}
};
static_assert(alignof(UGymGuiREScoreboardEntryWidget) == 0x000008, "Wrong alignment on UGymGuiREScoreboardEntryWidget");
static_assert(sizeof(UGymGuiREScoreboardEntryWidget) == 0x000350, "Wrong size on UGymGuiREScoreboardEntryWidget");
static_assert(offsetof(UGymGuiREScoreboardEntryWidget, PlayerAvatar) == 0x000338, "Member 'UGymGuiREScoreboardEntryWidget::PlayerAvatar' has a wrong offset!");
static_assert(offsetof(UGymGuiREScoreboardEntryWidget, PlayerName) == 0x000340, "Member 'UGymGuiREScoreboardEntryWidget::PlayerName' has a wrong offset!");
static_assert(offsetof(UGymGuiREScoreboardEntryWidget, ScoreInfo) == 0x000348, "Member 'UGymGuiREScoreboardEntryWidget::ScoreInfo' has a wrong offset!");

// Class GYMGAME.GymGuiRewardNotificationWidget
// 0x0000 (0x0338 - 0x0338)
class UGymGuiRewardNotificationWidget final : public UGymGuiGlobalMetaWidget
{
public:
	void ShowRewards(const TArray<struct FGymRewardNotification>& RewardNotifications);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiRewardNotificationWidget">();
	}
	static class UGymGuiRewardNotificationWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiRewardNotificationWidget>();
	}
};
static_assert(alignof(UGymGuiRewardNotificationWidget) == 0x000008, "Wrong alignment on UGymGuiRewardNotificationWidget");
static_assert(sizeof(UGymGuiRewardNotificationWidget) == 0x000338, "Wrong size on UGymGuiRewardNotificationWidget");

// Class GYMGAME.GymGuiRuleStateWidgetBasics
// 0x0000 (0x0340 - 0x0340)
class UGymGuiRuleStateWidgetBasics : public UGymGuiRuleStateWidget
{
public:
	void OnPressedStartTutorial();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiRuleStateWidgetBasics">();
	}
	static class UGymGuiRuleStateWidgetBasics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiRuleStateWidgetBasics>();
	}
};
static_assert(alignof(UGymGuiRuleStateWidgetBasics) == 0x000008, "Wrong alignment on UGymGuiRuleStateWidgetBasics");
static_assert(sizeof(UGymGuiRuleStateWidgetBasics) == 0x000340, "Wrong size on UGymGuiRuleStateWidgetBasics");

// Class GYMGAME.GymGuiRuleStateWidgetCareer
// 0x0000 (0x0340 - 0x0340)
class UGymGuiRuleStateWidgetCareer : public UGymGuiRuleStateWidget
{
public:
	void OnPressedStartTutorial();
	void OnTapeCollected();
	void ShowBombUI(bool bShow);
	void ShowSpray(bool bShow);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiRuleStateWidgetCareer">();
	}
	static class UGymGuiRuleStateWidgetCareer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiRuleStateWidgetCareer>();
	}
};
static_assert(alignof(UGymGuiRuleStateWidgetCareer) == 0x000008, "Wrong alignment on UGymGuiRuleStateWidgetCareer");
static_assert(sizeof(UGymGuiRuleStateWidgetCareer) == 0x000340, "Wrong size on UGymGuiRuleStateWidgetCareer");

// Class GYMGAME.GymGuiRuleStateWidgetLoot
// 0x0000 (0x0340 - 0x0340)
class UGymGuiRuleStateWidgetLoot : public UGymGuiRuleStateWidget
{
public:
	void OnLootCollected(int32 Collected, int32 LootLeft);

	class UGymParticipantRepDataLoot* GetParticipantData() const;
	class UGymLootReplicatedData* GetRuleData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiRuleStateWidgetLoot">();
	}
	static class UGymGuiRuleStateWidgetLoot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiRuleStateWidgetLoot>();
	}
};
static_assert(alignof(UGymGuiRuleStateWidgetLoot) == 0x000008, "Wrong alignment on UGymGuiRuleStateWidgetLoot");
static_assert(sizeof(UGymGuiRuleStateWidgetLoot) == 0x000340, "Wrong size on UGymGuiRuleStateWidgetLoot");

// Class GYMGAME.GymGuiRuleStateWidgetSprint
// 0x0000 (0x0340 - 0x0340)
class UGymGuiRuleStateWidgetSprint : public UGymGuiRuleStateWidget
{
public:
	class UGymParticipantRepDataSprint* GetParticipantData() const;
	class UGymRuleReplicatedData* GetRuleData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiRuleStateWidgetSprint">();
	}
	static class UGymGuiRuleStateWidgetSprint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiRuleStateWidgetSprint>();
	}
};
static_assert(alignof(UGymGuiRuleStateWidgetSprint) == 0x000008, "Wrong alignment on UGymGuiRuleStateWidgetSprint");
static_assert(sizeof(UGymGuiRuleStateWidgetSprint) == 0x000340, "Wrong size on UGymGuiRuleStateWidgetSprint");

// Class GYMGAME.GymGuiScoreboardEntryWidget
// 0x0000 (0x0338 - 0x0338)
class UGymGuiScoreboardEntryWidget : public UGymGuiGlobalMetaWidget
{
public:
	void SetInfo(class AGymPlayerState* Player);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiScoreboardEntryWidget">();
	}
	static class UGymGuiScoreboardEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiScoreboardEntryWidget>();
	}
};
static_assert(alignof(UGymGuiScoreboardEntryWidget) == 0x000008, "Wrong alignment on UGymGuiScoreboardEntryWidget");
static_assert(sizeof(UGymGuiScoreboardEntryWidget) == 0x000338, "Wrong size on UGymGuiScoreboardEntryWidget");

// Class GYMGAME.GymGuiSettingsWidget
// 0x0030 (0x0368 - 0x0338)
class UGymGuiSettingsWidget : public UGymGuiGlobalMetaWidget
{
public:
	class UButton*                                BackButton;                                        // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FocusOutlineWidth;                                 // 0x0340(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FocusOutlineColor;                                 // 0x0344(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsingGamepad;                                     // 0x0354(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_355[0x13];                                     // 0x0355(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BPFocusToDefaultWidget();
	void BPOpenNextCategory();
	void BPOpenPrevCategory();
	void BPSetScrollBoxAutoScroll(const bool Value);
	void OnBackButtonClicked();

	bool IsCareer() const;
	bool IsCareerRace() const;
	bool IsGoalMap() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiSettingsWidget">();
	}
	static class UGymGuiSettingsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiSettingsWidget>();
	}
};
static_assert(alignof(UGymGuiSettingsWidget) == 0x000008, "Wrong alignment on UGymGuiSettingsWidget");
static_assert(sizeof(UGymGuiSettingsWidget) == 0x000368, "Wrong size on UGymGuiSettingsWidget");
static_assert(offsetof(UGymGuiSettingsWidget, BackButton) == 0x000338, "Member 'UGymGuiSettingsWidget::BackButton' has a wrong offset!");
static_assert(offsetof(UGymGuiSettingsWidget, FocusOutlineWidth) == 0x000340, "Member 'UGymGuiSettingsWidget::FocusOutlineWidth' has a wrong offset!");
static_assert(offsetof(UGymGuiSettingsWidget, FocusOutlineColor) == 0x000344, "Member 'UGymGuiSettingsWidget::FocusOutlineColor' has a wrong offset!");
static_assert(offsetof(UGymGuiSettingsWidget, bUsingGamepad) == 0x000354, "Member 'UGymGuiSettingsWidget::bUsingGamepad' has a wrong offset!");

// Class GYMGAME.GymMetaPhysicalMaterial
// 0x0000 (0x0088 - 0x0088)
class UGymMetaPhysicalMaterial : public UPhysicalMaterial
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymMetaPhysicalMaterial">();
	}
	static class UGymMetaPhysicalMaterial* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymMetaPhysicalMaterial>();
	}
};
static_assert(alignof(UGymMetaPhysicalMaterial) == 0x000008, "Wrong alignment on UGymMetaPhysicalMaterial");
static_assert(sizeof(UGymMetaPhysicalMaterial) == 0x000088, "Wrong size on UGymMetaPhysicalMaterial");

// Class GYMGAME.GymTrampolinePhysicalMaterial
// 0x0000 (0x0088 - 0x0088)
class UGymTrampolinePhysicalMaterial final : public UGymMetaPhysicalMaterial
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymTrampolinePhysicalMaterial">();
	}
	static class UGymTrampolinePhysicalMaterial* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymTrampolinePhysicalMaterial>();
	}
};
static_assert(alignof(UGymTrampolinePhysicalMaterial) == 0x000008, "Wrong alignment on UGymTrampolinePhysicalMaterial");
static_assert(sizeof(UGymTrampolinePhysicalMaterial) == 0x000088, "Wrong size on UGymTrampolinePhysicalMaterial");

// Class GYMGAME.GymGuiSpectatorRuleWidgetBomb
// 0x0000 (0x0340 - 0x0340)
class UGymGuiSpectatorRuleWidgetBomb : public UGymGuiSpectatorRuleMetaWidget
{
public:
	float GetBombTimer();
	bool GetIsBombTicking();
	float GetRoundStartTime();
	class UGymBombModeReplicatedData* GetRuleData();

	class UGymParticipantRepDataBomb* GetParticipantData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiSpectatorRuleWidgetBomb">();
	}
	static class UGymGuiSpectatorRuleWidgetBomb* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiSpectatorRuleWidgetBomb>();
	}
};
static_assert(alignof(UGymGuiSpectatorRuleWidgetBomb) == 0x000008, "Wrong alignment on UGymGuiSpectatorRuleWidgetBomb");
static_assert(sizeof(UGymGuiSpectatorRuleWidgetBomb) == 0x000340, "Wrong size on UGymGuiSpectatorRuleWidgetBomb");

// Class GYMGAME.GymGuiSpectatorRuleWidgetCircuit
// 0x0000 (0x0340 - 0x0340)
class UGymGuiSpectatorRuleWidgetCircuit : public UGymGuiSpectatorRuleMetaWidget
{
public:
	class UGymCircuitReplicatedData* GetRuleData();

	class UGymParticipantRepDataCircuit* GetParticipantData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiSpectatorRuleWidgetCircuit">();
	}
	static class UGymGuiSpectatorRuleWidgetCircuit* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiSpectatorRuleWidgetCircuit>();
	}
};
static_assert(alignof(UGymGuiSpectatorRuleWidgetCircuit) == 0x000008, "Wrong alignment on UGymGuiSpectatorRuleWidgetCircuit");
static_assert(sizeof(UGymGuiSpectatorRuleWidgetCircuit) == 0x000340, "Wrong size on UGymGuiSpectatorRuleWidgetCircuit");

// Class GYMGAME.GymGuiSpectatorRuleWidgetObstacle
// 0x0000 (0x0340 - 0x0340)
class UGymGuiSpectatorRuleWidgetObstacle : public UGymGuiSpectatorRuleMetaWidget
{
public:
	void OnLocationsSaved(int32 LocationsSaved);

	class UGymParticipantRepDataObby* GetParticipantData() const;
	class UGymOCReplicatedData* GetRuleData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiSpectatorRuleWidgetObstacle">();
	}
	static class UGymGuiSpectatorRuleWidgetObstacle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiSpectatorRuleWidgetObstacle>();
	}
};
static_assert(alignof(UGymGuiSpectatorRuleWidgetObstacle) == 0x000008, "Wrong alignment on UGymGuiSpectatorRuleWidgetObstacle");
static_assert(sizeof(UGymGuiSpectatorRuleWidgetObstacle) == 0x000340, "Wrong size on UGymGuiSpectatorRuleWidgetObstacle");

// Class GYMGAME.GymGuiSpectatorRuleWidgetSprint
// 0x0000 (0x0340 - 0x0340)
class UGymGuiSpectatorRuleWidgetSprint : public UGymGuiSpectatorRuleMetaWidget
{
public:
	class UGymParticipantRepData* GetParticipantData() const;
	class UGymRuleReplicatedData* GetRuleData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiSpectatorRuleWidgetSprint">();
	}
	static class UGymGuiSpectatorRuleWidgetSprint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiSpectatorRuleWidgetSprint>();
	}
};
static_assert(alignof(UGymGuiSpectatorRuleWidgetSprint) == 0x000008, "Wrong alignment on UGymGuiSpectatorRuleWidgetSprint");
static_assert(sizeof(UGymGuiSpectatorRuleWidgetSprint) == 0x000340, "Wrong size on UGymGuiSpectatorRuleWidgetSprint");

// Class GYMGAME.GymGuiSpectatorRuleWidgetTide
// 0x0000 (0x0340 - 0x0340)
class UGymGuiSpectatorRuleWidgetTide : public UGymGuiSpectatorRuleMetaWidget
{
public:
	class UGymParticipantRepData* GetParticipantData() const;
	class UGymRuleReplicatedData* GetRuleData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiSpectatorRuleWidgetTide">();
	}
	static class UGymGuiSpectatorRuleWidgetTide* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiSpectatorRuleWidgetTide>();
	}
};
static_assert(alignof(UGymGuiSpectatorRuleWidgetTide) == 0x000008, "Wrong alignment on UGymGuiSpectatorRuleWidgetTide");
static_assert(sizeof(UGymGuiSpectatorRuleWidgetTide) == 0x000340, "Wrong size on UGymGuiSpectatorRuleWidgetTide");

// Class GYMGAME.GymGuiTickerBoxWidget
// 0x0010 (0x0340 - 0x0330)
class UGymGuiTickerBoxWidget : public UGymGuiMetaWidget
{
public:
	class UPanelWidget*                           MessageList;                                       // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxMessages;                                       // 0x0338(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33C[0x4];                                      // 0x033C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiTickerBoxWidget">();
	}
	static class UGymGuiTickerBoxWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiTickerBoxWidget>();
	}
};
static_assert(alignof(UGymGuiTickerBoxWidget) == 0x000008, "Wrong alignment on UGymGuiTickerBoxWidget");
static_assert(sizeof(UGymGuiTickerBoxWidget) == 0x000340, "Wrong size on UGymGuiTickerBoxWidget");
static_assert(offsetof(UGymGuiTickerBoxWidget, MessageList) == 0x000330, "Member 'UGymGuiTickerBoxWidget::MessageList' has a wrong offset!");
static_assert(offsetof(UGymGuiTickerBoxWidget, MaxMessages) == 0x000338, "Member 'UGymGuiTickerBoxWidget::MaxMessages' has a wrong offset!");

// Class GYMGAME.GymGuiTickerMetaWidget
// 0x0028 (0x0360 - 0x0338)
class UGymGuiTickerMetaWidget : public UGymGuiGlobalMetaWidget
{
public:
	TSubclassOf<class UGymGuiTickerMessageWidget> MessageBPGeneric;                                  // 0x0338(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UGymGuiTickerMessageWidget> MessageBPTutorialPrompt;                           // 0x0340(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymGuiTickerBoxWidget*                 TopRightTicker;                                    // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymGuiTickerBoxWidget*                 BottomRightTicker;                                 // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_358[0x8];                                      // 0x0358(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddCustomMessage(TSubclassOf<class UGymGuiTickerMessageWidget> TickerWidget, ETickerPosition Position);
	void AddMessage(const struct FTickerSettingsStruct& Settings);
	void RemoveMessage(class FName MessageId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymGuiTickerMetaWidget">();
	}
	static class UGymGuiTickerMetaWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymGuiTickerMetaWidget>();
	}
};
static_assert(alignof(UGymGuiTickerMetaWidget) == 0x000008, "Wrong alignment on UGymGuiTickerMetaWidget");
static_assert(sizeof(UGymGuiTickerMetaWidget) == 0x000360, "Wrong size on UGymGuiTickerMetaWidget");
static_assert(offsetof(UGymGuiTickerMetaWidget, MessageBPGeneric) == 0x000338, "Member 'UGymGuiTickerMetaWidget::MessageBPGeneric' has a wrong offset!");
static_assert(offsetof(UGymGuiTickerMetaWidget, MessageBPTutorialPrompt) == 0x000340, "Member 'UGymGuiTickerMetaWidget::MessageBPTutorialPrompt' has a wrong offset!");
static_assert(offsetof(UGymGuiTickerMetaWidget, TopRightTicker) == 0x000348, "Member 'UGymGuiTickerMetaWidget::TopRightTicker' has a wrong offset!");
static_assert(offsetof(UGymGuiTickerMetaWidget, BottomRightTicker) == 0x000350, "Member 'UGymGuiTickerMetaWidget::BottomRightTicker' has a wrong offset!");

// Class GYMGAME.GymHandsIKAnimator
// 0x00C8 (0x0170 - 0x00A8)
class UGymHandsIKAnimator final : public UGymMetaAnimator
{
public:
	uint8                                         Pad_A8[0xC];                                       // 0x00A8(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          IsGroundedReplicated;                              // 0x00B4(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B5[0x1B];                                      // 0x00B5(0x001B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymHandsIKAnimatorProps               Props;                                             // 0x00D0(0x00A0)(Transient, NoDestructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymHandsIKAnimator">();
	}
	static class UGymHandsIKAnimator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymHandsIKAnimator>();
	}
};
static_assert(alignof(UGymHandsIKAnimator) == 0x000008, "Wrong alignment on UGymHandsIKAnimator");
static_assert(sizeof(UGymHandsIKAnimator) == 0x000170, "Wrong size on UGymHandsIKAnimator");
static_assert(offsetof(UGymHandsIKAnimator, IsGroundedReplicated) == 0x0000B4, "Member 'UGymHandsIKAnimator::IsGroundedReplicated' has a wrong offset!");
static_assert(offsetof(UGymHandsIKAnimator, Props) == 0x0000D0, "Member 'UGymHandsIKAnimator::Props' has a wrong offset!");

// Class GYMGAME.GymHighwirePlacer
// 0x0000 (0x0330 - 0x0330)
class AGymHighwirePlacer final : public AGymSplinePlacer
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymHighwirePlacer">();
	}
	static class AGymHighwirePlacer* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymHighwirePlacer>();
	}
};
static_assert(alignof(AGymHighwirePlacer) == 0x000008, "Wrong alignment on AGymHighwirePlacer");
static_assert(sizeof(AGymHighwirePlacer) == 0x000330, "Wrong size on AGymHighwirePlacer");

// Class GYMGAME.GymInputControl
// 0x00A8 (0x0160 - 0x00B8)
class UGymInputControl final : public UGymCharacterMetaControl
{
public:
	class UInputComponent*                        InputComponent;                                    // 0x00B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C0[0x68];                                      // 0x00C0(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymInputRecordPlayer*                  InputRecordPlayer;                                 // 0x0128(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymInputRecorder*                      InputRecorder;                                     // 0x0130(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_138[0x28];                                     // 0x0138(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UGymInputRecorder* GetInputRecorder();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymInputControl">();
	}
	static class UGymInputControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymInputControl>();
	}
};
static_assert(alignof(UGymInputControl) == 0x000008, "Wrong alignment on UGymInputControl");
static_assert(sizeof(UGymInputControl) == 0x000160, "Wrong size on UGymInputControl");
static_assert(offsetof(UGymInputControl, InputComponent) == 0x0000B8, "Member 'UGymInputControl::InputComponent' has a wrong offset!");
static_assert(offsetof(UGymInputControl, InputRecordPlayer) == 0x000128, "Member 'UGymInputControl::InputRecordPlayer' has a wrong offset!");
static_assert(offsetof(UGymInputControl, InputRecorder) == 0x000130, "Member 'UGymInputControl::InputRecorder' has a wrong offset!");

// Class GYMGAME.GymInputRecordPlayer
// 0x00A8 (0x00D0 - 0x0028)
class UGymInputRecordPlayer final : public UObject
{
public:
	uint8                                         Pad_28[0xA8];                                      // 0x0028(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymInputRecordPlayer">();
	}
	static class UGymInputRecordPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymInputRecordPlayer>();
	}
};
static_assert(alignof(UGymInputRecordPlayer) == 0x000008, "Wrong alignment on UGymInputRecordPlayer");
static_assert(sizeof(UGymInputRecordPlayer) == 0x0000D0, "Wrong size on UGymInputRecordPlayer");

// Class GYMGAME.GymInteractionControl
// 0x0030 (0x00E8 - 0x00B8)
class UGymInteractionControl final : public UGymCharacterMetaControl
{
public:
	float                                         TraceMinDistance;                                  // 0x00B8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceMaxDistance;                                  // 0x00BC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceStartZLocation;                               // 0x00C0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x24];                                      // 0x00C4(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Client_EndInteract();
	void Client_Interact(class AActor* ActorToInteract, class UPrimitiveComponent* ComponentToInteract);
	void EndInteract();
	void OnOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnOverlapEnd(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void Server_EndInteract();
	void Server_Interact(class AActor* ActorToInteract, class UPrimitiveComponent* ComponentToInteract);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymInteractionControl">();
	}
	static class UGymInteractionControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymInteractionControl>();
	}
};
static_assert(alignof(UGymInteractionControl) == 0x000008, "Wrong alignment on UGymInteractionControl");
static_assert(sizeof(UGymInteractionControl) == 0x0000E8, "Wrong size on UGymInteractionControl");
static_assert(offsetof(UGymInteractionControl, TraceMinDistance) == 0x0000B8, "Member 'UGymInteractionControl::TraceMinDistance' has a wrong offset!");
static_assert(offsetof(UGymInteractionControl, TraceMaxDistance) == 0x0000BC, "Member 'UGymInteractionControl::TraceMaxDistance' has a wrong offset!");
static_assert(offsetof(UGymInteractionControl, TraceStartZLocation) == 0x0000C0, "Member 'UGymInteractionControl::TraceStartZLocation' has a wrong offset!");

// Class GYMGAME.GymLedgeVolume
// 0x0000 (0x0630 - 0x0630)
class UGymLedgeVolume final : public UStaticMeshComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymLedgeVolume">();
	}
	static class UGymLedgeVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymLedgeVolume>();
	}
};
static_assert(alignof(UGymLedgeVolume) == 0x000010, "Wrong alignment on UGymLedgeVolume");
static_assert(sizeof(UGymLedgeVolume) == 0x000630, "Wrong size on UGymLedgeVolume");

// Class GYMGAME.GymLoadingScreen
// 0x0008 (0x0340 - 0x0338)
class UGymLoadingScreen : public UGymGuiGlobalMetaWidget
{
public:
	bool                                          bDestroyOnLevelLoad;                               // 0x0338(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_339[0x7];                                      // 0x0339(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FString GetLastUsedTextureUri();
	double GetLastUsedTimestamp();
	void SetLastUsedTextureUri(const class FString& TextureUri);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymLoadingScreen">();
	}
	static class UGymLoadingScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymLoadingScreen>();
	}
};
static_assert(alignof(UGymLoadingScreen) == 0x000008, "Wrong alignment on UGymLoadingScreen");
static_assert(sizeof(UGymLoadingScreen) == 0x000340, "Wrong size on UGymLoadingScreen");
static_assert(offsetof(UGymLoadingScreen, bDestroyOnLevelLoad) == 0x000338, "Member 'UGymLoadingScreen::bDestroyOnLevelLoad' has a wrong offset!");

// Class GYMGAME.GymLocationCriterion
// 0x0028 (0x0060 - 0x0038)
class UGymLocationCriterion final : public UGymObjectiveCriterion
{
public:
	bool                                          bOneUseOnly;                                       // 0x0038(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         LocationsUsed;                                     // 0x0040(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class AGymLocationCriterionActor*>     AllLocations;                                      // 0x0050(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymLocationCriterion">();
	}
	static class UGymLocationCriterion* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymLocationCriterion>();
	}
};
static_assert(alignof(UGymLocationCriterion) == 0x000008, "Wrong alignment on UGymLocationCriterion");
static_assert(sizeof(UGymLocationCriterion) == 0x000060, "Wrong size on UGymLocationCriterion");
static_assert(offsetof(UGymLocationCriterion, bOneUseOnly) == 0x000038, "Member 'UGymLocationCriterion::bOneUseOnly' has a wrong offset!");
static_assert(offsetof(UGymLocationCriterion, LocationsUsed) == 0x000040, "Member 'UGymLocationCriterion::LocationsUsed' has a wrong offset!");
static_assert(offsetof(UGymLocationCriterion, AllLocations) == 0x000050, "Member 'UGymLocationCriterion::AllLocations' has a wrong offset!");

// Class GYMGAME.GymLocationCriterionVisual
// 0x0018 (0x0440 - 0x0428)
class AGymLocationCriterionVisual final : public AGymStaticLevelAsset
{
public:
	class FString                                 ObjectiveID;                                       // 0x0428(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocationID;                                        // 0x0438(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43C[0x4];                                      // 0x043C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnFailTask();
	void OnFinishTask();
	void OnLocationReached();
	void OnRestartTask();
	void OnStartTask();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymLocationCriterionVisual">();
	}
	static class AGymLocationCriterionVisual* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymLocationCriterionVisual>();
	}
};
static_assert(alignof(AGymLocationCriterionVisual) == 0x000008, "Wrong alignment on AGymLocationCriterionVisual");
static_assert(sizeof(AGymLocationCriterionVisual) == 0x000440, "Wrong size on AGymLocationCriterionVisual");
static_assert(offsetof(AGymLocationCriterionVisual, ObjectiveID) == 0x000428, "Member 'AGymLocationCriterionVisual::ObjectiveID' has a wrong offset!");
static_assert(offsetof(AGymLocationCriterionVisual, LocationID) == 0x000438, "Member 'AGymLocationCriterionVisual::LocationID' has a wrong offset!");

// Class GYMGAME.GymLocationObjectiveActor
// 0x0038 (0x0460 - 0x0428)
class AGymLocationObjectiveActor final : public AGymStaticLevelAsset
{
public:
	class FString                                 ObjectiveID;                                       // 0x0428(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocationID;                                        // 0x0438(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43C[0x4];                                      // 0x043C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymReachLocationObjective*             Objective;                                         // 0x0440(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_448[0x18];                                     // 0x0448(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCollided(class AActor* OtherActor);
	void OnCollided__DelegateSignature(class AGymLocationObjectiveActor* LocationActor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymLocationObjectiveActor">();
	}
	static class AGymLocationObjectiveActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymLocationObjectiveActor>();
	}
};
static_assert(alignof(AGymLocationObjectiveActor) == 0x000008, "Wrong alignment on AGymLocationObjectiveActor");
static_assert(sizeof(AGymLocationObjectiveActor) == 0x000460, "Wrong size on AGymLocationObjectiveActor");
static_assert(offsetof(AGymLocationObjectiveActor, ObjectiveID) == 0x000428, "Member 'AGymLocationObjectiveActor::ObjectiveID' has a wrong offset!");
static_assert(offsetof(AGymLocationObjectiveActor, LocationID) == 0x000438, "Member 'AGymLocationObjectiveActor::LocationID' has a wrong offset!");
static_assert(offsetof(AGymLocationObjectiveActor, Objective) == 0x000440, "Member 'AGymLocationObjectiveActor::Objective' has a wrong offset!");

// Class GYMGAME.GymLootModeChanger
// 0x0008 (0x0440 - 0x0438)
class AGymLootModeChanger final : public AGymRuleModifier
{
public:
	ELootMode                                     LootMode;                                          // 0x0438(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_439[0x7];                                      // 0x0439(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymLootModeChanger">();
	}
	static class AGymLootModeChanger* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymLootModeChanger>();
	}
};
static_assert(alignof(AGymLootModeChanger) == 0x000008, "Wrong alignment on AGymLootModeChanger");
static_assert(sizeof(AGymLootModeChanger) == 0x000440, "Wrong size on AGymLootModeChanger");
static_assert(offsetof(AGymLootModeChanger, LootMode) == 0x000438, "Member 'AGymLootModeChanger::LootMode' has a wrong offset!");

// Class GYMGAME.GymLootReplicatedData
// 0x0008 (0x0090 - 0x0088)
class UGymLootReplicatedData final : public UGymRuleReplicatedData
{
public:
	int32                                         MaxLootNum;                                        // 0x0088(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetMaxLootNum(int32 Loot);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymLootReplicatedData">();
	}
	static class UGymLootReplicatedData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymLootReplicatedData>();
	}
};
static_assert(alignof(UGymLootReplicatedData) == 0x000008, "Wrong alignment on UGymLootReplicatedData");
static_assert(sizeof(UGymLootReplicatedData) == 0x000090, "Wrong size on UGymLootReplicatedData");
static_assert(offsetof(UGymLootReplicatedData, MaxLootNum) == 0x000088, "Member 'UGymLootReplicatedData::MaxLootNum' has a wrong offset!");

// Class GYMGAME.GymLootSpawnActor
// 0x0020 (0x0448 - 0x0428)
class AGymLootSpawnActor final : public AGymStaticLevelAsset
{
public:
	TSubclassOf<class AGymLootActor>              CollectibleClass;                                  // 0x0428(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SpawnerID;                                         // 0x0430(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_440[0x8];                                      // 0x0440(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymLootSpawnActor">();
	}
	static class AGymLootSpawnActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymLootSpawnActor>();
	}
};
static_assert(alignof(AGymLootSpawnActor) == 0x000008, "Wrong alignment on AGymLootSpawnActor");
static_assert(sizeof(AGymLootSpawnActor) == 0x000448, "Wrong size on AGymLootSpawnActor");
static_assert(offsetof(AGymLootSpawnActor, CollectibleClass) == 0x000428, "Member 'AGymLootSpawnActor::CollectibleClass' has a wrong offset!");
static_assert(offsetof(AGymLootSpawnActor, SpawnerID) == 0x000430, "Member 'AGymLootSpawnActor::SpawnerID' has a wrong offset!");

// Class GYMGAME.GymMap
// 0x0210 (0x04A8 - 0x0298)
class AGymMap : public AActor
{
public:
	class UGymMapBuilderControl*                  BuilderControl;                                    // 0x0298(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymMapExportControl*                   ExportControl;                                     // 0x02A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymMapImportControl*                   ImportControl;                                     // 0x02A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymMapAssetControl*                    AssetControl;                                      // 0x02B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymMapRuleModifierControl*             RuleModifierControl;                               // 0x02B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGymWallSystem*                         WallSystem;                                        // 0x02C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMapLoaded;                                       // 0x02C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D8[0x2];                                      // 0x02D8(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bDidCreate;                                        // 0x02DA(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2DB[0x15];                                     // 0x02DB(0x0015)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeOfDay;                                         // 0x02F0(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   Weather;                                           // 0x02F4(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   Music;                                             // 0x02FC(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   OverrideKitId;                                     // 0x0304(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RuleId;                                            // 0x030C(0x0008)(Edit, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BaseMapIndex;                                      // 0x0314(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGymConfigCreateMenu*                   CreateConfig;                                      // 0x0318(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UGymMapMetaControl*>             Controls;                                          // 0x0320(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class AGymGlobalModifierAsset*>        Modifiers;                                         // 0x0330(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_340[0x1];                                      // 0x0340(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          EditingAllowedAuth;                                // 0x0341(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bServerIsImporting;                                // 0x0342(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_343[0x5];                                      // 0x0343(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGymAssetRecord>                AllAssets;                                         // 0x0348(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FGymMapAssetLink>               Links;                                             // 0x0358(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FGymAssetTypesArray                    AssetsBytype;                                      // 0x0368(0x0040)(NativeAccessSpecifierPrivate)
	struct FGymMapAssetRecordCategorizedList      AllAssetsCategorizedList;                          // 0x03A8(0x0010)(Transient, NativeAccessSpecifierPrivate)
	TSet<class FString>                           CustomObjectFlags;                                 // 0x03B8(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_408[0xA0];                                     // 0x0408(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetBaseMapIndex();
	struct FGymLevelKit GetLevelKit();
	class FName GetMusic();
	class FName GetRule();
	class UGymMapRuleModifierControl* GetRuleModifierControl();
	float GetTime();
	class FName GetWeather();
	class FName GetWeatherName();
	void HideAsset_Multicast(int32 AssetRecordId, bool IsHidden);
	void LoadMap_Editor();
	void MarkAllChangesSaved_Multicast();
	void OnMapLoaded__DelegateSignature();
	void OnRulesChanged_Multicast();
	void OnSetMusic();
	void OnSetTime();
	void OnSetTimeImmediate();
	void OnSetWeather();
	void SetMusic(class FName NewMusic);
	void SetPreviewPhysics(float PreviewDuration, bool InfinitePhysPreview);
	void SetRule(class FName NewRule, bool bSwapRules);
	void SetTime(float NewTime, bool bImmediate);
	void SetVolumetric(bool bVolumetric);
	void SetWeather(class FName NewWeather);

	bool GetEditingAllowed(class AGymPlayerController* ForPlayer) const;
	EGymMapLoadStatus GetLoadStatus() const;
	bool HasBeenEdited() const;
	double LastEditTimestamp() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymMap">();
	}
	static class AGymMap* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymMap>();
	}
};
static_assert(alignof(AGymMap) == 0x000008, "Wrong alignment on AGymMap");
static_assert(sizeof(AGymMap) == 0x0004A8, "Wrong size on AGymMap");
static_assert(offsetof(AGymMap, BuilderControl) == 0x000298, "Member 'AGymMap::BuilderControl' has a wrong offset!");
static_assert(offsetof(AGymMap, ExportControl) == 0x0002A0, "Member 'AGymMap::ExportControl' has a wrong offset!");
static_assert(offsetof(AGymMap, ImportControl) == 0x0002A8, "Member 'AGymMap::ImportControl' has a wrong offset!");
static_assert(offsetof(AGymMap, AssetControl) == 0x0002B0, "Member 'AGymMap::AssetControl' has a wrong offset!");
static_assert(offsetof(AGymMap, RuleModifierControl) == 0x0002B8, "Member 'AGymMap::RuleModifierControl' has a wrong offset!");
static_assert(offsetof(AGymMap, WallSystem) == 0x0002C0, "Member 'AGymMap::WallSystem' has a wrong offset!");
static_assert(offsetof(AGymMap, OnMapLoaded) == 0x0002C8, "Member 'AGymMap::OnMapLoaded' has a wrong offset!");
static_assert(offsetof(AGymMap, bDidCreate) == 0x0002DA, "Member 'AGymMap::bDidCreate' has a wrong offset!");
static_assert(offsetof(AGymMap, TimeOfDay) == 0x0002F0, "Member 'AGymMap::TimeOfDay' has a wrong offset!");
static_assert(offsetof(AGymMap, Weather) == 0x0002F4, "Member 'AGymMap::Weather' has a wrong offset!");
static_assert(offsetof(AGymMap, Music) == 0x0002FC, "Member 'AGymMap::Music' has a wrong offset!");
static_assert(offsetof(AGymMap, OverrideKitId) == 0x000304, "Member 'AGymMap::OverrideKitId' has a wrong offset!");
static_assert(offsetof(AGymMap, RuleId) == 0x00030C, "Member 'AGymMap::RuleId' has a wrong offset!");
static_assert(offsetof(AGymMap, BaseMapIndex) == 0x000314, "Member 'AGymMap::BaseMapIndex' has a wrong offset!");
static_assert(offsetof(AGymMap, CreateConfig) == 0x000318, "Member 'AGymMap::CreateConfig' has a wrong offset!");
static_assert(offsetof(AGymMap, Controls) == 0x000320, "Member 'AGymMap::Controls' has a wrong offset!");
static_assert(offsetof(AGymMap, Modifiers) == 0x000330, "Member 'AGymMap::Modifiers' has a wrong offset!");
static_assert(offsetof(AGymMap, EditingAllowedAuth) == 0x000341, "Member 'AGymMap::EditingAllowedAuth' has a wrong offset!");
static_assert(offsetof(AGymMap, bServerIsImporting) == 0x000342, "Member 'AGymMap::bServerIsImporting' has a wrong offset!");
static_assert(offsetof(AGymMap, AllAssets) == 0x000348, "Member 'AGymMap::AllAssets' has a wrong offset!");
static_assert(offsetof(AGymMap, Links) == 0x000358, "Member 'AGymMap::Links' has a wrong offset!");
static_assert(offsetof(AGymMap, AssetsBytype) == 0x000368, "Member 'AGymMap::AssetsBytype' has a wrong offset!");
static_assert(offsetof(AGymMap, AllAssetsCategorizedList) == 0x0003A8, "Member 'AGymMap::AllAssetsCategorizedList' has a wrong offset!");
static_assert(offsetof(AGymMap, CustomObjectFlags) == 0x0003B8, "Member 'AGymMap::CustomObjectFlags' has a wrong offset!");

// Class GYMGAME.GymMapMetaControl
// 0x0008 (0x00A8 - 0x00A0)
class UGymMapMetaControl : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymMapMetaControl">();
	}
	static class UGymMapMetaControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymMapMetaControl>();
	}
};
static_assert(alignof(UGymMapMetaControl) == 0x000008, "Wrong alignment on UGymMapMetaControl");
static_assert(sizeof(UGymMapMetaControl) == 0x0000A8, "Wrong size on UGymMapMetaControl");

// Class GYMGAME.GymWirePlaceable
// 0x0000 (0x0460 - 0x0460)
class AGymWirePlaceable final : public AGymSplinePlaceable
{
public:
	void SetRotation(const struct FRotator& Rotation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymWirePlaceable">();
	}
	static class AGymWirePlaceable* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymWirePlaceable>();
	}
};
static_assert(alignof(AGymWirePlaceable) == 0x000008, "Wrong alignment on AGymWirePlaceable");
static_assert(sizeof(AGymWirePlaceable) == 0x000460, "Wrong size on AGymWirePlaceable");

// Class GYMGAME.GymMapAssetControl
// 0x0018 (0x00C0 - 0x00A8)
class UGymMapAssetControl final : public UGymMapMetaControl
{
public:
	uint8                                         Pad_A8[0x18];                                      // 0x00A8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymMapAssetControl">();
	}
	static class UGymMapAssetControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymMapAssetControl>();
	}
};
static_assert(alignof(UGymMapAssetControl) == 0x000008, "Wrong alignment on UGymMapAssetControl");
static_assert(sizeof(UGymMapAssetControl) == 0x0000C0, "Wrong size on UGymMapAssetControl");

// Class GYMGAME.GymMapBuilderControl
// 0x0000 (0x00A8 - 0x00A8)
class UGymMapBuilderControl final : public UGymMapMetaControl
{
public:
	void RemoveStaticAsset(class AGymStaticLevelAsset* Actor) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymMapBuilderControl">();
	}
	static class UGymMapBuilderControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymMapBuilderControl>();
	}
};
static_assert(alignof(UGymMapBuilderControl) == 0x000008, "Wrong alignment on UGymMapBuilderControl");
static_assert(sizeof(UGymMapBuilderControl) == 0x0000A8, "Wrong size on UGymMapBuilderControl");

// Class GYMGAME.GymMapExportControl
// 0x0000 (0x00A8 - 0x00A8)
class UGymMapExportControl final : public UGymMapMetaControl
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymMapExportControl">();
	}
	static class UGymMapExportControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymMapExportControl>();
	}
};
static_assert(alignof(UGymMapExportControl) == 0x000008, "Wrong alignment on UGymMapExportControl");
static_assert(sizeof(UGymMapExportControl) == 0x0000A8, "Wrong size on UGymMapExportControl");

// Class GYMGAME.GymMapImportControl
// 0x0018 (0x00C0 - 0x00A8)
class UGymMapImportControl final : public UGymMapMetaControl
{
public:
	uint8                                         Pad_A8[0x18];                                      // 0x00A8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymMapImportControl">();
	}
	static class UGymMapImportControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymMapImportControl>();
	}
};
static_assert(alignof(UGymMapImportControl) == 0x000008, "Wrong alignment on UGymMapImportControl");
static_assert(sizeof(UGymMapImportControl) == 0x0000C0, "Wrong size on UGymMapImportControl");

// Class GYMGAME.GymMapLobbyRules
// 0x0088 (0x01C0 - 0x0138)
class UGymMapLobbyRules final : public UGymRules
{
public:
	uint8                                         Pad_138[0x10];                                     // 0x0138(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   RoyaleDisplayName;                                 // 0x0148(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   TournamentDisplayName;                             // 0x0160(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   PlaylistDisplayName;                               // 0x0178(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UTexture2D*                             TournamentIcon;                                    // 0x0190(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             RoyaleIcon;                                        // 0x0198(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A0[0x20];                                     // 0x01A0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnMapDetailsReceived(bool bSuccess, const struct FGymMapDetailsResult& Result);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymMapLobbyRules">();
	}
	static class UGymMapLobbyRules* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymMapLobbyRules>();
	}
};
static_assert(alignof(UGymMapLobbyRules) == 0x000008, "Wrong alignment on UGymMapLobbyRules");
static_assert(sizeof(UGymMapLobbyRules) == 0x0001C0, "Wrong size on UGymMapLobbyRules");
static_assert(offsetof(UGymMapLobbyRules, RoyaleDisplayName) == 0x000148, "Member 'UGymMapLobbyRules::RoyaleDisplayName' has a wrong offset!");
static_assert(offsetof(UGymMapLobbyRules, TournamentDisplayName) == 0x000160, "Member 'UGymMapLobbyRules::TournamentDisplayName' has a wrong offset!");
static_assert(offsetof(UGymMapLobbyRules, PlaylistDisplayName) == 0x000178, "Member 'UGymMapLobbyRules::PlaylistDisplayName' has a wrong offset!");
static_assert(offsetof(UGymMapLobbyRules, TournamentIcon) == 0x000190, "Member 'UGymMapLobbyRules::TournamentIcon' has a wrong offset!");
static_assert(offsetof(UGymMapLobbyRules, RoyaleIcon) == 0x000198, "Member 'UGymMapLobbyRules::RoyaleIcon' has a wrong offset!");

// Class GYMGAME.GymMapRuleModifierControl
// 0x0010 (0x00B8 - 0x00A8)
class UGymMapRuleModifierControl final : public UGymMapMetaControl
{
public:
	TArray<struct FGymModifier>                   Modifiers;                                         // 0x00A8(0x0010)(Net, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	bool GetFloatModifier(const class FName& ModifierID, float* Value);
	bool GetIntModifier(const class FName& ModifierID, int32* Value);
	bool GetStringModifier(const class FName& ModifierID, class FString* Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymMapRuleModifierControl">();
	}
	static class UGymMapRuleModifierControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymMapRuleModifierControl>();
	}
};
static_assert(alignof(UGymMapRuleModifierControl) == 0x000008, "Wrong alignment on UGymMapRuleModifierControl");
static_assert(sizeof(UGymMapRuleModifierControl) == 0x0000B8, "Wrong size on UGymMapRuleModifierControl");
static_assert(offsetof(UGymMapRuleModifierControl, Modifiers) == 0x0000A8, "Member 'UGymMapRuleModifierControl::Modifiers' has a wrong offset!");

// Class GYMGAME.GymMapUtils
// 0x0058 (0x0080 - 0x0028)
class UGymMapUtils final : public UObject
{
public:
	uint8                                         Pad_28[0x28];                                      // 0x0028(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymGameInstance*                       Instance;                                          // 0x0050(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnFMapRemixComplete;                               // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x18];                                      // 0x0068(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DownloadAndOpenMap(const struct FGymMapVersionLocator& MapId, const bool Travel, const bool bKeepPlaylist, const class FString& SessionMode, const class FString& ExtraData);
	void DownloadAndOpenPlaylist(const class FString& PlaylistId);
	void InitializeLobbyMode(const struct FGymMapVersionLocator& Locator, const class FString& KitId);
	void LoadPackagedMap(const class FString& MapName, const bool bKeepPlaylist);
	void MapRemixComplete__DelegateSignature(bool Success, const class FString& MapId);
	void PlaylistLoaded(bool Success, const struct FGymPlaylistDetailsResult& Details);
	void RemixMap(const class FString& Map);
	void ServerTravel(const class FString& Map);

	bool IsUploadInProgress() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymMapUtils">();
	}
	static class UGymMapUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymMapUtils>();
	}
};
static_assert(alignof(UGymMapUtils) == 0x000008, "Wrong alignment on UGymMapUtils");
static_assert(sizeof(UGymMapUtils) == 0x000080, "Wrong size on UGymMapUtils");
static_assert(offsetof(UGymMapUtils, Instance) == 0x000050, "Member 'UGymMapUtils::Instance' has a wrong offset!");
static_assert(offsetof(UGymMapUtils, OnFMapRemixComplete) == 0x000058, "Member 'UGymMapUtils::OnFMapRemixComplete' has a wrong offset!");

// Class GYMGAME.GymMarkLocationAction
// 0x0010 (0x00C8 - 0x00B8)
class UGymMarkLocationAction final : public UGymMetaAction
{
public:
	uint8                                         Pad_B8[0x10];                                      // 0x00B8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymMarkLocationAction">();
	}
	static class UGymMarkLocationAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymMarkLocationAction>();
	}
};
static_assert(alignof(UGymMarkLocationAction) == 0x000008, "Wrong alignment on UGymMarkLocationAction");
static_assert(sizeof(UGymMarkLocationAction) == 0x0000C8, "Wrong size on UGymMarkLocationAction");

// Class GYMGAME.LevelMenuWidget
// 0x0000 (0x02C0 - 0x02C0)
class ULevelMenuWidget final : public UUserWidget
{
public:
	const struct FCustomLevelFileInfo AddListItem(const struct FCustomLevelFileInfo& Item);
	void FindLocalLevels();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelMenuWidget">();
	}
	static class ULevelMenuWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelMenuWidget>();
	}
};
static_assert(alignof(ULevelMenuWidget) == 0x000008, "Wrong alignment on ULevelMenuWidget");
static_assert(sizeof(ULevelMenuWidget) == 0x0002C0, "Wrong size on ULevelMenuWidget");

// Class GYMGAME.GymMetaAudioPlayer
// 0x0070 (0x0110 - 0x00A0)
class UGymMetaAudioPlayer final : public UActorComponent
{
public:
	TArray<struct FGymAudioSource>                AudioSources;                                      // 0x00A0(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B0[0x58];                                      // 0x00B0(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymAudioControl*                       Control;                                           // 0x0108(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymMetaAudioPlayer">();
	}
	static class UGymMetaAudioPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymMetaAudioPlayer>();
	}
};
static_assert(alignof(UGymMetaAudioPlayer) == 0x000008, "Wrong alignment on UGymMetaAudioPlayer");
static_assert(sizeof(UGymMetaAudioPlayer) == 0x000110, "Wrong size on UGymMetaAudioPlayer");
static_assert(offsetof(UGymMetaAudioPlayer, AudioSources) == 0x0000A0, "Member 'UGymMetaAudioPlayer::AudioSources' has a wrong offset!");
static_assert(offsetof(UGymMetaAudioPlayer, Control) == 0x000108, "Member 'UGymMetaAudioPlayer::Control' has a wrong offset!");

// Class GYMGAME.GymMetaBoulder
// 0x00B8 (0x04E0 - 0x0428)
class AGymMetaBoulder final : public AGymMetaGameplayPiece
{
public:
	uint8                                         Pad_428[0x8];                                      // 0x0428(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        SceneComp;                                         // 0x0430(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   MeshComponent;                                     // 0x0438(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   GhostMeshComponent;                                // 0x0440(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoulderLife;                                       // 0x0448(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MakePlayerRagdollMinSpeed;                         // 0x044C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                VelocityStartOfFrame;                              // 0x0450(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsPreviewingPhysics;                               // 0x0468(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_469[0x3];                                      // 0x0469(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MeshZOffset;                                       // 0x046C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_470[0x8];                                      // 0x0470(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ServerLocation;                                    // 0x0478(0x0018)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                ServerLinearVelocity;                              // 0x0490(0x0018)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               ServerRotation;                                    // 0x04A8(0x0018)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                                ServerAngularVelocity;                             // 0x04C0(0x0018)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RotationLerpSpeed;                                 // 0x04D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4DC[0x4];                                      // 0x04DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClientActivatePlayerRagdoll(class AGymCharacter* Player);
	void EndPreviewPhysics();
	void Freeze();
	void Multi_ImpactSound(class AGymCharacter* Character);
	void OnMeshComponentHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnMeshComponentOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnRep_ServerVelocity();
	void Reset();
	void StartPreviewPhysics();
	void UnFreeze(bool GhostVisible);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymMetaBoulder">();
	}
	static class AGymMetaBoulder* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymMetaBoulder>();
	}
};
static_assert(alignof(AGymMetaBoulder) == 0x000008, "Wrong alignment on AGymMetaBoulder");
static_assert(sizeof(AGymMetaBoulder) == 0x0004E0, "Wrong size on AGymMetaBoulder");
static_assert(offsetof(AGymMetaBoulder, SceneComp) == 0x000430, "Member 'AGymMetaBoulder::SceneComp' has a wrong offset!");
static_assert(offsetof(AGymMetaBoulder, MeshComponent) == 0x000438, "Member 'AGymMetaBoulder::MeshComponent' has a wrong offset!");
static_assert(offsetof(AGymMetaBoulder, GhostMeshComponent) == 0x000440, "Member 'AGymMetaBoulder::GhostMeshComponent' has a wrong offset!");
static_assert(offsetof(AGymMetaBoulder, BoulderLife) == 0x000448, "Member 'AGymMetaBoulder::BoulderLife' has a wrong offset!");
static_assert(offsetof(AGymMetaBoulder, MakePlayerRagdollMinSpeed) == 0x00044C, "Member 'AGymMetaBoulder::MakePlayerRagdollMinSpeed' has a wrong offset!");
static_assert(offsetof(AGymMetaBoulder, VelocityStartOfFrame) == 0x000450, "Member 'AGymMetaBoulder::VelocityStartOfFrame' has a wrong offset!");
static_assert(offsetof(AGymMetaBoulder, IsPreviewingPhysics) == 0x000468, "Member 'AGymMetaBoulder::IsPreviewingPhysics' has a wrong offset!");
static_assert(offsetof(AGymMetaBoulder, MeshZOffset) == 0x00046C, "Member 'AGymMetaBoulder::MeshZOffset' has a wrong offset!");
static_assert(offsetof(AGymMetaBoulder, ServerLocation) == 0x000478, "Member 'AGymMetaBoulder::ServerLocation' has a wrong offset!");
static_assert(offsetof(AGymMetaBoulder, ServerLinearVelocity) == 0x000490, "Member 'AGymMetaBoulder::ServerLinearVelocity' has a wrong offset!");
static_assert(offsetof(AGymMetaBoulder, ServerRotation) == 0x0004A8, "Member 'AGymMetaBoulder::ServerRotation' has a wrong offset!");
static_assert(offsetof(AGymMetaBoulder, ServerAngularVelocity) == 0x0004C0, "Member 'AGymMetaBoulder::ServerAngularVelocity' has a wrong offset!");
static_assert(offsetof(AGymMetaBoulder, RotationLerpSpeed) == 0x0004D8, "Member 'AGymMetaBoulder::RotationLerpSpeed' has a wrong offset!");

// Class GYMGAME.GymToolSetting
// 0x0008 (0x0030 - 0x0028)
class UGymToolSetting : public UObject
{
public:
	class FName                                   ToolId;                                            // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymToolSetting">();
	}
	static class UGymToolSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymToolSetting>();
	}
};
static_assert(alignof(UGymToolSetting) == 0x000008, "Wrong alignment on UGymToolSetting");
static_assert(sizeof(UGymToolSetting) == 0x000030, "Wrong size on UGymToolSetting");
static_assert(offsetof(UGymToolSetting, ToolId) == 0x000028, "Member 'UGymToolSetting::ToolId' has a wrong offset!");

// Class GYMGAME.GymBoundsToolSetting
// 0x0008 (0x0038 - 0x0030)
class UGymBoundsToolSetting final : public UGymToolSetting
{
public:
	int32                                         Value;                                             // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymBoundsToolSetting">();
	}
	static class UGymBoundsToolSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymBoundsToolSetting>();
	}
};
static_assert(alignof(UGymBoundsToolSetting) == 0x000008, "Wrong alignment on UGymBoundsToolSetting");
static_assert(sizeof(UGymBoundsToolSetting) == 0x000038, "Wrong size on UGymBoundsToolSetting");
static_assert(offsetof(UGymBoundsToolSetting, Value) == 0x000030, "Member 'UGymBoundsToolSetting::Value' has a wrong offset!");

// Class GYMGAME.GymMetaBoulderSpawner
// 0x0048 (0x0470 - 0x0428)
class AGymMetaBoulderSpawner final : public AGymMetaGameplayPiece
{
public:
	uint8                                         Pad_428[0x8];                                      // 0x0428(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        BoulderSpawn;                                      // 0x0430(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        SceneComp;                                         // 0x0438(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   MeshComponent;                                     // 0x0440(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnInterval;                                     // 0x0448(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BoulderLaunchForce;                                // 0x044C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AGymMetaBoulder>            BoulderClass;                                      // 0x0450(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_458[0x18];                                     // 0x0458(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Freeze();
	void Multi_OnBoulderSpawned();
	void OnShoot();
	void SpawnBoulder();
	void UnFreeze();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymMetaBoulderSpawner">();
	}
	static class AGymMetaBoulderSpawner* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymMetaBoulderSpawner>();
	}
};
static_assert(alignof(AGymMetaBoulderSpawner) == 0x000008, "Wrong alignment on AGymMetaBoulderSpawner");
static_assert(sizeof(AGymMetaBoulderSpawner) == 0x000470, "Wrong size on AGymMetaBoulderSpawner");
static_assert(offsetof(AGymMetaBoulderSpawner, BoulderSpawn) == 0x000430, "Member 'AGymMetaBoulderSpawner::BoulderSpawn' has a wrong offset!");
static_assert(offsetof(AGymMetaBoulderSpawner, SceneComp) == 0x000438, "Member 'AGymMetaBoulderSpawner::SceneComp' has a wrong offset!");
static_assert(offsetof(AGymMetaBoulderSpawner, MeshComponent) == 0x000440, "Member 'AGymMetaBoulderSpawner::MeshComponent' has a wrong offset!");
static_assert(offsetof(AGymMetaBoulderSpawner, SpawnInterval) == 0x000448, "Member 'AGymMetaBoulderSpawner::SpawnInterval' has a wrong offset!");
static_assert(offsetof(AGymMetaBoulderSpawner, BoulderLaunchForce) == 0x00044C, "Member 'AGymMetaBoulderSpawner::BoulderLaunchForce' has a wrong offset!");
static_assert(offsetof(AGymMetaBoulderSpawner, BoulderClass) == 0x000450, "Member 'AGymMetaBoulderSpawner::BoulderClass' has a wrong offset!");

// Class GYMGAME.GymMetagameUtils
// 0x0020 (0x0050 - 0x0030)
class UGymMetagameUtils final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnRewardClaimed;                                   // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void ClaimReward(const struct FGymUnclaimedReward& Reward);
	void EquipItem(const class FString& ItemId);
	const class FText GetAssetDisplayName(const class FString& AssetId);
	const class UTexture* GetAssetPreview(const class FString& AssetId);
	const TArray<class FText> GetAssetSeasonTags(const class FString& AssetId);
	const class UTexture* GetAssetThumbnail(const class FString& AssetId);
	bool IsRewardClaimed(const class FString& RewardId);
	void OnRewardClaimed__DelegateSignature(bool Success, const class FString& RewardId);
	void OnRewardClaimed_Internal(bool bSuccess, const class FString& RewardId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymMetagameUtils">();
	}
	static class UGymMetagameUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymMetagameUtils>();
	}
};
static_assert(alignof(UGymMetagameUtils) == 0x000008, "Wrong alignment on UGymMetagameUtils");
static_assert(sizeof(UGymMetagameUtils) == 0x000050, "Wrong size on UGymMetagameUtils");
static_assert(offsetof(UGymMetagameUtils, OnRewardClaimed) == 0x000040, "Member 'UGymMetagameUtils::OnRewardClaimed' has a wrong offset!");

// Class GYMGAME.GymMetaNetAPIBackend
// 0x0000 (0x0028 - 0x0028)
class UGymMetaNetAPIBackend : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymMetaNetAPIBackend">();
	}
	static class UGymMetaNetAPIBackend* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymMetaNetAPIBackend>();
	}
};
static_assert(alignof(UGymMetaNetAPIBackend) == 0x000008, "Wrong alignment on UGymMetaNetAPIBackend");
static_assert(sizeof(UGymMetaNetAPIBackend) == 0x000028, "Wrong size on UGymMetaNetAPIBackend");

// Class GYMGAME.GymMetaPSControl
// 0x0008 (0x00A8 - 0x00A0)
class UGymMetaPSControl : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymMetaPSControl">();
	}
	static class UGymMetaPSControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymMetaPSControl>();
	}
};
static_assert(alignof(UGymMetaPSControl) == 0x000008, "Wrong alignment on UGymMetaPSControl");
static_assert(sizeof(UGymMetaPSControl) == 0x0000A8, "Wrong size on UGymMetaPSControl");

// Class GYMGAME.GymMotionBlurCameraModifier
// 0x0010 (0x00C0 - 0x00B0)
class UGymMotionBlurCameraModifier final : public UGymMetaCameraModifier
{
public:
	struct FGymMotionBlurCameraModifierSettings   Settings;                                          // 0x00B0(0x0008)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	struct FGymMotionBlurCameraModifierProps      Props;                                             // 0x00B8(0x0008)(Transient, NoDestructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymMotionBlurCameraModifier">();
	}
	static class UGymMotionBlurCameraModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymMotionBlurCameraModifier>();
	}
};
static_assert(alignof(UGymMotionBlurCameraModifier) == 0x000008, "Wrong alignment on UGymMotionBlurCameraModifier");
static_assert(sizeof(UGymMotionBlurCameraModifier) == 0x0000C0, "Wrong size on UGymMotionBlurCameraModifier");
static_assert(offsetof(UGymMotionBlurCameraModifier, Settings) == 0x0000B0, "Member 'UGymMotionBlurCameraModifier::Settings' has a wrong offset!");
static_assert(offsetof(UGymMotionBlurCameraModifier, Props) == 0x0000B8, "Member 'UGymMotionBlurCameraModifier::Props' has a wrong offset!");

// Class GYMGAME.GymMovementControl
// 0x18D8 (0x1990 - 0x00B8)
class alignas(0x10) UGymMovementControl final : public UGymCharacterMetaControl
{
public:
	uint8                                         Pad_B8[0x1600];                                    // 0x00B8(0x1600)(Fixing Size After Last Property [ Dumper-7 ])
	class AGymStaticLevelAsset*                   CurrentTube;                                       // 0x16B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_16C0[0x68];                                    // 0x16C0(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          IsGrounded;                                        // 0x1728(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IsMovementLocked;                                  // 0x1729(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsManualMovementLock;                             // 0x172A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_172B[0x15];                                    // 0x172B(0x0015)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoredActorCollisions;                            // 0x1740(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1750[0x100];                                   // 0x1750(0x0100)(Fixing Size After Last Property [ Dumper-7 ])
	class UActorComponent*                        GroundTraceLastBlockingComponent;                  // 0x1850(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1858[0x138];                                   // 0x1858(0x0138)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Client_BlockLooking(class UObject* Reason);
	void Client_UnblockLooking(class UObject* Reason);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymMovementControl">();
	}
	static class UGymMovementControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymMovementControl>();
	}
};
static_assert(alignof(UGymMovementControl) == 0x000010, "Wrong alignment on UGymMovementControl");
static_assert(sizeof(UGymMovementControl) == 0x001990, "Wrong size on UGymMovementControl");
static_assert(offsetof(UGymMovementControl, CurrentTube) == 0x0016B8, "Member 'UGymMovementControl::CurrentTube' has a wrong offset!");
static_assert(offsetof(UGymMovementControl, IsGrounded) == 0x001728, "Member 'UGymMovementControl::IsGrounded' has a wrong offset!");
static_assert(offsetof(UGymMovementControl, IsMovementLocked) == 0x001729, "Member 'UGymMovementControl::IsMovementLocked' has a wrong offset!");
static_assert(offsetof(UGymMovementControl, bIsManualMovementLock) == 0x00172A, "Member 'UGymMovementControl::bIsManualMovementLock' has a wrong offset!");
static_assert(offsetof(UGymMovementControl, IgnoredActorCollisions) == 0x001740, "Member 'UGymMovementControl::IgnoredActorCollisions' has a wrong offset!");
static_assert(offsetof(UGymMovementControl, GroundTraceLastBlockingComponent) == 0x001850, "Member 'UGymMovementControl::GroundTraceLastBlockingComponent' has a wrong offset!");

// Class GYMGAME.GymMovementModeCriterion
// 0x0020 (0x0058 - 0x0038)
class UGymMovementModeCriterion final : public UGymObjectiveCriterion
{
public:
	TArray<EGymCustomMovementMode>                MovementModesToAchieve;                            // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                         TimeCondition;                                     // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C[0xC];                                       // 0x004C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymMovementModeCriterion">();
	}
	static class UGymMovementModeCriterion* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymMovementModeCriterion>();
	}
};
static_assert(alignof(UGymMovementModeCriterion) == 0x000008, "Wrong alignment on UGymMovementModeCriterion");
static_assert(sizeof(UGymMovementModeCriterion) == 0x000058, "Wrong size on UGymMovementModeCriterion");
static_assert(offsetof(UGymMovementModeCriterion, MovementModesToAchieve) == 0x000038, "Member 'UGymMovementModeCriterion::MovementModesToAchieve' has a wrong offset!");
static_assert(offsetof(UGymMovementModeCriterion, TimeCondition) == 0x000048, "Member 'UGymMovementModeCriterion::TimeCondition' has a wrong offset!");

// Class GYMGAME.GymVignetteCameraModifier
// 0x0028 (0x00D8 - 0x00B0)
class UGymVignetteCameraModifier final : public UGymMetaCameraModifier
{
public:
	struct FGymVignetteCameraModifierSettings     Settings;                                          // 0x00B0(0x001C)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CC[0xC];                                       // 0x00CC(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymVignetteCameraModifier">();
	}
	static class UGymVignetteCameraModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymVignetteCameraModifier>();
	}
};
static_assert(alignof(UGymVignetteCameraModifier) == 0x000008, "Wrong alignment on UGymVignetteCameraModifier");
static_assert(sizeof(UGymVignetteCameraModifier) == 0x0000D8, "Wrong size on UGymVignetteCameraModifier");
static_assert(offsetof(UGymVignetteCameraModifier, Settings) == 0x0000B0, "Member 'UGymVignetteCameraModifier::Settings' has a wrong offset!");

// Class GYMGAME.GymMovementModeObjective
// 0x0038 (0x00F8 - 0x00C0)
class UGymMovementModeObjective final : public UGymObjective
{
public:
	TArray<class FString>                         MovementModesToAchieve;                            // 0x00C0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         TimeToHold;                                        // 0x00D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProgressionIsTime;                                // 0x00D4(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOncePerMovementMode;                              // 0x00D5(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D6[0x22];                                      // 0x00D6(0x0022)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymMovementModeObjective">();
	}
	static class UGymMovementModeObjective* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymMovementModeObjective>();
	}
};
static_assert(alignof(UGymMovementModeObjective) == 0x000008, "Wrong alignment on UGymMovementModeObjective");
static_assert(sizeof(UGymMovementModeObjective) == 0x0000F8, "Wrong size on UGymMovementModeObjective");
static_assert(offsetof(UGymMovementModeObjective, MovementModesToAchieve) == 0x0000C0, "Member 'UGymMovementModeObjective::MovementModesToAchieve' has a wrong offset!");
static_assert(offsetof(UGymMovementModeObjective, TimeToHold) == 0x0000D0, "Member 'UGymMovementModeObjective::TimeToHold' has a wrong offset!");
static_assert(offsetof(UGymMovementModeObjective, bProgressionIsTime) == 0x0000D4, "Member 'UGymMovementModeObjective::bProgressionIsTime' has a wrong offset!");
static_assert(offsetof(UGymMovementModeObjective, bOncePerMovementMode) == 0x0000D5, "Member 'UGymMovementModeObjective::bOncePerMovementMode' has a wrong offset!");

// Class GYMGAME.GymMultiPlacer
// 0x0010 (0x0038 - 0x0028)
class UGymMultiPlacer final : public UObject
{
public:
	class AGymSplinePlacer*                       SplinePlacer;                                      // 0x0028(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymMultiPlacer">();
	}
	static class UGymMultiPlacer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymMultiPlacer>();
	}
};
static_assert(alignof(UGymMultiPlacer) == 0x000008, "Wrong alignment on UGymMultiPlacer");
static_assert(sizeof(UGymMultiPlacer) == 0x000038, "Wrong size on UGymMultiPlacer");
static_assert(offsetof(UGymMultiPlacer, SplinePlacer) == 0x000028, "Member 'UGymMultiPlacer::SplinePlacer' has a wrong offset!");

// Class GYMGAME.GymMusicPlayer
// 0x0008 (0x02A0 - 0x0298)
class AGymMusicPlayer final : public AActor
{
public:
	class UActorComponent*                        AudioComponent;                                    // 0x0298(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymMusicPlayer">();
	}
	static class AGymMusicPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymMusicPlayer>();
	}
};
static_assert(alignof(AGymMusicPlayer) == 0x000008, "Wrong alignment on AGymMusicPlayer");
static_assert(sizeof(AGymMusicPlayer) == 0x0002A0, "Wrong size on AGymMusicPlayer");
static_assert(offsetof(AGymMusicPlayer, AudioComponent) == 0x000298, "Member 'AGymMusicPlayer::AudioComponent' has a wrong offset!");

// Class GYMGAME.GymNetInterface
// 0x0050 (0x0078 - 0x0028)
class UGymNetInterface final : public UObject
{
public:
	class UGymGameInstance*                       GameInstance;                                      // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymMetaNetAPIBackend*                  Backend;                                           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_38[0x40];                                      // 0x0038(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ConnectServer(const class FString& ConnectionString);
	void CreateAndJoinServer_Playlist(const class FString& ServerName, const class FString& PlaylistId);
	void DisconnectFromServer();
	void OnServerCreated(bool Success, const class FString& ConnectString);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymNetInterface">();
	}
	static class UGymNetInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymNetInterface>();
	}
};
static_assert(alignof(UGymNetInterface) == 0x000008, "Wrong alignment on UGymNetInterface");
static_assert(sizeof(UGymNetInterface) == 0x000078, "Wrong size on UGymNetInterface");
static_assert(offsetof(UGymNetInterface, GameInstance) == 0x000028, "Member 'UGymNetInterface::GameInstance' has a wrong offset!");
static_assert(offsetof(UGymNetInterface, Backend) == 0x000030, "Member 'UGymNetInterface::Backend' has a wrong offset!");

// Class GYMGAME.GymNetworkControl
// 0x0000 (0x00B8 - 0x00B8)
class UGymNetworkControl final : public UGymCharacterMetaControl
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymNetworkControl">();
	}
	static class UGymNetworkControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymNetworkControl>();
	}
};
static_assert(alignof(UGymNetworkControl) == 0x000008, "Wrong alignment on UGymNetworkControl");
static_assert(sizeof(UGymNetworkControl) == 0x0000B8, "Wrong size on UGymNetworkControl");

// Class GYMGAME.GymNPC
// 0x00B0 (0x0730 - 0x0680)
class AGymNPC final : public ACharacter
{
public:
	uint8                                         Pad_678[0x8];                                      // 0x0678(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UGym3DWidgetComponent*                  InteractWidget;                                    // 0x0680(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGym3DWidgetComponent*                  CannotInteractWidget;                              // 0x0688(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UChildActorComponent*                   ObjectiveGiverMarker;                              // 0x0690(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymDialogueTree*                       DialogueTreeComponent;                             // 0x0698(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymCustomizationControl*               CustomizationControl;                              // 0x06A0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InteractionRange;                                  // 0x06A8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6AC[0x14];                                     // 0x06AC(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NPCId;                                             // 0x06C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowOnlyOnePlayerDialogue;                       // 0x06C8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldRotateTowardsPlayer;                        // 0x06C9(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInteracting;                                    // 0x06CA(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideWhenCompleted;                                // 0x06CB(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationSpeed;                                     // 0x06CC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6D0[0x18];                                     // 0x06D0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class AGymGameState*                          GymGameState;                                      // 0x06E8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6F0[0x24];                                     // 0x06F0(0x0024)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         ViewPitch;                                         // 0x0714(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_715[0x1B];                                     // 0x0715(0x001B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Hide3DMessage();
	void Multi_SetVisible(bool bVisible);
	void Show3DMessage(const class FText& Message, float ForTime);

	float GetViewPitch() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymNPC">();
	}
	static class AGymNPC* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymNPC>();
	}
};
static_assert(alignof(AGymNPC) == 0x000010, "Wrong alignment on AGymNPC");
static_assert(sizeof(AGymNPC) == 0x000730, "Wrong size on AGymNPC");
static_assert(offsetof(AGymNPC, InteractWidget) == 0x000680, "Member 'AGymNPC::InteractWidget' has a wrong offset!");
static_assert(offsetof(AGymNPC, CannotInteractWidget) == 0x000688, "Member 'AGymNPC::CannotInteractWidget' has a wrong offset!");
static_assert(offsetof(AGymNPC, ObjectiveGiverMarker) == 0x000690, "Member 'AGymNPC::ObjectiveGiverMarker' has a wrong offset!");
static_assert(offsetof(AGymNPC, DialogueTreeComponent) == 0x000698, "Member 'AGymNPC::DialogueTreeComponent' has a wrong offset!");
static_assert(offsetof(AGymNPC, CustomizationControl) == 0x0006A0, "Member 'AGymNPC::CustomizationControl' has a wrong offset!");
static_assert(offsetof(AGymNPC, InteractionRange) == 0x0006A8, "Member 'AGymNPC::InteractionRange' has a wrong offset!");
static_assert(offsetof(AGymNPC, NPCId) == 0x0006C0, "Member 'AGymNPC::NPCId' has a wrong offset!");
static_assert(offsetof(AGymNPC, bAllowOnlyOnePlayerDialogue) == 0x0006C8, "Member 'AGymNPC::bAllowOnlyOnePlayerDialogue' has a wrong offset!");
static_assert(offsetof(AGymNPC, bShouldRotateTowardsPlayer) == 0x0006C9, "Member 'AGymNPC::bShouldRotateTowardsPlayer' has a wrong offset!");
static_assert(offsetof(AGymNPC, bIsInteracting) == 0x0006CA, "Member 'AGymNPC::bIsInteracting' has a wrong offset!");
static_assert(offsetof(AGymNPC, bHideWhenCompleted) == 0x0006CB, "Member 'AGymNPC::bHideWhenCompleted' has a wrong offset!");
static_assert(offsetof(AGymNPC, RotationSpeed) == 0x0006CC, "Member 'AGymNPC::RotationSpeed' has a wrong offset!");
static_assert(offsetof(AGymNPC, GymGameState) == 0x0006E8, "Member 'AGymNPC::GymGameState' has a wrong offset!");
static_assert(offsetof(AGymNPC, ViewPitch) == 0x000714, "Member 'AGymNPC::ViewPitch' has a wrong offset!");

// Class GYMGAME.GymNPCAnimInstance
// 0x0000 (0x0350 - 0x0350)
class UGymNPCAnimInstance final : public UAnimInstance
{
public:
	bool                                          bSpeaking;                                         // 0x0348(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_349[0x3];                                      // 0x0349(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Emotion;                                           // 0x034C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void EndDialogue();
	void StartDialogue();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymNPCAnimInstance">();
	}
	static class UGymNPCAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymNPCAnimInstance>();
	}
};
static_assert(alignof(UGymNPCAnimInstance) == 0x000010, "Wrong alignment on UGymNPCAnimInstance");
static_assert(sizeof(UGymNPCAnimInstance) == 0x000350, "Wrong size on UGymNPCAnimInstance");
static_assert(offsetof(UGymNPCAnimInstance, bSpeaking) == 0x000348, "Member 'UGymNPCAnimInstance::bSpeaking' has a wrong offset!");
static_assert(offsetof(UGymNPCAnimInstance, Emotion) == 0x00034C, "Member 'UGymNPCAnimInstance::Emotion' has a wrong offset!");

// Class GYMGAME.GymNPCSpawnPoint
// 0x0038 (0x0460 - 0x0428)
class AGymNPCSpawnPoint final : public AGymStaticLevelAsset
{
public:
	class UDataTable*                             NPCDataTable;                                      // 0x0428(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                SpawnOffset;                                       // 0x0430(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AGymNPC>                    NPCClass;                                          // 0x0448(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   NPCId;                                             // 0x0450(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AGymNPC*                                NPCRef;                                            // 0x0458(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymNPCSpawnPoint">();
	}
	static class AGymNPCSpawnPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymNPCSpawnPoint>();
	}
};
static_assert(alignof(AGymNPCSpawnPoint) == 0x000008, "Wrong alignment on AGymNPCSpawnPoint");
static_assert(sizeof(AGymNPCSpawnPoint) == 0x000460, "Wrong size on AGymNPCSpawnPoint");
static_assert(offsetof(AGymNPCSpawnPoint, NPCDataTable) == 0x000428, "Member 'AGymNPCSpawnPoint::NPCDataTable' has a wrong offset!");
static_assert(offsetof(AGymNPCSpawnPoint, SpawnOffset) == 0x000430, "Member 'AGymNPCSpawnPoint::SpawnOffset' has a wrong offset!");
static_assert(offsetof(AGymNPCSpawnPoint, NPCClass) == 0x000448, "Member 'AGymNPCSpawnPoint::NPCClass' has a wrong offset!");
static_assert(offsetof(AGymNPCSpawnPoint, NPCId) == 0x000450, "Member 'AGymNPCSpawnPoint::NPCId' has a wrong offset!");
static_assert(offsetof(AGymNPCSpawnPoint, NPCRef) == 0x000458, "Member 'AGymNPCSpawnPoint::NPCRef' has a wrong offset!");

// Class GYMGAME.GymWallThemeProvider
// 0x0000 (0x0028 - 0x0028)
class UGymWallThemeProvider final : public UObject
{
public:
	uint8 ClampIndex(uint8 Index_0, const EGymWallDirection Direction);
	int32 GetIndex(const class FName Name_0, const EGymWallDirection Direction);
	struct FGymWallThemeVariant GetPiece(const struct FIntVector& Location, const EGymWallDirection Direction, const struct FGymShape& Shape);
	struct FGymWallThemeVariant GetPieceByIndex(uint8 Index_0, const EGymWallDirection Direction);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymWallThemeProvider">();
	}
	static class UGymWallThemeProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymWallThemeProvider>();
	}
};
static_assert(alignof(UGymWallThemeProvider) == 0x000008, "Wrong alignment on UGymWallThemeProvider");
static_assert(sizeof(UGymWallThemeProvider) == 0x000028, "Wrong size on UGymWallThemeProvider");

// Class GYMGAME.GymObbyMusicState
// 0x0030 (0x0120 - 0x00F0)
class UGymObbyMusicState final : public UGymMetaRuleMusicState
{
public:
	TArray<class AActor*>                         Goals;                                             // 0x00F0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_100[0x20];                                     // 0x0100(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymObbyMusicState">();
	}
	static class UGymObbyMusicState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymObbyMusicState>();
	}
};
static_assert(alignof(UGymObbyMusicState) == 0x000008, "Wrong alignment on UGymObbyMusicState");
static_assert(sizeof(UGymObbyMusicState) == 0x000120, "Wrong size on UGymObbyMusicState");
static_assert(offsetof(UGymObbyMusicState, Goals) == 0x0000F0, "Member 'UGymObbyMusicState::Goals' has a wrong offset!");

// Class GYMGAME.GymObjectiveControl
// 0x0050 (0x00F8 - 0x00A8)
class UGymObjectiveControl final : public UGymMetaPSControl
{
public:
	uint8                                         Pad_A8[0x18];                                      // 0x00A8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymQuest*                              ActiveQuest;                                       // 0x00C0(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGymQuest*>                      Quests;                                            // 0x00D0(0x0010)(Net, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E0[0x10];                                      // 0x00E0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class AGymOCRespawnActor*                     RespawnActor;                                      // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void AddQuest(TSubclassOf<class UGymQuest> QuestClass, bool bSetActive, class AGymNPC* QuestGiver);
	void AddTask(const class FString& TaskName);
	void BeginQuestMusic();
	void Client_AddCompletedQuest(class FName Quest);
	void Client_SetMovementFrozen(bool bFreeze);
	void DebugCompleteCareer();
	void NotifyTutorialLoad();
	void PlayObjectiveSound(const class FString& TriggerName);
	void RemoveQuest(class FName QuestID);
	void ResetCareerLevel(const class FString& LevelName);
	void ResetPrestiges();
	void ResetTask(const class FString& TaskName);
	void RestartQuest(class FName QuestID);
	void SaveCareerProgress(const class FString& CareerName, class FName TaskID);
	void SaveCareerTournament(const class FString& TournamentName, int32 Placement);
	void Server_AddCompletedQuest(class FName Quest);
	void SetQuestActive(class FName QuestID);

	class UGymQuest* GetActiveQuest() const;
	const TArray<class UGymQuest*> GetAllQuests() const;
	const TArray<class FName> GetCompletedQuests() const;
	class UGymQuest* GetQuest(class FName QuestID) const;
	EQuestState GetQuestState(class FName QuestID) const;
	bool HasQuest(class FName QuestID) const;
	bool IsQuestActive(class FName QuestID) const;
	bool IsQuestCompleted(class FName QuestID) const;
	bool IsQuestFailed(class FName QuestID) const;
	bool IsQuestInProgress(class FName QuestID) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymObjectiveControl">();
	}
	static class UGymObjectiveControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymObjectiveControl>();
	}
};
static_assert(alignof(UGymObjectiveControl) == 0x000008, "Wrong alignment on UGymObjectiveControl");
static_assert(sizeof(UGymObjectiveControl) == 0x0000F8, "Wrong size on UGymObjectiveControl");
static_assert(offsetof(UGymObjectiveControl, ActiveQuest) == 0x0000C0, "Member 'UGymObjectiveControl::ActiveQuest' has a wrong offset!");
static_assert(offsetof(UGymObjectiveControl, Quests) == 0x0000D0, "Member 'UGymObjectiveControl::Quests' has a wrong offset!");
static_assert(offsetof(UGymObjectiveControl, RespawnActor) == 0x0000F0, "Member 'UGymObjectiveControl::RespawnActor' has a wrong offset!");

// Class GYMGAME.GymVaultingEngineAnimator
// 0x00B8 (0x0160 - 0x00A8)
class UGymVaultingEngineAnimator final : public UGymMetaAnimator
{
public:
	uint8                                         DescSlot;                                          // 0x00A8(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGymVaultingAnimationParameters        AnimationParameters;                               // 0x00A9(0x0003)(Net, NoDestructor, NativeAccessSpecifierPublic)
	float                                         StartPosition;                                     // 0x00AC(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x00B0(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComboCount;                                        // 0x00B4(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentSplinePoint;                                // 0x00B8(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DidComboCountIncrease;                             // 0x00BC(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BD[0xB];                                       // 0x00BD(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymVaultingAnimatorProps              Props;                                             // 0x00C8(0x0080)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_148[0x18];                                     // 0x0148(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymVaultingEngineAnimator">();
	}
	static class UGymVaultingEngineAnimator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymVaultingEngineAnimator>();
	}
};
static_assert(alignof(UGymVaultingEngineAnimator) == 0x000008, "Wrong alignment on UGymVaultingEngineAnimator");
static_assert(sizeof(UGymVaultingEngineAnimator) == 0x000160, "Wrong size on UGymVaultingEngineAnimator");
static_assert(offsetof(UGymVaultingEngineAnimator, DescSlot) == 0x0000A8, "Member 'UGymVaultingEngineAnimator::DescSlot' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineAnimator, AnimationParameters) == 0x0000A9, "Member 'UGymVaultingEngineAnimator::AnimationParameters' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineAnimator, StartPosition) == 0x0000AC, "Member 'UGymVaultingEngineAnimator::StartPosition' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineAnimator, PlayRate) == 0x0000B0, "Member 'UGymVaultingEngineAnimator::PlayRate' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineAnimator, ComboCount) == 0x0000B4, "Member 'UGymVaultingEngineAnimator::ComboCount' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineAnimator, CurrentSplinePoint) == 0x0000B8, "Member 'UGymVaultingEngineAnimator::CurrentSplinePoint' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineAnimator, DidComboCountIncrease) == 0x0000BC, "Member 'UGymVaultingEngineAnimator::DidComboCountIncrease' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineAnimator, Props) == 0x0000C8, "Member 'UGymVaultingEngineAnimator::Props' has a wrong offset!");

// Class GYMGAME.GymObjectiveEndLocation
// 0x0010 (0x0438 - 0x0428)
class AGymObjectiveEndLocation final : public AGymStaticLevelAsset
{
public:
	class FString                                 LocationID;                                        // 0x0428(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymObjectiveEndLocation">();
	}
	static class AGymObjectiveEndLocation* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymObjectiveEndLocation>();
	}
};
static_assert(alignof(AGymObjectiveEndLocation) == 0x000008, "Wrong alignment on AGymObjectiveEndLocation");
static_assert(sizeof(AGymObjectiveEndLocation) == 0x000438, "Wrong size on AGymObjectiveEndLocation");
static_assert(offsetof(AGymObjectiveEndLocation, LocationID) == 0x000428, "Member 'AGymObjectiveEndLocation::LocationID' has a wrong offset!");

// Class GYMGAME.GymObjectiveKillzone
// 0x0018 (0x0440 - 0x0428)
class AGymObjectiveKillzone final : public AGymStaticLevelAsset
{
public:
	class FName                                   QuestID;                                           // 0x0428(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldFailQuest;                                  // 0x0430(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_431[0xF];                                      // 0x0431(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymObjectiveKillzone">();
	}
	static class AGymObjectiveKillzone* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymObjectiveKillzone>();
	}
};
static_assert(alignof(AGymObjectiveKillzone) == 0x000008, "Wrong alignment on AGymObjectiveKillzone");
static_assert(sizeof(AGymObjectiveKillzone) == 0x000440, "Wrong size on AGymObjectiveKillzone");
static_assert(offsetof(AGymObjectiveKillzone, QuestID) == 0x000428, "Member 'AGymObjectiveKillzone::QuestID' has a wrong offset!");
static_assert(offsetof(AGymObjectiveKillzone, bShouldFailQuest) == 0x000430, "Member 'AGymObjectiveKillzone::bShouldFailQuest' has a wrong offset!");

// Class GYMGAME.GymWallScrambleAnimator
// 0x0040 (0x00E8 - 0x00A8)
class UGymWallScrambleAnimator final : public UGymMetaAnimator
{
public:
	uint8                                         Pad_A8[0x18];                                      // 0x00A8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayerCurrentClimbingSpeed;                        // 0x00C0(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PlayerCurrentZEulerAngle;                          // 0x00C4(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IsGoingUp;                                         // 0x00C8(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          DidEndWithJump;                                    // 0x00C9(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CA[0x2];                                       // 0x00CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LookDirection;                                     // 0x00CC(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D0[0x18];                                      // 0x00D0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymWallScrambleAnimator">();
	}
	static class UGymWallScrambleAnimator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymWallScrambleAnimator>();
	}
};
static_assert(alignof(UGymWallScrambleAnimator) == 0x000008, "Wrong alignment on UGymWallScrambleAnimator");
static_assert(sizeof(UGymWallScrambleAnimator) == 0x0000E8, "Wrong size on UGymWallScrambleAnimator");
static_assert(offsetof(UGymWallScrambleAnimator, PlayerCurrentClimbingSpeed) == 0x0000C0, "Member 'UGymWallScrambleAnimator::PlayerCurrentClimbingSpeed' has a wrong offset!");
static_assert(offsetof(UGymWallScrambleAnimator, PlayerCurrentZEulerAngle) == 0x0000C4, "Member 'UGymWallScrambleAnimator::PlayerCurrentZEulerAngle' has a wrong offset!");
static_assert(offsetof(UGymWallScrambleAnimator, IsGoingUp) == 0x0000C8, "Member 'UGymWallScrambleAnimator::IsGoingUp' has a wrong offset!");
static_assert(offsetof(UGymWallScrambleAnimator, DidEndWithJump) == 0x0000C9, "Member 'UGymWallScrambleAnimator::DidEndWithJump' has a wrong offset!");
static_assert(offsetof(UGymWallScrambleAnimator, LookDirection) == 0x0000CC, "Member 'UGymWallScrambleAnimator::LookDirection' has a wrong offset!");

// Class GYMGAME.GymObjectiveStartLocation
// 0x0010 (0x0438 - 0x0428)
class AGymObjectiveStartLocation final : public AGymStaticLevelAsset
{
public:
	class FString                                 LocationID;                                        // 0x0428(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymObjectiveStartLocation">();
	}
	static class AGymObjectiveStartLocation* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymObjectiveStartLocation>();
	}
};
static_assert(alignof(AGymObjectiveStartLocation) == 0x000008, "Wrong alignment on AGymObjectiveStartLocation");
static_assert(sizeof(AGymObjectiveStartLocation) == 0x000438, "Wrong size on AGymObjectiveStartLocation");
static_assert(offsetof(AGymObjectiveStartLocation, LocationID) == 0x000428, "Member 'AGymObjectiveStartLocation::LocationID' has a wrong offset!");

// Class GYMGAME.GymObstacleCourseRules
// 0x0050 (0x0188 - 0x0138)
class UGymObstacleCourseRules : public UGymRules
{
public:
	uint8                                         Pad_138[0x30];                                     // 0x0138(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxFlags;                                          // 0x0168(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsUnlimitedFlags;                                 // 0x016C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16D[0x3];                                      // 0x016D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaitBeforeCloseWhenNoOneFinished;                  // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AGymOCRespawnActor>         RespawnActorClass;                                 // 0x0178(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGymOCReplicatedData*                   ObbyRepData;                                       // 0x0180(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void GoalReached(class AActor* Goal, class AGymCharacter* PlayerCharacter);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymObstacleCourseRules">();
	}
	static class UGymObstacleCourseRules* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymObstacleCourseRules>();
	}
};
static_assert(alignof(UGymObstacleCourseRules) == 0x000008, "Wrong alignment on UGymObstacleCourseRules");
static_assert(sizeof(UGymObstacleCourseRules) == 0x000188, "Wrong size on UGymObstacleCourseRules");
static_assert(offsetof(UGymObstacleCourseRules, MaxFlags) == 0x000168, "Member 'UGymObstacleCourseRules::MaxFlags' has a wrong offset!");
static_assert(offsetof(UGymObstacleCourseRules, bIsUnlimitedFlags) == 0x00016C, "Member 'UGymObstacleCourseRules::bIsUnlimitedFlags' has a wrong offset!");
static_assert(offsetof(UGymObstacleCourseRules, WaitBeforeCloseWhenNoOneFinished) == 0x000170, "Member 'UGymObstacleCourseRules::WaitBeforeCloseWhenNoOneFinished' has a wrong offset!");
static_assert(offsetof(UGymObstacleCourseRules, RespawnActorClass) == 0x000178, "Member 'UGymObstacleCourseRules::RespawnActorClass' has a wrong offset!");
static_assert(offsetof(UGymObstacleCourseRules, ObbyRepData) == 0x000180, "Member 'UGymObstacleCourseRules::ObbyRepData' has a wrong offset!");

// Class GYMGAME.GymOCReplicatedData
// 0x0008 (0x0090 - 0x0088)
class UGymOCReplicatedData final : public UGymRuleReplicatedData
{
public:
	bool                                          bIsUnlimitedFlags;                                 // 0x0088(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxFlags;                                          // 0x008C(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetMaxFlags(int32 Flags_0);
	void SetUnlimitedFlags(bool Unlimited);

	int32 GetMaxFlags() const;
	bool IsUnlimitedFlags() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymOCReplicatedData">();
	}
	static class UGymOCReplicatedData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymOCReplicatedData>();
	}
};
static_assert(alignof(UGymOCReplicatedData) == 0x000008, "Wrong alignment on UGymOCReplicatedData");
static_assert(sizeof(UGymOCReplicatedData) == 0x000090, "Wrong size on UGymOCReplicatedData");
static_assert(offsetof(UGymOCReplicatedData, bIsUnlimitedFlags) == 0x000088, "Member 'UGymOCReplicatedData::bIsUnlimitedFlags' has a wrong offset!");
static_assert(offsetof(UGymOCReplicatedData, MaxFlags) == 0x00008C, "Member 'UGymOCReplicatedData::MaxFlags' has a wrong offset!");

// Class GYMGAME.GymOCRespawnActor
// 0x0018 (0x02B0 - 0x0298)
class AGymOCRespawnActor : public AActor
{
public:
	uint8                                         Pad_298[0x10];                                     // 0x0298(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   MeshComp;                                          // 0x02A8(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymOCRespawnActor">();
	}
	static class AGymOCRespawnActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymOCRespawnActor>();
	}
};
static_assert(alignof(AGymOCRespawnActor) == 0x000008, "Wrong alignment on AGymOCRespawnActor");
static_assert(sizeof(AGymOCRespawnActor) == 0x0002B0, "Wrong size on AGymOCRespawnActor");
static_assert(offsetof(AGymOCRespawnActor, MeshComp) == 0x0002A8, "Member 'AGymOCRespawnActor::MeshComp' has a wrong offset!");

// Class GYMGAME.GymOCSaveLocationModifier
// 0x0008 (0x0440 - 0x0438)
class AGymOCSaveLocationModifier final : public AGymRuleModifier
{
public:
	bool                                          bIsUnlimited;                                      // 0x0438(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_439[0x3];                                      // 0x0439(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxCheckpointsNum;                                 // 0x043C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymOCSaveLocationModifier">();
	}
	static class AGymOCSaveLocationModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymOCSaveLocationModifier>();
	}
};
static_assert(alignof(AGymOCSaveLocationModifier) == 0x000008, "Wrong alignment on AGymOCSaveLocationModifier");
static_assert(sizeof(AGymOCSaveLocationModifier) == 0x000440, "Wrong size on AGymOCSaveLocationModifier");
static_assert(offsetof(AGymOCSaveLocationModifier, bIsUnlimited) == 0x000438, "Member 'AGymOCSaveLocationModifier::bIsUnlimited' has a wrong offset!");
static_assert(offsetof(AGymOCSaveLocationModifier, MaxCheckpointsNum) == 0x00043C, "Member 'AGymOCSaveLocationModifier::MaxCheckpointsNum' has a wrong offset!");

// Class GYMGAME.GymOffsetCameraModifier
// 0x0068 (0x0118 - 0x00B0)
class UGymOffsetCameraModifier final : public UGymMetaCameraModifier
{
public:
	struct FGymOffsetCameraModifierSettings       Settings;                                          // 0x00B0(0x0020)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	struct FGymOffsetCameraModifierProps          Props;                                             // 0x00D0(0x0048)(Transient, NoDestructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymOffsetCameraModifier">();
	}
	static class UGymOffsetCameraModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymOffsetCameraModifier>();
	}
};
static_assert(alignof(UGymOffsetCameraModifier) == 0x000008, "Wrong alignment on UGymOffsetCameraModifier");
static_assert(sizeof(UGymOffsetCameraModifier) == 0x000118, "Wrong size on UGymOffsetCameraModifier");
static_assert(offsetof(UGymOffsetCameraModifier, Settings) == 0x0000B0, "Member 'UGymOffsetCameraModifier::Settings' has a wrong offset!");
static_assert(offsetof(UGymOffsetCameraModifier, Props) == 0x0000D0, "Member 'UGymOffsetCameraModifier::Props' has a wrong offset!");

// Class GYMGAME.GymParticipantRepData
// 0x0008 (0x0030 - 0x0028)
class UGymParticipantRepData : public UObject
{
public:
	int32                                         Ranking;                                           // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x3];                                       // 0x002C(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EPlayerRuleState                              PlayerRuleState;                                   // 0x002F(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	float LastCheckpointVisitedTime();
	void SetPlayerRuleState(EPlayerRuleState RuleState);

	int32 CheckpointsVisited() const;
	EPlayerRuleState GetPlayerRuleState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymParticipantRepData">();
	}
	static class UGymParticipantRepData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymParticipantRepData>();
	}
};
static_assert(alignof(UGymParticipantRepData) == 0x000008, "Wrong alignment on UGymParticipantRepData");
static_assert(sizeof(UGymParticipantRepData) == 0x000030, "Wrong size on UGymParticipantRepData");
static_assert(offsetof(UGymParticipantRepData, Ranking) == 0x000028, "Member 'UGymParticipantRepData::Ranking' has a wrong offset!");
static_assert(offsetof(UGymParticipantRepData, PlayerRuleState) == 0x00002F, "Member 'UGymParticipantRepData::PlayerRuleState' has a wrong offset!");

// Class GYMGAME.GymParticipantRepDataBomb
// 0x0008 (0x0038 - 0x0030)
class UGymParticipantRepDataBomb final : public UGymParticipantRepData
{
public:
	bool                                          bIsTagged;                                         // 0x0030(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BombRoundEliminated;                               // 0x0034(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetIsTagged(bool IsTagged);
	void SetRoundEliminated(int32 RoundEliminated);

	bool GetIsTagged() const;
	int32 GetRoundEliminated() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymParticipantRepDataBomb">();
	}
	static class UGymParticipantRepDataBomb* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymParticipantRepDataBomb>();
	}
};
static_assert(alignof(UGymParticipantRepDataBomb) == 0x000008, "Wrong alignment on UGymParticipantRepDataBomb");
static_assert(sizeof(UGymParticipantRepDataBomb) == 0x000038, "Wrong size on UGymParticipantRepDataBomb");
static_assert(offsetof(UGymParticipantRepDataBomb, bIsTagged) == 0x000030, "Member 'UGymParticipantRepDataBomb::bIsTagged' has a wrong offset!");
static_assert(offsetof(UGymParticipantRepDataBomb, BombRoundEliminated) == 0x000034, "Member 'UGymParticipantRepDataBomb::BombRoundEliminated' has a wrong offset!");

// Class GYMGAME.GymWorldSettings
// 0x0000 (0x04B8 - 0x04B8)
class AGymWorldSettings final : public AWorldSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymWorldSettings">();
	}
	static class AGymWorldSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymWorldSettings>();
	}
};
static_assert(alignof(AGymWorldSettings) == 0x000008, "Wrong alignment on AGymWorldSettings");
static_assert(sizeof(AGymWorldSettings) == 0x0004B8, "Wrong size on AGymWorldSettings");

// Class GYMGAME.GymParticipantRepDataCircuit
// 0x0038 (0x0068 - 0x0030)
class UGymParticipantRepDataCircuit final : public UGymParticipantRepData
{
public:
	int32                                         LapsCompleted;                                     // 0x0030(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_34[0x34];                                      // 0x0034(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetLapsCompleted(int32 Laps);

	int32 GetLapsCompleted() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymParticipantRepDataCircuit">();
	}
	static class UGymParticipantRepDataCircuit* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymParticipantRepDataCircuit>();
	}
};
static_assert(alignof(UGymParticipantRepDataCircuit) == 0x000008, "Wrong alignment on UGymParticipantRepDataCircuit");
static_assert(sizeof(UGymParticipantRepDataCircuit) == 0x000068, "Wrong size on UGymParticipantRepDataCircuit");
static_assert(offsetof(UGymParticipantRepDataCircuit, LapsCompleted) == 0x000030, "Member 'UGymParticipantRepDataCircuit::LapsCompleted' has a wrong offset!");

// Class GYMGAME.GymParticipantRepDataLoot
// 0x0000 (0x0030 - 0x0030)
class UGymParticipantRepDataLoot final : public UGymParticipantRepData
{
public:
	float GetLastTimeLootCollected() const;
	int32 GetLootCollected() const;
	int32 GetLootLeft() const;
	bool HasCollectedAll() const;
	bool HasCollectingStarted() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymParticipantRepDataLoot">();
	}
	static class UGymParticipantRepDataLoot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymParticipantRepDataLoot>();
	}
};
static_assert(alignof(UGymParticipantRepDataLoot) == 0x000008, "Wrong alignment on UGymParticipantRepDataLoot");
static_assert(sizeof(UGymParticipantRepDataLoot) == 0x000030, "Wrong size on UGymParticipantRepDataLoot");

// Class GYMGAME.GymParticipantRepDataObby
// 0x0030 (0x0060 - 0x0030)
class UGymParticipantRepDataObby final : public UGymParticipantRepData
{
public:
	uint8                                         Pad_30[0x28];                                      // 0x0030(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FlagsUsed;                                         // 0x0058(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetFlagsUsed(int32 NewFlagsUsed);

	int32 GetFlagsUsed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymParticipantRepDataObby">();
	}
	static class UGymParticipantRepDataObby* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymParticipantRepDataObby>();
	}
};
static_assert(alignof(UGymParticipantRepDataObby) == 0x000008, "Wrong alignment on UGymParticipantRepDataObby");
static_assert(sizeof(UGymParticipantRepDataObby) == 0x000060, "Wrong size on UGymParticipantRepDataObby");
static_assert(offsetof(UGymParticipantRepDataObby, FlagsUsed) == 0x000058, "Member 'UGymParticipantRepDataObby::FlagsUsed' has a wrong offset!");

// Class GYMGAME.GymParticipantRepDataSprint
// 0x0028 (0x0058 - 0x0030)
class UGymParticipantRepDataSprint final : public UGymParticipantRepData
{
public:
	uint8                                         Pad_30[0x28];                                      // 0x0030(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymParticipantRepDataSprint">();
	}
	static class UGymParticipantRepDataSprint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymParticipantRepDataSprint>();
	}
};
static_assert(alignof(UGymParticipantRepDataSprint) == 0x000008, "Wrong alignment on UGymParticipantRepDataSprint");
static_assert(sizeof(UGymParticipantRepDataSprint) == 0x000058, "Wrong size on UGymParticipantRepDataSprint");

// Class GYMGAME.GymPhotoModeControl
// 0x0058 (0x0110 - 0x00B8)
class UGymPhotoModeControl final : public UGymCharacterMetaControl
{
public:
	class AGymMap*                                Map;                                               // 0x00B8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C0[0x50];                                      // 0x00C0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClientEnterPhotoMode();
	void ClientExitPhotoMode(const struct FVector& PlayerLocation, const struct FRotator& PlayerRotation, const struct FRotator& ControlRotation);
	void EnterPhotoMode(const struct FRotator& PlayerCameraRotation);
	void ExitPhotoMode();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymPhotoModeControl">();
	}
	static class UGymPhotoModeControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymPhotoModeControl>();
	}
};
static_assert(alignof(UGymPhotoModeControl) == 0x000008, "Wrong alignment on UGymPhotoModeControl");
static_assert(sizeof(UGymPhotoModeControl) == 0x000110, "Wrong size on UGymPhotoModeControl");
static_assert(offsetof(UGymPhotoModeControl, Map) == 0x0000B8, "Member 'UGymPhotoModeControl::Map' has a wrong offset!");

// Class GYMGAME.GymPhotoModeMetaComponent
// 0x0008 (0x00A8 - 0x00A0)
class UGymPhotoModeMetaComponent : public UActorComponent
{
public:
	class AGymPhotoModePawn*                      Master;                                            // 0x00A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymPhotoModeMetaComponent">();
	}
	static class UGymPhotoModeMetaComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymPhotoModeMetaComponent>();
	}
};
static_assert(alignof(UGymPhotoModeMetaComponent) == 0x000008, "Wrong alignment on UGymPhotoModeMetaComponent");
static_assert(sizeof(UGymPhotoModeMetaComponent) == 0x0000A8, "Wrong size on UGymPhotoModeMetaComponent");
static_assert(offsetof(UGymPhotoModeMetaComponent, Master) == 0x0000A0, "Member 'UGymPhotoModeMetaComponent::Master' has a wrong offset!");

// Class GYMGAME.GymPhotoModeInputControl
// 0x0020 (0x00C8 - 0x00A8)
class UGymPhotoModeInputControl final : public UGymPhotoModeMetaComponent
{
public:
	class UInputComponent*                        InputComponent;                                    // 0x00A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B0[0x18];                                      // 0x00B0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymPhotoModeInputControl">();
	}
	static class UGymPhotoModeInputControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymPhotoModeInputControl>();
	}
};
static_assert(alignof(UGymPhotoModeInputControl) == 0x000008, "Wrong alignment on UGymPhotoModeInputControl");
static_assert(sizeof(UGymPhotoModeInputControl) == 0x0000C8, "Wrong size on UGymPhotoModeInputControl");
static_assert(offsetof(UGymPhotoModeInputControl, InputComponent) == 0x0000A8, "Member 'UGymPhotoModeInputControl::InputComponent' has a wrong offset!");

// Class GYMGAME.GymPhotoModeMovementControl
// 0x0038 (0x00E0 - 0x00A8)
class UGymPhotoModeMovementControl final : public UGymPhotoModeMetaComponent
{
public:
	uint8                                         Pad_A8[0x38];                                      // 0x00A8(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymPhotoModeMovementControl">();
	}
	static class UGymPhotoModeMovementControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymPhotoModeMovementControl>();
	}
};
static_assert(alignof(UGymPhotoModeMovementControl) == 0x000008, "Wrong alignment on UGymPhotoModeMovementControl");
static_assert(sizeof(UGymPhotoModeMovementControl) == 0x0000E0, "Wrong size on UGymPhotoModeMovementControl");

// Class GYMGAME.RegionOptionFactory
// 0x0000 (0x0028 - 0x0028)
class URegionOptionFactory : public USettingOptionFactory
{
public:
	class FText RegionStringToText(const class FString& String) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RegionOptionFactory">();
	}
	static class URegionOptionFactory* GetDefaultObj()
	{
		return GetDefaultObjImpl<URegionOptionFactory>();
	}
};
static_assert(alignof(URegionOptionFactory) == 0x000008, "Wrong alignment on URegionOptionFactory");
static_assert(sizeof(URegionOptionFactory) == 0x000028, "Wrong size on URegionOptionFactory");

// Class GYMGAME.GymPhotoModePawn
// 0x0090 (0x03D8 - 0x0348)
class AGymPhotoModePawn final : public ASpectatorPawn
{
public:
	class UGymPhotoModeInputControl*              InputControl;                                      // 0x0348(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymPhotoModeMovementControl*           MovementControl;                                   // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraComponent*                       Camera;                                            // 0x0358(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpringArmComponent*                    SpringArm;                                         // 0x0360(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGymCharacter*                          OwnerCharacter;                                    // 0x0368(0x0008)(Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               PrePhotoModeControlRotation;                       // 0x0370(0x0018)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               PrePhotoModeCameraRotation;                        // 0x0388(0x0018)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class UGymPhotoModeMetaComponent*>     AllControls;                                       // 0x03A0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3B0[0x28];                                     // 0x03B0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymPhotoModePawn">();
	}
	static class AGymPhotoModePawn* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymPhotoModePawn>();
	}
};
static_assert(alignof(AGymPhotoModePawn) == 0x000008, "Wrong alignment on AGymPhotoModePawn");
static_assert(sizeof(AGymPhotoModePawn) == 0x0003D8, "Wrong size on AGymPhotoModePawn");
static_assert(offsetof(AGymPhotoModePawn, InputControl) == 0x000348, "Member 'AGymPhotoModePawn::InputControl' has a wrong offset!");
static_assert(offsetof(AGymPhotoModePawn, MovementControl) == 0x000350, "Member 'AGymPhotoModePawn::MovementControl' has a wrong offset!");
static_assert(offsetof(AGymPhotoModePawn, Camera) == 0x000358, "Member 'AGymPhotoModePawn::Camera' has a wrong offset!");
static_assert(offsetof(AGymPhotoModePawn, SpringArm) == 0x000360, "Member 'AGymPhotoModePawn::SpringArm' has a wrong offset!");
static_assert(offsetof(AGymPhotoModePawn, OwnerCharacter) == 0x000368, "Member 'AGymPhotoModePawn::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(AGymPhotoModePawn, PrePhotoModeControlRotation) == 0x000370, "Member 'AGymPhotoModePawn::PrePhotoModeControlRotation' has a wrong offset!");
static_assert(offsetof(AGymPhotoModePawn, PrePhotoModeCameraRotation) == 0x000388, "Member 'AGymPhotoModePawn::PrePhotoModeCameraRotation' has a wrong offset!");
static_assert(offsetof(AGymPhotoModePawn, AllControls) == 0x0003A0, "Member 'AGymPhotoModePawn::AllControls' has a wrong offset!");

// Class GYMGAME.GymPhysicsControl
// 0x0018 (0x00D0 - 0x00B8)
class UGymPhysicsControl final : public UGymCharacterMetaControl
{
public:
	uint8                                         Pad_B8[0x18];                                      // 0x00B8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPlayerHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnPlayerOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& Hit);
	void OnPlayerOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, int32 OtherBodyIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymPhysicsControl">();
	}
	static class UGymPhysicsControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymPhysicsControl>();
	}
};
static_assert(alignof(UGymPhysicsControl) == 0x000008, "Wrong alignment on UGymPhysicsControl");
static_assert(sizeof(UGymPhysicsControl) == 0x0000D0, "Wrong size on UGymPhysicsControl");

// Class GYMGAME.GymTournamentStarterRules
// 0x0010 (0x0148 - 0x0138)
class UGymTournamentStarterRules final : public UGymRules
{
public:
	uint8                                         Pad_138[0x10];                                     // 0x0138(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymTournamentStarterRules">();
	}
	static class UGymTournamentStarterRules* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymTournamentStarterRules>();
	}
};
static_assert(alignof(UGymTournamentStarterRules) == 0x000008, "Wrong alignment on UGymTournamentStarterRules");
static_assert(sizeof(UGymTournamentStarterRules) == 0x000148, "Wrong size on UGymTournamentStarterRules");

// Class GYMGAME.GymPhysicsObjectInterface
// 0x0000 (0x0028 - 0x0028)
class IGymPhysicsObjectInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymPhysicsObjectInterface">();
	}
	static class IGymPhysicsObjectInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IGymPhysicsObjectInterface>();
	}
};
static_assert(alignof(IGymPhysicsObjectInterface) == 0x000008, "Wrong alignment on IGymPhysicsObjectInterface");
static_assert(sizeof(IGymPhysicsObjectInterface) == 0x000028, "Wrong size on IGymPhysicsObjectInterface");

// Class GYMGAME.GymPivot
// 0x0000 (0x02A0 - 0x02A0)
class UGymPivot final : public USceneComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymPivot">();
	}
	static class UGymPivot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymPivot>();
	}
};
static_assert(alignof(UGymPivot) == 0x000010, "Wrong alignment on UGymPivot");
static_assert(sizeof(UGymPivot) == 0x0002A0, "Wrong size on UGymPivot");

// Class GYMGAME.GymPlayerCheckpointControl
// 0x0050 (0x00F8 - 0x00A8)
class UGymPlayerCheckpointControl final : public UGymMetaPSControl
{
public:
	uint8                                         Pad_A8[0x10];                                      // 0x00A8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class AActor>>          AllGoals;                                          // 0x00B8(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C8[0x28];                                      // 0x00C8(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentIndex;                                      // 0x00F0(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsStarted;                                        // 0x00F4(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Client_HideAllButFirst();
	void Client_PlayerReachedCheckpoint(class AGymCheckpointPiece* Checkpoint);
	int32 GetCheckpointNum();
	int32 GetCheckpointsVisited();
	float LastCheckpointVisitedTime();
	void Multi_ConfirmCheckpointReached(class AGymCheckpointPiece* Checkpoint);
	void Multi_ConfirmGoalReached(class AActor* Goal);
	void ResetCheckpointIndex();
	void SetStarted(bool bStarted);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymPlayerCheckpointControl">();
	}
	static class UGymPlayerCheckpointControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymPlayerCheckpointControl>();
	}
};
static_assert(alignof(UGymPlayerCheckpointControl) == 0x000008, "Wrong alignment on UGymPlayerCheckpointControl");
static_assert(sizeof(UGymPlayerCheckpointControl) == 0x0000F8, "Wrong size on UGymPlayerCheckpointControl");
static_assert(offsetof(UGymPlayerCheckpointControl, AllGoals) == 0x0000B8, "Member 'UGymPlayerCheckpointControl::AllGoals' has a wrong offset!");
static_assert(offsetof(UGymPlayerCheckpointControl, CurrentIndex) == 0x0000F0, "Member 'UGymPlayerCheckpointControl::CurrentIndex' has a wrong offset!");
static_assert(offsetof(UGymPlayerCheckpointControl, bIsStarted) == 0x0000F4, "Member 'UGymPlayerCheckpointControl::bIsStarted' has a wrong offset!");

// Class GYMGAME.GymPlayerController
// 0x0228 (0x0A80 - 0x0858)
class AGymPlayerController : public APlayerController
{
public:
	uint8                                         Pad_858[0x60];                                     // 0x0858(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	EGymRuleParticipantState                      CurrentState;                                      // 0x08B8(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8B9[0x7];                                      // 0x08B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ACameraPreflow>             CameraPreflowBP;                                   // 0x08C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8C8[0x78];                                     // 0x08C8(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LatestFinishTime;                                  // 0x0940(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_944[0x4];                                      // 0x0944(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LatestFinishTimestamp;                             // 0x0948(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        LatestMapSaveTimestamp;                            // 0x0950(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnGenericError;                                    // 0x0958(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnGenericInfo;                                     // 0x0968(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UGymGlobalWidgetControl*                GuiControl;                                        // 0x0978(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymGlobalInputControl*                 InputControl;                                      // 0x0980(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymGlobalAudioControl*                 AudioControl;                                      // 0x0988(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymGlobalTickerEventControl*           TickerEventControl;                                // 0x0990(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymGlobalActionControl*                ActionControl;                                     // 0x0998(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymGlobalMusicStateControl*            MusicStateControl;                                 // 0x09A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymGlobalChatControl*                  ChatControl;                                       // 0x09A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9B0[0x48];                                     // 0x09B0(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bShowDevAssets;                                    // 0x09F8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9F9[0x7];                                      // 0x09F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnCutsceneStateChanged;                            // 0x0A00(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         SkipTimer;                                         // 0x0A10(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPreflowOpen;                                    // 0x0A14(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A15[0x3];                                      // 0x0A15(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 GameViewTarget;                                    // 0x0A18(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EPreflowState                                 PreflowState;                                      // 0x0A20(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A21[0x7];                                      // 0x0A21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGymGlobalMetaControl*>          AllControls;                                       // 0x0A28(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	bool                                          bIsSpectating;                                     // 0x0A38(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A39[0x7];                                      // 0x0A39(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACameraPreflow*                         CameraPreflow;                                     // 0x0A40(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A48[0x8];                                      // 0x0A48(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LocationMarker;                                    // 0x0A50(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsRespawnAllowed;                                 // 0x0A58(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A59[0x7];                                      // 0x0A59(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UForceFeedbackEffect*>           LoopingForceFeedbackEffects;                       // 0x0A60(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	float                                         LoadingScreenExtendTime;                           // 0x0A70(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A74[0x4];                                      // 0x0A74(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AActor>                     LocationMarkerClass;                               // 0x0A78(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static bool EditorIsOpen();
	static bool IsDebugCareerUnlocked();

	void ClearUI();
	void Client_BeginLoadingScreen(float CloseInTime, const class FString& Message);
	void Client_EndLoadingScreen();
	void Client_FadeInOut(const float FadeInTime, const float FadeTime, const float FadeOutTime, const int32 Layer);
	void Client_KillZoneFadeInOut(const float FadeInTime, const float FadeTime, const float FadeOutTime, const int32 Layer);
	void Client_LootPickedUp(class AGymLootActor* Loot);
	void Client_SetLootVisibility(class AGymLootActor* Loot, bool bVisiblity);
	void DebugCreatePlaylist(const class FString& Type);
	void DebugForceStartRules(int32 StartIndex);
	void DebugInitializeLobby(const class FString& MapId);
	void DebugStartPlaylist(bool bIsFinal, bool bOnlyThisPlayer);
	void DebugStartRoyale(bool bIsFinal, bool bOnlyThisPlayer);
	void DebugStartTournament(bool bIsFinal, bool bOnlyThisPlayer);
	void DebugSwapStartMode(const class FString& Mode);
	void DebugUnlockAllCareer(bool bUnlock);
	void EmptyThumbnailGeneratorCache();
	void EndPreflowClient(const float CameraBlendTime);
	void ExitPhotoMode(class AGymPhotoModePawn* PhotoModePawn, class AGymCharacter* GymCharacter);
	void ForceStartRules(int32 StartIndex);
	bool GetIsInCutscene();
	EPreflowState GetPreflowState();
	bool IsLocalPlayerUsingGamepad();
	void LoadMapCompleted_Client(bool Success);
	void LoadMapCompleted_NotifyServer(bool Success);
	void LoadMapForClient(const class FString& Uri);
	void Multi_SetDevMode(bool bMode);
	void NotifyClientPlayerConnected();
	void NotifyClientPlayerDisconnected();
	void NotifyPlayerConnected(const class FString& WithName);
	void NotifyPlayerDisconnected();
	void NotifyServerPlayerReady();
	void OnCutsceneStateChanged__DelegateSignature(bool bIsInCutscene);
	void OnGenericError__DelegateSignature(const class FString& Message);
	void OnGenericInfo__DelegateSignature(const class FString& Message);
	void OnStateChanged();
	void PauseMenuMusic();
	void PlayMenuMusic();
	void PrepareNextLoadingScreen(const struct FGymLoadingScreenOptions& Options);
	void ReportGenericInfo(const class FString& Message);
	void ReportMapUploadSuccess(bool Success, const class FString& Message);
	void RequestEndMatch();
	void RequestMapUpload();
	void RequestRaceRestart();
	void Respawn();
	void RespawnDelayed();
	void Server_CancelRequestSkip();
	void Server_DebugCreatePlaylist(const class FString& Type);
	void Server_DebugInitializeLobby(const class FString& MapId);
	void Server_DebugSwapStartMode(const class FString& Mode);
	void Server_DespawnMarker();
	void Server_RequestedSkip();
	void Server_SetDevMode(bool bMode);
	void Server_SpawnMarker(const struct FVector& Location);
	void SetDevMode(bool bMode);
	void SetGameViewTarget(class AActor* ViewTarget);
	void SetGameViewTargetWithBlend(class AActor* ViewTarget, const float BlendTime, const EViewTargetBlendFunction BlendFunc, const float BlendExp, bool bLockOutgoing);
	void SetGymIdWithoutToken(const class FString& GymId);
	void SetPlayerName(const class FString& Name_0);
	void SetPlaylistTravelTime(const float Time);
	void SetupPlaylist(const class FString& Type, bool bIsFinal, bool bOnlyThisPlayer);
	void ShowPlaylistStandings(const struct FGymPlayerScoreboard& Scoreboard, EGymPlaylistType PlayListType, bool IsFinal, bool bIsValidLevel);
	void ShowStandings(const TArray<struct FGymScoreboardEntry>& Data);
	void StartPostflowClient();
	void StartPreflowClient();
	void StartPreRaceSequenceClient();
	void UpdateLevelInfo(const struct FCustomLevelFileInfo& LevelInfo);

	bool CanStartMatchInPlayMode() const;
	EGymRuleParticipantState GetCurrentRuleState() const;
	class AActor* GetGameViewTarget() const;
	class AGymCharacter* GetGymCharacter() const;
	class AGymPhotoModePawn* GetGymPhotoModePawn() const;
	class AGymSpectatorPawn* GetGymSpectatorPawn() const;
	class UGymGlobalTickerEventControl* GetTickerControl() const;
	class UGymGlobalWidgetControl* GetWidgetControl() const;
	bool IsEditorOpen() const;
	bool IsInPhotoMode() const;
	bool IsSpectating() const;
	void ParticipantFinishedClient(const struct FGymRuleParticipant& Participant) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymPlayerController">();
	}
	static class AGymPlayerController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymPlayerController>();
	}
};
static_assert(alignof(AGymPlayerController) == 0x000008, "Wrong alignment on AGymPlayerController");
static_assert(sizeof(AGymPlayerController) == 0x000A80, "Wrong size on AGymPlayerController");
static_assert(offsetof(AGymPlayerController, CurrentState) == 0x0008B8, "Member 'AGymPlayerController::CurrentState' has a wrong offset!");
static_assert(offsetof(AGymPlayerController, CameraPreflowBP) == 0x0008C0, "Member 'AGymPlayerController::CameraPreflowBP' has a wrong offset!");
static_assert(offsetof(AGymPlayerController, LatestFinishTime) == 0x000940, "Member 'AGymPlayerController::LatestFinishTime' has a wrong offset!");
static_assert(offsetof(AGymPlayerController, LatestFinishTimestamp) == 0x000948, "Member 'AGymPlayerController::LatestFinishTimestamp' has a wrong offset!");
static_assert(offsetof(AGymPlayerController, LatestMapSaveTimestamp) == 0x000950, "Member 'AGymPlayerController::LatestMapSaveTimestamp' has a wrong offset!");
static_assert(offsetof(AGymPlayerController, OnGenericError) == 0x000958, "Member 'AGymPlayerController::OnGenericError' has a wrong offset!");
static_assert(offsetof(AGymPlayerController, OnGenericInfo) == 0x000968, "Member 'AGymPlayerController::OnGenericInfo' has a wrong offset!");
static_assert(offsetof(AGymPlayerController, GuiControl) == 0x000978, "Member 'AGymPlayerController::GuiControl' has a wrong offset!");
static_assert(offsetof(AGymPlayerController, InputControl) == 0x000980, "Member 'AGymPlayerController::InputControl' has a wrong offset!");
static_assert(offsetof(AGymPlayerController, AudioControl) == 0x000988, "Member 'AGymPlayerController::AudioControl' has a wrong offset!");
static_assert(offsetof(AGymPlayerController, TickerEventControl) == 0x000990, "Member 'AGymPlayerController::TickerEventControl' has a wrong offset!");
static_assert(offsetof(AGymPlayerController, ActionControl) == 0x000998, "Member 'AGymPlayerController::ActionControl' has a wrong offset!");
static_assert(offsetof(AGymPlayerController, MusicStateControl) == 0x0009A0, "Member 'AGymPlayerController::MusicStateControl' has a wrong offset!");
static_assert(offsetof(AGymPlayerController, ChatControl) == 0x0009A8, "Member 'AGymPlayerController::ChatControl' has a wrong offset!");
static_assert(offsetof(AGymPlayerController, bShowDevAssets) == 0x0009F8, "Member 'AGymPlayerController::bShowDevAssets' has a wrong offset!");
static_assert(offsetof(AGymPlayerController, OnCutsceneStateChanged) == 0x000A00, "Member 'AGymPlayerController::OnCutsceneStateChanged' has a wrong offset!");
static_assert(offsetof(AGymPlayerController, SkipTimer) == 0x000A10, "Member 'AGymPlayerController::SkipTimer' has a wrong offset!");
static_assert(offsetof(AGymPlayerController, bIsPreflowOpen) == 0x000A14, "Member 'AGymPlayerController::bIsPreflowOpen' has a wrong offset!");
static_assert(offsetof(AGymPlayerController, GameViewTarget) == 0x000A18, "Member 'AGymPlayerController::GameViewTarget' has a wrong offset!");
static_assert(offsetof(AGymPlayerController, PreflowState) == 0x000A20, "Member 'AGymPlayerController::PreflowState' has a wrong offset!");
static_assert(offsetof(AGymPlayerController, AllControls) == 0x000A28, "Member 'AGymPlayerController::AllControls' has a wrong offset!");
static_assert(offsetof(AGymPlayerController, bIsSpectating) == 0x000A38, "Member 'AGymPlayerController::bIsSpectating' has a wrong offset!");
static_assert(offsetof(AGymPlayerController, CameraPreflow) == 0x000A40, "Member 'AGymPlayerController::CameraPreflow' has a wrong offset!");
static_assert(offsetof(AGymPlayerController, LocationMarker) == 0x000A50, "Member 'AGymPlayerController::LocationMarker' has a wrong offset!");
static_assert(offsetof(AGymPlayerController, bIsRespawnAllowed) == 0x000A58, "Member 'AGymPlayerController::bIsRespawnAllowed' has a wrong offset!");
static_assert(offsetof(AGymPlayerController, LoopingForceFeedbackEffects) == 0x000A60, "Member 'AGymPlayerController::LoopingForceFeedbackEffects' has a wrong offset!");
static_assert(offsetof(AGymPlayerController, LoadingScreenExtendTime) == 0x000A70, "Member 'AGymPlayerController::LoadingScreenExtendTime' has a wrong offset!");
static_assert(offsetof(AGymPlayerController, LocationMarkerClass) == 0x000A78, "Member 'AGymPlayerController::LocationMarkerClass' has a wrong offset!");

// Class GYMGAME.GymPlayerLootControl
// 0x0058 (0x0100 - 0x00A8)
class UGymPlayerLootControl final : public UGymMetaPSControl
{
public:
	uint8                                         Pad_A8[0x39];                                      // 0x00A8(0x0039)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsStarted;                                        // 0x00E1(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E2[0x2];                                       // 0x00E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLootCollected;                                  // 0x00E4(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E8[0x18];                                      // 0x00E8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Multi_ConfirmOtherPlayerCollected(class AGymLootActor* LootActor);
	void Multi_LootCollected(class AGymLootActor* LootActor);
	void Multi_SetStarted(bool Started);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymPlayerLootControl">();
	}
	static class UGymPlayerLootControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymPlayerLootControl>();
	}
};
static_assert(alignof(UGymPlayerLootControl) == 0x000008, "Wrong alignment on UGymPlayerLootControl");
static_assert(sizeof(UGymPlayerLootControl) == 0x000100, "Wrong size on UGymPlayerLootControl");
static_assert(offsetof(UGymPlayerLootControl, bIsStarted) == 0x0000E1, "Member 'UGymPlayerLootControl::bIsStarted' has a wrong offset!");
static_assert(offsetof(UGymPlayerLootControl, NumLootCollected) == 0x0000E4, "Member 'UGymPlayerLootControl::NumLootCollected' has a wrong offset!");

// Class GYMGAME.GymPlayerState
// 0x00B8 (0x0408 - 0x0350)
class AGymPlayerState : public APlayerState
{
public:
	class FString                                 GymPlayerName;                                     // 0x0350(0x0010)(Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bEditingAllowed;                                   // 0x0360(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_361[0x17];                                     // 0x0361(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GymId;                                             // 0x0378(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymObjectiveControl*                   ObjectiveControl;                                  // 0x0388(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymPlayerCheckpointControl*            CheckpointControl;                                 // 0x0390(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymPlayerLootControl*                  LootControl;                                       // 0x0398(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideOwner;                                     // 0x03A0(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A1[0x1];                                      // 0x03A1(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsAdmin;                                          // 0x03A2(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOwner;                                          // 0x03A3(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FinishedRank;                                      // 0x03A4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGymCharacterCustomization             RepCustomization;                                  // 0x03A8(0x0010)(Net, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnEditRightsChanged;                               // 0x03B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnVoteStartedDelegate;                             // 0x03C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnVoteEndedDelegate;                               // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnVotedChangedDelegate;                            // 0x03E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UGymParticipantRepData*                 ParticipantRepData;                                // 0x03F8(0x0008)(Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_400[0x8];                                      // 0x0400(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Client_SetFinishedRank(int32 Rank);
	void DebugSetOverrideOwner(bool bOwner);
	bool GetEditAllowed();
	void KickPlayer(const class AGymPlayerState* PlayerToKick);
	void KickPlayerReply(bool bSuccess);
	void NotifyClientVoteChanged(bool bDidVote);
	void NotifyClientVoteEnded(EVoteState VoteResult, bool bDidVote);
	void NotifyClientVoteStarted();
	void OnEditingAllowed__DelegateSignature(bool bAllowed);
	void OnHasVotedChanged__DelegateSignature(bool bDidVote);
	void OnRep_EditingAllowed();
	void OnVoteEnded__DelegateSignature(EVoteState VoteResult, bool bDidVote);
	void OnVoteStarted__DelegateSignature();
	void SendCustomization(const struct FGymCharacterCustomization& NewCustomization);
	void Server_SwapName(const class FString& Name_0);
	void SetEditAllowed(class AGymPlayerState* State, bool Value);
	void SwapName(const class FString& Name_0);

	class AGymCharacter* GetGymCharacter() const;
	class AGymPlayerController* GetGymPlayerController() const;
	class AGymSpectatorPawn* GetGymSpectatorPawn() const;
	class UTexture2D* GetPlayerAvatar() const;
	bool IsMapOwner() const;
	bool IsOwner() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymPlayerState">();
	}
	static class AGymPlayerState* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymPlayerState>();
	}
};
static_assert(alignof(AGymPlayerState) == 0x000008, "Wrong alignment on AGymPlayerState");
static_assert(sizeof(AGymPlayerState) == 0x000408, "Wrong size on AGymPlayerState");
static_assert(offsetof(AGymPlayerState, GymPlayerName) == 0x000350, "Member 'AGymPlayerState::GymPlayerName' has a wrong offset!");
static_assert(offsetof(AGymPlayerState, bEditingAllowed) == 0x000360, "Member 'AGymPlayerState::bEditingAllowed' has a wrong offset!");
static_assert(offsetof(AGymPlayerState, GymId) == 0x000378, "Member 'AGymPlayerState::GymId' has a wrong offset!");
static_assert(offsetof(AGymPlayerState, ObjectiveControl) == 0x000388, "Member 'AGymPlayerState::ObjectiveControl' has a wrong offset!");
static_assert(offsetof(AGymPlayerState, CheckpointControl) == 0x000390, "Member 'AGymPlayerState::CheckpointControl' has a wrong offset!");
static_assert(offsetof(AGymPlayerState, LootControl) == 0x000398, "Member 'AGymPlayerState::LootControl' has a wrong offset!");
static_assert(offsetof(AGymPlayerState, OverrideOwner) == 0x0003A0, "Member 'AGymPlayerState::OverrideOwner' has a wrong offset!");
static_assert(offsetof(AGymPlayerState, bIsAdmin) == 0x0003A2, "Member 'AGymPlayerState::bIsAdmin' has a wrong offset!");
static_assert(offsetof(AGymPlayerState, bIsOwner) == 0x0003A3, "Member 'AGymPlayerState::bIsOwner' has a wrong offset!");
static_assert(offsetof(AGymPlayerState, FinishedRank) == 0x0003A4, "Member 'AGymPlayerState::FinishedRank' has a wrong offset!");
static_assert(offsetof(AGymPlayerState, RepCustomization) == 0x0003A8, "Member 'AGymPlayerState::RepCustomization' has a wrong offset!");
static_assert(offsetof(AGymPlayerState, OnEditRightsChanged) == 0x0003B8, "Member 'AGymPlayerState::OnEditRightsChanged' has a wrong offset!");
static_assert(offsetof(AGymPlayerState, OnVoteStartedDelegate) == 0x0003C8, "Member 'AGymPlayerState::OnVoteStartedDelegate' has a wrong offset!");
static_assert(offsetof(AGymPlayerState, OnVoteEndedDelegate) == 0x0003D8, "Member 'AGymPlayerState::OnVoteEndedDelegate' has a wrong offset!");
static_assert(offsetof(AGymPlayerState, OnVotedChangedDelegate) == 0x0003E8, "Member 'AGymPlayerState::OnVotedChangedDelegate' has a wrong offset!");
static_assert(offsetof(AGymPlayerState, ParticipantRepData) == 0x0003F8, "Member 'AGymPlayerState::ParticipantRepData' has a wrong offset!");

// Class GYMGAME.GymPlaylist
// 0x0058 (0x0080 - 0x0028)
class UGymPlaylist final : public UObject
{
public:
	uint8                                         Pad_28[0x38];                                      // 0x0028(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlaylistName;                                      // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGymPlaylistType                              Type;                                              // 0x0070(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0xF];                                       // 0x0071(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void OrderScoreByCurrentStanding(TArray<struct FGymPlaylistScoreboardEntry>* OutScoreboard);
	static void OrderScoreByTotalScore(TArray<struct FGymPlaylistScoreboardEntry>* OutScoreboard);
	static void OrderScoreByTotalStanding(TArray<struct FGymPlaylistScoreboardEntry>* OutScoreboard);

	void LoadNextMap();

	int32 GetCurrentMapIndex() const;
	struct FGymPlaylistMapInfo GetCurrentMapInfo() const;
	int32 GetMapCount() const;
	bool IsFinalMap() const;
	bool IsLocal() const;
	bool IsStarted() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymPlaylist">();
	}
	static class UGymPlaylist* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymPlaylist>();
	}
};
static_assert(alignof(UGymPlaylist) == 0x000008, "Wrong alignment on UGymPlaylist");
static_assert(sizeof(UGymPlaylist) == 0x000080, "Wrong size on UGymPlaylist");
static_assert(offsetof(UGymPlaylist, PlaylistName) == 0x000060, "Member 'UGymPlaylist::PlaylistName' has a wrong offset!");
static_assert(offsetof(UGymPlaylist, Type) == 0x000070, "Member 'UGymPlaylist::Type' has a wrong offset!");

// Class GYMGAME.GymPlaylistReplicatedData
// 0x0000 (0x0028 - 0x0028)
class UGymPlaylistReplicatedData final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymPlaylistReplicatedData">();
	}
	static class UGymPlaylistReplicatedData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymPlaylistReplicatedData>();
	}
};
static_assert(alignof(UGymPlaylistReplicatedData) == 0x000008, "Wrong alignment on UGymPlaylistReplicatedData");
static_assert(sizeof(UGymPlaylistReplicatedData) == 0x000028, "Wrong size on UGymPlaylistReplicatedData");

// Class GYMGAME.GymVoteAction
// 0x0000 (0x00B8 - 0x00B8)
class UGymVoteAction final : public UGymMetaAction
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymVoteAction">();
	}
	static class UGymVoteAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymVoteAction>();
	}
};
static_assert(alignof(UGymVoteAction) == 0x000008, "Wrong alignment on UGymVoteAction");
static_assert(sizeof(UGymVoteAction) == 0x0000B8, "Wrong size on UGymVoteAction");

// Class GYMGAME.GymPodiumSpawnLocation
// 0x0028 (0x02C0 - 0x0298)
class AGymPodiumSpawnLocation final : public AActor
{
public:
	class UWidgetComponent*                       NameplateWidgetComponent;                          // 0x0298(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetComponent*                       RankingWidgetComponent;                            // 0x02A0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCapsuleComponent*                      CapsuleComp;                                       // 0x02A8(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpawnID;                                           // 0x02B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SpawnedActor;                                      // 0x02B8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymPodiumSpawnLocation">();
	}
	static class AGymPodiumSpawnLocation* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymPodiumSpawnLocation>();
	}
};
static_assert(alignof(AGymPodiumSpawnLocation) == 0x000008, "Wrong alignment on AGymPodiumSpawnLocation");
static_assert(sizeof(AGymPodiumSpawnLocation) == 0x0002C0, "Wrong size on AGymPodiumSpawnLocation");
static_assert(offsetof(AGymPodiumSpawnLocation, NameplateWidgetComponent) == 0x000298, "Member 'AGymPodiumSpawnLocation::NameplateWidgetComponent' has a wrong offset!");
static_assert(offsetof(AGymPodiumSpawnLocation, RankingWidgetComponent) == 0x0002A0, "Member 'AGymPodiumSpawnLocation::RankingWidgetComponent' has a wrong offset!");
static_assert(offsetof(AGymPodiumSpawnLocation, CapsuleComp) == 0x0002A8, "Member 'AGymPodiumSpawnLocation::CapsuleComp' has a wrong offset!");
static_assert(offsetof(AGymPodiumSpawnLocation, SpawnID) == 0x0002B0, "Member 'AGymPodiumSpawnLocation::SpawnID' has a wrong offset!");
static_assert(offsetof(AGymPodiumSpawnLocation, SpawnedActor) == 0x0002B8, "Member 'AGymPodiumSpawnLocation::SpawnedActor' has a wrong offset!");

// Class GYMGAME.GymRoyaleCutsceneManager
// 0x0040 (0x02D8 - 0x0298)
class AGymRoyaleCutsceneManager : public AActor
{
public:
	class UCameraComponent*                       Camera;                                            // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCutsceneBegin;                                   // 0x02A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B0[0x18];                                     // 0x02B0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class ALevelSequenceActor*                    CameraMovementSequence;                            // 0x02C8(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CutsceneTime;                                      // 0x02D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Multi_BeginCutscene();
	void Multi_EndCutscene();
	void Multi_TransitionBeginCutscene();
	void OnCutsceneBegin__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymRoyaleCutsceneManager">();
	}
	static class AGymRoyaleCutsceneManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymRoyaleCutsceneManager>();
	}
};
static_assert(alignof(AGymRoyaleCutsceneManager) == 0x000008, "Wrong alignment on AGymRoyaleCutsceneManager");
static_assert(sizeof(AGymRoyaleCutsceneManager) == 0x0002D8, "Wrong size on AGymRoyaleCutsceneManager");
static_assert(offsetof(AGymRoyaleCutsceneManager, Camera) == 0x000298, "Member 'AGymRoyaleCutsceneManager::Camera' has a wrong offset!");
static_assert(offsetof(AGymRoyaleCutsceneManager, OnCutsceneBegin) == 0x0002A0, "Member 'AGymRoyaleCutsceneManager::OnCutsceneBegin' has a wrong offset!");
static_assert(offsetof(AGymRoyaleCutsceneManager, CameraMovementSequence) == 0x0002C8, "Member 'AGymRoyaleCutsceneManager::CameraMovementSequence' has a wrong offset!");
static_assert(offsetof(AGymRoyaleCutsceneManager, CutsceneTime) == 0x0002D0, "Member 'AGymRoyaleCutsceneManager::CutsceneTime' has a wrong offset!");

// Class GYMGAME.GymPostPodiumCutscene
// 0x0008 (0x02E0 - 0x02D8)
class AGymPostPodiumCutscene final : public AGymRoyaleCutsceneManager
{
public:
	TSubclassOf<class AGymCharacter>              CharacterClass;                                    // 0x02D8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Multi_HideWidgets();
	void Multi_SpawnOwnPlayer(const TArray<struct FGymPlaylistScoreboardEntry>& Scoreboard, bool bIsFinal, bool bIsTournament, bool bIsTrueFinal);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymPostPodiumCutscene">();
	}
	static class AGymPostPodiumCutscene* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymPostPodiumCutscene>();
	}
};
static_assert(alignof(AGymPostPodiumCutscene) == 0x000008, "Wrong alignment on AGymPostPodiumCutscene");
static_assert(sizeof(AGymPostPodiumCutscene) == 0x0002E0, "Wrong size on AGymPostPodiumCutscene");
static_assert(offsetof(AGymPostPodiumCutscene, CharacterClass) == 0x0002D8, "Member 'AGymPostPodiumCutscene::CharacterClass' has a wrong offset!");

// Class GYMGAME.GymQuest
// 0x00D8 (0x0100 - 0x0028)
class UGymQuest final : public UObject
{
public:
	class FName                                   QuestID;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   QuestTitle;                                        // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   QuestDescription;                                  // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FText>                           Tips;                                              // 0x0060(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         TipsTime;                                          // 0x0070(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowTimer;                                        // 0x0074(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSaveLocationOnFinish;                             // 0x0075(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSaveLocationOnFail;                               // 0x0076(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_77[0x1];                                       // 0x0077(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   FailMessage;                                       // 0x0078(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   CompletedMessage;                                  // 0x0090(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FGymObjectiveConstructData>     ObjectiveData;                                     // 0x00A8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsTimedQuest;                                     // 0x00B8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         QuestTime;                                         // 0x00BC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTeleportOnFinish;                                 // 0x00C0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTeleportOnFail;                                   // 0x00C1(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bStartTimerManually;                               // 0x00C2(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C3[0x5];                                       // 0x00C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymObjectiveControl*                   Control;                                           // 0x00C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D0[0x2];                                       // 0x00D0(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	EQuestState                                   QuestState;                                        // 0x00D2(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D3[0xD];                                       // 0x00D3(0x000D)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGymObjective*>                  Objectives;                                        // 0x00E0(0x0010)(Net, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         QuestStartTime;                                    // 0x00F0(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F4[0xC];                                       // 0x00F4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<class UGymObjective*> GetAllObjectives();
	class UGymObjective* GetObjective(class FName ObjectiveID);

	float GetTimeLeft() const;
	bool IsCompleted() const;
	bool IsFailed() const;
	bool IsInProgress() const;
	bool IsTimedQuest() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymQuest">();
	}
	static class UGymQuest* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymQuest>();
	}
};
static_assert(alignof(UGymQuest) == 0x000008, "Wrong alignment on UGymQuest");
static_assert(sizeof(UGymQuest) == 0x000100, "Wrong size on UGymQuest");
static_assert(offsetof(UGymQuest, QuestID) == 0x000028, "Member 'UGymQuest::QuestID' has a wrong offset!");
static_assert(offsetof(UGymQuest, QuestTitle) == 0x000030, "Member 'UGymQuest::QuestTitle' has a wrong offset!");
static_assert(offsetof(UGymQuest, QuestDescription) == 0x000048, "Member 'UGymQuest::QuestDescription' has a wrong offset!");
static_assert(offsetof(UGymQuest, Tips) == 0x000060, "Member 'UGymQuest::Tips' has a wrong offset!");
static_assert(offsetof(UGymQuest, TipsTime) == 0x000070, "Member 'UGymQuest::TipsTime' has a wrong offset!");
static_assert(offsetof(UGymQuest, bShowTimer) == 0x000074, "Member 'UGymQuest::bShowTimer' has a wrong offset!");
static_assert(offsetof(UGymQuest, bSaveLocationOnFinish) == 0x000075, "Member 'UGymQuest::bSaveLocationOnFinish' has a wrong offset!");
static_assert(offsetof(UGymQuest, bSaveLocationOnFail) == 0x000076, "Member 'UGymQuest::bSaveLocationOnFail' has a wrong offset!");
static_assert(offsetof(UGymQuest, FailMessage) == 0x000078, "Member 'UGymQuest::FailMessage' has a wrong offset!");
static_assert(offsetof(UGymQuest, CompletedMessage) == 0x000090, "Member 'UGymQuest::CompletedMessage' has a wrong offset!");
static_assert(offsetof(UGymQuest, ObjectiveData) == 0x0000A8, "Member 'UGymQuest::ObjectiveData' has a wrong offset!");
static_assert(offsetof(UGymQuest, bIsTimedQuest) == 0x0000B8, "Member 'UGymQuest::bIsTimedQuest' has a wrong offset!");
static_assert(offsetof(UGymQuest, QuestTime) == 0x0000BC, "Member 'UGymQuest::QuestTime' has a wrong offset!");
static_assert(offsetof(UGymQuest, bTeleportOnFinish) == 0x0000C0, "Member 'UGymQuest::bTeleportOnFinish' has a wrong offset!");
static_assert(offsetof(UGymQuest, bTeleportOnFail) == 0x0000C1, "Member 'UGymQuest::bTeleportOnFail' has a wrong offset!");
static_assert(offsetof(UGymQuest, bStartTimerManually) == 0x0000C2, "Member 'UGymQuest::bStartTimerManually' has a wrong offset!");
static_assert(offsetof(UGymQuest, Control) == 0x0000C8, "Member 'UGymQuest::Control' has a wrong offset!");
static_assert(offsetof(UGymQuest, QuestState) == 0x0000D2, "Member 'UGymQuest::QuestState' has a wrong offset!");
static_assert(offsetof(UGymQuest, Objectives) == 0x0000E0, "Member 'UGymQuest::Objectives' has a wrong offset!");
static_assert(offsetof(UGymQuest, QuestStartTime) == 0x0000F0, "Member 'UGymQuest::QuestStartTime' has a wrong offset!");

// Class GYMGAME.GymQuestWidget
// 0x0008 (0x0340 - 0x0338)
class UGymQuestWidget : public UGymGuiCharacterMetaWidget
{
public:
	bool                                          bShowingMessage;                                   // 0x0338(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_339[0x7];                                      // 0x0339(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ShowMessage(const class FText& Message, bool bGoodMessage);

	bool IsShowingMessage() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymQuestWidget">();
	}
	static class UGymQuestWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymQuestWidget>();
	}
};
static_assert(alignof(UGymQuestWidget) == 0x000008, "Wrong alignment on UGymQuestWidget");
static_assert(sizeof(UGymQuestWidget) == 0x000340, "Wrong size on UGymQuestWidget");
static_assert(offsetof(UGymQuestWidget, bShowingMessage) == 0x000338, "Member 'UGymQuestWidget::bShowingMessage' has a wrong offset!");

// Class GYMGAME.GymRaceTimerModifier
// 0x0008 (0x0440 - 0x0438)
class AGymRaceTimerModifier final : public AGymRuleModifier
{
public:
	float                                         RaceTimerSeconds;                                  // 0x0438(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43C[0x4];                                      // 0x043C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymRaceTimerModifier">();
	}
	static class AGymRaceTimerModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymRaceTimerModifier>();
	}
};
static_assert(alignof(AGymRaceTimerModifier) == 0x000008, "Wrong alignment on AGymRaceTimerModifier");
static_assert(sizeof(AGymRaceTimerModifier) == 0x000440, "Wrong size on AGymRaceTimerModifier");
static_assert(offsetof(AGymRaceTimerModifier, RaceTimerSeconds) == 0x000438, "Member 'AGymRaceTimerModifier::RaceTimerSeconds' has a wrong offset!");

// Class GYMGAME.GymReachLocationObjective
// 0x0028 (0x00E8 - 0x00C0)
class UGymReachLocationObjective final : public UGymObjective
{
public:
	TArray<class AGymLocationObjectiveActor*>     LocationsToReach;                                  // 0x00C0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<int32>                                 LocationsReached;                                  // 0x00D0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E0[0x8];                                       // 0x00E0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymReachLocationObjective">();
	}
	static class UGymReachLocationObjective* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymReachLocationObjective>();
	}
};
static_assert(alignof(UGymReachLocationObjective) == 0x000008, "Wrong alignment on UGymReachLocationObjective");
static_assert(sizeof(UGymReachLocationObjective) == 0x0000E8, "Wrong size on UGymReachLocationObjective");
static_assert(offsetof(UGymReachLocationObjective, LocationsToReach) == 0x0000C0, "Member 'UGymReachLocationObjective::LocationsToReach' has a wrong offset!");
static_assert(offsetof(UGymReachLocationObjective, LocationsReached) == 0x0000D0, "Member 'UGymReachLocationObjective::LocationsReached' has a wrong offset!");

// Class GYMGAME.GymRespawnAction
// 0x0000 (0x00B8 - 0x00B8)
class UGymRespawnAction final : public UGymMetaAction
{
public:
	void Server_PerformAction();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymRespawnAction">();
	}
	static class UGymRespawnAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymRespawnAction>();
	}
};
static_assert(alignof(UGymRespawnAction) == 0x000008, "Wrong alignment on UGymRespawnAction");
static_assert(sizeof(UGymRespawnAction) == 0x0000B8, "Wrong size on UGymRespawnAction");

// Class GYMGAME.GymRespawnLocationInterface
// 0x0000 (0x0028 - 0x0028)
class IGymRespawnLocationInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymRespawnLocationInterface">();
	}
	static class IGymRespawnLocationInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IGymRespawnLocationInterface>();
	}
};
static_assert(alignof(IGymRespawnLocationInterface) == 0x000008, "Wrong alignment on IGymRespawnLocationInterface");
static_assert(sizeof(IGymRespawnLocationInterface) == 0x000028, "Wrong size on IGymRespawnLocationInterface");

// Class GYMGAME.GymRichTextBlockInputDecorator
// 0x0008 (0x0030 - 0x0028)
class UGymRichTextBlockInputDecorator : public URichTextBlockDecorator
{
public:
	TSubclassOf<class UGymActionInputWidget>      ActionWidgetClass;                                 // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymRichTextBlockInputDecorator">();
	}
	static class UGymRichTextBlockInputDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymRichTextBlockInputDecorator>();
	}
};
static_assert(alignof(UGymRichTextBlockInputDecorator) == 0x000008, "Wrong alignment on UGymRichTextBlockInputDecorator");
static_assert(sizeof(UGymRichTextBlockInputDecorator) == 0x000030, "Wrong size on UGymRichTextBlockInputDecorator");
static_assert(offsetof(UGymRichTextBlockInputDecorator, ActionWidgetClass) == 0x000028, "Member 'UGymRichTextBlockInputDecorator::ActionWidgetClass' has a wrong offset!");

// Class GYMGAME.GymRollingAnimator
// 0x0010 (0x00B8 - 0x00A8)
class UGymRollingAnimator final : public UGymMetaAnimator
{
public:
	uint8                                         Pad_A8[0x10];                                      // 0x00A8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymRollingAnimator">();
	}
	static class UGymRollingAnimator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymRollingAnimator>();
	}
};
static_assert(alignof(UGymRollingAnimator) == 0x000008, "Wrong alignment on UGymRollingAnimator");
static_assert(sizeof(UGymRollingAnimator) == 0x0000B8, "Wrong size on UGymRollingAnimator");

// Class GYMGAME.GymRoyaleEliminationCutscene
// 0x0080 (0x0358 - 0x02D8)
class AGymRoyaleEliminationCutscene final : public AGymRoyaleCutsceneManager
{
public:
	TSubclassOf<class AGymCharacter>              CharacterClass;                                    // 0x02D8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FString, class ULevelSequence*>    LevelSequences;                                    // 0x02E0(0x0050)(Edit, Protected, NativeAccessSpecifierProtected)
	int32                                         ShowMaxEliminated;                                 // 0x0330(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsDebug;                                          // 0x0334(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_335[0x23];                                     // 0x0335(0x0023)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Multi_DebugPlaySequence();
	void Multi_EndSequence();
	void Multi_PlaySequence(const TArray<struct FGymPlaylistScoreboardEntry>& Scoreboard);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymRoyaleEliminationCutscene">();
	}
	static class AGymRoyaleEliminationCutscene* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymRoyaleEliminationCutscene>();
	}
};
static_assert(alignof(AGymRoyaleEliminationCutscene) == 0x000008, "Wrong alignment on AGymRoyaleEliminationCutscene");
static_assert(sizeof(AGymRoyaleEliminationCutscene) == 0x000358, "Wrong size on AGymRoyaleEliminationCutscene");
static_assert(offsetof(AGymRoyaleEliminationCutscene, CharacterClass) == 0x0002D8, "Member 'AGymRoyaleEliminationCutscene::CharacterClass' has a wrong offset!");
static_assert(offsetof(AGymRoyaleEliminationCutscene, LevelSequences) == 0x0002E0, "Member 'AGymRoyaleEliminationCutscene::LevelSequences' has a wrong offset!");
static_assert(offsetof(AGymRoyaleEliminationCutscene, ShowMaxEliminated) == 0x000330, "Member 'AGymRoyaleEliminationCutscene::ShowMaxEliminated' has a wrong offset!");
static_assert(offsetof(AGymRoyaleEliminationCutscene, bIsDebug) == 0x000334, "Member 'AGymRoyaleEliminationCutscene::bIsDebug' has a wrong offset!");

// Class GYMGAME.GymRoyalePodiumCutscene
// 0x0020 (0x02F8 - 0x02D8)
class AGymRoyalePodiumCutscene final : public AGymRoyaleCutsceneManager
{
public:
	int32                                         MaxEliminatedshown;                                // 0x02D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2DC[0x4];                                      // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AGymCharacter>              CharacterClass;                                    // 0x02E0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AActor*>                         SpawnedActors;                                     // 0x02E8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	void Multi_EndPodiumState();
	void Multi_SetupPodiumWidget(const class FString& SpawnID, const struct FGymPlaylistScoreboardEntry& Score, bool bShowTournamentScore, bool bIsFinal, bool bIsTrueFinal);
	void Multi_SpawnLosers(const TArray<struct FGymPlaylistScoreboardEntry>& PlaylistScore);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymRoyalePodiumCutscene">();
	}
	static class AGymRoyalePodiumCutscene* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymRoyalePodiumCutscene>();
	}
};
static_assert(alignof(AGymRoyalePodiumCutscene) == 0x000008, "Wrong alignment on AGymRoyalePodiumCutscene");
static_assert(sizeof(AGymRoyalePodiumCutscene) == 0x0002F8, "Wrong size on AGymRoyalePodiumCutscene");
static_assert(offsetof(AGymRoyalePodiumCutscene, MaxEliminatedshown) == 0x0002D8, "Member 'AGymRoyalePodiumCutscene::MaxEliminatedshown' has a wrong offset!");
static_assert(offsetof(AGymRoyalePodiumCutscene, CharacterClass) == 0x0002E0, "Member 'AGymRoyalePodiumCutscene::CharacterClass' has a wrong offset!");
static_assert(offsetof(AGymRoyalePodiumCutscene, SpawnedActors) == 0x0002E8, "Member 'AGymRoyalePodiumCutscene::SpawnedActors' has a wrong offset!");

// Class GYMGAME.GymRuleControl
// 0x0020 (0x00D8 - 0x00B8)
class UGymRuleControl final : public UGymCharacterMetaControl
{
public:
	uint8                                         Pad_B8[0x20];                                      // 0x00B8(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddVote();
	void CancelVote();
	void Client_AddMessage(const struct FRuleAdvanceResponse& Response);
	void Client_CheckpointVisited(int32 CheckpointVisited);
	void Client_OnBombAssigned();
	void Client_OnBombNotAssigned();
	void Client_OnEliminated(const EEliminationReason EliminationReason);
	void Client_OnFinished(const bool bIsRoyale);
	void Client_OnPlayerTagged(class AGymPlayerState* OtherPlayer, float Cooldown);
	void Client_OnTaggedByPlayer(class AGymPlayerState* OtherPlayer);
	void Client_RespondResetRuleState(const struct FRuleAdvanceResponse& Response);
	void Client_RespondRuleToAdvance(const struct FRuleAdvanceResponse& Response);
	void Client_SetFlagVisibility(class AGymOCRespawnActor* Flag, bool bVisibility);
	void Client_SetLootCollected(int32 CollectedLoot, int32 LootLeft);
	void FinishVote();
	void GiveUp();
	void ProgressVote();
	void RemoveVote();
	void ResetRuleState();
	void Server_Respawn();
	void Server_SetCheckpoint();
	void StartVote();
	void ToggleAddVote();

	bool CanStartVote() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymRuleControl">();
	}
	static class UGymRuleControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymRuleControl>();
	}
};
static_assert(alignof(UGymRuleControl) == 0x000008, "Wrong alignment on UGymRuleControl");
static_assert(sizeof(UGymRuleControl) == 0x0000D8, "Wrong size on UGymRuleControl");

// Class GYMGAME.GymRuleUtils
// 0x0000 (0x0028 - 0x0028)
class UGymRuleUtils final : public UObject
{
public:
	static class FString FormatTime(const float Time);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymRuleUtils">();
	}
	static class UGymRuleUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymRuleUtils>();
	}
};
static_assert(alignof(UGymRuleUtils) == 0x000008, "Wrong alignment on UGymRuleUtils");
static_assert(sizeof(UGymRuleUtils) == 0x000028, "Wrong size on UGymRuleUtils");

// Class GYMGAME.GymSaveGameTutorial
// 0x0048 (0x0070 - 0x0028)
class UGymSaveGameTutorial final : public USaveGame
{
public:
	TArray<struct FGymCareerLevelData>            CareerLevels;                                      // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGymCareerTournamentData>       CareerTournaments;                                 // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGymLocalProgressData                  LocalProgress;                                     // 0x0048(0x0020)(NoDestructor, NativeAccessSpecifierPublic)
	int32                                         PrestigeLevel;                                     // 0x0068(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool DoesSaveExist();
	static class UGymSaveGameTutorial* GetSaveFile();

	void ClaimReward();
	void DEBUG_SetAllLocalProgressToMissingOneStep();
	void EnterNextPrestige();
	TArray<class FName> GetCompletedTaskArray(const class FString& LevelName);
	int32 GetCompletedTasks(const class FString& LevelName);
	int32 GetPlacementForTournament(const class FString& TournamentId);
	int32 GetScoreForTournament(const class FString& TournamentId);
	int32 GetTapesCollected();
	int32 GetTotalCompletedTasks();
	bool HasCompletedLevel(const class FString& LevelName, int32 MaxNum);
	bool HasCompletedTask(const class FString& LevelName, const class FString& TaskName);
	bool IsTopN(const class FString& TournamentId, int32 Placement);
	void ResetLocalProgress();
	void SaveCareerLevelVisited(const class FString& LevelName);
	void SaveCareerProgress(const class FString& LevelName, class FName CompletedTask);
	void SaveCareerTournament(const class FString& TournamentId, int32 Placement);
	void SaveFile();

	void GetCareerCompletionData(bool* bIsCompletedOut, float* PercentageOut, int32* PrestigeLevelOut) const;
	int32 GetNumberOfTimesCompleted() const;
	int32 GetRewardsClaimed() const;
	bool HasCollectedTape(const class FString& LevelName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSaveGameTutorial">();
	}
	static class UGymSaveGameTutorial* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymSaveGameTutorial>();
	}
};
static_assert(alignof(UGymSaveGameTutorial) == 0x000008, "Wrong alignment on UGymSaveGameTutorial");
static_assert(sizeof(UGymSaveGameTutorial) == 0x000070, "Wrong size on UGymSaveGameTutorial");
static_assert(offsetof(UGymSaveGameTutorial, CareerLevels) == 0x000028, "Member 'UGymSaveGameTutorial::CareerLevels' has a wrong offset!");
static_assert(offsetof(UGymSaveGameTutorial, CareerTournaments) == 0x000038, "Member 'UGymSaveGameTutorial::CareerTournaments' has a wrong offset!");
static_assert(offsetof(UGymSaveGameTutorial, LocalProgress) == 0x000048, "Member 'UGymSaveGameTutorial::LocalProgress' has a wrong offset!");
static_assert(offsetof(UGymSaveGameTutorial, PrestigeLevel) == 0x000068, "Member 'UGymSaveGameTutorial::PrestigeLevel' has a wrong offset!");

// Class GYMGAME.GymScannerControl
// 0x0028 (0x00E0 - 0x00B8)
class UGymScannerControl final : public UGymCharacterMetaControl
{
public:
	class UGymScannerPoint*                       ScannerPointDown;                                  // 0x00B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymScannerPoint*                       ScannerPointUp;                                    // 0x00C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymScannerPoint*                       ScannerPointChest;                                 // 0x00C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymScannerPoint*                       ScannerPointShoulderLeft;                          // 0x00D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymScannerPoint*                       ScannerPointShoulderRight;                         // 0x00D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymScannerControl">();
	}
	static class UGymScannerControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymScannerControl>();
	}
};
static_assert(alignof(UGymScannerControl) == 0x000008, "Wrong alignment on UGymScannerControl");
static_assert(sizeof(UGymScannerControl) == 0x0000E0, "Wrong size on UGymScannerControl");
static_assert(offsetof(UGymScannerControl, ScannerPointDown) == 0x0000B8, "Member 'UGymScannerControl::ScannerPointDown' has a wrong offset!");
static_assert(offsetof(UGymScannerControl, ScannerPointUp) == 0x0000C0, "Member 'UGymScannerControl::ScannerPointUp' has a wrong offset!");
static_assert(offsetof(UGymScannerControl, ScannerPointChest) == 0x0000C8, "Member 'UGymScannerControl::ScannerPointChest' has a wrong offset!");
static_assert(offsetof(UGymScannerControl, ScannerPointShoulderLeft) == 0x0000D0, "Member 'UGymScannerControl::ScannerPointShoulderLeft' has a wrong offset!");
static_assert(offsetof(UGymScannerControl, ScannerPointShoulderRight) == 0x0000D8, "Member 'UGymScannerControl::ScannerPointShoulderRight' has a wrong offset!");

// Class GYMGAME.GymScannerPoint
// 0x0000 (0x02A0 - 0x02A0)
class UGymScannerPoint final : public USceneComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymScannerPoint">();
	}
	static class UGymScannerPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymScannerPoint>();
	}
};
static_assert(alignof(UGymScannerPoint) == 0x000010, "Wrong alignment on UGymScannerPoint");
static_assert(sizeof(UGymScannerPoint) == 0x0002A0, "Wrong size on UGymScannerPoint");

// Class GYMGAME.GymSecretTape
// 0x0038 (0x0460 - 0x0428)
class AGymSecretTape final : public AGymStaticLevelAsset
{
public:
	uint8                                         Pad_428[0x8];                                      // 0x0428(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USphereComponent*                       SphereComp;                                        // 0x0430(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        CollectSFX;                                        // 0x0438(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      CollectVFX;                                        // 0x0440(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_448[0x18];                                     // 0x0448(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BPSetVisible(bool bVisible);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSecretTape">();
	}
	static class AGymSecretTape* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymSecretTape>();
	}
};
static_assert(alignof(AGymSecretTape) == 0x000008, "Wrong alignment on AGymSecretTape");
static_assert(sizeof(AGymSecretTape) == 0x000460, "Wrong size on AGymSecretTape");
static_assert(offsetof(AGymSecretTape, SphereComp) == 0x000430, "Member 'AGymSecretTape::SphereComp' has a wrong offset!");
static_assert(offsetof(AGymSecretTape, CollectSFX) == 0x000438, "Member 'AGymSecretTape::CollectSFX' has a wrong offset!");
static_assert(offsetof(AGymSecretTape, CollectVFX) == 0x000440, "Member 'AGymSecretTape::CollectVFX' has a wrong offset!");

// Class GYMGAME.GymServerAnalytics
// 0x0050 (0x0078 - 0x0028)
class UGymServerAnalytics final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SessionId;                                         // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 MapId;                                             // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 MapName;                                           // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 Version;                                           // 0x0068(0x0010)(BlueprintVisible, ZeroConstructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void StartSession();

	void RaceStart(const class FString& GameMode, const int32 _Participants) const;
	void SessionEnd() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymServerAnalytics">();
	}
	static class UGymServerAnalytics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymServerAnalytics>();
	}
};
static_assert(alignof(UGymServerAnalytics) == 0x000008, "Wrong alignment on UGymServerAnalytics");
static_assert(sizeof(UGymServerAnalytics) == 0x000078, "Wrong size on UGymServerAnalytics");
static_assert(offsetof(UGymServerAnalytics, SessionId) == 0x000038, "Member 'UGymServerAnalytics::SessionId' has a wrong offset!");
static_assert(offsetof(UGymServerAnalytics, MapId) == 0x000048, "Member 'UGymServerAnalytics::MapId' has a wrong offset!");
static_assert(offsetof(UGymServerAnalytics, MapName) == 0x000058, "Member 'UGymServerAnalytics::MapName' has a wrong offset!");
static_assert(offsetof(UGymServerAnalytics, Version) == 0x000068, "Member 'UGymServerAnalytics::Version' has a wrong offset!");

// Class GYMGAME.GymServerHeartbeat
// 0x0030 (0x0058 - 0x0028)
class UGymServerHeartbeat final : public UObject
{
public:
	uint8                                         Pad_28[0x30];                                      // 0x0028(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Start(const class FString& Address, float Interval, bool Hub, const class FString& Key);
	void Stop();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymServerHeartbeat">();
	}
	static class UGymServerHeartbeat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymServerHeartbeat>();
	}
};
static_assert(alignof(UGymServerHeartbeat) == 0x000008, "Wrong alignment on UGymServerHeartbeat");
static_assert(sizeof(UGymServerHeartbeat) == 0x000058, "Wrong size on UGymServerHeartbeat");

// Class GYMGAME.GymSessionUtils
// 0x0200 (0x0230 - 0x0030)
class UGymSessionUtils final : public UGameInstanceSubsystem
{
public:
	FMulticastInlineDelegateProperty_             OnCreateSessionCompleteEvent;                      // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnStartSessionCompleteEvent;                       // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFindSessionsCompleteEvent;                       // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnJoinGameSessionCompleteEvent;                    // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnEndSessionCompleteEvent;                         // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCancelFindSessionCompleteEvent;                  // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bSessionSearchGoing;                               // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsQuickplay;                                      // 0x0091(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x19E];                                     // 0x0092(0x019E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddPlayer();
	void CancelFindSession();
	void ConsumePendingInvite();
	void CreateSession(int32 NumPublicConnections, bool IsLANMatch, bool bIsFeaturedPlaylist, bool bVisibility, const class FString& MapName, const class FString& SessionMode);
	void EndSession();
	void FindSessionExec();
	void FindSessions(int32 MaxSearchResults, bool IsLANQuery, const struct FGymSessionSearchFilters& Filters);
	class FString GetSessionKey();
	bool GetSessionMode(class FString* SessionMode);
	bool GetSessionOwnerId(class FString* OwnerId);
	bool GetSessionVisibility();
	bool GetUseSessionKey();
	bool HasPendingInvite();
	void InvokeFriendUI();
	bool IsPlayMode();
	bool IsSandboxMode();
	void JoinGameSession(const struct FGymSessionSearchResult& SessionResult);
	void RemovePlayer();
	void StartSession();
	bool TryTravelToCurrentSession();
	void UpdateSessionMapName(const class FString& MapName);
	void UpdateUseSessionKey(bool bUseKey);
	void UpdateVisibility(bool bVisibility);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSessionUtils">();
	}
	static class UGymSessionUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymSessionUtils>();
	}
};
static_assert(alignof(UGymSessionUtils) == 0x000008, "Wrong alignment on UGymSessionUtils");
static_assert(sizeof(UGymSessionUtils) == 0x000230, "Wrong size on UGymSessionUtils");
static_assert(offsetof(UGymSessionUtils, OnCreateSessionCompleteEvent) == 0x000030, "Member 'UGymSessionUtils::OnCreateSessionCompleteEvent' has a wrong offset!");
static_assert(offsetof(UGymSessionUtils, OnStartSessionCompleteEvent) == 0x000040, "Member 'UGymSessionUtils::OnStartSessionCompleteEvent' has a wrong offset!");
static_assert(offsetof(UGymSessionUtils, OnFindSessionsCompleteEvent) == 0x000050, "Member 'UGymSessionUtils::OnFindSessionsCompleteEvent' has a wrong offset!");
static_assert(offsetof(UGymSessionUtils, OnJoinGameSessionCompleteEvent) == 0x000060, "Member 'UGymSessionUtils::OnJoinGameSessionCompleteEvent' has a wrong offset!");
static_assert(offsetof(UGymSessionUtils, OnEndSessionCompleteEvent) == 0x000070, "Member 'UGymSessionUtils::OnEndSessionCompleteEvent' has a wrong offset!");
static_assert(offsetof(UGymSessionUtils, OnCancelFindSessionCompleteEvent) == 0x000080, "Member 'UGymSessionUtils::OnCancelFindSessionCompleteEvent' has a wrong offset!");
static_assert(offsetof(UGymSessionUtils, bSessionSearchGoing) == 0x000090, "Member 'UGymSessionUtils::bSessionSearchGoing' has a wrong offset!");
static_assert(offsetof(UGymSessionUtils, bIsQuickplay) == 0x000091, "Member 'UGymSessionUtils::bIsQuickplay' has a wrong offset!");

// Class GYMGAME.GymSettingsManager
// 0x0008 (0x0030 - 0x0028)
class UGymSettingsManager final : public UObject
{
public:
	class UGymGameInstance*                       Master;                                            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static float GetCrowdDensity();
	static bool GetGamepadForceFeedback();
	static float GetGamepadX();
	static float GetGamepadY();
	static bool GetInvertedX();
	static bool GetInvertedY();
	static float GetMouseX();
	static float GetMouseY();
	static bool GetPlayerPerspective();
	static bool GetShowCrosshair();
	static bool GetShowSupermoveIcons();
	static bool GetShowSupermoveMeter();
	static float GetSoftwareCursorScale();
	static bool GetTextChatEnabled();
	static bool GetVolumetric();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSettingsManager">();
	}
	static class UGymSettingsManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymSettingsManager>();
	}
};
static_assert(alignof(UGymSettingsManager) == 0x000008, "Wrong alignment on UGymSettingsManager");
static_assert(sizeof(UGymSettingsManager) == 0x000030, "Wrong size on UGymSettingsManager");
static_assert(offsetof(UGymSettingsManager, Master) == 0x000028, "Member 'UGymSettingsManager::Master' has a wrong offset!");

// Class GYMGAME.GymSidewaysWRAnimator
// 0x0038 (0x00E0 - 0x00A8)
class UGymSidewaysWRAnimator final : public UGymMetaAnimator
{
public:
	uint8                                         Pad_A8[0x28];                                      // 0x00A8(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	EWallRunMode                                  WallRunModeReplicated;                             // 0x00D0(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WallRunSidewaysWasJump;                            // 0x00D4(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WallRunSidewaysOrientationReplicated;              // 0x00D8(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSidewaysWRAnimator">();
	}
	static class UGymSidewaysWRAnimator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymSidewaysWRAnimator>();
	}
};
static_assert(alignof(UGymSidewaysWRAnimator) == 0x000008, "Wrong alignment on UGymSidewaysWRAnimator");
static_assert(sizeof(UGymSidewaysWRAnimator) == 0x0000E0, "Wrong size on UGymSidewaysWRAnimator");
static_assert(offsetof(UGymSidewaysWRAnimator, WallRunModeReplicated) == 0x0000D0, "Member 'UGymSidewaysWRAnimator::WallRunModeReplicated' has a wrong offset!");
static_assert(offsetof(UGymSidewaysWRAnimator, WallRunSidewaysWasJump) == 0x0000D4, "Member 'UGymSidewaysWRAnimator::WallRunSidewaysWasJump' has a wrong offset!");
static_assert(offsetof(UGymSidewaysWRAnimator, WallRunSidewaysOrientationReplicated) == 0x0000D8, "Member 'UGymSidewaysWRAnimator::WallRunSidewaysOrientationReplicated' has a wrong offset!");

// Class GYMGAME.GymSkyboxGenerator
// 0x0070 (0x0308 - 0x0298)
class AGymSkyboxGenerator final : public AActor
{
public:
	class AGymWallSystem*                         WallSystem;                                        // 0x0298(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FGymSkyboxSlot>                 GridArray;                                         // 0x02A0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TSubclassOf<class AGymSkyboxPiece>            EmptyPieceInside;                                  // 0x02B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AGymSkyboxPiece>            EmptyPieceOutside;                                 // 0x02B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlotSize;                                          // 0x02C0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FIntVector2                            MaxOutsidePieces;                                  // 0x02C4(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2CC[0x4];                                      // 0x02CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGymSkyboxPieceType>            PossiblePieceTypes;                                // 0x02D0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_2E0[0x28];                                     // 0x02E0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSkyboxGenerator">();
	}
	static class AGymSkyboxGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymSkyboxGenerator>();
	}
};
static_assert(alignof(AGymSkyboxGenerator) == 0x000008, "Wrong alignment on AGymSkyboxGenerator");
static_assert(sizeof(AGymSkyboxGenerator) == 0x000308, "Wrong size on AGymSkyboxGenerator");
static_assert(offsetof(AGymSkyboxGenerator, WallSystem) == 0x000298, "Member 'AGymSkyboxGenerator::WallSystem' has a wrong offset!");
static_assert(offsetof(AGymSkyboxGenerator, GridArray) == 0x0002A0, "Member 'AGymSkyboxGenerator::GridArray' has a wrong offset!");
static_assert(offsetof(AGymSkyboxGenerator, EmptyPieceInside) == 0x0002B0, "Member 'AGymSkyboxGenerator::EmptyPieceInside' has a wrong offset!");
static_assert(offsetof(AGymSkyboxGenerator, EmptyPieceOutside) == 0x0002B8, "Member 'AGymSkyboxGenerator::EmptyPieceOutside' has a wrong offset!");
static_assert(offsetof(AGymSkyboxGenerator, SlotSize) == 0x0002C0, "Member 'AGymSkyboxGenerator::SlotSize' has a wrong offset!");
static_assert(offsetof(AGymSkyboxGenerator, MaxOutsidePieces) == 0x0002C4, "Member 'AGymSkyboxGenerator::MaxOutsidePieces' has a wrong offset!");
static_assert(offsetof(AGymSkyboxGenerator, PossiblePieceTypes) == 0x0002D0, "Member 'AGymSkyboxGenerator::PossiblePieceTypes' has a wrong offset!");

// Class GYMGAME.GymSkyboxPiece
// 0x0010 (0x02A8 - 0x0298)
class AGymSkyboxPiece final : public AActor
{
public:
	struct FIntVector2                            Coord;                                             // 0x0298(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Rotation;                                          // 0x02A0(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRandomRotation;                                   // 0x02A4(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A5[0x3];                                      // 0x02A5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSkyboxPiece">();
	}
	static class AGymSkyboxPiece* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymSkyboxPiece>();
	}
};
static_assert(alignof(AGymSkyboxPiece) == 0x000008, "Wrong alignment on AGymSkyboxPiece");
static_assert(sizeof(AGymSkyboxPiece) == 0x0002A8, "Wrong size on AGymSkyboxPiece");
static_assert(offsetof(AGymSkyboxPiece, Coord) == 0x000298, "Member 'AGymSkyboxPiece::Coord' has a wrong offset!");
static_assert(offsetof(AGymSkyboxPiece, Rotation) == 0x0002A0, "Member 'AGymSkyboxPiece::Rotation' has a wrong offset!");
static_assert(offsetof(AGymSkyboxPiece, bRandomRotation) == 0x0002A4, "Member 'AGymSkyboxPiece::bRandomRotation' has a wrong offset!");

// Class GYMGAME.GymSlidingAnimator
// 0x0010 (0x00B8 - 0x00A8)
class UGymSlidingAnimator final : public UGymMetaAnimator
{
public:
	struct FGymSlidingAnimatorProps               Props;                                             // 0x00A8(0x0003)(NoDestructor, NativeAccessSpecifierPrivate)
	bool                                          SlidingReplicated;                                 // 0x00AB(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_AC[0xC];                                       // 0x00AC(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSlidingAnimator">();
	}
	static class UGymSlidingAnimator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymSlidingAnimator>();
	}
};
static_assert(alignof(UGymSlidingAnimator) == 0x000008, "Wrong alignment on UGymSlidingAnimator");
static_assert(sizeof(UGymSlidingAnimator) == 0x0000B8, "Wrong size on UGymSlidingAnimator");
static_assert(offsetof(UGymSlidingAnimator, Props) == 0x0000A8, "Member 'UGymSlidingAnimator::Props' has a wrong offset!");
static_assert(offsetof(UGymSlidingAnimator, SlidingReplicated) == 0x0000AB, "Member 'UGymSlidingAnimator::SlidingReplicated' has a wrong offset!");

// Class GYMGAME.GymSlowZoneComponent
// 0x0000 (0x0630 - 0x0630)
class UGymSlowZoneComponent final : public UStaticMeshComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSlowZoneComponent">();
	}
	static class UGymSlowZoneComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymSlowZoneComponent>();
	}
};
static_assert(alignof(UGymSlowZoneComponent) == 0x000010, "Wrong alignment on UGymSlowZoneComponent");
static_assert(sizeof(UGymSlowZoneComponent) == 0x000630, "Wrong size on UGymSlowZoneComponent");

// Class GYMGAME.GymSnappingPoint
// 0x0010 (0x02B0 - 0x02A0)
class UGymSnappingPoint final : public USceneComponent
{
public:
	EFSnapDirection                               SnapDirection;                                     // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A1[0xF];                                      // 0x02A1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSnappingPoint">();
	}
	static class UGymSnappingPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymSnappingPoint>();
	}
};
static_assert(alignof(UGymSnappingPoint) == 0x000010, "Wrong alignment on UGymSnappingPoint");
static_assert(sizeof(UGymSnappingPoint) == 0x0002B0, "Wrong size on UGymSnappingPoint");
static_assert(offsetof(UGymSnappingPoint, SnapDirection) == 0x0002A0, "Member 'UGymSnappingPoint::SnapDirection' has a wrong offset!");

// Class GYMGAME.GymSpectatorMetaControl
// 0x0008 (0x00A8 - 0x00A0)
class UGymSpectatorMetaControl : public UActorComponent
{
public:
	class AGymSpectatorPawn*                      Master;                                            // 0x00A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSpectatorMetaControl">();
	}
	static class UGymSpectatorMetaControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymSpectatorMetaControl>();
	}
};
static_assert(alignof(UGymSpectatorMetaControl) == 0x000008, "Wrong alignment on UGymSpectatorMetaControl");
static_assert(sizeof(UGymSpectatorMetaControl) == 0x0000A8, "Wrong size on UGymSpectatorMetaControl");
static_assert(offsetof(UGymSpectatorMetaControl, Master) == 0x0000A0, "Member 'UGymSpectatorMetaControl::Master' has a wrong offset!");

// Class GYMGAME.GymSpectatorCameraControl
// 0x0020 (0x00C8 - 0x00A8)
class UGymSpectatorCameraControl final : public UGymSpectatorMetaControl
{
public:
	class UGymSpectatorSpringArmModifier*         SpringArmModifier;                                 // 0x00A8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0x8];                                       // 0x00B0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGymSpectatorMetaCameraModifier*> AllCameraModifiers;                                // 0x00B8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSpectatorCameraControl">();
	}
	static class UGymSpectatorCameraControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymSpectatorCameraControl>();
	}
};
static_assert(alignof(UGymSpectatorCameraControl) == 0x000008, "Wrong alignment on UGymSpectatorCameraControl");
static_assert(sizeof(UGymSpectatorCameraControl) == 0x0000C8, "Wrong size on UGymSpectatorCameraControl");
static_assert(offsetof(UGymSpectatorCameraControl, SpringArmModifier) == 0x0000A8, "Member 'UGymSpectatorCameraControl::SpringArmModifier' has a wrong offset!");
static_assert(offsetof(UGymSpectatorCameraControl, AllCameraModifiers) == 0x0000B8, "Member 'UGymSpectatorCameraControl::AllCameraModifiers' has a wrong offset!");

// Class GYMGAME.GymSpectatorControl
// 0x0008 (0x00C0 - 0x00B8)
class UGymSpectatorControl final : public UGymCharacterMetaControl
{
public:
	bool                                          Spectating;                                        // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void TryEnterSpectatorMode();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSpectatorControl">();
	}
	static class UGymSpectatorControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymSpectatorControl>();
	}
};
static_assert(alignof(UGymSpectatorControl) == 0x000008, "Wrong alignment on UGymSpectatorControl");
static_assert(sizeof(UGymSpectatorControl) == 0x0000C0, "Wrong size on UGymSpectatorControl");
static_assert(offsetof(UGymSpectatorControl, Spectating) == 0x0000B8, "Member 'UGymSpectatorControl::Spectating' has a wrong offset!");

// Class GYMGAME.GymSpectatorGuiControl
// 0x0060 (0x0108 - 0x00A8)
class UGymSpectatorGuiControl final : public UGymSpectatorMetaControl
{
public:
	class UGymSpectatorGuiMainWidget*             MainWidget;                                        // 0x00A8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGymSpectatorGuiMasterRuleWidget*       MasterRuleWidget;                                  // 0x00B0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UGymSpectatorGuiMetaWidget*>     AllRegisteredGymGUIWidgets;                        // 0x00B8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C8[0x20];                                      // 0x00C8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGymSpectatorGuiMetaWidget*>     RootWidgets;                                       // 0x00E8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UGymSpectatorMetaControl*>       ClientsControllers;                                // 0x00F8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	bool GetHideAllWidgets() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSpectatorGuiControl">();
	}
	static class UGymSpectatorGuiControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymSpectatorGuiControl>();
	}
};
static_assert(alignof(UGymSpectatorGuiControl) == 0x000008, "Wrong alignment on UGymSpectatorGuiControl");
static_assert(sizeof(UGymSpectatorGuiControl) == 0x000108, "Wrong size on UGymSpectatorGuiControl");
static_assert(offsetof(UGymSpectatorGuiControl, MainWidget) == 0x0000A8, "Member 'UGymSpectatorGuiControl::MainWidget' has a wrong offset!");
static_assert(offsetof(UGymSpectatorGuiControl, MasterRuleWidget) == 0x0000B0, "Member 'UGymSpectatorGuiControl::MasterRuleWidget' has a wrong offset!");
static_assert(offsetof(UGymSpectatorGuiControl, AllRegisteredGymGUIWidgets) == 0x0000B8, "Member 'UGymSpectatorGuiControl::AllRegisteredGymGUIWidgets' has a wrong offset!");
static_assert(offsetof(UGymSpectatorGuiControl, RootWidgets) == 0x0000E8, "Member 'UGymSpectatorGuiControl::RootWidgets' has a wrong offset!");
static_assert(offsetof(UGymSpectatorGuiControl, ClientsControllers) == 0x0000F8, "Member 'UGymSpectatorGuiControl::ClientsControllers' has a wrong offset!");

// Class GYMGAME.GymSpectatorGuiMainWidget
// 0x0000 (0x0338 - 0x0338)
class UGymSpectatorGuiMainWidget : public UGymSpectatorGuiMetaWidget
{
public:
	void SetReason(ESpectateReason ParticipantState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSpectatorGuiMainWidget">();
	}
	static class UGymSpectatorGuiMainWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymSpectatorGuiMainWidget>();
	}
};
static_assert(alignof(UGymSpectatorGuiMainWidget) == 0x000008, "Wrong alignment on UGymSpectatorGuiMainWidget");
static_assert(sizeof(UGymSpectatorGuiMainWidget) == 0x000338, "Wrong size on UGymSpectatorGuiMainWidget");

// Class GYMGAME.GymSpectatorGuiMasterRuleWidget
// 0x0060 (0x0398 - 0x0338)
class UGymSpectatorGuiMasterRuleWidget : public UGymSpectatorGuiMetaWidget
{
public:
	class UGymGuiSpectatorRuleWidgetSprint*       SprintWidget;                                      // 0x0338(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymGuiSpectatorRuleWidgetTide*         TideWidget;                                        // 0x0340(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymGuiSpectatorRuleWidgetBomb*         BombWidget;                                        // 0x0348(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymGuiSpectatorRuleWidgetLoot*         LootWidget;                                        // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymGuiSpectatorRuleWidgetObstacle*     ObbyWidget;                                        // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymGuiSpectatorRuleWidgetCircuit*      CircuitWidget;                                     // 0x0360(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymGuiSpectatorRuleMetaWidget*         PlaylistWidget;                                    // 0x0368(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UGymGuiSpectatorRuleMetaWidget*> AllWidgets;                                        // 0x0370(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_380[0x18];                                     // 0x0380(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSpectatorGuiMasterRuleWidget">();
	}
	static class UGymSpectatorGuiMasterRuleWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymSpectatorGuiMasterRuleWidget>();
	}
};
static_assert(alignof(UGymSpectatorGuiMasterRuleWidget) == 0x000008, "Wrong alignment on UGymSpectatorGuiMasterRuleWidget");
static_assert(sizeof(UGymSpectatorGuiMasterRuleWidget) == 0x000398, "Wrong size on UGymSpectatorGuiMasterRuleWidget");
static_assert(offsetof(UGymSpectatorGuiMasterRuleWidget, SprintWidget) == 0x000338, "Member 'UGymSpectatorGuiMasterRuleWidget::SprintWidget' has a wrong offset!");
static_assert(offsetof(UGymSpectatorGuiMasterRuleWidget, TideWidget) == 0x000340, "Member 'UGymSpectatorGuiMasterRuleWidget::TideWidget' has a wrong offset!");
static_assert(offsetof(UGymSpectatorGuiMasterRuleWidget, BombWidget) == 0x000348, "Member 'UGymSpectatorGuiMasterRuleWidget::BombWidget' has a wrong offset!");
static_assert(offsetof(UGymSpectatorGuiMasterRuleWidget, LootWidget) == 0x000350, "Member 'UGymSpectatorGuiMasterRuleWidget::LootWidget' has a wrong offset!");
static_assert(offsetof(UGymSpectatorGuiMasterRuleWidget, ObbyWidget) == 0x000358, "Member 'UGymSpectatorGuiMasterRuleWidget::ObbyWidget' has a wrong offset!");
static_assert(offsetof(UGymSpectatorGuiMasterRuleWidget, CircuitWidget) == 0x000360, "Member 'UGymSpectatorGuiMasterRuleWidget::CircuitWidget' has a wrong offset!");
static_assert(offsetof(UGymSpectatorGuiMasterRuleWidget, PlaylistWidget) == 0x000368, "Member 'UGymSpectatorGuiMasterRuleWidget::PlaylistWidget' has a wrong offset!");
static_assert(offsetof(UGymSpectatorGuiMasterRuleWidget, AllWidgets) == 0x000370, "Member 'UGymSpectatorGuiMasterRuleWidget::AllWidgets' has a wrong offset!");

// Class GYMGAME.GymSpectatorInputControl
// 0x0028 (0x00D0 - 0x00A8)
class UGymSpectatorInputControl final : public UGymSpectatorMetaControl
{
public:
	class UInputComponent*                        InputComponent;                                    // 0x00A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0x20];                                      // 0x00B0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSpectatorInputControl">();
	}
	static class UGymSpectatorInputControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymSpectatorInputControl>();
	}
};
static_assert(alignof(UGymSpectatorInputControl) == 0x000008, "Wrong alignment on UGymSpectatorInputControl");
static_assert(sizeof(UGymSpectatorInputControl) == 0x0000D0, "Wrong size on UGymSpectatorInputControl");
static_assert(offsetof(UGymSpectatorInputControl, InputComponent) == 0x0000A8, "Member 'UGymSpectatorInputControl::InputComponent' has a wrong offset!");

// Class GYMGAME.GymSpectatorMetaCameraModifier
// 0x0008 (0x00A8 - 0x00A0)
class UGymSpectatorMetaCameraModifier : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSpectatorMetaCameraModifier">();
	}
	static class UGymSpectatorMetaCameraModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymSpectatorMetaCameraModifier>();
	}
};
static_assert(alignof(UGymSpectatorMetaCameraModifier) == 0x000008, "Wrong alignment on UGymSpectatorMetaCameraModifier");
static_assert(sizeof(UGymSpectatorMetaCameraModifier) == 0x0000A8, "Wrong size on UGymSpectatorMetaCameraModifier");

// Class GYMGAME.GymSpectatorMovementControl
// 0x0058 (0x0100 - 0x00A8)
class UGymSpectatorMovementControl final : public UGymSpectatorMetaControl
{
public:
	uint8                                         Pad_A8[0x58];                                      // 0x00A8(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSpectatorMovementControl">();
	}
	static class UGymSpectatorMovementControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymSpectatorMovementControl>();
	}
};
static_assert(alignof(UGymSpectatorMovementControl) == 0x000008, "Wrong alignment on UGymSpectatorMovementControl");
static_assert(sizeof(UGymSpectatorMovementControl) == 0x000100, "Wrong size on UGymSpectatorMovementControl");

// Class GYMGAME.GymSpectatorPawn
// 0x00A8 (0x03F0 - 0x0348)
class AGymSpectatorPawn : public ASpectatorPawn
{
public:
	class UGymSpectatorMovementControl*           MovementControl;                                   // 0x0348(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymSpectatorGuiControl*                GuiControl;                                        // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymSpectatorInputControl*              InputControl;                                      // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymSpectatorCameraControl*             CameraControl;                                     // 0x0360(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraComponent*                       Camera;                                            // 0x0368(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpringArmComponent*                    SpringArm;                                         // 0x0370(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_378[0x18];                                     // 0x0378(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	ESpectateReason                               SpectateReason;                                    // 0x0390(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_391[0x3];                                      // 0x0391(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinFollowSpeed;                                    // 0x0394(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFollowSpeed;                                    // 0x0398(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeed;                                          // 0x039C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x03A0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A4[0xC];                                      // 0x03A4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGymSpectatorMetaControl*>       AllControls;                                       // 0x03B0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C0[0x2C];                                     // 0x03C0(0x002C)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsPossessed;                                      // 0x03EC(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3ED[0x3];                                      // 0x03ED(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Client_SetSpectateReason(ESpectateReason NewSpectateReason);
	class AGymPlayerController* GetGymController();
	void OnRep_IsPossessed();
	void TryExitSpectatorMode();

	ESpectatorMovementMode GetCurrentMovementMode() const;
	class AGymCharacter* GetPlayerToFollow() const;
	class AGymCharacter* GetPlayerToFollowIfNotFreeMode() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSpectatorPawn">();
	}
	static class AGymSpectatorPawn* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymSpectatorPawn>();
	}
};
static_assert(alignof(AGymSpectatorPawn) == 0x000008, "Wrong alignment on AGymSpectatorPawn");
static_assert(sizeof(AGymSpectatorPawn) == 0x0003F0, "Wrong size on AGymSpectatorPawn");
static_assert(offsetof(AGymSpectatorPawn, MovementControl) == 0x000348, "Member 'AGymSpectatorPawn::MovementControl' has a wrong offset!");
static_assert(offsetof(AGymSpectatorPawn, GuiControl) == 0x000350, "Member 'AGymSpectatorPawn::GuiControl' has a wrong offset!");
static_assert(offsetof(AGymSpectatorPawn, InputControl) == 0x000358, "Member 'AGymSpectatorPawn::InputControl' has a wrong offset!");
static_assert(offsetof(AGymSpectatorPawn, CameraControl) == 0x000360, "Member 'AGymSpectatorPawn::CameraControl' has a wrong offset!");
static_assert(offsetof(AGymSpectatorPawn, Camera) == 0x000368, "Member 'AGymSpectatorPawn::Camera' has a wrong offset!");
static_assert(offsetof(AGymSpectatorPawn, SpringArm) == 0x000370, "Member 'AGymSpectatorPawn::SpringArm' has a wrong offset!");
static_assert(offsetof(AGymSpectatorPawn, SpectateReason) == 0x000390, "Member 'AGymSpectatorPawn::SpectateReason' has a wrong offset!");
static_assert(offsetof(AGymSpectatorPawn, MinFollowSpeed) == 0x000394, "Member 'AGymSpectatorPawn::MinFollowSpeed' has a wrong offset!");
static_assert(offsetof(AGymSpectatorPawn, MaxFollowSpeed) == 0x000398, "Member 'AGymSpectatorPawn::MaxFollowSpeed' has a wrong offset!");
static_assert(offsetof(AGymSpectatorPawn, MinSpeed) == 0x00039C, "Member 'AGymSpectatorPawn::MinSpeed' has a wrong offset!");
static_assert(offsetof(AGymSpectatorPawn, MaxSpeed) == 0x0003A0, "Member 'AGymSpectatorPawn::MaxSpeed' has a wrong offset!");
static_assert(offsetof(AGymSpectatorPawn, AllControls) == 0x0003B0, "Member 'AGymSpectatorPawn::AllControls' has a wrong offset!");
static_assert(offsetof(AGymSpectatorPawn, bIsPossessed) == 0x0003EC, "Member 'AGymSpectatorPawn::bIsPossessed' has a wrong offset!");

// Class GYMGAME.GymSpectatorSpringArmModifier
// 0x0018 (0x00C0 - 0x00A8)
class UGymSpectatorSpringArmModifier final : public UGymSpectatorMetaCameraModifier
{
public:
	struct FGymSpectatorSpringArmSettings         Settings;                                          // 0x00A8(0x0010)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	struct FGymSpectatorSpringArmProps            Props;                                             // 0x00B8(0x0004)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSpectatorSpringArmModifier">();
	}
	static class UGymSpectatorSpringArmModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymSpectatorSpringArmModifier>();
	}
};
static_assert(alignof(UGymSpectatorSpringArmModifier) == 0x000008, "Wrong alignment on UGymSpectatorSpringArmModifier");
static_assert(sizeof(UGymSpectatorSpringArmModifier) == 0x0000C0, "Wrong size on UGymSpectatorSpringArmModifier");
static_assert(offsetof(UGymSpectatorSpringArmModifier, Settings) == 0x0000A8, "Member 'UGymSpectatorSpringArmModifier::Settings' has a wrong offset!");
static_assert(offsetof(UGymSpectatorSpringArmModifier, Props) == 0x0000B8, "Member 'UGymSpectatorSpringArmModifier::Props' has a wrong offset!");

// Class GYMGAME.GymSpinner
// 0x00B8 (0x04E0 - 0x0428)
class AGymSpinner final : public AGymMetaGameplayPiece
{
public:
	uint8                                         Pad_428[0x8];                                      // 0x0428(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        AudioComp;                                         // 0x0430(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        SpinPivot;                                         // 0x0438(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationRate;                                      // 0x0440(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         VelocityTreshold;                                  // 0x0458(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RagdollImpulseForce;                               // 0x045C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RotationLerpSpeed;                                 // 0x0460(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinImpulseSpeed;                                   // 0x0464(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxImpulseSpeed;                                   // 0x0468(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_46C[0x1E];                                     // 0x046C(0x001E)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsSimulating;                                     // 0x048A(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48B[0x5];                                      // 0x048B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RepRotation;                                       // 0x0490(0x0018)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4A8[0x38];                                     // 0x04A8(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleCollision(class AActor* OtherActor, class UPrimitiveComponent* Comp);
	void HandleEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void HandleOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Multi_EndPhysics();
	void Multi_ImpactSound(class AGymCharacter* Character);
	void Multi_StartPhysics();
	void OnRep_Rotation();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSpinner">();
	}
	static class AGymSpinner* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymSpinner>();
	}
};
static_assert(alignof(AGymSpinner) == 0x000008, "Wrong alignment on AGymSpinner");
static_assert(sizeof(AGymSpinner) == 0x0004E0, "Wrong size on AGymSpinner");
static_assert(offsetof(AGymSpinner, AudioComp) == 0x000430, "Member 'AGymSpinner::AudioComp' has a wrong offset!");
static_assert(offsetof(AGymSpinner, SpinPivot) == 0x000438, "Member 'AGymSpinner::SpinPivot' has a wrong offset!");
static_assert(offsetof(AGymSpinner, RotationRate) == 0x000440, "Member 'AGymSpinner::RotationRate' has a wrong offset!");
static_assert(offsetof(AGymSpinner, VelocityTreshold) == 0x000458, "Member 'AGymSpinner::VelocityTreshold' has a wrong offset!");
static_assert(offsetof(AGymSpinner, RagdollImpulseForce) == 0x00045C, "Member 'AGymSpinner::RagdollImpulseForce' has a wrong offset!");
static_assert(offsetof(AGymSpinner, RotationLerpSpeed) == 0x000460, "Member 'AGymSpinner::RotationLerpSpeed' has a wrong offset!");
static_assert(offsetof(AGymSpinner, MinImpulseSpeed) == 0x000464, "Member 'AGymSpinner::MinImpulseSpeed' has a wrong offset!");
static_assert(offsetof(AGymSpinner, MaxImpulseSpeed) == 0x000468, "Member 'AGymSpinner::MaxImpulseSpeed' has a wrong offset!");
static_assert(offsetof(AGymSpinner, bIsSimulating) == 0x00048A, "Member 'AGymSpinner::bIsSimulating' has a wrong offset!");
static_assert(offsetof(AGymSpinner, RepRotation) == 0x000490, "Member 'AGymSpinner::RepRotation' has a wrong offset!");

// Class GYMGAME.GymSprayAction
// 0x0008 (0x00C0 - 0x00B8)
class UGymSprayAction final : public UGymMetaAction
{
public:
	int32                                         SprayIndex;                                        // 0x00B8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSprayAction">();
	}
	static class UGymSprayAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymSprayAction>();
	}
};
static_assert(alignof(UGymSprayAction) == 0x000008, "Wrong alignment on UGymSprayAction");
static_assert(sizeof(UGymSprayAction) == 0x0000C0, "Wrong size on UGymSprayAction");
static_assert(offsetof(UGymSprayAction, SprayIndex) == 0x0000B8, "Member 'UGymSprayAction::SprayIndex' has a wrong offset!");

// Class GYMGAME.GymZoomInOutCameraModifier
// 0x0048 (0x00F8 - 0x00B0)
class UGymZoomInOutCameraModifier final : public UGymMetaCameraModifier
{
public:
	uint8                                         Pad_B0[0x8];                                       // 0x00B0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymZoomInOutCameraModifierSettings    Settings;                                          // 0x00B8(0x0018)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	struct FGymZoomInOutCameraModifierProps       Props;                                             // 0x00D0(0x0024)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymZoomInOutCameraModifier">();
	}
	static class UGymZoomInOutCameraModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymZoomInOutCameraModifier>();
	}
};
static_assert(alignof(UGymZoomInOutCameraModifier) == 0x000008, "Wrong alignment on UGymZoomInOutCameraModifier");
static_assert(sizeof(UGymZoomInOutCameraModifier) == 0x0000F8, "Wrong size on UGymZoomInOutCameraModifier");
static_assert(offsetof(UGymZoomInOutCameraModifier, Settings) == 0x0000B8, "Member 'UGymZoomInOutCameraModifier::Settings' has a wrong offset!");
static_assert(offsetof(UGymZoomInOutCameraModifier, Props) == 0x0000D0, "Member 'UGymZoomInOutCameraModifier::Props' has a wrong offset!");

// Class GYMGAME.GymSprayLocationActor
// 0x0010 (0x0438 - 0x0428)
class AGymSprayLocationActor final : public AGymStaticLevelAsset
{
public:
	class FString                                 ObjectiveID;                                       // 0x0428(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetVisibility(bool bVisible);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSprayLocationActor">();
	}
	static class AGymSprayLocationActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymSprayLocationActor>();
	}
};
static_assert(alignof(AGymSprayLocationActor) == 0x000008, "Wrong alignment on AGymSprayLocationActor");
static_assert(sizeof(AGymSprayLocationActor) == 0x000438, "Wrong size on AGymSprayLocationActor");
static_assert(offsetof(AGymSprayLocationActor, ObjectiveID) == 0x000428, "Member 'AGymSprayLocationActor::ObjectiveID' has a wrong offset!");

// Class GYMGAME.GymSprintMusicState
// 0x0030 (0x0120 - 0x00F0)
class UGymSprintMusicState final : public UGymMetaRuleMusicState
{
public:
	TArray<class AActor*>                         Goals;                                             // 0x00F0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_100[0x20];                                     // 0x0100(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSprintMusicState">();
	}
	static class UGymSprintMusicState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymSprintMusicState>();
	}
};
static_assert(alignof(UGymSprintMusicState) == 0x000008, "Wrong alignment on UGymSprintMusicState");
static_assert(sizeof(UGymSprintMusicState) == 0x000120, "Wrong size on UGymSprintMusicState");
static_assert(offsetof(UGymSprintMusicState, Goals) == 0x0000F0, "Member 'UGymSprintMusicState::Goals' has a wrong offset!");

// Class GYMGAME.GymWallSystemUtils
// 0x0000 (0x0028 - 0x0028)
class UGymWallSystemUtils final : public UObject
{
public:
	static int32 DistanceToWall(const struct FGymShape& Shape, const int32 X, const int32 Y, const int32 Z, const EGymWallDirection Direction);
	static bool IsOutside(const struct FGymShape& Shape, const int32 X, const int32 Y, const int32 Z);
	static bool IsValidLocation(const struct FGymShape& Shape, const int32 X, const int32 Y, const int32 Z);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymWallSystemUtils">();
	}
	static class UGymWallSystemUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymWallSystemUtils>();
	}
};
static_assert(alignof(UGymWallSystemUtils) == 0x000008, "Wrong alignment on UGymWallSystemUtils");
static_assert(sizeof(UGymWallSystemUtils) == 0x000028, "Wrong size on UGymWallSystemUtils");

// Class GYMGAME.GymSprintReplicatedData
// 0x0000 (0x0088 - 0x0088)
class UGymSprintReplicatedData final : public UGymRuleReplicatedData
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSprintReplicatedData">();
	}
	static class UGymSprintReplicatedData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymSprintReplicatedData>();
	}
};
static_assert(alignof(UGymSprintReplicatedData) == 0x000008, "Wrong alignment on UGymSprintReplicatedData");
static_assert(sizeof(UGymSprintReplicatedData) == 0x000088, "Wrong size on UGymSprintReplicatedData");

// Class GYMGAME.GymSprintRules
// 0x0028 (0x0160 - 0x0138)
class UGymSprintRules : public UGymRules
{
public:
	uint8                                         Pad_138[0x8];                                      // 0x0138(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         GoalPieces;                                        // 0x0140(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_150[0x8];                                      // 0x0150(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaitBeforeCloseWhenNoOneFinished;                  // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GoalReached(class AActor* Goal, class AGymCharacter* PlayerCharacter);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSprintRules">();
	}
	static class UGymSprintRules* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymSprintRules>();
	}
};
static_assert(alignof(UGymSprintRules) == 0x000008, "Wrong alignment on UGymSprintRules");
static_assert(sizeof(UGymSprintRules) == 0x000160, "Wrong size on UGymSprintRules");
static_assert(offsetof(UGymSprintRules, GoalPieces) == 0x000140, "Member 'UGymSprintRules::GoalPieces' has a wrong offset!");
static_assert(offsetof(UGymSprintRules, WaitBeforeCloseWhenNoOneFinished) == 0x000158, "Member 'UGymSprintRules::WaitBeforeCloseWhenNoOneFinished' has a wrong offset!");

// Class GYMGAME.GymStandaloneAnimInstance
// 0x0000 (0x0350 - 0x0350)
class UGymStandaloneAnimInstance final : public UAnimInstance
{
public:
	bool                                          IsWoman;                                           // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymStandaloneAnimInstance">();
	}
	static class UGymStandaloneAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymStandaloneAnimInstance>();
	}
};
static_assert(alignof(UGymStandaloneAnimInstance) == 0x000010, "Wrong alignment on UGymStandaloneAnimInstance");
static_assert(sizeof(UGymStandaloneAnimInstance) == 0x000350, "Wrong size on UGymStandaloneAnimInstance");
static_assert(offsetof(UGymStandaloneAnimInstance, IsWoman) == 0x000348, "Member 'UGymStandaloneAnimInstance::IsWoman' has a wrong offset!");

// Class GYMGAME.GymStartMatchAction
// 0x0000 (0x00B8 - 0x00B8)
class UGymStartMatchAction final : public UGymMetaAction
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymStartMatchAction">();
	}
	static class UGymStartMatchAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymStartMatchAction>();
	}
};
static_assert(alignof(UGymStartMatchAction) == 0x000008, "Wrong alignment on UGymStartMatchAction");
static_assert(sizeof(UGymStartMatchAction) == 0x0000B8, "Wrong size on UGymStartMatchAction");

// Class GYMGAME.GymStartPiece
// 0x0018 (0x0440 - 0x0428)
class AGymStartPiece final : public AGymMetaGameplayPiece
{
public:
	TSubclassOf<class UGymRules>                  RuleClass;                                         // 0x0428(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_430[0x10];                                     // 0x0430(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymStartPiece">();
	}
	static class AGymStartPiece* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymStartPiece>();
	}
};
static_assert(alignof(AGymStartPiece) == 0x000008, "Wrong alignment on AGymStartPiece");
static_assert(sizeof(AGymStartPiece) == 0x000440, "Wrong size on AGymStartPiece");
static_assert(offsetof(AGymStartPiece, RuleClass) == 0x000428, "Member 'AGymStartPiece::RuleClass' has a wrong offset!");

// Class GYMGAME.GymSteamBPUtils
// 0x0000 (0x0028 - 0x0028)
class UGymSteamBPUtils final : public UObject
{
public:
	static bool AddPhotoToSteam(const class FString& FilePath, int32 Width, int32 Height);
	static bool DoesOwnAppOrDlc(const class FString& AppId);
	static class FString GetSteamName();
	static bool IsDemo();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSteamBPUtils">();
	}
	static class UGymSteamBPUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymSteamBPUtils>();
	}
};
static_assert(alignof(UGymSteamBPUtils) == 0x000008, "Wrong alignment on UGymSteamBPUtils");
static_assert(sizeof(UGymSteamBPUtils) == 0x000028, "Wrong size on UGymSteamBPUtils");

// Class GYMGAME.GymSteamSessionTicketRequest
// 0x0428 (0x0450 - 0x0028)
class UGymSteamSessionTicketRequest final : public UObject
{
public:
	uint8                                         Pad_28[0x418];                                     // 0x0028(0x0418)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSteamTicketReceived;                             // 0x0440(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void Send();
	void SteamTicketReceived__DelegateSignature(bool Success, const class FString& Ticket);

	void Release() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSteamSessionTicketRequest">();
	}
	static class UGymSteamSessionTicketRequest* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymSteamSessionTicketRequest>();
	}
};
static_assert(alignof(UGymSteamSessionTicketRequest) == 0x000008, "Wrong alignment on UGymSteamSessionTicketRequest");
static_assert(sizeof(UGymSteamSessionTicketRequest) == 0x000450, "Wrong size on UGymSteamSessionTicketRequest");
static_assert(offsetof(UGymSteamSessionTicketRequest, OnSteamTicketReceived) == 0x000440, "Member 'UGymSteamSessionTicketRequest::OnSteamTicketReceived' has a wrong offset!");

// Class GYMGAME.GymSteamSocketsNetAPIBackend
// 0x0000 (0x0028 - 0x0028)
class UGymSteamSocketsNetAPIBackend final : public UGymMetaNetAPIBackend
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSteamSocketsNetAPIBackend">();
	}
	static class UGymSteamSocketsNetAPIBackend* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymSteamSocketsNetAPIBackend>();
	}
};
static_assert(alignof(UGymSteamSocketsNetAPIBackend) == 0x000008, "Wrong alignment on UGymSteamSocketsNetAPIBackend");
static_assert(sizeof(UGymSteamSocketsNetAPIBackend) == 0x000028, "Wrong size on UGymSteamSocketsNetAPIBackend");

// Class GYMGAME.GymZiplineAnimator
// 0x0008 (0x00B0 - 0x00A8)
class UGymZiplineAnimator final : public UGymMetaAnimator
{
public:
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymZiplineAnimator">();
	}
	static class UGymZiplineAnimator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymZiplineAnimator>();
	}
};
static_assert(alignof(UGymZiplineAnimator) == 0x000008, "Wrong alignment on UGymZiplineAnimator");
static_assert(sizeof(UGymZiplineAnimator) == 0x0000B0, "Wrong size on UGymZiplineAnimator");

// Class GYMGAME.GymSuperMoveControl
// 0x0080 (0x0138 - 0x00B8)
class UGymSuperMoveControl final : public UGymCharacterMetaControl
{
public:
	uint8                                         Pad_B8[0x78];                                      // 0x00B8(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymMovementControl*                    MovementControlPtr;                                // 0x0130(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSuperMoveControl">();
	}
	static class UGymSuperMoveControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymSuperMoveControl>();
	}
};
static_assert(alignof(UGymSuperMoveControl) == 0x000008, "Wrong alignment on UGymSuperMoveControl");
static_assert(sizeof(UGymSuperMoveControl) == 0x000138, "Wrong size on UGymSuperMoveControl");
static_assert(offsetof(UGymSuperMoveControl, MovementControlPtr) == 0x000130, "Member 'UGymSuperMoveControl::MovementControlPtr' has a wrong offset!");

// Class GYMGAME.GymSuperMoveObjective
// 0x0018 (0x00D8 - 0x00C0)
class UGymSuperMoveObjective final : public UGymObjective
{
public:
	bool                                          bSupportsAllSupermoves;                            // 0x00C0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ESupermove>                            Supermoves;                                        // 0x00C8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSuperMoveObjective">();
	}
	static class UGymSuperMoveObjective* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymSuperMoveObjective>();
	}
};
static_assert(alignof(UGymSuperMoveObjective) == 0x000008, "Wrong alignment on UGymSuperMoveObjective");
static_assert(sizeof(UGymSuperMoveObjective) == 0x0000D8, "Wrong size on UGymSuperMoveObjective");
static_assert(offsetof(UGymSuperMoveObjective, bSupportsAllSupermoves) == 0x0000C0, "Member 'UGymSuperMoveObjective::bSupportsAllSupermoves' has a wrong offset!");
static_assert(offsetof(UGymSuperMoveObjective, Supermoves) == 0x0000C8, "Member 'UGymSuperMoveObjective::Supermoves' has a wrong offset!");

// Class GYMGAME.GymSwimmingAnimator
// 0x0020 (0x00C8 - 0x00A8)
class UGymSwimmingAnimator final : public UGymMetaAnimator
{
public:
	struct FGymSwimmingAnimatorProps              Props;                                             // 0x00A8(0x0020)(NoDestructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymSwimmingAnimator">();
	}
	static class UGymSwimmingAnimator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymSwimmingAnimator>();
	}
};
static_assert(alignof(UGymSwimmingAnimator) == 0x000008, "Wrong alignment on UGymSwimmingAnimator");
static_assert(sizeof(UGymSwimmingAnimator) == 0x0000C8, "Wrong size on UGymSwimmingAnimator");
static_assert(offsetof(UGymSwimmingAnimator, Props) == 0x0000A8, "Member 'UGymSwimmingAnimator::Props' has a wrong offset!");

// Class GYMGAME.GymTaggedPlayerMarker
// 0x0090 (0x0328 - 0x0298)
class AGymTaggedPlayerMarker : public AActor
{
public:
	class UAudioComponent*                        AudioComponent;                                    // 0x0298(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      ExplosionEffect;                                   // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        SceneComp;                                         // 0x02A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BombTimer;                                         // 0x02B0(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ExplosionTriggerName;                              // 0x02B4(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     ParentMaterial;                                    // 0x02C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FadeSpeedFast;                                     // 0x02C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FadingSpeed;                                       // 0x02CC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FadeTimeTreshold;                                  // 0x02D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FastFadeTimeTreshold;                              // 0x02D4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   OpacityName;                                       // 0x02D8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ColorName;                                         // 0x02E0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   IntervalName;                                      // 0x02E8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           DefaultColor;                                      // 0x02F0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AGymCharacter>           ActorToFollow;                                     // 0x0300(0x0008)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AActor>                  LastTickActor;                                     // 0x0308(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x0310(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_318[0x10];                                     // 0x0318(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Multi_Explode();
	void SetActorToFollow(class AGymCharacter* Actor);
	void SetBombTimer(float BombTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymTaggedPlayerMarker">();
	}
	static class AGymTaggedPlayerMarker* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymTaggedPlayerMarker>();
	}
};
static_assert(alignof(AGymTaggedPlayerMarker) == 0x000008, "Wrong alignment on AGymTaggedPlayerMarker");
static_assert(sizeof(AGymTaggedPlayerMarker) == 0x000328, "Wrong size on AGymTaggedPlayerMarker");
static_assert(offsetof(AGymTaggedPlayerMarker, AudioComponent) == 0x000298, "Member 'AGymTaggedPlayerMarker::AudioComponent' has a wrong offset!");
static_assert(offsetof(AGymTaggedPlayerMarker, ExplosionEffect) == 0x0002A0, "Member 'AGymTaggedPlayerMarker::ExplosionEffect' has a wrong offset!");
static_assert(offsetof(AGymTaggedPlayerMarker, SceneComp) == 0x0002A8, "Member 'AGymTaggedPlayerMarker::SceneComp' has a wrong offset!");
static_assert(offsetof(AGymTaggedPlayerMarker, BombTimer) == 0x0002B0, "Member 'AGymTaggedPlayerMarker::BombTimer' has a wrong offset!");
static_assert(offsetof(AGymTaggedPlayerMarker, ExplosionTriggerName) == 0x0002B4, "Member 'AGymTaggedPlayerMarker::ExplosionTriggerName' has a wrong offset!");
static_assert(offsetof(AGymTaggedPlayerMarker, ParentMaterial) == 0x0002C0, "Member 'AGymTaggedPlayerMarker::ParentMaterial' has a wrong offset!");
static_assert(offsetof(AGymTaggedPlayerMarker, FadeSpeedFast) == 0x0002C8, "Member 'AGymTaggedPlayerMarker::FadeSpeedFast' has a wrong offset!");
static_assert(offsetof(AGymTaggedPlayerMarker, FadingSpeed) == 0x0002CC, "Member 'AGymTaggedPlayerMarker::FadingSpeed' has a wrong offset!");
static_assert(offsetof(AGymTaggedPlayerMarker, FadeTimeTreshold) == 0x0002D0, "Member 'AGymTaggedPlayerMarker::FadeTimeTreshold' has a wrong offset!");
static_assert(offsetof(AGymTaggedPlayerMarker, FastFadeTimeTreshold) == 0x0002D4, "Member 'AGymTaggedPlayerMarker::FastFadeTimeTreshold' has a wrong offset!");
static_assert(offsetof(AGymTaggedPlayerMarker, OpacityName) == 0x0002D8, "Member 'AGymTaggedPlayerMarker::OpacityName' has a wrong offset!");
static_assert(offsetof(AGymTaggedPlayerMarker, ColorName) == 0x0002E0, "Member 'AGymTaggedPlayerMarker::ColorName' has a wrong offset!");
static_assert(offsetof(AGymTaggedPlayerMarker, IntervalName) == 0x0002E8, "Member 'AGymTaggedPlayerMarker::IntervalName' has a wrong offset!");
static_assert(offsetof(AGymTaggedPlayerMarker, DefaultColor) == 0x0002F0, "Member 'AGymTaggedPlayerMarker::DefaultColor' has a wrong offset!");
static_assert(offsetof(AGymTaggedPlayerMarker, ActorToFollow) == 0x000300, "Member 'AGymTaggedPlayerMarker::ActorToFollow' has a wrong offset!");
static_assert(offsetof(AGymTaggedPlayerMarker, LastTickActor) == 0x000308, "Member 'AGymTaggedPlayerMarker::LastTickActor' has a wrong offset!");
static_assert(offsetof(AGymTaggedPlayerMarker, DynamicMaterial) == 0x000310, "Member 'AGymTaggedPlayerMarker::DynamicMaterial' has a wrong offset!");

// Class GYMGAME.GymTauntAction
// 0x0008 (0x00C0 - 0x00B8)
class UGymTauntAction final : public UGymMetaAction
{
public:
	int32                                         TauntIndex;                                        // 0x00B8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymTauntAction">();
	}
	static class UGymTauntAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymTauntAction>();
	}
};
static_assert(alignof(UGymTauntAction) == 0x000008, "Wrong alignment on UGymTauntAction");
static_assert(sizeof(UGymTauntAction) == 0x0000C0, "Wrong size on UGymTauntAction");
static_assert(offsetof(UGymTauntAction, TauntIndex) == 0x0000B8, "Member 'UGymTauntAction::TauntIndex' has a wrong offset!");

// Class GYMGAME.GymTauntAnimator
// 0x0078 (0x0120 - 0x00A8)
class UGymTauntAnimator final : public UGymMetaAnimator
{
public:
	struct FGymTauntAnimatorProps                 Props;                                             // 0x00A8(0x0070)(NativeAccessSpecifierPrivate)
	struct FGymTauntReplicatedProps               ReplicatedProps;                                   // 0x0118(0x0008)(Net, NoDestructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymTauntAnimator">();
	}
	static class UGymTauntAnimator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymTauntAnimator>();
	}
};
static_assert(alignof(UGymTauntAnimator) == 0x000008, "Wrong alignment on UGymTauntAnimator");
static_assert(sizeof(UGymTauntAnimator) == 0x000120, "Wrong size on UGymTauntAnimator");
static_assert(offsetof(UGymTauntAnimator, Props) == 0x0000A8, "Member 'UGymTauntAnimator::Props' has a wrong offset!");
static_assert(offsetof(UGymTauntAnimator, ReplicatedProps) == 0x000118, "Member 'UGymTauntAnimator::ReplicatedProps' has a wrong offset!");

// Class GYMGAME.GymTauntObjective
// 0x0020 (0x00E0 - 0x00C0)
class UGymTauntObjective final : public UGymObjective
{
public:
	TArray<class FName>                           AcceptedTaunts;                                    // 0x00C0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bHoldForTime;                                      // 0x00D0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D1[0xF];                                       // 0x00D1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymTauntObjective">();
	}
	static class UGymTauntObjective* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymTauntObjective>();
	}
};
static_assert(alignof(UGymTauntObjective) == 0x000008, "Wrong alignment on UGymTauntObjective");
static_assert(sizeof(UGymTauntObjective) == 0x0000E0, "Wrong size on UGymTauntObjective");
static_assert(offsetof(UGymTauntObjective, AcceptedTaunts) == 0x0000C0, "Member 'UGymTauntObjective::AcceptedTaunts' has a wrong offset!");
static_assert(offsetof(UGymTauntObjective, bHoldForTime) == 0x0000D0, "Member 'UGymTauntObjective::bHoldForTime' has a wrong offset!");

// Class GYMGAME.GymThumbnailCreator
// 0x0110 (0x03A8 - 0x0298)
class AGymThumbnailCreator final : public AActor
{
public:
	TMap<TSubclassOf<class AActor>, class UTexture*> ActorCache;                                        // 0x0298(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<class FString, class UTexture*>          MeshCache;                                         // 0x02E8(0x0050)(Transient, NativeAccessSpecifierPrivate)
	class USceneComponent*                        GymRoot;                                           // 0x0338(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCameraComponent*                       Camera;                                            // 0x0340(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCameraComponent*                       FinalCamera;                                       // 0x0348(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneCaptureComponent2D*               Capture;                                           // 0x0350(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterial*                              ThumbnailCompositeMaterial;                        // 0x0358(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMesh*                            ThumbnailCompositeMesh;                            // 0x0360(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CameraOffset;                                      // 0x0368(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LocationOffsetOverride;                            // 0x0370(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOverride;                                  // 0x0388(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         BoundsScaleOverride;                               // 0x03A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A4[0x4];                                      // 0x03A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UTexture* GetThumbnailForActor(TSubclassOf<class AActor> Actor);
	static class UTexture* GetThumbnailForSkeletalMesh(class USkeletalMesh* Mesh, const class FString& CacheId, class UMaterialInterface* Material);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymThumbnailCreator">();
	}
	static class AGymThumbnailCreator* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymThumbnailCreator>();
	}
};
static_assert(alignof(AGymThumbnailCreator) == 0x000008, "Wrong alignment on AGymThumbnailCreator");
static_assert(sizeof(AGymThumbnailCreator) == 0x0003A8, "Wrong size on AGymThumbnailCreator");
static_assert(offsetof(AGymThumbnailCreator, ActorCache) == 0x000298, "Member 'AGymThumbnailCreator::ActorCache' has a wrong offset!");
static_assert(offsetof(AGymThumbnailCreator, MeshCache) == 0x0002E8, "Member 'AGymThumbnailCreator::MeshCache' has a wrong offset!");
static_assert(offsetof(AGymThumbnailCreator, GymRoot) == 0x000338, "Member 'AGymThumbnailCreator::GymRoot' has a wrong offset!");
static_assert(offsetof(AGymThumbnailCreator, Camera) == 0x000340, "Member 'AGymThumbnailCreator::Camera' has a wrong offset!");
static_assert(offsetof(AGymThumbnailCreator, FinalCamera) == 0x000348, "Member 'AGymThumbnailCreator::FinalCamera' has a wrong offset!");
static_assert(offsetof(AGymThumbnailCreator, Capture) == 0x000350, "Member 'AGymThumbnailCreator::Capture' has a wrong offset!");
static_assert(offsetof(AGymThumbnailCreator, ThumbnailCompositeMaterial) == 0x000358, "Member 'AGymThumbnailCreator::ThumbnailCompositeMaterial' has a wrong offset!");
static_assert(offsetof(AGymThumbnailCreator, ThumbnailCompositeMesh) == 0x000360, "Member 'AGymThumbnailCreator::ThumbnailCompositeMesh' has a wrong offset!");
static_assert(offsetof(AGymThumbnailCreator, CameraOffset) == 0x000368, "Member 'AGymThumbnailCreator::CameraOffset' has a wrong offset!");
static_assert(offsetof(AGymThumbnailCreator, LocationOffsetOverride) == 0x000370, "Member 'AGymThumbnailCreator::LocationOffsetOverride' has a wrong offset!");
static_assert(offsetof(AGymThumbnailCreator, RotationOverride) == 0x000388, "Member 'AGymThumbnailCreator::RotationOverride' has a wrong offset!");
static_assert(offsetof(AGymThumbnailCreator, BoundsScaleOverride) == 0x0003A0, "Member 'AGymThumbnailCreator::BoundsScaleOverride' has a wrong offset!");

// Class GYMGAME.GymTickerTriggerAsset
// 0x0008 (0x0430 - 0x0428)
class AGymTickerTriggerAsset final : public AGymStaticLevelAsset
{
public:
	bool                                          bIsActive;                                         // 0x0428(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_429[0x7];                                      // 0x0429(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Multi_SetActive(bool bActive);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymTickerTriggerAsset">();
	}
	static class AGymTickerTriggerAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymTickerTriggerAsset>();
	}
};
static_assert(alignof(AGymTickerTriggerAsset) == 0x000008, "Wrong alignment on AGymTickerTriggerAsset");
static_assert(sizeof(AGymTickerTriggerAsset) == 0x000430, "Wrong size on AGymTickerTriggerAsset");
static_assert(offsetof(AGymTickerTriggerAsset, bIsActive) == 0x000428, "Member 'AGymTickerTriggerAsset::bIsActive' has a wrong offset!");

// Class GYMGAME.GymTide
// 0x00D8 (0x0370 - 0x0298)
class AGymTide : public AActor
{
public:
	uint8                                         Pad_298[0x40];                                     // 0x0298(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	class UInstancedStaticMeshComponent*          MeshComponent;                                     // 0x02D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2E0[0x38];                                     // 0x02E0(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class AGymMap*                                GymMap;                                            // 0x0318(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                 InstancedActor;                                    // 0x0320(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Rising;                                            // 0x0328(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            TideTile;                                          // 0x0330(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     TideMat;                                           // 0x0338(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AActor>                     TideActor;                                         // 0x0340(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        MetersPerSecond;                                   // 0x0348(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TilingMultiplier;                                  // 0x0350(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseInterpolation;                                 // 0x0354(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseInstancedActorStartHeight;                     // 0x0355(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_356[0x2];                                      // 0x0356(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartZoneOffset;                                   // 0x0358(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETideType                                     TideType;                                          // 0x035C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_360[0x4];                                      // 0x0360(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayerDrownOffset;                                 // 0x0364(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanUseTideLevelModifier;                          // 0x0368(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBallpit;                                        // 0x0369(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36A[0x6];                                      // 0x036A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Activate();
	void CleanUp();
	void Multi_SetSpeed(float Speed);
	void PreStart(float Height, const float TideSpeed, bool bOverrideSpeed);
	void UpdateWaterLevel();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymTide">();
	}
	static class AGymTide* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymTide>();
	}
};
static_assert(alignof(AGymTide) == 0x000008, "Wrong alignment on AGymTide");
static_assert(sizeof(AGymTide) == 0x000370, "Wrong size on AGymTide");
static_assert(offsetof(AGymTide, MeshComponent) == 0x0002D8, "Member 'AGymTide::MeshComponent' has a wrong offset!");
static_assert(offsetof(AGymTide, GymMap) == 0x000318, "Member 'AGymTide::GymMap' has a wrong offset!");
static_assert(offsetof(AGymTide, InstancedActor) == 0x000320, "Member 'AGymTide::InstancedActor' has a wrong offset!");
static_assert(offsetof(AGymTide, Rising) == 0x000328, "Member 'AGymTide::Rising' has a wrong offset!");
static_assert(offsetof(AGymTide, TideTile) == 0x000330, "Member 'AGymTide::TideTile' has a wrong offset!");
static_assert(offsetof(AGymTide, TideMat) == 0x000338, "Member 'AGymTide::TideMat' has a wrong offset!");
static_assert(offsetof(AGymTide, TideActor) == 0x000340, "Member 'AGymTide::TideActor' has a wrong offset!");
static_assert(offsetof(AGymTide, MetersPerSecond) == 0x000348, "Member 'AGymTide::MetersPerSecond' has a wrong offset!");
static_assert(offsetof(AGymTide, TilingMultiplier) == 0x000350, "Member 'AGymTide::TilingMultiplier' has a wrong offset!");
static_assert(offsetof(AGymTide, bUseInterpolation) == 0x000354, "Member 'AGymTide::bUseInterpolation' has a wrong offset!");
static_assert(offsetof(AGymTide, bUseInstancedActorStartHeight) == 0x000355, "Member 'AGymTide::bUseInstancedActorStartHeight' has a wrong offset!");
static_assert(offsetof(AGymTide, StartZoneOffset) == 0x000358, "Member 'AGymTide::StartZoneOffset' has a wrong offset!");
static_assert(offsetof(AGymTide, TideType) == 0x00035C, "Member 'AGymTide::TideType' has a wrong offset!");
static_assert(offsetof(AGymTide, PlayerDrownOffset) == 0x000364, "Member 'AGymTide::PlayerDrownOffset' has a wrong offset!");
static_assert(offsetof(AGymTide, bCanUseTideLevelModifier) == 0x000368, "Member 'AGymTide::bCanUseTideLevelModifier' has a wrong offset!");
static_assert(offsetof(AGymTide, bIsBallpit) == 0x000369, "Member 'AGymTide::bIsBallpit' has a wrong offset!");

// Class GYMGAME.GymTideHeightModifier
// 0x0008 (0x0430 - 0x0428)
class AGymTideHeightModifier final : public AGymStaticLevelAsset
{
public:
	bool                                          bShouldInitTide;                                   // 0x0428(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsResetAsset;                                     // 0x0429(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_42A[0x6];                                      // 0x042A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymTideHeightModifier">();
	}
	static class AGymTideHeightModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymTideHeightModifier>();
	}
};
static_assert(alignof(AGymTideHeightModifier) == 0x000008, "Wrong alignment on AGymTideHeightModifier");
static_assert(sizeof(AGymTideHeightModifier) == 0x000430, "Wrong size on AGymTideHeightModifier");
static_assert(offsetof(AGymTideHeightModifier, bShouldInitTide) == 0x000428, "Member 'AGymTideHeightModifier::bShouldInitTide' has a wrong offset!");
static_assert(offsetof(AGymTideHeightModifier, bIsResetAsset) == 0x000429, "Member 'AGymTideHeightModifier::bIsResetAsset' has a wrong offset!");

// Class GYMGAME.GymTideMusicState
// 0x0048 (0x0138 - 0x00F0)
class UGymTideMusicState final : public UGymMetaRuleMusicState
{
public:
	class AGymTide*                               Tide;                                              // 0x00F0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class AActor*>                         Goals;                                             // 0x00F8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_108[0x30];                                     // 0x0108(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymTideMusicState">();
	}
	static class UGymTideMusicState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymTideMusicState>();
	}
};
static_assert(alignof(UGymTideMusicState) == 0x000008, "Wrong alignment on UGymTideMusicState");
static_assert(sizeof(UGymTideMusicState) == 0x000138, "Wrong size on UGymTideMusicState");
static_assert(offsetof(UGymTideMusicState, Tide) == 0x0000F0, "Member 'UGymTideMusicState::Tide' has a wrong offset!");
static_assert(offsetof(UGymTideMusicState, Goals) == 0x0000F8, "Member 'UGymTideMusicState::Goals' has a wrong offset!");

// Class GYMGAME.GymTideRules
// 0x0020 (0x0180 - 0x0160)
class UGymTideRules : public UGymSprintRules
{
public:
	class AGymTide*                               Tide;                                              // 0x0160(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TideSpeed;                                         // 0x0168(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             DrownIconTexture;                                  // 0x0170(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymTideRules">();
	}
	static class UGymTideRules* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymTideRules>();
	}
};
static_assert(alignof(UGymTideRules) == 0x000008, "Wrong alignment on UGymTideRules");
static_assert(sizeof(UGymTideRules) == 0x000180, "Wrong size on UGymTideRules");
static_assert(offsetof(UGymTideRules, Tide) == 0x000160, "Member 'UGymTideRules::Tide' has a wrong offset!");
static_assert(offsetof(UGymTideRules, TideSpeed) == 0x000168, "Member 'UGymTideRules::TideSpeed' has a wrong offset!");
static_assert(offsetof(UGymTideRules, DrownIconTexture) == 0x000170, "Member 'UGymTideRules::DrownIconTexture' has a wrong offset!");

// Class GYMGAME.GymTideSpeedModifier
// 0x0008 (0x0440 - 0x0438)
class AGymTideSpeedModifier final : public AGymRuleModifier
{
public:
	float                                         TideSpeed;                                         // 0x0438(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43C[0x4];                                      // 0x043C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymTideSpeedModifier">();
	}
	static class AGymTideSpeedModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymTideSpeedModifier>();
	}
};
static_assert(alignof(AGymTideSpeedModifier) == 0x000008, "Wrong alignment on AGymTideSpeedModifier");
static_assert(sizeof(AGymTideSpeedModifier) == 0x000440, "Wrong size on AGymTideSpeedModifier");
static_assert(offsetof(AGymTideSpeedModifier, TideSpeed) == 0x000438, "Member 'AGymTideSpeedModifier::TideSpeed' has a wrong offset!");

// Class GYMGAME.GymTideSprayer
// 0x0000 (0x0298 - 0x0298)
class AGymTideSprayer final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymTideSprayer">();
	}
	static class AGymTideSprayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymTideSprayer>();
	}
};
static_assert(alignof(AGymTideSprayer) == 0x000008, "Wrong alignment on AGymTideSprayer");
static_assert(sizeof(AGymTideSprayer) == 0x000298, "Wrong size on AGymTideSprayer");

// Class GYMGAME.GymTiltCameraModifier
// 0x0010 (0x00C0 - 0x00B0)
class UGymTiltCameraModifier final : public UGymMetaCameraModifier
{
public:
	struct FGymTiltCameraModifierSettings         Settings;                                          // 0x00B0(0x0008)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	struct FGymTiltCameraModifierProps            Props;                                             // 0x00B8(0x0008)(Transient, NoDestructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymTiltCameraModifier">();
	}
	static class UGymTiltCameraModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymTiltCameraModifier>();
	}
};
static_assert(alignof(UGymTiltCameraModifier) == 0x000008, "Wrong alignment on UGymTiltCameraModifier");
static_assert(sizeof(UGymTiltCameraModifier) == 0x0000C0, "Wrong size on UGymTiltCameraModifier");
static_assert(offsetof(UGymTiltCameraModifier, Settings) == 0x0000B0, "Member 'UGymTiltCameraModifier::Settings' has a wrong offset!");
static_assert(offsetof(UGymTiltCameraModifier, Props) == 0x0000B8, "Member 'UGymTiltCameraModifier::Props' has a wrong offset!");

// Class GYMGAME.GymToggleCameraAction
// 0x0000 (0x00B8 - 0x00B8)
class UGymToggleCameraAction final : public UGymMetaAction
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymToggleCameraAction">();
	}
	static class UGymToggleCameraAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymToggleCameraAction>();
	}
};
static_assert(alignof(UGymToggleCameraAction) == 0x000008, "Wrong alignment on UGymToggleCameraAction");
static_assert(sizeof(UGymToggleCameraAction) == 0x0000B8, "Wrong size on UGymToggleCameraAction");

// Class GYMGAME.GymTogglePhotoModeAction
// 0x0000 (0x00B8 - 0x00B8)
class UGymTogglePhotoModeAction final : public UGymMetaAction
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymTogglePhotoModeAction">();
	}
	static class UGymTogglePhotoModeAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymTogglePhotoModeAction>();
	}
};
static_assert(alignof(UGymTogglePhotoModeAction) == 0x000008, "Wrong alignment on UGymTogglePhotoModeAction");
static_assert(sizeof(UGymTogglePhotoModeAction) == 0x0000B8, "Wrong size on UGymTogglePhotoModeAction");

// Class GYMGAME.GymWallStyleToolSetting
// 0x0008 (0x0038 - 0x0030)
class UGymWallStyleToolSetting final : public UGymToolSetting
{
public:
	int32                                         Value;                                             // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymWallStyleToolSetting">();
	}
	static class UGymWallStyleToolSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymWallStyleToolSetting>();
	}
};
static_assert(alignof(UGymWallStyleToolSetting) == 0x000008, "Wrong alignment on UGymWallStyleToolSetting");
static_assert(sizeof(UGymWallStyleToolSetting) == 0x000038, "Wrong size on UGymWallStyleToolSetting");
static_assert(offsetof(UGymWallStyleToolSetting, Value) == 0x000030, "Member 'UGymWallStyleToolSetting::Value' has a wrong offset!");

// Class GYMGAME.GymTrampolineMeshComponent
// 0x0000 (0x0630 - 0x0630)
class UGymTrampolineMeshComponent final : public UStaticMeshComponent
{
public:
	bool                                          UseLocalUpVectorForReflection;                     // 0x0628(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_629[0x7];                                      // 0x0629(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymTrampolineMeshComponent">();
	}
	static class UGymTrampolineMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymTrampolineMeshComponent>();
	}
};
static_assert(alignof(UGymTrampolineMeshComponent) == 0x000010, "Wrong alignment on UGymTrampolineMeshComponent");
static_assert(sizeof(UGymTrampolineMeshComponent) == 0x000630, "Wrong size on UGymTrampolineMeshComponent");
static_assert(offsetof(UGymTrampolineMeshComponent, UseLocalUpVectorForReflection) == 0x000628, "Member 'UGymTrampolineMeshComponent::UseLocalUpVectorForReflection' has a wrong offset!");

// Class GYMGAME.GymUtilityAnimator
// 0x00B8 (0x0160 - 0x00A8)
class UGymUtilityAnimator final : public UGymMetaAnimator
{
public:
	uint8                                         Pad_A8[0x50];                                      // 0x00A8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ClientPredictBodyOffsetTarget;                     // 0x00F8(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClientPredictBodyOffsetInterpolation;              // 0x0110(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MovementComponentGrounded;                         // 0x0114(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CustomMovementStateID;                             // 0x0118(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WantsToReset_Slide;                                // 0x011C(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WantsToReset_Jump;                                 // 0x011D(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WantsToReset_Roll;                                 // 0x011E(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WantsTo_BackFlip;                                  // 0x011F(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WantsTo_FrontFlip;                                 // 0x0120(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WantsTo_SlideLeap;                                 // 0x0121(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WantsTo_TrampolineHit;                             // 0x0122(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_123[0x1];                                      // 0x0123(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AirTime;                                           // 0x0124(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsWoman;                                           // 0x0128(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymUtilityAnimatorProps               Props;                                             // 0x012C(0x0018)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_144[0x1C];                                     // 0x0144(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	const struct FGymUtilityAnimatorProps GetProps() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymUtilityAnimator">();
	}
	static class UGymUtilityAnimator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymUtilityAnimator>();
	}
};
static_assert(alignof(UGymUtilityAnimator) == 0x000008, "Wrong alignment on UGymUtilityAnimator");
static_assert(sizeof(UGymUtilityAnimator) == 0x000160, "Wrong size on UGymUtilityAnimator");
static_assert(offsetof(UGymUtilityAnimator, ClientPredictBodyOffsetTarget) == 0x0000F8, "Member 'UGymUtilityAnimator::ClientPredictBodyOffsetTarget' has a wrong offset!");
static_assert(offsetof(UGymUtilityAnimator, ClientPredictBodyOffsetInterpolation) == 0x000110, "Member 'UGymUtilityAnimator::ClientPredictBodyOffsetInterpolation' has a wrong offset!");
static_assert(offsetof(UGymUtilityAnimator, MovementComponentGrounded) == 0x000114, "Member 'UGymUtilityAnimator::MovementComponentGrounded' has a wrong offset!");
static_assert(offsetof(UGymUtilityAnimator, CustomMovementStateID) == 0x000118, "Member 'UGymUtilityAnimator::CustomMovementStateID' has a wrong offset!");
static_assert(offsetof(UGymUtilityAnimator, WantsToReset_Slide) == 0x00011C, "Member 'UGymUtilityAnimator::WantsToReset_Slide' has a wrong offset!");
static_assert(offsetof(UGymUtilityAnimator, WantsToReset_Jump) == 0x00011D, "Member 'UGymUtilityAnimator::WantsToReset_Jump' has a wrong offset!");
static_assert(offsetof(UGymUtilityAnimator, WantsToReset_Roll) == 0x00011E, "Member 'UGymUtilityAnimator::WantsToReset_Roll' has a wrong offset!");
static_assert(offsetof(UGymUtilityAnimator, WantsTo_BackFlip) == 0x00011F, "Member 'UGymUtilityAnimator::WantsTo_BackFlip' has a wrong offset!");
static_assert(offsetof(UGymUtilityAnimator, WantsTo_FrontFlip) == 0x000120, "Member 'UGymUtilityAnimator::WantsTo_FrontFlip' has a wrong offset!");
static_assert(offsetof(UGymUtilityAnimator, WantsTo_SlideLeap) == 0x000121, "Member 'UGymUtilityAnimator::WantsTo_SlideLeap' has a wrong offset!");
static_assert(offsetof(UGymUtilityAnimator, WantsTo_TrampolineHit) == 0x000122, "Member 'UGymUtilityAnimator::WantsTo_TrampolineHit' has a wrong offset!");
static_assert(offsetof(UGymUtilityAnimator, AirTime) == 0x000124, "Member 'UGymUtilityAnimator::AirTime' has a wrong offset!");
static_assert(offsetof(UGymUtilityAnimator, IsWoman) == 0x000128, "Member 'UGymUtilityAnimator::IsWoman' has a wrong offset!");
static_assert(offsetof(UGymUtilityAnimator, Props) == 0x00012C, "Member 'UGymUtilityAnimator::Props' has a wrong offset!");

// Class GYMGAME.GymVaultingEngineVariantAsset
// 0x0148 (0x0178 - 0x0030)
class UGymVaultingEngineVariantAsset final : public UPrimaryDataAsset
{
public:
	EGymVaultingEngineVariantSlot                 Slot;                                              // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RequireActivationInput;                            // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VaultTransitionToBasic;                            // 0x0032(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UseABPath;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxShrinkRatio;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnVelocityMulti;                               // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseEasyInReturnVelocity;                           // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EasyInReturnVelocityStartRatio;                    // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            TranslationAdjustmentCurve;                        // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxZForAutoVaultFromBasic;                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinZ;                                              // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxZ;                                              // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDots;                                           // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAirMinDots;                                      // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ConsumeInput;                                      // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowNormalJumpOffInTheEnd;                        // 0x0065(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StaticMaxActivationRange;                          // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseVelocityRatioForActivationRange;                // 0x006C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StaticVaultVelocity;                               // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AdaptToSpeed;                                      // 0x0074(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdaptToSpeedMinVelocity;                           // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdaptToSpeedMaxVelocity;                           // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdaptToSpeedMinMulti;                              // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdaptToSpeedMaxMulti;                              // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VaultLengthMulti;                                  // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndWithJump;                                       // 0x008C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EndWithJumpForce;                                  // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetStackableSpeedBoost;                            // 0x0094(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StackableSpeedBoostMultiplier;                     // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StackableSpeedBoostForSeconds;                     // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StackableSpeedBoostDoNotDecrease;                  // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            StackableSpeedBoostOptionalSpeedCurve;             // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraClampMin;                                    // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraClampMax;                                    // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CameraOffset;                                      // 0x00B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseHeadToBoneRotation;                             // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeadToBoneLerpPower;                               // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HandsTemporaryLocationOffset;                      // 0x00D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HandsTemporaryScale;                               // 0x00F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HandsKinematicTemporaryLocationOffset;             // 0x0108(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HandsKinematicTemporaryScale;                      // 0x0120(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LegsTemporaryLocationOffset;                       // 0x0138(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LegsTemporaryScale;                                // 0x0150(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGymVAVEAnimationSet>           AnimationSets;                                     // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymVaultingEngineVariantAsset">();
	}
	static class UGymVaultingEngineVariantAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymVaultingEngineVariantAsset>();
	}
};
static_assert(alignof(UGymVaultingEngineVariantAsset) == 0x000008, "Wrong alignment on UGymVaultingEngineVariantAsset");
static_assert(sizeof(UGymVaultingEngineVariantAsset) == 0x000178, "Wrong size on UGymVaultingEngineVariantAsset");
static_assert(offsetof(UGymVaultingEngineVariantAsset, Slot) == 0x000030, "Member 'UGymVaultingEngineVariantAsset::Slot' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, RequireActivationInput) == 0x000031, "Member 'UGymVaultingEngineVariantAsset::RequireActivationInput' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, VaultTransitionToBasic) == 0x000032, "Member 'UGymVaultingEngineVariantAsset::VaultTransitionToBasic' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, UseABPath) == 0x000034, "Member 'UGymVaultingEngineVariantAsset::UseABPath' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, MaxShrinkRatio) == 0x000038, "Member 'UGymVaultingEngineVariantAsset::MaxShrinkRatio' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, ReturnVelocityMulti) == 0x00003C, "Member 'UGymVaultingEngineVariantAsset::ReturnVelocityMulti' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, UseEasyInReturnVelocity) == 0x000040, "Member 'UGymVaultingEngineVariantAsset::UseEasyInReturnVelocity' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, EasyInReturnVelocityStartRatio) == 0x000044, "Member 'UGymVaultingEngineVariantAsset::EasyInReturnVelocityStartRatio' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, TranslationAdjustmentCurve) == 0x000048, "Member 'UGymVaultingEngineVariantAsset::TranslationAdjustmentCurve' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, MaxZForAutoVaultFromBasic) == 0x000050, "Member 'UGymVaultingEngineVariantAsset::MaxZForAutoVaultFromBasic' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, MinZ) == 0x000054, "Member 'UGymVaultingEngineVariantAsset::MinZ' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, MaxZ) == 0x000058, "Member 'UGymVaultingEngineVariantAsset::MaxZ' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, MinDots) == 0x00005C, "Member 'UGymVaultingEngineVariantAsset::MinDots' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, InAirMinDots) == 0x000060, "Member 'UGymVaultingEngineVariantAsset::InAirMinDots' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, ConsumeInput) == 0x000064, "Member 'UGymVaultingEngineVariantAsset::ConsumeInput' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, AllowNormalJumpOffInTheEnd) == 0x000065, "Member 'UGymVaultingEngineVariantAsset::AllowNormalJumpOffInTheEnd' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, StaticMaxActivationRange) == 0x000068, "Member 'UGymVaultingEngineVariantAsset::StaticMaxActivationRange' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, UseVelocityRatioForActivationRange) == 0x00006C, "Member 'UGymVaultingEngineVariantAsset::UseVelocityRatioForActivationRange' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, StaticVaultVelocity) == 0x000070, "Member 'UGymVaultingEngineVariantAsset::StaticVaultVelocity' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, AdaptToSpeed) == 0x000074, "Member 'UGymVaultingEngineVariantAsset::AdaptToSpeed' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, AdaptToSpeedMinVelocity) == 0x000078, "Member 'UGymVaultingEngineVariantAsset::AdaptToSpeedMinVelocity' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, AdaptToSpeedMaxVelocity) == 0x00007C, "Member 'UGymVaultingEngineVariantAsset::AdaptToSpeedMaxVelocity' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, AdaptToSpeedMinMulti) == 0x000080, "Member 'UGymVaultingEngineVariantAsset::AdaptToSpeedMinMulti' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, AdaptToSpeedMaxMulti) == 0x000084, "Member 'UGymVaultingEngineVariantAsset::AdaptToSpeedMaxMulti' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, VaultLengthMulti) == 0x000088, "Member 'UGymVaultingEngineVariantAsset::VaultLengthMulti' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, EndWithJump) == 0x00008C, "Member 'UGymVaultingEngineVariantAsset::EndWithJump' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, EndWithJumpForce) == 0x000090, "Member 'UGymVaultingEngineVariantAsset::EndWithJumpForce' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, SetStackableSpeedBoost) == 0x000094, "Member 'UGymVaultingEngineVariantAsset::SetStackableSpeedBoost' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, StackableSpeedBoostMultiplier) == 0x000098, "Member 'UGymVaultingEngineVariantAsset::StackableSpeedBoostMultiplier' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, StackableSpeedBoostForSeconds) == 0x00009C, "Member 'UGymVaultingEngineVariantAsset::StackableSpeedBoostForSeconds' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, StackableSpeedBoostDoNotDecrease) == 0x0000A0, "Member 'UGymVaultingEngineVariantAsset::StackableSpeedBoostDoNotDecrease' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, StackableSpeedBoostOptionalSpeedCurve) == 0x0000A8, "Member 'UGymVaultingEngineVariantAsset::StackableSpeedBoostOptionalSpeedCurve' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, CameraClampMin) == 0x0000B0, "Member 'UGymVaultingEngineVariantAsset::CameraClampMin' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, CameraClampMax) == 0x0000B4, "Member 'UGymVaultingEngineVariantAsset::CameraClampMax' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, CameraOffset) == 0x0000B8, "Member 'UGymVaultingEngineVariantAsset::CameraOffset' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, UseHeadToBoneRotation) == 0x0000D0, "Member 'UGymVaultingEngineVariantAsset::UseHeadToBoneRotation' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, HeadToBoneLerpPower) == 0x0000D4, "Member 'UGymVaultingEngineVariantAsset::HeadToBoneLerpPower' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, HandsTemporaryLocationOffset) == 0x0000D8, "Member 'UGymVaultingEngineVariantAsset::HandsTemporaryLocationOffset' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, HandsTemporaryScale) == 0x0000F0, "Member 'UGymVaultingEngineVariantAsset::HandsTemporaryScale' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, HandsKinematicTemporaryLocationOffset) == 0x000108, "Member 'UGymVaultingEngineVariantAsset::HandsKinematicTemporaryLocationOffset' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, HandsKinematicTemporaryScale) == 0x000120, "Member 'UGymVaultingEngineVariantAsset::HandsKinematicTemporaryScale' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, LegsTemporaryLocationOffset) == 0x000138, "Member 'UGymVaultingEngineVariantAsset::LegsTemporaryLocationOffset' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, LegsTemporaryScale) == 0x000150, "Member 'UGymVaultingEngineVariantAsset::LegsTemporaryScale' has a wrong offset!");
static_assert(offsetof(UGymVaultingEngineVariantAsset, AnimationSets) == 0x000168, "Member 'UGymVaultingEngineVariantAsset::AnimationSets' has a wrong offset!");

// Class GYMGAME.GymVMSkeletalMeshComponent
// 0x0020 (0x0FC0 - 0x0FA0)
class UGymVMSkeletalMeshComponent final : public USkeletalMeshComponent
{
public:
	float                                         DesiredViewmodelFOV;                               // 0x0FA0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA4[0x4];                                      // 0x0FA4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      PlayerController;                                  // 0x0FA8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class APlayerCameraManager*                   PlayerCameraManager;                               // 0x0FB0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_FB8[0x8];                                      // 0x0FB8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymVMSkeletalMeshComponent">();
	}
	static class UGymVMSkeletalMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymVMSkeletalMeshComponent>();
	}
};
static_assert(alignof(UGymVMSkeletalMeshComponent) == 0x000010, "Wrong alignment on UGymVMSkeletalMeshComponent");
static_assert(sizeof(UGymVMSkeletalMeshComponent) == 0x000FC0, "Wrong size on UGymVMSkeletalMeshComponent");
static_assert(offsetof(UGymVMSkeletalMeshComponent, DesiredViewmodelFOV) == 0x000FA0, "Member 'UGymVMSkeletalMeshComponent::DesiredViewmodelFOV' has a wrong offset!");
static_assert(offsetof(UGymVMSkeletalMeshComponent, PlayerController) == 0x000FA8, "Member 'UGymVMSkeletalMeshComponent::PlayerController' has a wrong offset!");
static_assert(offsetof(UGymVMSkeletalMeshComponent, PlayerCameraManager) == 0x000FB0, "Member 'UGymVMSkeletalMeshComponent::PlayerCameraManager' has a wrong offset!");

// Class GYMGAME.GymWallPiece
// 0x0010 (0x00B0 - 0x00A0)
class UGymWallPiece final : public UActorComponent
{
public:
	struct FIntVector                             Position;                                          // 0x00A0(0x000C)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EGymWallDirection                             Direction;                                         // 0x00AC(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymWallPiece">();
	}
	static class UGymWallPiece* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymWallPiece>();
	}
};
static_assert(alignof(UGymWallPiece) == 0x000008, "Wrong alignment on UGymWallPiece");
static_assert(sizeof(UGymWallPiece) == 0x0000B0, "Wrong size on UGymWallPiece");
static_assert(offsetof(UGymWallPiece, Position) == 0x0000A0, "Member 'UGymWallPiece::Position' has a wrong offset!");
static_assert(offsetof(UGymWallPiece, Direction) == 0x0000AC, "Member 'UGymWallPiece::Direction' has a wrong offset!");

// Class GYMGAME.GymWallSystem
// 0x0170 (0x0408 - 0x0298)
class AGymWallSystem final : public AActor
{
public:
	uint8                                         Pad_298[0x30];                                     // 0x0298(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymShape                              Shape;                                             // 0x02C8(0x0058)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_320[0xA8];                                     // 0x0320(0x00A8)(Fixing Size After Last Property [ Dumper-7 ])
	class AGymSkyboxGenerator*                    SkyboxGenerator;                                   // 0x03C8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UGymWallThemeProvider>      ThemeProviderV1BP;                                 // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGymWallThemeProvider>      ThemeProviderV2BP;                                 // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymWallThemeProvider*                  ThemeProvider;                                     // 0x03E0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             MaxSize;                                           // 0x03E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             StartAreaSize;                                     // 0x03F4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoxelSize;                                         // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FloorLevel;                                        // 0x0404(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymWallSystem">();
	}
	static class AGymWallSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymWallSystem>();
	}
};
static_assert(alignof(AGymWallSystem) == 0x000008, "Wrong alignment on AGymWallSystem");
static_assert(sizeof(AGymWallSystem) == 0x000408, "Wrong size on AGymWallSystem");
static_assert(offsetof(AGymWallSystem, Shape) == 0x0002C8, "Member 'AGymWallSystem::Shape' has a wrong offset!");
static_assert(offsetof(AGymWallSystem, SkyboxGenerator) == 0x0003C8, "Member 'AGymWallSystem::SkyboxGenerator' has a wrong offset!");
static_assert(offsetof(AGymWallSystem, ThemeProviderV1BP) == 0x0003D0, "Member 'AGymWallSystem::ThemeProviderV1BP' has a wrong offset!");
static_assert(offsetof(AGymWallSystem, ThemeProviderV2BP) == 0x0003D8, "Member 'AGymWallSystem::ThemeProviderV2BP' has a wrong offset!");
static_assert(offsetof(AGymWallSystem, ThemeProvider) == 0x0003E0, "Member 'AGymWallSystem::ThemeProvider' has a wrong offset!");
static_assert(offsetof(AGymWallSystem, MaxSize) == 0x0003E8, "Member 'AGymWallSystem::MaxSize' has a wrong offset!");
static_assert(offsetof(AGymWallSystem, StartAreaSize) == 0x0003F4, "Member 'AGymWallSystem::StartAreaSize' has a wrong offset!");
static_assert(offsetof(AGymWallSystem, VoxelSize) == 0x000400, "Member 'AGymWallSystem::VoxelSize' has a wrong offset!");
static_assert(offsetof(AGymWallSystem, FloorLevel) == 0x000404, "Member 'AGymWallSystem::FloorLevel' has a wrong offset!");

// Class GYMGAME.GymWallThemeData
// 0x0038 (0x0068 - 0x0030)
class UGymWallThemeData final : public UPrimaryDataAsset
{
public:
	class FName                                   Name_0;                                            // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGymWallThemeVariant>           Floor;                                             // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGymWallThemeVariant>           Ceiling;                                           // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGymWallThemeVariant>           CeilingBorder;                                     // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymWallThemeData">();
	}
	static class UGymWallThemeData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymWallThemeData>();
	}
};
static_assert(alignof(UGymWallThemeData) == 0x000008, "Wrong alignment on UGymWallThemeData");
static_assert(sizeof(UGymWallThemeData) == 0x000068, "Wrong size on UGymWallThemeData");
static_assert(offsetof(UGymWallThemeData, Name_0) == 0x000030, "Member 'UGymWallThemeData::Name_0' has a wrong offset!");
static_assert(offsetof(UGymWallThemeData, Floor) == 0x000038, "Member 'UGymWallThemeData::Floor' has a wrong offset!");
static_assert(offsetof(UGymWallThemeData, Ceiling) == 0x000048, "Member 'UGymWallThemeData::Ceiling' has a wrong offset!");
static_assert(offsetof(UGymWallThemeData, CeilingBorder) == 0x000058, "Member 'UGymWallThemeData::CeilingBorder' has a wrong offset!");

// Class GYMGAME.GymWinRaceObjective
// 0x0018 (0x00D8 - 0x00C0)
class UGymWinRaceObjective final : public UGymObjective
{
public:
	bool                                          bAnyRace;                                          // 0x00C0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldFailObjectiveOnElimination;                 // 0x00C1(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldStartRace;                                  // 0x00C2(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C3[0x5];                                       // 0x00C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UGymRules>>          Rules;                                             // 0x00C8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymWinRaceObjective">();
	}
	static class UGymWinRaceObjective* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymWinRaceObjective>();
	}
};
static_assert(alignof(UGymWinRaceObjective) == 0x000008, "Wrong alignment on UGymWinRaceObjective");
static_assert(sizeof(UGymWinRaceObjective) == 0x0000D8, "Wrong size on UGymWinRaceObjective");
static_assert(offsetof(UGymWinRaceObjective, bAnyRace) == 0x0000C0, "Member 'UGymWinRaceObjective::bAnyRace' has a wrong offset!");
static_assert(offsetof(UGymWinRaceObjective, bShouldFailObjectiveOnElimination) == 0x0000C1, "Member 'UGymWinRaceObjective::bShouldFailObjectiveOnElimination' has a wrong offset!");
static_assert(offsetof(UGymWinRaceObjective, bShouldStartRace) == 0x0000C2, "Member 'UGymWinRaceObjective::bShouldStartRace' has a wrong offset!");
static_assert(offsetof(UGymWinRaceObjective, Rules) == 0x0000C8, "Member 'UGymWinRaceObjective::Rules' has a wrong offset!");

// Class GYMGAME.GymWireWalkingAnimator
// 0x0010 (0x00B8 - 0x00A8)
class UGymWireWalkingAnimator final : public UGymMetaAnimator
{
public:
	struct FGymWireWalkingAnimatorProps           Props;                                             // 0x00A8(0x000C)(Net, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymWireWalkingAnimator">();
	}
	static class UGymWireWalkingAnimator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymWireWalkingAnimator>();
	}
};
static_assert(alignof(UGymWireWalkingAnimator) == 0x000008, "Wrong alignment on UGymWireWalkingAnimator");
static_assert(sizeof(UGymWireWalkingAnimator) == 0x0000B8, "Wrong size on UGymWireWalkingAnimator");
static_assert(offsetof(UGymWireWalkingAnimator, Props) == 0x0000A8, "Member 'UGymWireWalkingAnimator::Props' has a wrong offset!");

// Class GYMGAME.GymXPManager
// 0x0020 (0x0048 - 0x0028)
class UGymXPManager final : public UObject
{
public:
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymXPManager">();
	}
	static class UGymXPManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymXPManager>();
	}
};
static_assert(alignof(UGymXPManager) == 0x000008, "Wrong alignment on UGymXPManager");
static_assert(sizeof(UGymXPManager) == 0x000048, "Wrong size on UGymXPManager");

// Class GYMGAME.GymZiplinePlacer
// 0x0000 (0x0330 - 0x0330)
class AGymZiplinePlacer final : public AGymSplinePlacer
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GymZiplinePlacer">();
	}
	static class AGymZiplinePlacer* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGymZiplinePlacer>();
	}
};
static_assert(alignof(AGymZiplinePlacer) == 0x000008, "Wrong alignment on AGymZiplinePlacer");
static_assert(sizeof(AGymZiplinePlacer) == 0x000330, "Wrong size on AGymZiplinePlacer");

// Class GYMGAME.HighlightableElement
// 0x0000 (0x02C0 - 0x02C0)
class UHighlightableElement : public UUserWidget
{
public:
	void PlayButtonSound();
	void SetHighlight(bool Value);
	void SetNotifications(int32 Count);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HighlightableElement">();
	}
	static class UHighlightableElement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHighlightableElement>();
	}
};
static_assert(alignof(UHighlightableElement) == 0x000008, "Wrong alignment on UHighlightableElement");
static_assert(sizeof(UHighlightableElement) == 0x0002C0, "Wrong size on UHighlightableElement");

// Class GYMGAME.SnappingGrid
// 0x0008 (0x02A0 - 0x0298)
class ASnappingGrid : public AActor
{
public:
	class UStaticMeshComponent*                   Mesh;                                              // 0x0298(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnappingGrid">();
	}
	static class ASnappingGrid* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASnappingGrid>();
	}
};
static_assert(alignof(ASnappingGrid) == 0x000008, "Wrong alignment on ASnappingGrid");
static_assert(sizeof(ASnappingGrid) == 0x0002A0, "Wrong size on ASnappingGrid");
static_assert(offsetof(ASnappingGrid, Mesh) == 0x000298, "Member 'ASnappingGrid::Mesh' has a wrong offset!");

}

