#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CheckpointCounter_WBP

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function CheckpointCounter_WBP.CheckpointCounter_WBP_C.ExecuteUbergraph_CheckpointCounter_WBP
// 0x0044 (0x0044 - 0x0000)
struct CheckpointCounter_WBP_C_ExecuteUbergraph_CheckpointCounter_WBP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0008(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CheckpointCounter_WBP_C_ExecuteUbergraph_CheckpointCounter_WBP) == 0x000004, "Wrong alignment on CheckpointCounter_WBP_C_ExecuteUbergraph_CheckpointCounter_WBP");
static_assert(sizeof(CheckpointCounter_WBP_C_ExecuteUbergraph_CheckpointCounter_WBP) == 0x000044, "Wrong size on CheckpointCounter_WBP_C_ExecuteUbergraph_CheckpointCounter_WBP");
static_assert(offsetof(CheckpointCounter_WBP_C_ExecuteUbergraph_CheckpointCounter_WBP, EntryPoint) == 0x000000, "Member 'CheckpointCounter_WBP_C_ExecuteUbergraph_CheckpointCounter_WBP::EntryPoint' has a wrong offset!");
static_assert(offsetof(CheckpointCounter_WBP_C_ExecuteUbergraph_CheckpointCounter_WBP, K2Node_Event_IsDesignTime) == 0x000004, "Member 'CheckpointCounter_WBP_C_ExecuteUbergraph_CheckpointCounter_WBP::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(CheckpointCounter_WBP_C_ExecuteUbergraph_CheckpointCounter_WBP, K2Node_Event_MyGeometry) == 0x000008, "Member 'CheckpointCounter_WBP_C_ExecuteUbergraph_CheckpointCounter_WBP::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(CheckpointCounter_WBP_C_ExecuteUbergraph_CheckpointCounter_WBP, K2Node_Event_InDeltaTime) == 0x000040, "Member 'CheckpointCounter_WBP_C_ExecuteUbergraph_CheckpointCounter_WBP::K2Node_Event_InDeltaTime' has a wrong offset!");

// Function CheckpointCounter_WBP.CheckpointCounter_WBP_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct CheckpointCounter_WBP_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CheckpointCounter_WBP_C_PreConstruct) == 0x000001, "Wrong alignment on CheckpointCounter_WBP_C_PreConstruct");
static_assert(sizeof(CheckpointCounter_WBP_C_PreConstruct) == 0x000001, "Wrong size on CheckpointCounter_WBP_C_PreConstruct");
static_assert(offsetof(CheckpointCounter_WBP_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'CheckpointCounter_WBP_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function CheckpointCounter_WBP.CheckpointCounter_WBP_C.SetCounterText
// 0x0100 (0x0100 - 0x0000)
struct CheckpointCounter_WBP_C_SetCounterText final
{
public:
	class UGymParticipantRepData*                 CallFunc_GetBasicParticipantData_ReturnValue;      // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGymRuleReplicatedData*                 CallFunc_GetBasicRuleData_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCheckpointCount_ReturnValue;           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_CheckpointsVisited_ReturnValue;           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0030(0x0050)(HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue_1;            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0088(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00D8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00E8(0x0018)()
};
static_assert(alignof(CheckpointCounter_WBP_C_SetCounterText) == 0x000008, "Wrong alignment on CheckpointCounter_WBP_C_SetCounterText");
static_assert(sizeof(CheckpointCounter_WBP_C_SetCounterText) == 0x000100, "Wrong size on CheckpointCounter_WBP_C_SetCounterText");
static_assert(offsetof(CheckpointCounter_WBP_C_SetCounterText, CallFunc_GetBasicParticipantData_ReturnValue) == 0x000000, "Member 'CheckpointCounter_WBP_C_SetCounterText::CallFunc_GetBasicParticipantData_ReturnValue' has a wrong offset!");
static_assert(offsetof(CheckpointCounter_WBP_C_SetCounterText, CallFunc_GetBasicRuleData_ReturnValue) == 0x000008, "Member 'CheckpointCounter_WBP_C_SetCounterText::CallFunc_GetBasicRuleData_ReturnValue' has a wrong offset!");
static_assert(offsetof(CheckpointCounter_WBP_C_SetCounterText, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'CheckpointCounter_WBP_C_SetCounterText::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CheckpointCounter_WBP_C_SetCounterText, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'CheckpointCounter_WBP_C_SetCounterText::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CheckpointCounter_WBP_C_SetCounterText, CallFunc_GetCheckpointCount_ReturnValue) == 0x000014, "Member 'CheckpointCounter_WBP_C_SetCounterText::CallFunc_GetCheckpointCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(CheckpointCounter_WBP_C_SetCounterText, CallFunc_BooleanAND_ReturnValue) == 0x000018, "Member 'CheckpointCounter_WBP_C_SetCounterText::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(CheckpointCounter_WBP_C_SetCounterText, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'CheckpointCounter_WBP_C_SetCounterText::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CheckpointCounter_WBP_C_SetCounterText, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000020, "Member 'CheckpointCounter_WBP_C_SetCounterText::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(CheckpointCounter_WBP_C_SetCounterText, CallFunc_CheckpointsVisited_ReturnValue) == 0x000028, "Member 'CheckpointCounter_WBP_C_SetCounterText::CallFunc_CheckpointsVisited_ReturnValue' has a wrong offset!");
static_assert(offsetof(CheckpointCounter_WBP_C_SetCounterText, K2Node_MakeStruct_FormatArgumentData) == 0x000030, "Member 'CheckpointCounter_WBP_C_SetCounterText::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(CheckpointCounter_WBP_C_SetCounterText, CallFunc_Conv_IntToInt64_ReturnValue_1) == 0x000080, "Member 'CheckpointCounter_WBP_C_SetCounterText::CallFunc_Conv_IntToInt64_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CheckpointCounter_WBP_C_SetCounterText, K2Node_MakeStruct_FormatArgumentData_1) == 0x000088, "Member 'CheckpointCounter_WBP_C_SetCounterText::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(CheckpointCounter_WBP_C_SetCounterText, K2Node_MakeArray_Array) == 0x0000D8, "Member 'CheckpointCounter_WBP_C_SetCounterText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(CheckpointCounter_WBP_C_SetCounterText, CallFunc_Format_ReturnValue) == 0x0000E8, "Member 'CheckpointCounter_WBP_C_SetCounterText::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function CheckpointCounter_WBP.CheckpointCounter_WBP_C.Tick
// 0x003C (0x003C - 0x0000)
struct CheckpointCounter_WBP_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CheckpointCounter_WBP_C_Tick) == 0x000004, "Wrong alignment on CheckpointCounter_WBP_C_Tick");
static_assert(sizeof(CheckpointCounter_WBP_C_Tick) == 0x00003C, "Wrong size on CheckpointCounter_WBP_C_Tick");
static_assert(offsetof(CheckpointCounter_WBP_C_Tick, MyGeometry) == 0x000000, "Member 'CheckpointCounter_WBP_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(CheckpointCounter_WBP_C_Tick, InDeltaTime) == 0x000038, "Member 'CheckpointCounter_WBP_C_Tick::InDeltaTime' has a wrong offset!");

}

