#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GymMapSkyData

#include "Basic.hpp"

#include "UDS_SkyMode_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GymMapSkyData.GymMapSkyData_C
// 0x0100 (0x0130 - 0x0030)
class UGymMapSkyData_C final : public UPrimaryDataAsset
{
public:
	double                                        Time_of_Day;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Fog;                                               // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Overall_Intensity;                                 // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Saturation;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Directional_Balance;                               // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dawn_Time;                                         // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DuskTime;                                          // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Night_Brightness;                                  // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Weather;                                           // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Angle;                                         // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Inclination;                                   // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Sun_Light_Color;                                   // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Angle;                                        // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Inclination;                                  // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Moon_Light_Color;                                  // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Sky_Light_Intensity;                               // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Sky_Light_Color_Multiplier__Day_;                  // 0x00C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Dusk_;                                             // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Sky_Light_Color_Multiplier__Night_;                // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Base_Fog_Density;                                  // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Fog_Density_Daytime_Multiplier;                    // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Fog_Density_Nighttime_Multiplier;                  // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Volumetric_Fog_Extinction;                         // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Volumetric_Scattering_Intensity;               // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Volumetric_Scattering_Intensity;              // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOverrideVolumetricClouds;                         // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDS_SkyMode                                  SkyMode;                                           // 0x0121(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_122[0x6];                                      // 0x0122(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Extend_Dawn_and_Dusk;                              // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GymMapSkyData_C">();
	}
	static class UGymMapSkyData_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGymMapSkyData_C>();
	}
};
static_assert(alignof(UGymMapSkyData_C) == 0x000008, "Wrong alignment on UGymMapSkyData_C");
static_assert(sizeof(UGymMapSkyData_C) == 0x000130, "Wrong size on UGymMapSkyData_C");
static_assert(offsetof(UGymMapSkyData_C, Time_of_Day) == 0x000030, "Member 'UGymMapSkyData_C::Time_of_Day' has a wrong offset!");
static_assert(offsetof(UGymMapSkyData_C, Fog) == 0x000038, "Member 'UGymMapSkyData_C::Fog' has a wrong offset!");
static_assert(offsetof(UGymMapSkyData_C, Overall_Intensity) == 0x000040, "Member 'UGymMapSkyData_C::Overall_Intensity' has a wrong offset!");
static_assert(offsetof(UGymMapSkyData_C, Saturation) == 0x000048, "Member 'UGymMapSkyData_C::Saturation' has a wrong offset!");
static_assert(offsetof(UGymMapSkyData_C, Directional_Balance) == 0x000050, "Member 'UGymMapSkyData_C::Directional_Balance' has a wrong offset!");
static_assert(offsetof(UGymMapSkyData_C, Dawn_Time) == 0x000058, "Member 'UGymMapSkyData_C::Dawn_Time' has a wrong offset!");
static_assert(offsetof(UGymMapSkyData_C, DuskTime) == 0x000060, "Member 'UGymMapSkyData_C::DuskTime' has a wrong offset!");
static_assert(offsetof(UGymMapSkyData_C, Night_Brightness) == 0x000068, "Member 'UGymMapSkyData_C::Night_Brightness' has a wrong offset!");
static_assert(offsetof(UGymMapSkyData_C, Weather) == 0x000070, "Member 'UGymMapSkyData_C::Weather' has a wrong offset!");
static_assert(offsetof(UGymMapSkyData_C, Sun_Angle) == 0x000078, "Member 'UGymMapSkyData_C::Sun_Angle' has a wrong offset!");
static_assert(offsetof(UGymMapSkyData_C, Sun_Inclination) == 0x000080, "Member 'UGymMapSkyData_C::Sun_Inclination' has a wrong offset!");
static_assert(offsetof(UGymMapSkyData_C, Sun_Light_Color) == 0x000088, "Member 'UGymMapSkyData_C::Sun_Light_Color' has a wrong offset!");
static_assert(offsetof(UGymMapSkyData_C, Moon_Angle) == 0x000098, "Member 'UGymMapSkyData_C::Moon_Angle' has a wrong offset!");
static_assert(offsetof(UGymMapSkyData_C, Moon_Inclination) == 0x0000A0, "Member 'UGymMapSkyData_C::Moon_Inclination' has a wrong offset!");
static_assert(offsetof(UGymMapSkyData_C, Moon_Light_Color) == 0x0000A8, "Member 'UGymMapSkyData_C::Moon_Light_Color' has a wrong offset!");
static_assert(offsetof(UGymMapSkyData_C, Sky_Light_Intensity) == 0x0000B8, "Member 'UGymMapSkyData_C::Sky_Light_Intensity' has a wrong offset!");
static_assert(offsetof(UGymMapSkyData_C, Sky_Light_Color_Multiplier__Day_) == 0x0000C0, "Member 'UGymMapSkyData_C::Sky_Light_Color_Multiplier__Day_' has a wrong offset!");
static_assert(offsetof(UGymMapSkyData_C, Dusk_) == 0x0000D0, "Member 'UGymMapSkyData_C::Dusk_' has a wrong offset!");
static_assert(offsetof(UGymMapSkyData_C, Sky_Light_Color_Multiplier__Night_) == 0x0000E0, "Member 'UGymMapSkyData_C::Sky_Light_Color_Multiplier__Night_' has a wrong offset!");
static_assert(offsetof(UGymMapSkyData_C, Base_Fog_Density) == 0x0000F0, "Member 'UGymMapSkyData_C::Base_Fog_Density' has a wrong offset!");
static_assert(offsetof(UGymMapSkyData_C, Fog_Density_Daytime_Multiplier) == 0x0000F8, "Member 'UGymMapSkyData_C::Fog_Density_Daytime_Multiplier' has a wrong offset!");
static_assert(offsetof(UGymMapSkyData_C, Fog_Density_Nighttime_Multiplier) == 0x000100, "Member 'UGymMapSkyData_C::Fog_Density_Nighttime_Multiplier' has a wrong offset!");
static_assert(offsetof(UGymMapSkyData_C, Volumetric_Fog_Extinction) == 0x000108, "Member 'UGymMapSkyData_C::Volumetric_Fog_Extinction' has a wrong offset!");
static_assert(offsetof(UGymMapSkyData_C, Sun_Volumetric_Scattering_Intensity) == 0x000110, "Member 'UGymMapSkyData_C::Sun_Volumetric_Scattering_Intensity' has a wrong offset!");
static_assert(offsetof(UGymMapSkyData_C, Moon_Volumetric_Scattering_Intensity) == 0x000118, "Member 'UGymMapSkyData_C::Moon_Volumetric_Scattering_Intensity' has a wrong offset!");
static_assert(offsetof(UGymMapSkyData_C, bOverrideVolumetricClouds) == 0x000120, "Member 'UGymMapSkyData_C::bOverrideVolumetricClouds' has a wrong offset!");
static_assert(offsetof(UGymMapSkyData_C, SkyMode) == 0x000121, "Member 'UGymMapSkyData_C::SkyMode' has a wrong offset!");
static_assert(offsetof(UGymMapSkyData_C, Extend_Dawn_and_Dusk) == 0x000128, "Member 'UGymMapSkyData_C::Extend_Dawn_and_Dusk' has a wrong offset!");

}

