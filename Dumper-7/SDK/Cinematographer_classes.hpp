#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Cinematographer

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Cinematographer_structs.hpp"
#include "CinematicCamera_structs.hpp"
#include "CinematicCamera_classes.hpp"


namespace SDK
{

// Class Cinematographer.RealCameraActor
// 0x0240 (0x0C60 - 0x0A20)
class ARealCameraActor final : public ACineCameraActor
{
public:
	TArray<float>                                 FStops;                                            // 0x0A18(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Shutterspeeds;                                     // 0x0A28(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ISOs;                                              // 0x0A38(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class USceneCaptureComponent2D*               RealCameraCaptureComponent;                        // 0x0A48(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class URealCameraBody>            ActiveRealCameraBody;                              // 0x0A50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class URealCameraLens>            ActiveRealCameraLens;                              // 0x0A58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActiveRealCameraLensName;                          // 0x0A60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URealCameraBody*                        ActiveBody;                                        // 0x0A68(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URealCameraLens*                        ActiveLens;                                        // 0x0A70(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EV100ISOPoisiton;                                  // 0x0A78(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EV100ShutterPoisiton;                              // 0x0A7C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EV100AperturePoisiton;                             // 0x0A80(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRealCameraInitialized;                            // 0x0A84(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A85[0x3];                                      // 0x0A85(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoExposureLuminanceTarget;                       // 0x0A88(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureLuminanceTargetLegacy;                 // 0x0A8C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureLuminanceTargetLumen;                  // 0x0A90(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureLuminanceThreshold;                    // 0x0A94(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EVRange;                                           // 0x0A98(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EVISORange;                                        // 0x0A9C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              EVISORangeMinMax;                                  // 0x0AA0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EVShutterRange;                                    // 0x0AA8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              EVShutterRangeMinMax;                              // 0x0AAC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EVApertureRange;                                   // 0x0AB4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              EVApertureRangeMinMax;                             // 0x0AB8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EVApertureBasePosition;                            // 0x0AC0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EVApertureCompensationPosition;                    // 0x0AC4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EVShutterBasePosition;                             // 0x0AC8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EVShutterCompensationPosition;                     // 0x0ACC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EVISOCompensationPosition;                         // 0x0AD0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EVISOBasePosition;                                 // 0x0AD4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentEV;                                         // 0x0AD8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseEV;                                            // 0x0ADC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CompensationEV;                                    // 0x0AE0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCompensationUpdate;                             // 0x0AE4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoExposureUpdatedThisTick;                      // 0x0AE5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECompensationSteps                            AutoExposureCompensationSteps;                     // 0x0AE6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AE7[0x1];                                      // 0x0AE7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraShutterSettings                 RealCameraShutterSettings;                         // 0x0AE8(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EAutoExposureMode                             AutoExposureMode;                                  // 0x0AFC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPrimeLens;                                      // 0x0AFD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AFE[0x2];                                      // 0x0AFE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActiveFocalLength;                                 // 0x0B00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentAperture;                                   // 0x0B04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentISO;                                        // 0x0B08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentNDFilter;                                   // 0x0B0C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomAspectRatio;                                // 0x0B10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B11[0x7];                                      // 0x0B11(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CustomAspectRatio;                                 // 0x0B18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShutterExposureCompensation;                       // 0x0B28(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              CurrentISORange;                                   // 0x0B2C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B34[0x4];                                      // 0x0B34(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CurrentApertureRange;                              // 0x0B38(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCurrentLensIsInterchangable;                      // 0x0B48(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B49[0x3];                                      // 0x0B49(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FocalLenghtCompensation;                           // 0x0B4C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ISO_Max;                                           // 0x0B50(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentISOMultiplier;                              // 0x0B54(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentPixelSize;                                  // 0x0B58(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentCropFactor;                                 // 0x0B5C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentBarrelDistortion;                           // 0x0B60(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentGeneralLensSharpness;                       // 0x0B64(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentCornerLensSharpness;                        // 0x0B68(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentPurpleFringing;                             // 0x0B6C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentVignetting;                                 // 0x0B70(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentChromaticAberration;                        // 0x0B74(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          CurrentBladeCount;                                 // 0x0B78(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B79[0x7];                                      // 0x0B79(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              FullFrameSizeSize;                                 // 0x0B80(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseEditorTick;                                     // 0x0B90(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExposureCompensationEnabled;                      // 0x0B91(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimulatedDynamicRangeEnabled;                     // 0x0B92(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMotionBlurEnabled;                                // 0x0B93(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBarrelDistortionEnabled;                          // 0x0B94(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBarrelDistortionFocalCompEnabled;                 // 0x0B95(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLensSharpnessEnabled;                             // 0x0B96(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVignettingEnabled;                                // 0x0B97(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPurpleFringingEnabled;                            // 0x0B98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChromaticAberrationEnabled;                       // 0x0B99(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bISOGrainEnabled;                                  // 0x0B9A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9B[0x5];                                      // 0x0B9B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class URealCameraComponent*                   RealCameraComponent;                               // 0x0BA0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterial*                              GrainMaterial;                                     // 0x0BA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInstanceDynamic*               GrainDynMaterial;                                  // 0x0BB0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterial*                              DistortionMaterial;                                // 0x0BB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInstanceDynamic*               DistortionDynMaterial;                             // 0x0BC0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterial*                              SharpnessMaterial;                                 // 0x0BC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInstanceDynamic*               SharpnessDynMaterial;                              // 0x0BD0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTextureRenderTarget2D*                 AverageSceneLuminanceRenderTarget;                 // 0x0BD8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RenderTargetSize;                                  // 0x0BE0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint32                                        RenderTargetTextureSizeX;                          // 0x0BE4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint32                                        RenderTargetTextureSizeY;                          // 0x0BE8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_BEC[0x4];                                      // 0x0BEC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraLookatTrackingSettings          RealCameraLookatTrackingSettings;                  // 0x0BF0(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_C58[0x8];                                      // 0x0C58(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetActiveFocalLength(float Value);
	void SetCurrentAperture(float Value);
	void SetCurrentISO(int32 Value);
	void SetCurrentNDFilter(float Value);
	void SetCustomAspectRatio(const struct FVector2D& Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RealCameraActor">();
	}
	static class ARealCameraActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARealCameraActor>();
	}
};
static_assert(alignof(ARealCameraActor) == 0x000010, "Wrong alignment on ARealCameraActor");
static_assert(sizeof(ARealCameraActor) == 0x000C60, "Wrong size on ARealCameraActor");
static_assert(offsetof(ARealCameraActor, FStops) == 0x000A18, "Member 'ARealCameraActor::FStops' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, Shutterspeeds) == 0x000A28, "Member 'ARealCameraActor::Shutterspeeds' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, ISOs) == 0x000A38, "Member 'ARealCameraActor::ISOs' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, RealCameraCaptureComponent) == 0x000A48, "Member 'ARealCameraActor::RealCameraCaptureComponent' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, ActiveRealCameraBody) == 0x000A50, "Member 'ARealCameraActor::ActiveRealCameraBody' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, ActiveRealCameraLens) == 0x000A58, "Member 'ARealCameraActor::ActiveRealCameraLens' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, ActiveRealCameraLensName) == 0x000A60, "Member 'ARealCameraActor::ActiveRealCameraLensName' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, ActiveBody) == 0x000A68, "Member 'ARealCameraActor::ActiveBody' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, ActiveLens) == 0x000A70, "Member 'ARealCameraActor::ActiveLens' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, EV100ISOPoisiton) == 0x000A78, "Member 'ARealCameraActor::EV100ISOPoisiton' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, EV100ShutterPoisiton) == 0x000A7C, "Member 'ARealCameraActor::EV100ShutterPoisiton' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, EV100AperturePoisiton) == 0x000A80, "Member 'ARealCameraActor::EV100AperturePoisiton' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, bRealCameraInitialized) == 0x000A84, "Member 'ARealCameraActor::bRealCameraInitialized' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, AutoExposureLuminanceTarget) == 0x000A88, "Member 'ARealCameraActor::AutoExposureLuminanceTarget' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, AutoExposureLuminanceTargetLegacy) == 0x000A8C, "Member 'ARealCameraActor::AutoExposureLuminanceTargetLegacy' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, AutoExposureLuminanceTargetLumen) == 0x000A90, "Member 'ARealCameraActor::AutoExposureLuminanceTargetLumen' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, AutoExposureLuminanceThreshold) == 0x000A94, "Member 'ARealCameraActor::AutoExposureLuminanceThreshold' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, EVRange) == 0x000A98, "Member 'ARealCameraActor::EVRange' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, EVISORange) == 0x000A9C, "Member 'ARealCameraActor::EVISORange' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, EVISORangeMinMax) == 0x000AA0, "Member 'ARealCameraActor::EVISORangeMinMax' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, EVShutterRange) == 0x000AA8, "Member 'ARealCameraActor::EVShutterRange' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, EVShutterRangeMinMax) == 0x000AAC, "Member 'ARealCameraActor::EVShutterRangeMinMax' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, EVApertureRange) == 0x000AB4, "Member 'ARealCameraActor::EVApertureRange' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, EVApertureRangeMinMax) == 0x000AB8, "Member 'ARealCameraActor::EVApertureRangeMinMax' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, EVApertureBasePosition) == 0x000AC0, "Member 'ARealCameraActor::EVApertureBasePosition' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, EVApertureCompensationPosition) == 0x000AC4, "Member 'ARealCameraActor::EVApertureCompensationPosition' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, EVShutterBasePosition) == 0x000AC8, "Member 'ARealCameraActor::EVShutterBasePosition' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, EVShutterCompensationPosition) == 0x000ACC, "Member 'ARealCameraActor::EVShutterCompensationPosition' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, EVISOCompensationPosition) == 0x000AD0, "Member 'ARealCameraActor::EVISOCompensationPosition' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, EVISOBasePosition) == 0x000AD4, "Member 'ARealCameraActor::EVISOBasePosition' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, CurrentEV) == 0x000AD8, "Member 'ARealCameraActor::CurrentEV' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, BaseEV) == 0x000ADC, "Member 'ARealCameraActor::BaseEV' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, CompensationEV) == 0x000AE0, "Member 'ARealCameraActor::CompensationEV' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, bIsCompensationUpdate) == 0x000AE4, "Member 'ARealCameraActor::bIsCompensationUpdate' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, bAutoExposureUpdatedThisTick) == 0x000AE5, "Member 'ARealCameraActor::bAutoExposureUpdatedThisTick' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, AutoExposureCompensationSteps) == 0x000AE6, "Member 'ARealCameraActor::AutoExposureCompensationSteps' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, RealCameraShutterSettings) == 0x000AE8, "Member 'ARealCameraActor::RealCameraShutterSettings' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, AutoExposureMode) == 0x000AFC, "Member 'ARealCameraActor::AutoExposureMode' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, bIsPrimeLens) == 0x000AFD, "Member 'ARealCameraActor::bIsPrimeLens' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, ActiveFocalLength) == 0x000B00, "Member 'ARealCameraActor::ActiveFocalLength' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, CurrentAperture) == 0x000B04, "Member 'ARealCameraActor::CurrentAperture' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, CurrentISO) == 0x000B08, "Member 'ARealCameraActor::CurrentISO' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, CurrentNDFilter) == 0x000B0C, "Member 'ARealCameraActor::CurrentNDFilter' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, bCustomAspectRatio) == 0x000B10, "Member 'ARealCameraActor::bCustomAspectRatio' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, CustomAspectRatio) == 0x000B18, "Member 'ARealCameraActor::CustomAspectRatio' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, ShutterExposureCompensation) == 0x000B28, "Member 'ARealCameraActor::ShutterExposureCompensation' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, CurrentISORange) == 0x000B2C, "Member 'ARealCameraActor::CurrentISORange' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, CurrentApertureRange) == 0x000B38, "Member 'ARealCameraActor::CurrentApertureRange' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, bCurrentLensIsInterchangable) == 0x000B48, "Member 'ARealCameraActor::bCurrentLensIsInterchangable' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, FocalLenghtCompensation) == 0x000B4C, "Member 'ARealCameraActor::FocalLenghtCompensation' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, ISO_Max) == 0x000B50, "Member 'ARealCameraActor::ISO_Max' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, CurrentISOMultiplier) == 0x000B54, "Member 'ARealCameraActor::CurrentISOMultiplier' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, CurrentPixelSize) == 0x000B58, "Member 'ARealCameraActor::CurrentPixelSize' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, CurrentCropFactor) == 0x000B5C, "Member 'ARealCameraActor::CurrentCropFactor' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, CurrentBarrelDistortion) == 0x000B60, "Member 'ARealCameraActor::CurrentBarrelDistortion' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, CurrentGeneralLensSharpness) == 0x000B64, "Member 'ARealCameraActor::CurrentGeneralLensSharpness' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, CurrentCornerLensSharpness) == 0x000B68, "Member 'ARealCameraActor::CurrentCornerLensSharpness' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, CurrentPurpleFringing) == 0x000B6C, "Member 'ARealCameraActor::CurrentPurpleFringing' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, CurrentVignetting) == 0x000B70, "Member 'ARealCameraActor::CurrentVignetting' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, CurrentChromaticAberration) == 0x000B74, "Member 'ARealCameraActor::CurrentChromaticAberration' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, CurrentBladeCount) == 0x000B78, "Member 'ARealCameraActor::CurrentBladeCount' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, FullFrameSizeSize) == 0x000B80, "Member 'ARealCameraActor::FullFrameSizeSize' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, UseEditorTick) == 0x000B90, "Member 'ARealCameraActor::UseEditorTick' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, bExposureCompensationEnabled) == 0x000B91, "Member 'ARealCameraActor::bExposureCompensationEnabled' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, bSimulatedDynamicRangeEnabled) == 0x000B92, "Member 'ARealCameraActor::bSimulatedDynamicRangeEnabled' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, bMotionBlurEnabled) == 0x000B93, "Member 'ARealCameraActor::bMotionBlurEnabled' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, bBarrelDistortionEnabled) == 0x000B94, "Member 'ARealCameraActor::bBarrelDistortionEnabled' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, bBarrelDistortionFocalCompEnabled) == 0x000B95, "Member 'ARealCameraActor::bBarrelDistortionFocalCompEnabled' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, bLensSharpnessEnabled) == 0x000B96, "Member 'ARealCameraActor::bLensSharpnessEnabled' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, bVignettingEnabled) == 0x000B97, "Member 'ARealCameraActor::bVignettingEnabled' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, bPurpleFringingEnabled) == 0x000B98, "Member 'ARealCameraActor::bPurpleFringingEnabled' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, bChromaticAberrationEnabled) == 0x000B99, "Member 'ARealCameraActor::bChromaticAberrationEnabled' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, bISOGrainEnabled) == 0x000B9A, "Member 'ARealCameraActor::bISOGrainEnabled' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, RealCameraComponent) == 0x000BA0, "Member 'ARealCameraActor::RealCameraComponent' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, GrainMaterial) == 0x000BA8, "Member 'ARealCameraActor::GrainMaterial' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, GrainDynMaterial) == 0x000BB0, "Member 'ARealCameraActor::GrainDynMaterial' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, DistortionMaterial) == 0x000BB8, "Member 'ARealCameraActor::DistortionMaterial' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, DistortionDynMaterial) == 0x000BC0, "Member 'ARealCameraActor::DistortionDynMaterial' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, SharpnessMaterial) == 0x000BC8, "Member 'ARealCameraActor::SharpnessMaterial' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, SharpnessDynMaterial) == 0x000BD0, "Member 'ARealCameraActor::SharpnessDynMaterial' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, AverageSceneLuminanceRenderTarget) == 0x000BD8, "Member 'ARealCameraActor::AverageSceneLuminanceRenderTarget' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, RenderTargetSize) == 0x000BE0, "Member 'ARealCameraActor::RenderTargetSize' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, RenderTargetTextureSizeX) == 0x000BE4, "Member 'ARealCameraActor::RenderTargetTextureSizeX' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, RenderTargetTextureSizeY) == 0x000BE8, "Member 'ARealCameraActor::RenderTargetTextureSizeY' has a wrong offset!");
static_assert(offsetof(ARealCameraActor, RealCameraLookatTrackingSettings) == 0x000BF0, "Member 'ARealCameraActor::RealCameraLookatTrackingSettings' has a wrong offset!");

// Class Cinematographer.RealCameraBody
// 0x0058 (0x0080 - 0x0028)
class URealCameraBody final : public UObject
{
public:
	class FName                                   ModelName;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SensorSize;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SensorPixelResolution;                             // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              ISORange;                                          // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ISOMultiplier;                                     // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DynamicRange;                                      // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLensIsInterchangable;                             // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class URealCameraLens>            BuiltInLens;                                       // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PixelSize;                                         // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PixelAmount;                                       // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SensorArea;                                        // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PixelArea;                                         // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RealCameraBody">();
	}
	static class URealCameraBody* GetDefaultObj()
	{
		return GetDefaultObjImpl<URealCameraBody>();
	}
};
static_assert(alignof(URealCameraBody) == 0x000008, "Wrong alignment on URealCameraBody");
static_assert(sizeof(URealCameraBody) == 0x000080, "Wrong size on URealCameraBody");
static_assert(offsetof(URealCameraBody, ModelName) == 0x000028, "Member 'URealCameraBody::ModelName' has a wrong offset!");
static_assert(offsetof(URealCameraBody, SensorSize) == 0x000030, "Member 'URealCameraBody::SensorSize' has a wrong offset!");
static_assert(offsetof(URealCameraBody, SensorPixelResolution) == 0x000040, "Member 'URealCameraBody::SensorPixelResolution' has a wrong offset!");
static_assert(offsetof(URealCameraBody, ISORange) == 0x000050, "Member 'URealCameraBody::ISORange' has a wrong offset!");
static_assert(offsetof(URealCameraBody, ISOMultiplier) == 0x000058, "Member 'URealCameraBody::ISOMultiplier' has a wrong offset!");
static_assert(offsetof(URealCameraBody, DynamicRange) == 0x00005C, "Member 'URealCameraBody::DynamicRange' has a wrong offset!");
static_assert(offsetof(URealCameraBody, bLensIsInterchangable) == 0x000060, "Member 'URealCameraBody::bLensIsInterchangable' has a wrong offset!");
static_assert(offsetof(URealCameraBody, BuiltInLens) == 0x000068, "Member 'URealCameraBody::BuiltInLens' has a wrong offset!");
static_assert(offsetof(URealCameraBody, PixelSize) == 0x000070, "Member 'URealCameraBody::PixelSize' has a wrong offset!");
static_assert(offsetof(URealCameraBody, PixelAmount) == 0x000074, "Member 'URealCameraBody::PixelAmount' has a wrong offset!");
static_assert(offsetof(URealCameraBody, SensorArea) == 0x000078, "Member 'URealCameraBody::SensorArea' has a wrong offset!");
static_assert(offsetof(URealCameraBody, PixelArea) == 0x00007C, "Member 'URealCameraBody::PixelArea' has a wrong offset!");

// Class Cinematographer.RealCameraComponent
// 0x0070 (0x0BB0 - 0x0B40)
class URealCameraComponent final : public UCineCameraComponent
{
public:
	struct FCameraFocusSettings                   RealCameraFocusSettings;                           // 0x0B40(0x0060)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	class ARealCameraActor*                       RealCameraActor;                                   // 0x0BA0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA8[0x8];                                      // 0x0BA8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RealCameraComponent">();
	}
	static class URealCameraComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<URealCameraComponent>();
	}
};
static_assert(alignof(URealCameraComponent) == 0x000010, "Wrong alignment on URealCameraComponent");
static_assert(sizeof(URealCameraComponent) == 0x000BB0, "Wrong size on URealCameraComponent");
static_assert(offsetof(URealCameraComponent, RealCameraFocusSettings) == 0x000B40, "Member 'URealCameraComponent::RealCameraFocusSettings' has a wrong offset!");
static_assert(offsetof(URealCameraComponent, RealCameraActor) == 0x000BA0, "Member 'URealCameraComponent::RealCameraActor' has a wrong offset!");

// Class Cinematographer.RealCameraLens
// 0x0070 (0x0098 - 0x0028)
class URealCameraLens final : public UObject
{
public:
	class FName                                   LenseName;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          b_isPrimeLens;                                     // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          b_isFullFrameEquivalent;                           // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FocalLength;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              FocalLengthRange;                                  // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              FStopRange;                                        // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FocusDistanceMin;                                  // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NumberOfBlades;                                    // 0x005C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BarrelDistortion;                                  // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GeneralLensSharpness;                              // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CornerLensSharpness;                               // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Vignetting;                                        // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PurpleFringing;                                    // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChromaticAberration;                               // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCameraLensSettings                    RealLensSettings;                                  // 0x0078(0x001C)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RealCameraLens">();
	}
	static class URealCameraLens* GetDefaultObj()
	{
		return GetDefaultObjImpl<URealCameraLens>();
	}
};
static_assert(alignof(URealCameraLens) == 0x000008, "Wrong alignment on URealCameraLens");
static_assert(sizeof(URealCameraLens) == 0x000098, "Wrong size on URealCameraLens");
static_assert(offsetof(URealCameraLens, LenseName) == 0x000028, "Member 'URealCameraLens::LenseName' has a wrong offset!");
static_assert(offsetof(URealCameraLens, b_isPrimeLens) == 0x000030, "Member 'URealCameraLens::b_isPrimeLens' has a wrong offset!");
static_assert(offsetof(URealCameraLens, b_isFullFrameEquivalent) == 0x000031, "Member 'URealCameraLens::b_isFullFrameEquivalent' has a wrong offset!");
static_assert(offsetof(URealCameraLens, FocalLength) == 0x000034, "Member 'URealCameraLens::FocalLength' has a wrong offset!");
static_assert(offsetof(URealCameraLens, FocalLengthRange) == 0x000038, "Member 'URealCameraLens::FocalLengthRange' has a wrong offset!");
static_assert(offsetof(URealCameraLens, FStopRange) == 0x000048, "Member 'URealCameraLens::FStopRange' has a wrong offset!");
static_assert(offsetof(URealCameraLens, FocusDistanceMin) == 0x000058, "Member 'URealCameraLens::FocusDistanceMin' has a wrong offset!");
static_assert(offsetof(URealCameraLens, NumberOfBlades) == 0x00005C, "Member 'URealCameraLens::NumberOfBlades' has a wrong offset!");
static_assert(offsetof(URealCameraLens, BarrelDistortion) == 0x000060, "Member 'URealCameraLens::BarrelDistortion' has a wrong offset!");
static_assert(offsetof(URealCameraLens, GeneralLensSharpness) == 0x000064, "Member 'URealCameraLens::GeneralLensSharpness' has a wrong offset!");
static_assert(offsetof(URealCameraLens, CornerLensSharpness) == 0x000068, "Member 'URealCameraLens::CornerLensSharpness' has a wrong offset!");
static_assert(offsetof(URealCameraLens, Vignetting) == 0x00006C, "Member 'URealCameraLens::Vignetting' has a wrong offset!");
static_assert(offsetof(URealCameraLens, PurpleFringing) == 0x000070, "Member 'URealCameraLens::PurpleFringing' has a wrong offset!");
static_assert(offsetof(URealCameraLens, ChromaticAberration) == 0x000074, "Member 'URealCameraLens::ChromaticAberration' has a wrong offset!");
static_assert(offsetof(URealCameraLens, RealLensSettings) == 0x000078, "Member 'URealCameraLens::RealLensSettings' has a wrong offset!");

}

