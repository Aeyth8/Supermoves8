#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UpscalerSettingSave

#include "Basic.hpp"

#include "UpscalerSettingSave_classes.hpp"
#include "UpscalerSettingSave_parameters.hpp"


namespace SDK
{

// Function UpscalerSettingSave.UpscalerSettingSave_C.Save
// (Public, BlueprintCallable, BlueprintEvent)

void UUpscalerSettingSave_C::Save()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpscalerSettingSave_C", "Save");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UpscalerSettingSave.UpscalerSettingSave_C.SetAntiAliasingMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BuiltInAAModes                        AntiAliasingMode_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Save                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUpscalerSettingSave_C::SetAntiAliasingMode(E_BuiltInAAModes AntiAliasingMode_0, bool Save)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpscalerSettingSave_C", "SetAntiAliasingMode");

	Params::UpscalerSettingSave_C_SetAntiAliasingMode Parms{};

	Parms.AntiAliasingMode_0 = AntiAliasingMode_0;
	Parms.Save = Save;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UpscalerSettingSave.UpscalerSettingSave_C.SetDLSSMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUDLSSMode                              DLSSMode_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Save_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUpscalerSettingSave_C::SetDLSSMode(EUDLSSMode DLSSMode_0, bool Save_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpscalerSettingSave_C", "SetDLSSMode");

	Params::UpscalerSettingSave_C_SetDLSSMode Parms{};

	Parms.DLSSMode_0 = DLSSMode_0;
	Parms.Save_0 = Save_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UpscalerSettingSave.UpscalerSettingSave_C.SetFGMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUStreamlineDLSSGMode                   NVIDIAFG_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Save                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUpscalerSettingSave_C::SetFGMode(EUStreamlineDLSSGMode NVIDIAFG_0, bool Save)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpscalerSettingSave_C", "SetFGMode");

	Params::UpscalerSettingSave_C_SetFGMode Parms{};

	Parms.NVIDIAFG_0 = NVIDIAFG_0;
	Parms.Save = Save;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UpscalerSettingSave.UpscalerSettingSave_C.SetReflexMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUStreamlineReflexMode                  ReflexMode_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Save                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUpscalerSettingSave_C::SetReflexMode(EUStreamlineReflexMode ReflexMode_0, bool Save)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpscalerSettingSave_C", "SetReflexMode");

	Params::UpscalerSettingSave_C_SetReflexMode Parms{};

	Parms.ReflexMode_0 = ReflexMode_0;
	Parms.Save = Save;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UpscalerSettingSave.UpscalerSettingSave_C.SetScreenPercent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  ResScale                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Save                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUpscalerSettingSave_C::SetScreenPercent(double ResScale, bool Save)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpscalerSettingSave_C", "SetScreenPercent");

	Params::UpscalerSettingSave_C_SetScreenPercent Parms{};

	Parms.ResScale = ResScale;
	Parms.Save = Save;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UpscalerSettingSave.UpscalerSettingSave_C.SetUpscalemode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_UpscaleMode                           UpscaleMode_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Save_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUpscalerSettingSave_C::SetUpscalemode(E_UpscaleMode UpscaleMode_0, bool Save_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpscalerSettingSave_C", "SetUpscalemode");

	Params::UpscalerSettingSave_C_SetUpscalemode Parms{};

	Parms.UpscaleMode_0 = UpscaleMode_0;
	Parms.Save_0 = Save_0;

	UObject::ProcessEvent(Func, &Parms);
}

}

