#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GymMap

#include "Basic.hpp"

#include "UDS_SkyMode_structs.hpp"


namespace SDK::Params
{

// Function BP_GymMap.BP_GymMap_C.ExecuteUbergraph_BP_GymMap
// 0x0050 (0x0050 - 0x0000)
struct BP_GymMap_C_ExecuteUbergraph_BP_GymMap final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUDS_Weather_Settings_C*                CallFunc_GetWeatherFromName_Weather;               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpEaseInOut_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AUltra_Dynamic_Sky_C*                   CallFunc_GetActorOfClass_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AUltra_Dynamic_Weather_C*               CallFunc_GetActorOfClass_ReturnValue_1;            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpEaseInOut_Alpha_ImplicitCast;      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast; // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FInterpEaseInOut_B_ImplicitCast;          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_Time_of_Day_ImplicitCast;       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GymMap_C_ExecuteUbergraph_BP_GymMap) == 0x000008, "Wrong alignment on BP_GymMap_C_ExecuteUbergraph_BP_GymMap");
static_assert(sizeof(BP_GymMap_C_ExecuteUbergraph_BP_GymMap) == 0x000050, "Wrong size on BP_GymMap_C_ExecuteUbergraph_BP_GymMap");
static_assert(offsetof(BP_GymMap_C_ExecuteUbergraph_BP_GymMap, EntryPoint) == 0x000000, "Member 'BP_GymMap_C_ExecuteUbergraph_BP_GymMap::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_GymMap_C_ExecuteUbergraph_BP_GymMap, CallFunc_GetWeatherFromName_Weather) == 0x000008, "Member 'BP_GymMap_C_ExecuteUbergraph_BP_GymMap::CallFunc_GetWeatherFromName_Weather' has a wrong offset!");
static_assert(offsetof(BP_GymMap_C_ExecuteUbergraph_BP_GymMap, CallFunc_FInterpEaseInOut_ReturnValue) == 0x000010, "Member 'BP_GymMap_C_ExecuteUbergraph_BP_GymMap::CallFunc_FInterpEaseInOut_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GymMap_C_ExecuteUbergraph_BP_GymMap, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'BP_GymMap_C_ExecuteUbergraph_BP_GymMap::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GymMap_C_ExecuteUbergraph_BP_GymMap, CallFunc_GetActorOfClass_ReturnValue) == 0x000020, "Member 'BP_GymMap_C_ExecuteUbergraph_BP_GymMap::CallFunc_GetActorOfClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GymMap_C_ExecuteUbergraph_BP_GymMap, CallFunc_GetActorOfClass_ReturnValue_1) == 0x000028, "Member 'BP_GymMap_C_ExecuteUbergraph_BP_GymMap::CallFunc_GetActorOfClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GymMap_C_ExecuteUbergraph_BP_GymMap, CallFunc_FInterpEaseInOut_Alpha_ImplicitCast) == 0x000030, "Member 'BP_GymMap_C_ExecuteUbergraph_BP_GymMap::CallFunc_FInterpEaseInOut_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_GymMap_C_ExecuteUbergraph_BP_GymMap, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast) == 0x000038, "Member 'BP_GymMap_C_ExecuteUbergraph_BP_GymMap::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_GymMap_C_ExecuteUbergraph_BP_GymMap, CallFunc_FInterpEaseInOut_B_ImplicitCast) == 0x000040, "Member 'BP_GymMap_C_ExecuteUbergraph_BP_GymMap::CallFunc_FInterpEaseInOut_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_GymMap_C_ExecuteUbergraph_BP_GymMap, K2Node_VariableSet_Time_of_Day_ImplicitCast) == 0x000048, "Member 'BP_GymMap_C_ExecuteUbergraph_BP_GymMap::K2Node_VariableSet_Time_of_Day_ImplicitCast' has a wrong offset!");

// Function BP_GymMap.BP_GymMap_C.GetTime
// 0x0008 (0x0008 - 0x0000)
struct BP_GymMap_C_GetTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_FunctionResult_ReturnValue_ImplicitCast;    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GymMap_C_GetTime) == 0x000004, "Wrong alignment on BP_GymMap_C_GetTime");
static_assert(sizeof(BP_GymMap_C_GetTime) == 0x000008, "Wrong size on BP_GymMap_C_GetTime");
static_assert(offsetof(BP_GymMap_C_GetTime, ReturnValue) == 0x000000, "Member 'BP_GymMap_C_GetTime::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GymMap_C_GetTime, K2Node_FunctionResult_ReturnValue_ImplicitCast) == 0x000004, "Member 'BP_GymMap_C_GetTime::K2Node_FunctionResult_ReturnValue_ImplicitCast' has a wrong offset!");

// Function BP_GymMap.BP_GymMap_C.GetWeather
// 0x0020 (0x0020 - 0x0000)
struct BP_GymMap_C_GetWeather final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GymMap_C_GetWeather) == 0x000008, "Wrong alignment on BP_GymMap_C_GetWeather");
static_assert(sizeof(BP_GymMap_C_GetWeather) == 0x000020, "Wrong size on BP_GymMap_C_GetWeather");
static_assert(offsetof(BP_GymMap_C_GetWeather, ReturnValue) == 0x000000, "Member 'BP_GymMap_C_GetWeather::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GymMap_C_GetWeather, CallFunc_GetDisplayName_ReturnValue) == 0x000008, "Member 'BP_GymMap_C_GetWeather::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GymMap_C_GetWeather, CallFunc_Conv_StringToName_ReturnValue) == 0x000018, "Member 'BP_GymMap_C_GetWeather::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");

// Function BP_GymMap.BP_GymMap_C.GetWeatherFromName
// 0x0078 (0x0078 - 0x0000)
struct BP_GymMap_C_GetWeatherFromName final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUDS_Weather_Settings_C*                Weather_0;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_TrimTrailing_ReturnValue;                 // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_ToUpper_ReturnValue;                      // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Replace_ReturnValue;                      // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Replace_ReturnValue_1;                    // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Replace_ReturnValue_2;                    // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchString_CmpSuccess;                    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GymMap_C_GetWeatherFromName) == 0x000008, "Wrong alignment on BP_GymMap_C_GetWeatherFromName");
static_assert(sizeof(BP_GymMap_C_GetWeatherFromName) == 0x000078, "Wrong size on BP_GymMap_C_GetWeatherFromName");
static_assert(offsetof(BP_GymMap_C_GetWeatherFromName, Name_0) == 0x000000, "Member 'BP_GymMap_C_GetWeatherFromName::Name_0' has a wrong offset!");
static_assert(offsetof(BP_GymMap_C_GetWeatherFromName, Weather_0) == 0x000008, "Member 'BP_GymMap_C_GetWeatherFromName::Weather_0' has a wrong offset!");
static_assert(offsetof(BP_GymMap_C_GetWeatherFromName, CallFunc_Conv_NameToString_ReturnValue) == 0x000010, "Member 'BP_GymMap_C_GetWeatherFromName::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GymMap_C_GetWeatherFromName, CallFunc_TrimTrailing_ReturnValue) == 0x000020, "Member 'BP_GymMap_C_GetWeatherFromName::CallFunc_TrimTrailing_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GymMap_C_GetWeatherFromName, CallFunc_ToUpper_ReturnValue) == 0x000030, "Member 'BP_GymMap_C_GetWeatherFromName::CallFunc_ToUpper_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GymMap_C_GetWeatherFromName, CallFunc_Replace_ReturnValue) == 0x000040, "Member 'BP_GymMap_C_GetWeatherFromName::CallFunc_Replace_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GymMap_C_GetWeatherFromName, CallFunc_Replace_ReturnValue_1) == 0x000050, "Member 'BP_GymMap_C_GetWeatherFromName::CallFunc_Replace_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GymMap_C_GetWeatherFromName, CallFunc_Replace_ReturnValue_2) == 0x000060, "Member 'BP_GymMap_C_GetWeatherFromName::CallFunc_Replace_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GymMap_C_GetWeatherFromName, K2Node_SwitchString_CmpSuccess) == 0x000070, "Member 'BP_GymMap_C_GetWeatherFromName::K2Node_SwitchString_CmpSuccess' has a wrong offset!");

// Function BP_GymMap.BP_GymMap_C.LoadMapSettings
// 0x0008 (0x0008 - 0x0000)
struct BP_GymMap_C_LoadMapSettings final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetTime_NewTime_ImplicitCast;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GymMap_C_LoadMapSettings) == 0x000004, "Wrong alignment on BP_GymMap_C_LoadMapSettings");
static_assert(sizeof(BP_GymMap_C_LoadMapSettings) == 0x000008, "Wrong size on BP_GymMap_C_LoadMapSettings");
static_assert(offsetof(BP_GymMap_C_LoadMapSettings, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'BP_GymMap_C_LoadMapSettings::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GymMap_C_LoadMapSettings, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_GymMap_C_LoadMapSettings::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GymMap_C_LoadMapSettings, CallFunc_SetTime_NewTime_ImplicitCast) == 0x000004, "Member 'BP_GymMap_C_LoadMapSettings::CallFunc_SetTime_NewTime_ImplicitCast' has a wrong offset!");

// Function BP_GymMap.BP_GymMap_C.OnTimeSet__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_GymMap_C_OnTimeSet__DelegateSignature final
{
public:
	double                                        Time;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GymMap_C_OnTimeSet__DelegateSignature) == 0x000008, "Wrong alignment on BP_GymMap_C_OnTimeSet__DelegateSignature");
static_assert(sizeof(BP_GymMap_C_OnTimeSet__DelegateSignature) == 0x000008, "Wrong size on BP_GymMap_C_OnTimeSet__DelegateSignature");
static_assert(offsetof(BP_GymMap_C_OnTimeSet__DelegateSignature, Time) == 0x000000, "Member 'BP_GymMap_C_OnTimeSet__DelegateSignature::Time' has a wrong offset!");

// Function BP_GymMap.BP_GymMap_C.PrepareSky
// 0x0010 (0x0010 - 0x0000)
struct BP_GymMap_C_PrepareSky final
{
public:
	class AUltra_Dynamic_Weather_C*               CallFunc_GetActorOfClass_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AUltra_Dynamic_Sky_C*                   CallFunc_GetActorOfClass_ReturnValue_1;            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GymMap_C_PrepareSky) == 0x000008, "Wrong alignment on BP_GymMap_C_PrepareSky");
static_assert(sizeof(BP_GymMap_C_PrepareSky) == 0x000010, "Wrong size on BP_GymMap_C_PrepareSky");
static_assert(offsetof(BP_GymMap_C_PrepareSky, CallFunc_GetActorOfClass_ReturnValue) == 0x000000, "Member 'BP_GymMap_C_PrepareSky::CallFunc_GetActorOfClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GymMap_C_PrepareSky, CallFunc_GetActorOfClass_ReturnValue_1) == 0x000008, "Member 'BP_GymMap_C_PrepareSky::CallFunc_GetActorOfClass_ReturnValue_1' has a wrong offset!");

// Function BP_GymMap.BP_GymMap_C.SetupBasicControls
// 0x0018 (0x0018 - 0x0000)
struct BP_GymMap_C_SetupBasicControls final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UUDS_Weather_Settings_C*                CallFunc_GetWeatherFromName_Weather;               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetTime_NewTime_ImplicitCast;             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GymMap_C_SetupBasicControls) == 0x000008, "Wrong alignment on BP_GymMap_C_SetupBasicControls");
static_assert(sizeof(BP_GymMap_C_SetupBasicControls) == 0x000018, "Wrong size on BP_GymMap_C_SetupBasicControls");
static_assert(offsetof(BP_GymMap_C_SetupBasicControls, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'BP_GymMap_C_SetupBasicControls::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GymMap_C_SetupBasicControls, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_GymMap_C_SetupBasicControls::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GymMap_C_SetupBasicControls, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'BP_GymMap_C_SetupBasicControls::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GymMap_C_SetupBasicControls, CallFunc_GetWeatherFromName_Weather) == 0x000008, "Member 'BP_GymMap_C_SetupBasicControls::CallFunc_GetWeatherFromName_Weather' has a wrong offset!");
static_assert(offsetof(BP_GymMap_C_SetupBasicControls, CallFunc_SetTime_NewTime_ImplicitCast) == 0x000010, "Member 'BP_GymMap_C_SetupBasicControls::CallFunc_SetTime_NewTime_ImplicitCast' has a wrong offset!");

// Function BP_GymMap.BP_GymMap_C.SetupVolumetricClouds
// 0x0007 (0x0007 - 0x0000)
struct BP_GymMap_C_SetupVolumetricClouds final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDS_SkyMode                                  Temp_byte_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDS_SkyMode                                  Temp_byte_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetVolumetric_ReturnValue;                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDS_SkyMode                                  K2Node_Select_Default;                             // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GymMap_C_SetupVolumetricClouds) == 0x000001, "Wrong alignment on BP_GymMap_C_SetupVolumetricClouds");
static_assert(sizeof(BP_GymMap_C_SetupVolumetricClouds) == 0x000007, "Wrong size on BP_GymMap_C_SetupVolumetricClouds");
static_assert(offsetof(BP_GymMap_C_SetupVolumetricClouds, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_GymMap_C_SetupVolumetricClouds::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GymMap_C_SetupVolumetricClouds, CallFunc_IsValid_ReturnValue_1) == 0x000001, "Member 'BP_GymMap_C_SetupVolumetricClouds::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GymMap_C_SetupVolumetricClouds, Temp_bool_Variable) == 0x000002, "Member 'BP_GymMap_C_SetupVolumetricClouds::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GymMap_C_SetupVolumetricClouds, Temp_byte_Variable) == 0x000003, "Member 'BP_GymMap_C_SetupVolumetricClouds::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_GymMap_C_SetupVolumetricClouds, Temp_byte_Variable_1) == 0x000004, "Member 'BP_GymMap_C_SetupVolumetricClouds::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GymMap_C_SetupVolumetricClouds, CallFunc_GetVolumetric_ReturnValue) == 0x000005, "Member 'BP_GymMap_C_SetupVolumetricClouds::CallFunc_GetVolumetric_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GymMap_C_SetupVolumetricClouds, K2Node_Select_Default) == 0x000006, "Member 'BP_GymMap_C_SetupVolumetricClouds::K2Node_Select_Default' has a wrong offset!");

// Function BP_GymMap.BP_GymMap_C.SetVolumetric
// 0x0001 (0x0001 - 0x0000)
struct BP_GymMap_C_SetVolumetric final
{
public:
	bool                                          bVolumetric;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GymMap_C_SetVolumetric) == 0x000001, "Wrong alignment on BP_GymMap_C_SetVolumetric");
static_assert(sizeof(BP_GymMap_C_SetVolumetric) == 0x000001, "Wrong size on BP_GymMap_C_SetVolumetric");
static_assert(offsetof(BP_GymMap_C_SetVolumetric, bVolumetric) == 0x000000, "Member 'BP_GymMap_C_SetVolumetric::bVolumetric' has a wrong offset!");

}

