#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_GymRuleStateWidgetRisingTide

#include "Basic.hpp"

#include "GYMGAME_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function WBP_GymRuleStateWidgetRisingTide.WBP_GymRuleStateWidgetRisingTide_C.ExecuteUbergraph_WBP_GymRuleStateWidgetRisingTide
// 0x0040 (0x0040 - 0x0000)
struct WBP_GymRuleStateWidgetRisingTide_C_ExecuteUbergraph_WBP_GymRuleStateWidgetRisingTide final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_GymRuleStateWidgetRisingTide_C_ExecuteUbergraph_WBP_GymRuleStateWidgetRisingTide) == 0x000004, "Wrong alignment on WBP_GymRuleStateWidgetRisingTide_C_ExecuteUbergraph_WBP_GymRuleStateWidgetRisingTide");
static_assert(sizeof(WBP_GymRuleStateWidgetRisingTide_C_ExecuteUbergraph_WBP_GymRuleStateWidgetRisingTide) == 0x000040, "Wrong size on WBP_GymRuleStateWidgetRisingTide_C_ExecuteUbergraph_WBP_GymRuleStateWidgetRisingTide");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_ExecuteUbergraph_WBP_GymRuleStateWidgetRisingTide, EntryPoint) == 0x000000, "Member 'WBP_GymRuleStateWidgetRisingTide_C_ExecuteUbergraph_WBP_GymRuleStateWidgetRisingTide::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_ExecuteUbergraph_WBP_GymRuleStateWidgetRisingTide, K2Node_Event_MyGeometry) == 0x000004, "Member 'WBP_GymRuleStateWidgetRisingTide_C_ExecuteUbergraph_WBP_GymRuleStateWidgetRisingTide::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_ExecuteUbergraph_WBP_GymRuleStateWidgetRisingTide, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'WBP_GymRuleStateWidgetRisingTide_C_ExecuteUbergraph_WBP_GymRuleStateWidgetRisingTide::K2Node_Event_InDeltaTime' has a wrong offset!");

// Function WBP_GymRuleStateWidgetRisingTide.WBP_GymRuleStateWidgetRisingTide_C.OnEliminated
// 0x0120 (0x0120 - 0x0000)
struct WBP_GymRuleStateWidgetRisingTide_C_OnEliminated final
{
public:
	EEliminationReason                            EliminationReason;                                 // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0020(0x0018)()
	EEliminationReason                            Temp_byte_Variable;                                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0040(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0058(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0070(0x0018)()
	class FText                                   Temp_text_Variable_4;                              // 0x0088(0x0018)()
	class FText                                   Temp_text_Variable_5;                              // 0x00A0(0x0018)()
	class FText                                   Temp_text_Variable_6;                              // 0x00B8(0x0018)()
	class FText                                   Temp_text_Variable_7;                              // 0x00D0(0x0018)()
	class FText                                   Temp_text_Variable_8;                              // 0x00E8(0x0018)()
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default_1;                           // 0x0108(0x0018)()
};
static_assert(alignof(WBP_GymRuleStateWidgetRisingTide_C_OnEliminated) == 0x000008, "Wrong alignment on WBP_GymRuleStateWidgetRisingTide_C_OnEliminated");
static_assert(sizeof(WBP_GymRuleStateWidgetRisingTide_C_OnEliminated) == 0x000120, "Wrong size on WBP_GymRuleStateWidgetRisingTide_C_OnEliminated");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_OnEliminated, EliminationReason) == 0x000000, "Member 'WBP_GymRuleStateWidgetRisingTide_C_OnEliminated::EliminationReason' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_OnEliminated, Temp_bool_Variable) == 0x000001, "Member 'WBP_GymRuleStateWidgetRisingTide_C_OnEliminated::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_OnEliminated, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'WBP_GymRuleStateWidgetRisingTide_C_OnEliminated::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_OnEliminated, Temp_text_Variable) == 0x000008, "Member 'WBP_GymRuleStateWidgetRisingTide_C_OnEliminated::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_OnEliminated, Temp_text_Variable_1) == 0x000020, "Member 'WBP_GymRuleStateWidgetRisingTide_C_OnEliminated::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_OnEliminated, Temp_byte_Variable) == 0x000038, "Member 'WBP_GymRuleStateWidgetRisingTide_C_OnEliminated::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_OnEliminated, K2Node_Select_Default) == 0x000040, "Member 'WBP_GymRuleStateWidgetRisingTide_C_OnEliminated::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_OnEliminated, Temp_text_Variable_2) == 0x000058, "Member 'WBP_GymRuleStateWidgetRisingTide_C_OnEliminated::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_OnEliminated, Temp_text_Variable_3) == 0x000070, "Member 'WBP_GymRuleStateWidgetRisingTide_C_OnEliminated::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_OnEliminated, Temp_text_Variable_4) == 0x000088, "Member 'WBP_GymRuleStateWidgetRisingTide_C_OnEliminated::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_OnEliminated, Temp_text_Variable_5) == 0x0000A0, "Member 'WBP_GymRuleStateWidgetRisingTide_C_OnEliminated::Temp_text_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_OnEliminated, Temp_text_Variable_6) == 0x0000B8, "Member 'WBP_GymRuleStateWidgetRisingTide_C_OnEliminated::Temp_text_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_OnEliminated, Temp_text_Variable_7) == 0x0000D0, "Member 'WBP_GymRuleStateWidgetRisingTide_C_OnEliminated::Temp_text_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_OnEliminated, Temp_text_Variable_8) == 0x0000E8, "Member 'WBP_GymRuleStateWidgetRisingTide_C_OnEliminated::Temp_text_Variable_8' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_OnEliminated, CallFunc_PlayAnimation_ReturnValue) == 0x000100, "Member 'WBP_GymRuleStateWidgetRisingTide_C_OnEliminated::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_OnEliminated, K2Node_Select_Default_1) == 0x000108, "Member 'WBP_GymRuleStateWidgetRisingTide_C_OnEliminated::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_GymRuleStateWidgetRisingTide.WBP_GymRuleStateWidgetRisingTide_C.OnFinished
// 0x0058 (0x0058 - 0x0000)
struct WBP_GymRuleStateWidgetRisingTide_C_OnFinished final
{
public:
	bool                                          bIsRoyale;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0020(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0038(0x0018)()
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_GymRuleStateWidgetRisingTide_C_OnFinished) == 0x000008, "Wrong alignment on WBP_GymRuleStateWidgetRisingTide_C_OnFinished");
static_assert(sizeof(WBP_GymRuleStateWidgetRisingTide_C_OnFinished) == 0x000058, "Wrong size on WBP_GymRuleStateWidgetRisingTide_C_OnFinished");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_OnFinished, bIsRoyale) == 0x000000, "Member 'WBP_GymRuleStateWidgetRisingTide_C_OnFinished::bIsRoyale' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_OnFinished, Temp_bool_Variable) == 0x000001, "Member 'WBP_GymRuleStateWidgetRisingTide_C_OnFinished::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_OnFinished, Temp_text_Variable) == 0x000008, "Member 'WBP_GymRuleStateWidgetRisingTide_C_OnFinished::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_OnFinished, Temp_text_Variable_1) == 0x000020, "Member 'WBP_GymRuleStateWidgetRisingTide_C_OnFinished::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_OnFinished, K2Node_Select_Default) == 0x000038, "Member 'WBP_GymRuleStateWidgetRisingTide_C_OnFinished::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_OnFinished, CallFunc_PlayAnimation_ReturnValue) == 0x000050, "Member 'WBP_GymRuleStateWidgetRisingTide_C_OnFinished::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WBP_GymRuleStateWidgetRisingTide.WBP_GymRuleStateWidgetRisingTide_C.SetRankingText
// 0x0090 (0x0090 - 0x0000)
struct WBP_GymRuleStateWidgetRisingTide_C_SetRankingText final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0018(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0068(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0078(0x0018)()
};
static_assert(alignof(WBP_GymRuleStateWidgetRisingTide_C_SetRankingText) == 0x000008, "Wrong alignment on WBP_GymRuleStateWidgetRisingTide_C_SetRankingText");
static_assert(sizeof(WBP_GymRuleStateWidgetRisingTide_C_SetRankingText) == 0x000090, "Wrong size on WBP_GymRuleStateWidgetRisingTide_C_SetRankingText");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_SetRankingText, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'WBP_GymRuleStateWidgetRisingTide_C_SetRankingText::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_SetRankingText, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000008, "Member 'WBP_GymRuleStateWidgetRisingTide_C_SetRankingText::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_SetRankingText, CallFunc_Greater_IntInt_ReturnValue) == 0x000010, "Member 'WBP_GymRuleStateWidgetRisingTide_C_SetRankingText::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_SetRankingText, K2Node_MakeStruct_FormatArgumentData) == 0x000018, "Member 'WBP_GymRuleStateWidgetRisingTide_C_SetRankingText::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_SetRankingText, K2Node_MakeArray_Array) == 0x000068, "Member 'WBP_GymRuleStateWidgetRisingTide_C_SetRankingText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_SetRankingText, CallFunc_Format_ReturnValue) == 0x000078, "Member 'WBP_GymRuleStateWidgetRisingTide_C_SetRankingText::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function WBP_GymRuleStateWidgetRisingTide.WBP_GymRuleStateWidgetRisingTide_C.Tick
// 0x003C (0x003C - 0x0000)
struct WBP_GymRuleStateWidgetRisingTide_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_GymRuleStateWidgetRisingTide_C_Tick) == 0x000004, "Wrong alignment on WBP_GymRuleStateWidgetRisingTide_C_Tick");
static_assert(sizeof(WBP_GymRuleStateWidgetRisingTide_C_Tick) == 0x00003C, "Wrong size on WBP_GymRuleStateWidgetRisingTide_C_Tick");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_Tick, MyGeometry) == 0x000000, "Member 'WBP_GymRuleStateWidgetRisingTide_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_Tick, InDeltaTime) == 0x000038, "Member 'WBP_GymRuleStateWidgetRisingTide_C_Tick::InDeltaTime' has a wrong offset!");

// Function WBP_GymRuleStateWidgetRisingTide.WBP_GymRuleStateWidgetRisingTide_C.TickParticipantAndRule
// 0x0008 (0x0008 - 0x0000)
struct WBP_GymRuleStateWidgetRisingTide_C_TickParticipantAndRule final
{
public:
	class UGymParticipantRepDataSprint*           CallFunc_GetParticipantData_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_GymRuleStateWidgetRisingTide_C_TickParticipantAndRule) == 0x000008, "Wrong alignment on WBP_GymRuleStateWidgetRisingTide_C_TickParticipantAndRule");
static_assert(sizeof(WBP_GymRuleStateWidgetRisingTide_C_TickParticipantAndRule) == 0x000008, "Wrong size on WBP_GymRuleStateWidgetRisingTide_C_TickParticipantAndRule");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_TickParticipantAndRule, CallFunc_GetParticipantData_ReturnValue) == 0x000000, "Member 'WBP_GymRuleStateWidgetRisingTide_C_TickParticipantAndRule::CallFunc_GetParticipantData_ReturnValue' has a wrong offset!");

// Function WBP_GymRuleStateWidgetRisingTide.WBP_GymRuleStateWidgetRisingTide_C.TickUI
// 0x0088 (0x0088 - 0x0000)
struct WBP_GymRuleStateWidgetRisingTide_C_TickUI final
{
public:
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGymPlayerController*                   K2Node_DynamicCast_AsGym_Player_Controller;        // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetTimeSeconds_ReturnValue;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGymRuleParticipantState                      CallFunc_GetCurrentRuleState_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_FormatTime_ReturnValue;                   // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0040(0x0018)()
	double                                        CallFunc_GetTimeSeconds_ReturnValue_1;             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FormatTime_Time_ImplicitCast;             // 0x0080(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_GymRuleStateWidgetRisingTide_C_TickUI) == 0x000008, "Wrong alignment on WBP_GymRuleStateWidgetRisingTide_C_TickUI");
static_assert(sizeof(WBP_GymRuleStateWidgetRisingTide_C_TickUI) == 0x000088, "Wrong size on WBP_GymRuleStateWidgetRisingTide_C_TickUI");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_TickUI, CallFunc_GetPlayerController_ReturnValue) == 0x000000, "Member 'WBP_GymRuleStateWidgetRisingTide_C_TickUI::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_TickUI, K2Node_DynamicCast_AsGym_Player_Controller) == 0x000008, "Member 'WBP_GymRuleStateWidgetRisingTide_C_TickUI::K2Node_DynamicCast_AsGym_Player_Controller' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_TickUI, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'WBP_GymRuleStateWidgetRisingTide_C_TickUI::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_TickUI, CallFunc_GetTimeSeconds_ReturnValue) == 0x000018, "Member 'WBP_GymRuleStateWidgetRisingTide_C_TickUI::CallFunc_GetTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_TickUI, CallFunc_GetCurrentRuleState_ReturnValue) == 0x000020, "Member 'WBP_GymRuleStateWidgetRisingTide_C_TickUI::CallFunc_GetCurrentRuleState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_TickUI, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000021, "Member 'WBP_GymRuleStateWidgetRisingTide_C_TickUI::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_TickUI, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000028, "Member 'WBP_GymRuleStateWidgetRisingTide_C_TickUI::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_TickUI, CallFunc_FormatTime_ReturnValue) == 0x000030, "Member 'WBP_GymRuleStateWidgetRisingTide_C_TickUI::CallFunc_FormatTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_TickUI, CallFunc_Conv_StringToText_ReturnValue) == 0x000040, "Member 'WBP_GymRuleStateWidgetRisingTide_C_TickUI::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_TickUI, CallFunc_GetTimeSeconds_ReturnValue_1) == 0x000058, "Member 'WBP_GymRuleStateWidgetRisingTide_C_TickUI::CallFunc_GetTimeSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_TickUI, K2Node_SwitchEnum_CmpSuccess) == 0x000060, "Member 'WBP_GymRuleStateWidgetRisingTide_C_TickUI::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_TickUI, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000064, "Member 'WBP_GymRuleStateWidgetRisingTide_C_TickUI::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_TickUI, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000068, "Member 'WBP_GymRuleStateWidgetRisingTide_C_TickUI::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_TickUI, CallFunc_PlayAnimation_ReturnValue) == 0x000070, "Member 'WBP_GymRuleStateWidgetRisingTide_C_TickUI::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_TickUI, CallFunc_PlayAnimation_ReturnValue_1) == 0x000078, "Member 'WBP_GymRuleStateWidgetRisingTide_C_TickUI::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_GymRuleStateWidgetRisingTide_C_TickUI, CallFunc_FormatTime_Time_ImplicitCast) == 0x000080, "Member 'WBP_GymRuleStateWidgetRisingTide_C_TickUI::CallFunc_FormatTime_Time_ImplicitCast' has a wrong offset!");

}

