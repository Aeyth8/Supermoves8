#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UDS_PlayerOcclusion

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass UDS_PlayerOcclusion.UDS_PlayerOcclusion_C
// 0x01A0 (0x0440 - 0x02A0)
class UUDS_PlayerOcclusion_C final : public USceneComponent
{
public:
	class UUDS_OcclusionSettings_C*               Occlusion_Settings;                                // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Water_Level;                                       // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Water_Level;                                   // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Force_Full_Occlusion;                              // 0x02B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               Show_Trace_Debugs;                                 // 0x02B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Global_Occlusion_Changing;                         // 0x02B3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Current_Directional_Occlusion;                     // 0x02B4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Current_Global_Occlusion;                          // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Increment_Time;                                    // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Calculate_Directional_Occlusion;                   // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D9[0x3];                                      // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Traces_Per_Update;                                 // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Global_Occlusion_Total;                            // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Upward_Occlusion_Total;                            // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Directional_Occlusion_Total;                       // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Directional_Occlusion_Max;                         // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FLinearColor>                   Directional_Trace_Max_Values;                      // 0x0308(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Upward_Occlusion_Max;                              // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                Upward_Trace_Max_Values;                           // 0x0320(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Trace_Index;                                       // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Trace_Offsets;                                     // 0x0338(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FLinearColor>                   Directional_Occlusion_History;                     // 0x0348(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                Global_Occlusion_History;                          // 0x0358(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                Upward_Occlusion_History;                          // 0x0368(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Occlusion_Multiplier;                              // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Time_of_Last_Trace;                                // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Ignored_Actors;                                    // 0x0388(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	double                                        Current_Upward_Occlusion;                          // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Target_Directional_Occlusion;                      // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Target_Global_Occlusion;                           // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Last_Trace_Location;                               // 0x03B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hard_Update;                                       // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D1[0x7];                                      // 0x03D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Tick_Period;                                       // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Sample_Location;                                   // 0x03E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UUDS_Occlusion_Portal_C*>        Portals_in_Range;                                  // 0x03F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          Location_Valid;                                    // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_409[0x3];                                      // 0x0409(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Directional_Portal_Contribution;                   // 0x040C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41C[0x4];                                      // 0x041C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Global_Portal_Contribution;                        // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             Hard_Occlusion_Change;                             // 0x0428(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void Portal_Direction_Mask(const struct FVector& Direction, struct FLinearColor* Mask);
	void Delayed_Startup();
	void Check_For_Portal_Components();
	void Get_Sample_Location();
	double Directional_Mask_Value(const struct FVector& Direction, const struct FVector& Compare);
	void Update_Ignored_Actors();
	void Periodic_Context_Checks();
	struct FVector Current_Trace_Direction(const struct FVector& Facing_Direction, int32 Vertical_Step);
	struct FVector Current_Facing_Direction(int32 Step);
	void Save_Unchanging_Values_for_Occlusion();
	void Directional_Vector_Mask(const struct FVector& Direction, struct FLinearColor* Mask);
	void Update_Current_Occlusion();
	void Incremental_Occlusion_Traces();
	void Initialize();
	void Hard_Occlusion_Change__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UDS_PlayerOcclusion_C">();
	}
	static class UUDS_PlayerOcclusion_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUDS_PlayerOcclusion_C>();
	}
};
static_assert(alignof(UUDS_PlayerOcclusion_C) == 0x000010, "Wrong alignment on UUDS_PlayerOcclusion_C");
static_assert(sizeof(UUDS_PlayerOcclusion_C) == 0x000440, "Wrong size on UUDS_PlayerOcclusion_C");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Occlusion_Settings) == 0x0002A0, "Member 'UUDS_PlayerOcclusion_C::Occlusion_Settings' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Water_Level) == 0x0002A8, "Member 'UUDS_PlayerOcclusion_C::Water_Level' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Use_Water_Level) == 0x0002B0, "Member 'UUDS_PlayerOcclusion_C::Use_Water_Level' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Force_Full_Occlusion) == 0x0002B1, "Member 'UUDS_PlayerOcclusion_C::Force_Full_Occlusion' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Show_Trace_Debugs) == 0x0002B2, "Member 'UUDS_PlayerOcclusion_C::Show_Trace_Debugs' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Global_Occlusion_Changing) == 0x0002B3, "Member 'UUDS_PlayerOcclusion_C::Global_Occlusion_Changing' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Current_Directional_Occlusion) == 0x0002B4, "Member 'UUDS_PlayerOcclusion_C::Current_Directional_Occlusion' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Current_Global_Occlusion) == 0x0002C8, "Member 'UUDS_PlayerOcclusion_C::Current_Global_Occlusion' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Increment_Time) == 0x0002D0, "Member 'UUDS_PlayerOcclusion_C::Increment_Time' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Calculate_Directional_Occlusion) == 0x0002D8, "Member 'UUDS_PlayerOcclusion_C::Calculate_Directional_Occlusion' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Traces_Per_Update) == 0x0002DC, "Member 'UUDS_PlayerOcclusion_C::Traces_Per_Update' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Global_Occlusion_Total) == 0x0002E0, "Member 'UUDS_PlayerOcclusion_C::Global_Occlusion_Total' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Upward_Occlusion_Total) == 0x0002E8, "Member 'UUDS_PlayerOcclusion_C::Upward_Occlusion_Total' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Directional_Occlusion_Total) == 0x0002F0, "Member 'UUDS_PlayerOcclusion_C::Directional_Occlusion_Total' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Directional_Occlusion_Max) == 0x000300, "Member 'UUDS_PlayerOcclusion_C::Directional_Occlusion_Max' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Directional_Trace_Max_Values) == 0x000308, "Member 'UUDS_PlayerOcclusion_C::Directional_Trace_Max_Values' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Upward_Occlusion_Max) == 0x000318, "Member 'UUDS_PlayerOcclusion_C::Upward_Occlusion_Max' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Upward_Trace_Max_Values) == 0x000320, "Member 'UUDS_PlayerOcclusion_C::Upward_Trace_Max_Values' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Trace_Index) == 0x000330, "Member 'UUDS_PlayerOcclusion_C::Trace_Index' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Trace_Offsets) == 0x000338, "Member 'UUDS_PlayerOcclusion_C::Trace_Offsets' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Directional_Occlusion_History) == 0x000348, "Member 'UUDS_PlayerOcclusion_C::Directional_Occlusion_History' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Global_Occlusion_History) == 0x000358, "Member 'UUDS_PlayerOcclusion_C::Global_Occlusion_History' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Upward_Occlusion_History) == 0x000368, "Member 'UUDS_PlayerOcclusion_C::Upward_Occlusion_History' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Occlusion_Multiplier) == 0x000378, "Member 'UUDS_PlayerOcclusion_C::Occlusion_Multiplier' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Time_of_Last_Trace) == 0x000380, "Member 'UUDS_PlayerOcclusion_C::Time_of_Last_Trace' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Ignored_Actors) == 0x000388, "Member 'UUDS_PlayerOcclusion_C::Ignored_Actors' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Current_Upward_Occlusion) == 0x000398, "Member 'UUDS_PlayerOcclusion_C::Current_Upward_Occlusion' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Target_Directional_Occlusion) == 0x0003A0, "Member 'UUDS_PlayerOcclusion_C::Target_Directional_Occlusion' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Target_Global_Occlusion) == 0x0003B0, "Member 'UUDS_PlayerOcclusion_C::Target_Global_Occlusion' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Last_Trace_Location) == 0x0003B8, "Member 'UUDS_PlayerOcclusion_C::Last_Trace_Location' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Hard_Update) == 0x0003D0, "Member 'UUDS_PlayerOcclusion_C::Hard_Update' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Tick_Period) == 0x0003D8, "Member 'UUDS_PlayerOcclusion_C::Tick_Period' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Sample_Location) == 0x0003E0, "Member 'UUDS_PlayerOcclusion_C::Sample_Location' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Portals_in_Range) == 0x0003F8, "Member 'UUDS_PlayerOcclusion_C::Portals_in_Range' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Location_Valid) == 0x000408, "Member 'UUDS_PlayerOcclusion_C::Location_Valid' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Directional_Portal_Contribution) == 0x00040C, "Member 'UUDS_PlayerOcclusion_C::Directional_Portal_Contribution' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Global_Portal_Contribution) == 0x000420, "Member 'UUDS_PlayerOcclusion_C::Global_Portal_Contribution' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Hard_Occlusion_Change) == 0x000428, "Member 'UUDS_PlayerOcclusion_C::Hard_Occlusion_Change' has a wrong offset!");

}

