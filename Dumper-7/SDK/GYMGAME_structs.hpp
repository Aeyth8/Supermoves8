#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GYMGAME

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// Enum GYMGAME.EMapVisibility
// NumValues: 0x0004
enum class EMapVisibility : uint8
{
	Unpublished                              = 0,
	Published                                = 1,
	Hidden                                   = 2,
	EMapVisibility_MAX                       = 3,
};

// Enum GYMGAME.EVoteState
// NumValues: 0x0005
enum class EVoteState : uint8
{
	None                                     = 0,
	Voting                                   = 1,
	Passed                                   = 2,
	Failed                                   = 3,
	EVoteState_MAX                           = 4,
};

// Enum GYMGAME.EGymPlaylistType
// NumValues: 0x0004
enum class EGymPlaylistType : uint8
{
	Playlist                                 = 0,
	Tournament                               = 1,
	Royale                                   = 2,
	EGymPlaylistType_MAX                     = 3,
};

// Enum GYMGAME.EGymPropertyType
// NumValues: 0x0007
enum class EGymPropertyType : uint8
{
	FloatVal                                 = 0,
	IntegerVal                               = 1,
	BooleanVal                               = 2,
	TextVal                                  = 3,
	SelectionVal                             = 4,
	VariantVal                               = 5,
	EGymPropertyType_MAX                     = 6,
};

// Enum GYMGAME.EGymAssetType
// NumValues: 0x0006
enum class EGymAssetType : uint8
{
	Other                                    = 0,
	Box                                      = 1,
	Wall                                     = 2,
	Pillar                                   = 3,
	Floor                                    = 4,
	EGymAssetType_MAX                        = 5,
};

// Enum GYMGAME.EGymAssetSurfaceFlag
// NumValues: 0x0003
enum class EGymAssetSurfaceFlag : uint8
{
	None                                     = 0,
	WallRunBlackListed                       = 1,
	EGymAssetSurfaceFlag_MAX                 = 2,
};

// Enum GYMGAME.ETubeType
// NumValues: 0x0007
enum class ETubeType : uint8
{
	Basic                                    = 0,
	DeadEnd                                  = 1,
	SmallCorner                              = 2,
	BigCorner                                = 3,
	T_Crossing                               = 4,
	X_Crossing                               = 5,
	ETubeType_MAX                            = 6,
};

// Enum GYMGAME.EGymAssetSnapType
// NumValues: 0x0006
enum class EGymAssetSnapType : uint8
{
	None                                     = 0,
	Box                                      = 1,
	Wall                                     = 2,
	Tube                                     = 3,
	Surface                                  = 4,
	EGymAssetSnapType_MAX                    = 5,
};

// Enum GYMGAME.EGymMapLoadStatus
// NumValues: 0x0005
enum class EGymMapLoadStatus : uint8
{
	NotInited                                = 0,
	WaitingToLoad                            = 1,
	WaitingToCreate                          = 2,
	Done                                     = 3,
	EGymMapLoadStatus_MAX                    = 4,
};

// Enum GYMGAME.EGymWallDirection
// NumValues: 0x0008
enum class EGymWallDirection : uint8
{
	Invalid                                  = 0,
	N                                        = 1,
	S                                        = 2,
	W                                        = 3,
	E                                        = 4,
	Floor                                    = 5,
	Ceiling                                  = 6,
	EGymWallDirection_MAX                    = 7,
};

// Enum GYMGAME.EGymRuleParticipantState
// NumValues: 0x0009
enum class EGymRuleParticipantState : uint8
{
	None                                     = 0,
	Joined                                   = 1,
	Preparing                                = 2,
	Prepared                                 = 3,
	Running                                  = 4,
	Finished                                 = 5,
	Failed                                   = 6,
	Spectating                               = 7,
	EGymRuleParticipantState_MAX             = 8,
};

// Enum GYMGAME.EPreflowState
// NumValues: 0x0005
enum class EPreflowState : uint8
{
	None                                     = 0,
	Preflow                                  = 1,
	Prerace                                  = 2,
	Postflow                                 = 3,
	EPreflowState_MAX                        = 4,
};

// Enum GYMGAME.EUINavDirection
// NumValues: 0x0005
enum class EUINavDirection : uint8
{
	Up                                       = 0,
	Down                                     = 1,
	Left                                     = 2,
	Right                                    = 3,
	EUINavDirection_MAX                      = 4,
};

// Enum GYMGAME.EUIHoverRequirement
// NumValues: 0x0004
enum class EUIHoverRequirement : uint8
{
	None                                     = 0,
	Never                                    = 1,
	Gamepad                                  = 2,
	EUIHoverRequirement_MAX                  = 3,
};

// Enum GYMGAME.EGymAchievement
// NumValues: 0x001A
enum class EGymAchievement : uint8
{
	Tutorial                                 = 0,
	Career1                                  = 1,
	Career2                                  = 2,
	Career3                                  = 3,
	Career4                                  = 4,
	Career5                                  = 5,
	Career6                                  = 6,
	Career7                                  = 7,
	CareerFirstPlace                         = 8,
	CareerComplete                           = 9,
	CareerSecretTapes                        = 10,
	CareerPrestige                           = 11,
	Acrobatic                                = 12,
	Ballpit                                  = 13,
	MakeaEditor                              = 14,
	Trampoline                               = 15,
	WorldTour                                = 16,
	Loot                                     = 17,
	Daredevil                                = 18,
	Cardio                                   = 19,
	Customize                                = 20,
	Combo                                    = 21,
	Wet                                      = 22,
	Bombtag                                  = 23,
	Royale                                   = 24,
	EGymAchievement_MAX                      = 25,
};

// Enum GYMGAME.EAudioGameMode
// NumValues: 0x0008
enum class EAudioGameMode : uint8
{
	Mode_Empty                               = 0,
	Mode_BombTag                             = 1,
	Mode_Circuit                             = 2,
	Mode_ObstacleCourse                      = 3,
	Mode_Loot                                = 4,
	Mode_Sprint                              = 5,
	Mode_RisingTide                          = 6,
	Mode_MAX                                 = 7,
};

// Enum GYMGAME.EAudioMatchState
// NumValues: 0x0008
enum class EAudioMatchState : uint8
{
	None                                     = 0,
	Joined                                   = 1,
	Preparing                                = 2,
	Prepared                                 = 3,
	Running                                  = 4,
	Finished                                 = 5,
	Failed                                   = 6,
	EAudioMatchState_MAX                     = 7,
};

// Enum GYMGAME.ECheckpointObjectiveType
// NumValues: 0x0003
enum class ECheckpointObjectiveType : uint8
{
	FromExisting                             = 0,
	FromSpawnPoints                          = 1,
	ECheckpointObjectiveType_MAX             = 2,
};

// Enum GYMGAME.EServerVisibilityOption
// NumValues: 0x0004
enum class EServerVisibilityOption : uint8
{
	Private                                  = 0,
	Public                                   = 1,
	Hub                                      = 2,
	EServerVisibilityOption_MAX              = 3,
};

// Enum GYMGAME.EMapVoteType
// NumValues: 0x0006
enum class EMapVoteType : uint8
{
	None                                     = 0,
	Upvote                                   = 1,
	Downvote                                 = 2,
	Favourite                                = 4,
	Feature                                  = 8,
	EMapVoteType_MAX                         = 9,
};

// Enum GYMGAME.ECollectibleObjectiveType
// NumValues: 0x0003
enum class ECollectibleObjectiveType : uint8
{
	FromSpawnPoints                          = 0,
	FromExisting                             = 1,
	ECollectibleObjectiveType_MAX            = 2,
};

// Enum GYMGAME.EAudioLevelKitOption
// NumValues: 0x000A
enum class EAudioLevelKitOption : uint32
{
	None                                     = 0,
	All                                      = 1,
	Gym                                      = 2,
	Warehouse                                = 3,
	Rooftops                                 = 4,
	FlatLands                                = 5,
	Ocean                                    = 6,
	Stadium                                  = 7,
	Streets                                  = 8,
	EAudioLevelKitOption_MAX                 = 9,
};

// Enum GYMGAME.EGymColorMaskChannel
// NumValues: 0x0005
enum class EGymColorMaskChannel : uint8
{
	Red                                      = 0,
	Green                                    = 1,
	Blue                                     = 2,
	Alpha                                    = 3,
	EGymColorMaskChannel_MAX                 = 4,
};

// Enum GYMGAME.EGymCustomMovementMode
// NumValues: 0x0012
enum class EGymCustomMovementMode : uint8
{
	CMove_None                               = 0,
	CMove_Running                            = 1,
	CMove_Vaulting                           = 2,
	CMove_Rolling                            = 3,
	CMove_Sliding                            = 4,
	CMove_WallRunningSide                    = 5,
	CMove_Grinding                           = 6,
	CMove_WireWalking                        = 7,
	CMove_Fly                                = 8,
	CMove_Trampoline                         = 9,
	CMove_WallRunningForward                 = 10,
	CMove_Zipline                            = 11,
	CMove_Ragdolling                         = 12,
	CMove_Idle                               = 13,
	CMove_Taunt                              = 14,
	CMove_Swim                               = 15,
	CMove_Crouched                           = 16,
	CMove_MAX                                = 17,
};

// Enum GYMGAME.EGymAnswerType
// NumValues: 0x0005
enum class EGymAnswerType : uint8
{
	ETaskAnswer                              = 0,
	ELoreAnswer                              = 1,
	EOtherAnswer                             = 2,
	EExitAnswer                              = 3,
	EGymAnswerType_MAX                       = 4,
};

// Enum GYMGAME.EGymDTTaskStatus
// NumValues: 0x0005
enum class EGymDTTaskStatus : uint8
{
	InProgress                               = 0,
	Completed                                = 1,
	Failed                                   = 2,
	DoesNotHave                              = 3,
	EGymDTTaskStatus_MAX                     = 4,
};

// Enum GYMGAME.EGymDTBranch
// NumValues: 0x0003
enum class EGymDTBranch : uint8
{
	Yes                                      = 0,
	No                                       = 1,
	EGymDTBranch_MAX                         = 2,
};

// Enum GYMGAME.ERotationAxis
// NumValues: 0x0004
enum class ERotationAxis : uint8
{
	Yaw                                      = 0,
	Pitch                                    = 1,
	Roll                                     = 2,
	Max                                      = 3,
};

// Enum GYMGAME.EGymEditorCategoryType
// NumValues: 0x0004
enum class EGymEditorCategoryType : uint32
{
	Asset                                    = 0,
	Options                                  = 1,
	Tool                                     = 2,
	EGymEditorCategoryType_MAX               = 3,
};

// Enum GYMGAME.EGymEditorOptionType
// NumValues: 0x0003
enum class EGymEditorOptionType : uint8
{
	Time                                     = 0,
	Weather                                  = 1,
	EGymEditorOptionType_MAX                 = 2,
};

// Enum GYMGAME.EGymSnappingMode
// NumValues: 0x0006
enum class EGymSnappingMode : uint8
{
	NoSnap                                   = 0,
	Grid                                     = 1,
	Object                                   = 2,
	Surface                                  = 3,
	StackFill                                = 4,
	MAX                                      = 5,
};

// Enum GYMGAME.EEditorGuiOptionType
// NumValues: 0x0004
enum class EEditorGuiOptionType : uint8
{
	String                                   = 0,
	Float                                    = 1,
	Int                                      = 2,
	EEditorGuiOptionType_MAX                 = 3,
};

// Enum GYMGAME.EFragileFloorStatus
// NumValues: 0x0006
enum class EFragileFloorStatus : uint8
{
	Normal                                   = 0,
	Cracking                                 = 1,
	Broken                                   = 2,
	ShouldBeBroken                           = 3,
	ShouldBeNormal                           = 4,
	EFragileFloorStatus_MAX                  = 5,
};

// Enum GYMGAME.EServerInstanceReadyStatus
// NumValues: 0x0004
enum class EServerInstanceReadyStatus : uint8
{
	Unknown                                  = 0,
	WaitingForMap                            = 1,
	Ready                                    = 2,
	EServerInstanceReadyStatus_MAX           = 3,
};

// Enum GYMGAME.ETickerPosition
// NumValues: 0x0003
enum class ETickerPosition : uint8
{
	TopLeft                                  = 0,
	BottomRight                              = 1,
	ETickerPosition_MAX                      = 2,
};

// Enum GYMGAME.ETickerMessageType
// NumValues: 0x0005
enum class ETickerMessageType : uint8
{
	Text                                     = 0,
	IconText                                 = 1,
	TextIconText                             = 2,
	TextIcon                                 = 3,
	ETickerMessageType_MAX                   = 4,
};

// Enum GYMGAME.EInteractionType
// NumValues: 0x0003
enum class EInteractionType : uint8
{
	ImmediateEnd                             = 0,
	ManualEnd                                = 1,
	EInteractionType_MAX                     = 2,
};

// Enum GYMGAME.EGymEditorCategory
// NumValues: 0x0012
enum class EGymEditorCategory : uint8
{
	None                                     = 0,
	Blocks                                   = 1,
	Walls                                    = 2,
	Floors                                   = 3,
	Shapes                                   = 4,
	Trampolines                              = 5,
	Tubes                                    = 6,
	Moving                                   = 7,
	Special                                  = 8,
	Options                                  = 9,
	Dev                                      = 10,
	Tools                                    = 11,
	Rules                                    = 12,
	Decoration                               = 13,
	Physics                                  = 14,
	LevelSettingsButton                      = 15,
	SaveButton                               = 16,
	EGymEditorCategory_MAX                   = 17,
};

// Enum GYMGAME.EMultiPlaceType
// NumValues: 0x0003
enum class EMultiPlaceType : uint8
{
	None                                     = 0,
	Spline                                   = 1,
	EMultiPlaceType_MAX                      = 2,
};

// Enum GYMGAME.ELootMode
// NumValues: 0x0003
enum class ELootMode : uint8
{
	SharedLootPool                           = 0,
	IndividualLootPool                       = 1,
	ELootMode_MAX                            = 2,
};

// Enum GYMGAME.EObjectiveState
// NumValues: 0x0004
enum class EObjectiveState : uint8
{
	InProgress                               = 0,
	Failed                                   = 1,
	Completed                                = 2,
	EObjectiveState_MAX                      = 3,
};

// Enum GYMGAME.EProgressNumberFormat
// NumValues: 0x0005
enum class EProgressNumberFormat : uint8
{
	Auto                                     = 0,
	Int                                      = 1,
	Float                                    = 2,
	Hide                                     = 3,
	EProgressNumberFormat_MAX                = 4,
};

// Enum GYMGAME.EPlayerRuleState
// NumValues: 0x0005
enum class EPlayerRuleState : uint8
{
	None                                     = 0,
	Running                                  = 1,
	Failed                                   = 2,
	Finished                                 = 3,
	EPlayerRuleState_MAX                     = 4,
};

// Enum GYMGAME.EGymPlaylistScoreType
// NumValues: 0x0003
enum class EGymPlaylistScoreType : uint8
{
	Invalid                                  = 0,
	Valid                                    = 1,
	EGymPlaylistScoreType_MAX                = 2,
};

// Enum GYMGAME.EGymPlaylistParticipantState
// NumValues: 0x0003
enum class EGymPlaylistParticipantState : uint8
{
	Playing                                  = 0,
	Eliminated                               = 1,
	EGymPlaylistParticipantState_MAX         = 2,
};

// Enum GYMGAME.EQuestState
// NumValues: 0x0005
enum class EQuestState : uint8
{
	None                                     = 0,
	InProgress                               = 1,
	Failed                                   = 2,
	Completed                                = 3,
	EQuestState_MAX                          = 4,
};

// Enum GYMGAME.EEliminationReason
// NumValues: 0x0008
enum class EEliminationReason : uint8
{
	Unknown                                  = 0,
	TimeOut                                  = 1,
	Drowned                                  = 2,
	Exploded                                 = 3,
	Royale                                   = 4,
	Killzone                                 = 5,
	GaveUp                                   = 6,
	EEliminationReason_MAX                   = 7,
};

// Enum GYMGAME.EGymRulesState
// NumValues: 0x0009
enum class EGymRulesState : uint8
{
	None                                     = 0,
	Pending                                  = 1,
	Preparing                                = 2,
	Ready                                    = 3,
	Running                                  = 4,
	Resolved                                 = 5,
	Ended                                    = 6,
	PostRewards                              = 7,
	EGymRulesState_MAX                       = 8,
};

// Enum GYMGAME.FSnapDirection
// NumValues: 0x0003
enum class EFSnapDirection : uint8
{
	Horizontal                               = 0,
	Vertical                                 = 10,
	FSnapDirection_MAX                       = 11,
};

// Enum GYMGAME.ESpectateReason
// NumValues: 0x0005
enum class ESpectateReason : uint8
{
	Unknown                                  = 0,
	User                                     = 1,
	Failed                                   = 2,
	Finished                                 = 3,
	ESpectateReason_MAX                      = 4,
};

// Enum GYMGAME.ESpectatorMovementMode
// NumValues: 0x0004
enum class ESpectatorMovementMode : uint8
{
	FreeCamera                               = 0,
	FirstPerson                              = 1,
	ThirdPerson                              = 2,
	MAX                                      = 3,
};

// Enum GYMGAME.ESupermove
// NumValues: 0x0009
enum class ESupermove : uint8
{
	None                                     = 0,
	Backflip                                 = 1,
	Frontflip                                = 2,
	DashVault                                = 3,
	Grinding                                 = 4,
	CartWheel                                = 5,
	SlideLeap                                = 6,
	WallFlip                                 = 7,
	ESupermove_MAX                           = 8,
};

// Enum GYMGAME.ETauntState
// NumValues: 0x0006
enum class ETauntState : uint8
{
	Start                                    = 0,
	Loop                                     = 1,
	End                                      = 2,
	Finished                                 = 3,
	Failed                                   = 4,
	ETauntState_MAX                          = 5,
};

// Enum GYMGAME.ETideType
// NumValues: 0x0004
enum class ETideType : uint32
{
	FromInstance                             = 0,
	SpawnActor                               = 1,
	MeshSurface                              = 2,
	ETideType_MAX                            = 3,
};

// Enum GYMGAME.EGymVaultingEngineVariantSlot
// NumValues: 0x000B
enum class EGymVaultingEngineVariantSlot : uint8
{
	None                                     = 0,
	Vault_Basic                              = 1,
	SUPER_Vault_Kong                         = 2,
	SUPER_Climb_Kong                         = 3,
	SUPER_Vault_Dash                         = 4,
	SUPER_Climb_Dash                         = 5,
	Vault_Leap                               = 6,
	Climb_Leap                               = 7,
	Climb_Basic                              = 8,
	Vault_Quick_Step                         = 9,
	EGymVaultingEngineVariantSlot_MAX        = 10,
};

// Enum GYMGAME.EGymVaultingEngineAnimationSetRole
// NumValues: 0x0007
enum class EGymVaultingEngineAnimationSetRole : uint8
{
	base                                     = 0,
	EdgeCloseClimb                           = 1,
	FromSky                                  = 2,
	Chain1                                   = 3,
	Chain2                                   = 4,
	Chain3                                   = 5,
	EGymVaultingEngineAnimationSetRole_MAX   = 6,
};

// Enum GYMGAME.EWallRunMode
// NumValues: 0x0004
enum class EWallRunMode : uint32
{
	Forward                                  = 0,
	Right                                    = 1,
	Left                                     = 2,
	EWallRunMode_MAX                         = 3,
};

// Enum GYMGAME.EGymBoundsPushMode
// NumValues: 0x0005
enum class EGymBoundsPushMode : uint8
{
	Single                                   = 0,
	Square2                                  = 1,
	Square3                                  = 2,
	Wall                                     = 3,
	EGymBoundsPushMode_MAX                   = 4,
};

// ScriptStruct GYMGAME.GymScoreboardEntry
// 0x0038 (0x0038 - 0x0000)
struct FGymScoreboardEntry final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             PlayerAvatar;                                      // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StandingString;                                    // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ScoreInfoString;                                   // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymScoreboardEntry) == 0x000008, "Wrong alignment on FGymScoreboardEntry");
static_assert(sizeof(FGymScoreboardEntry) == 0x000038, "Wrong size on FGymScoreboardEntry");
static_assert(offsetof(FGymScoreboardEntry, PlayerName) == 0x000000, "Member 'FGymScoreboardEntry::PlayerName' has a wrong offset!");
static_assert(offsetof(FGymScoreboardEntry, PlayerAvatar) == 0x000010, "Member 'FGymScoreboardEntry::PlayerAvatar' has a wrong offset!");
static_assert(offsetof(FGymScoreboardEntry, StandingString) == 0x000018, "Member 'FGymScoreboardEntry::StandingString' has a wrong offset!");
static_assert(offsetof(FGymScoreboardEntry, ScoreInfoString) == 0x000028, "Member 'FGymScoreboardEntry::ScoreInfoString' has a wrong offset!");

// ScriptStruct GYMGAME.GymUtilityAnimatorProps
// 0x0018 (0x0018 - 0x0000)
struct FGymUtilityAnimatorProps final
{
public:
	int32                                         CustomMovementStateID;                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MovementComponentGrounded;                         // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ResetAnimation_Slide;                              // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WantsToReset_Jump;                                 // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ResetAnimation_Roll;                               // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WantsTo_BackFlip;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WantsTo_FrontFlip;                                 // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WantsTo_SlideLeap;                                 // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TrampolineAnimationInit;                           // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsReplicate;                                       // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VaultExit;                                         // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AirTime;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsWoman;                                           // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymUtilityAnimatorProps) == 0x000004, "Wrong alignment on FGymUtilityAnimatorProps");
static_assert(sizeof(FGymUtilityAnimatorProps) == 0x000018, "Wrong size on FGymUtilityAnimatorProps");
static_assert(offsetof(FGymUtilityAnimatorProps, CustomMovementStateID) == 0x000000, "Member 'FGymUtilityAnimatorProps::CustomMovementStateID' has a wrong offset!");
static_assert(offsetof(FGymUtilityAnimatorProps, MovementComponentGrounded) == 0x000004, "Member 'FGymUtilityAnimatorProps::MovementComponentGrounded' has a wrong offset!");
static_assert(offsetof(FGymUtilityAnimatorProps, ResetAnimation_Slide) == 0x000005, "Member 'FGymUtilityAnimatorProps::ResetAnimation_Slide' has a wrong offset!");
static_assert(offsetof(FGymUtilityAnimatorProps, WantsToReset_Jump) == 0x000006, "Member 'FGymUtilityAnimatorProps::WantsToReset_Jump' has a wrong offset!");
static_assert(offsetof(FGymUtilityAnimatorProps, ResetAnimation_Roll) == 0x000007, "Member 'FGymUtilityAnimatorProps::ResetAnimation_Roll' has a wrong offset!");
static_assert(offsetof(FGymUtilityAnimatorProps, WantsTo_BackFlip) == 0x000008, "Member 'FGymUtilityAnimatorProps::WantsTo_BackFlip' has a wrong offset!");
static_assert(offsetof(FGymUtilityAnimatorProps, WantsTo_FrontFlip) == 0x000009, "Member 'FGymUtilityAnimatorProps::WantsTo_FrontFlip' has a wrong offset!");
static_assert(offsetof(FGymUtilityAnimatorProps, WantsTo_SlideLeap) == 0x00000A, "Member 'FGymUtilityAnimatorProps::WantsTo_SlideLeap' has a wrong offset!");
static_assert(offsetof(FGymUtilityAnimatorProps, TrampolineAnimationInit) == 0x00000B, "Member 'FGymUtilityAnimatorProps::TrampolineAnimationInit' has a wrong offset!");
static_assert(offsetof(FGymUtilityAnimatorProps, IsReplicate) == 0x00000C, "Member 'FGymUtilityAnimatorProps::IsReplicate' has a wrong offset!");
static_assert(offsetof(FGymUtilityAnimatorProps, VaultExit) == 0x00000D, "Member 'FGymUtilityAnimatorProps::VaultExit' has a wrong offset!");
static_assert(offsetof(FGymUtilityAnimatorProps, AirTime) == 0x000010, "Member 'FGymUtilityAnimatorProps::AirTime' has a wrong offset!");
static_assert(offsetof(FGymUtilityAnimatorProps, IsWoman) == 0x000014, "Member 'FGymUtilityAnimatorProps::IsWoman' has a wrong offset!");

// ScriptStruct GYMGAME.CustomLevelFileInfo
// 0x0060 (0x0060 - 0x0000)
struct FCustomLevelFileInfo final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLocal;                                           // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Path;                                              // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CloudId;                                           // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Uri;                                               // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTemp;                                           // 0x004C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x13];                                      // 0x004D(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCustomLevelFileInfo) == 0x000008, "Wrong alignment on FCustomLevelFileInfo");
static_assert(sizeof(FCustomLevelFileInfo) == 0x000060, "Wrong size on FCustomLevelFileInfo");
static_assert(offsetof(FCustomLevelFileInfo, Name) == 0x000000, "Member 'FCustomLevelFileInfo::Name' has a wrong offset!");
static_assert(offsetof(FCustomLevelFileInfo, IsLocal) == 0x000010, "Member 'FCustomLevelFileInfo::IsLocal' has a wrong offset!");
static_assert(offsetof(FCustomLevelFileInfo, Path) == 0x000018, "Member 'FCustomLevelFileInfo::Path' has a wrong offset!");
static_assert(offsetof(FCustomLevelFileInfo, CloudId) == 0x000028, "Member 'FCustomLevelFileInfo::CloudId' has a wrong offset!");
static_assert(offsetof(FCustomLevelFileInfo, Uri) == 0x000038, "Member 'FCustomLevelFileInfo::Uri' has a wrong offset!");
static_assert(offsetof(FCustomLevelFileInfo, Version) == 0x000048, "Member 'FCustomLevelFileInfo::Version' has a wrong offset!");
static_assert(offsetof(FCustomLevelFileInfo, bIsTemp) == 0x00004C, "Member 'FCustomLevelFileInfo::bIsTemp' has a wrong offset!");

// ScriptStruct GYMGAME.GymCustomizationAttribute
// 0x0018 (0x0018 - 0x0000)
struct FGymCustomizationAttribute final
{
public:
	class FName                                   Slot;                                              // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymCustomizationAttribute) == 0x000008, "Wrong alignment on FGymCustomizationAttribute");
static_assert(sizeof(FGymCustomizationAttribute) == 0x000018, "Wrong size on FGymCustomizationAttribute");
static_assert(offsetof(FGymCustomizationAttribute, Slot) == 0x000000, "Member 'FGymCustomizationAttribute::Slot' has a wrong offset!");
static_assert(offsetof(FGymCustomizationAttribute, Value) == 0x000008, "Member 'FGymCustomizationAttribute::Value' has a wrong offset!");

// ScriptStruct GYMGAME.GymCharacterCustomization
// 0x0010 (0x0010 - 0x0000)
struct FGymCharacterCustomization final
{
public:
	TArray<struct FGymCustomizationAttribute>     Attributes;                                        // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymCharacterCustomization) == 0x000008, "Wrong alignment on FGymCharacterCustomization");
static_assert(sizeof(FGymCharacterCustomization) == 0x000010, "Wrong size on FGymCharacterCustomization");
static_assert(offsetof(FGymCharacterCustomization, Attributes) == 0x000000, "Member 'FGymCharacterCustomization::Attributes' has a wrong offset!");

// ScriptStruct GYMGAME.GymPlayerPartyInfo
// 0x0038 (0x0038 - 0x0000)
struct FGymPlayerPartyInfo final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGymCharacterCustomization             Customization;                                     // 0x0020(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          LocalPlayer;                                       // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Host;                                              // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymPlayerPartyInfo) == 0x000008, "Wrong alignment on FGymPlayerPartyInfo");
static_assert(sizeof(FGymPlayerPartyInfo) == 0x000038, "Wrong size on FGymPlayerPartyInfo");
static_assert(offsetof(FGymPlayerPartyInfo, UserId) == 0x000000, "Member 'FGymPlayerPartyInfo::UserId' has a wrong offset!");
static_assert(offsetof(FGymPlayerPartyInfo, DisplayName) == 0x000010, "Member 'FGymPlayerPartyInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FGymPlayerPartyInfo, Customization) == 0x000020, "Member 'FGymPlayerPartyInfo::Customization' has a wrong offset!");
static_assert(offsetof(FGymPlayerPartyInfo, LocalPlayer) == 0x000030, "Member 'FGymPlayerPartyInfo::LocalPlayer' has a wrong offset!");
static_assert(offsetof(FGymPlayerPartyInfo, Host) == 0x000031, "Member 'FGymPlayerPartyInfo::Host' has a wrong offset!");

// ScriptStruct GYMGAME.GymAssetVariantId
// 0x0010 (0x0010 - 0x0000)
struct FGymAssetVariantId final
{
public:
	class FName                                   AssetName;                                         // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VariantName;                                       // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymAssetVariantId) == 0x000004, "Wrong alignment on FGymAssetVariantId");
static_assert(sizeof(FGymAssetVariantId) == 0x000010, "Wrong size on FGymAssetVariantId");
static_assert(offsetof(FGymAssetVariantId, AssetName) == 0x000000, "Member 'FGymAssetVariantId::AssetName' has a wrong offset!");
static_assert(offsetof(FGymAssetVariantId, VariantName) == 0x000008, "Member 'FGymAssetVariantId::VariantName' has a wrong offset!");

// ScriptStruct GYMGAME.GymMultiSelectProperty
// 0x0020 (0x0020 - 0x0000)
struct FGymMultiSelectProperty final
{
public:
	class FName                                   PropertySelectionId;                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   SelectionDisplayName;                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymMultiSelectProperty) == 0x000008, "Wrong alignment on FGymMultiSelectProperty");
static_assert(sizeof(FGymMultiSelectProperty) == 0x000020, "Wrong size on FGymMultiSelectProperty");
static_assert(offsetof(FGymMultiSelectProperty, PropertySelectionId) == 0x000000, "Member 'FGymMultiSelectProperty::PropertySelectionId' has a wrong offset!");
static_assert(offsetof(FGymMultiSelectProperty, SelectionDisplayName) == 0x000008, "Member 'FGymMultiSelectProperty::SelectionDisplayName' has a wrong offset!");

// ScriptStruct GYMGAME.GymProperty
// 0x00D8 (0x00D8 - 0x0000)
struct FGymProperty final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDevProperty;                                    // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PropertyId;                                        // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, RepSkip, NativeAccessSpecifierPublic)
	float                                         FloatVal;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntVal;                                            // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBooleanVal;                                       // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 WriteableVal;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SelectableVal;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGymAssetVariantId                     VariantIdVal;                                      // 0x0058(0x0010)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGymPropertyType                              PropertyType;                                      // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGymMultiSelectProperty>        SelectableProperty;                                // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
	float                                         MinVal;                                            // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMinLimit;                                         // 0x0084(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxVal;                                            // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMaxLimit;                                         // 0x008C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StepSize;                                          // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Precision;                                         // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   FalseDisplayText;                                  // 0x0098(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, RepSkip, NativeAccessSpecifierPublic)
	class FText                                   TrueDisplayText;                                   // 0x00B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, RepSkip, NativeAccessSpecifierPublic)
	class UGymLevelAssetData*                     LevelAssetData;                                    // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AGymStaticLevelAsset>       VariantVal;                                        // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymProperty) == 0x000008, "Wrong alignment on FGymProperty");
static_assert(sizeof(FGymProperty) == 0x0000D8, "Wrong size on FGymProperty");
static_assert(offsetof(FGymProperty, bIsValid) == 0x000000, "Member 'FGymProperty::bIsValid' has a wrong offset!");
static_assert(offsetof(FGymProperty, bIsDevProperty) == 0x000001, "Member 'FGymProperty::bIsDevProperty' has a wrong offset!");
static_assert(offsetof(FGymProperty, PropertyId) == 0x000004, "Member 'FGymProperty::PropertyId' has a wrong offset!");
static_assert(offsetof(FGymProperty, DisplayName) == 0x000010, "Member 'FGymProperty::DisplayName' has a wrong offset!");
static_assert(offsetof(FGymProperty, FloatVal) == 0x000028, "Member 'FGymProperty::FloatVal' has a wrong offset!");
static_assert(offsetof(FGymProperty, IntVal) == 0x00002C, "Member 'FGymProperty::IntVal' has a wrong offset!");
static_assert(offsetof(FGymProperty, bBooleanVal) == 0x000030, "Member 'FGymProperty::bBooleanVal' has a wrong offset!");
static_assert(offsetof(FGymProperty, WriteableVal) == 0x000038, "Member 'FGymProperty::WriteableVal' has a wrong offset!");
static_assert(offsetof(FGymProperty, SelectableVal) == 0x000048, "Member 'FGymProperty::SelectableVal' has a wrong offset!");
static_assert(offsetof(FGymProperty, VariantIdVal) == 0x000058, "Member 'FGymProperty::VariantIdVal' has a wrong offset!");
static_assert(offsetof(FGymProperty, PropertyType) == 0x000068, "Member 'FGymProperty::PropertyType' has a wrong offset!");
static_assert(offsetof(FGymProperty, SelectableProperty) == 0x000070, "Member 'FGymProperty::SelectableProperty' has a wrong offset!");
static_assert(offsetof(FGymProperty, MinVal) == 0x000080, "Member 'FGymProperty::MinVal' has a wrong offset!");
static_assert(offsetof(FGymProperty, bMinLimit) == 0x000084, "Member 'FGymProperty::bMinLimit' has a wrong offset!");
static_assert(offsetof(FGymProperty, MaxVal) == 0x000088, "Member 'FGymProperty::MaxVal' has a wrong offset!");
static_assert(offsetof(FGymProperty, bMaxLimit) == 0x00008C, "Member 'FGymProperty::bMaxLimit' has a wrong offset!");
static_assert(offsetof(FGymProperty, StepSize) == 0x000090, "Member 'FGymProperty::StepSize' has a wrong offset!");
static_assert(offsetof(FGymProperty, Precision) == 0x000094, "Member 'FGymProperty::Precision' has a wrong offset!");
static_assert(offsetof(FGymProperty, FalseDisplayText) == 0x000098, "Member 'FGymProperty::FalseDisplayText' has a wrong offset!");
static_assert(offsetof(FGymProperty, TrueDisplayText) == 0x0000B0, "Member 'FGymProperty::TrueDisplayText' has a wrong offset!");
static_assert(offsetof(FGymProperty, LevelAssetData) == 0x0000C8, "Member 'FGymProperty::LevelAssetData' has a wrong offset!");
static_assert(offsetof(FGymProperty, VariantVal) == 0x0000D0, "Member 'FGymProperty::VariantVal' has a wrong offset!");

// ScriptStruct GYMGAME.GymServerMapInfo
// 0x0040 (0x0040 - 0x0000)
struct FGymServerMapInfo final
{
public:
	class FString                                 MapId;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapOwner;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymServerMapInfo) == 0x000008, "Wrong alignment on FGymServerMapInfo");
static_assert(sizeof(FGymServerMapInfo) == 0x000040, "Wrong size on FGymServerMapInfo");
static_assert(offsetof(FGymServerMapInfo, MapId) == 0x000000, "Member 'FGymServerMapInfo::MapId' has a wrong offset!");
static_assert(offsetof(FGymServerMapInfo, MapOwner) == 0x000010, "Member 'FGymServerMapInfo::MapOwner' has a wrong offset!");
static_assert(offsetof(FGymServerMapInfo, MapName) == 0x000020, "Member 'FGymServerMapInfo::MapName' has a wrong offset!");
static_assert(offsetof(FGymServerMapInfo, GameMode) == 0x000030, "Member 'FGymServerMapInfo::GameMode' has a wrong offset!");

// ScriptStruct GYMGAME.GymServerOwner
// 0x0020 (0x0020 - 0x0000)
struct FGymServerOwner final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OwnerId;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymServerOwner) == 0x000008, "Wrong alignment on FGymServerOwner");
static_assert(sizeof(FGymServerOwner) == 0x000020, "Wrong size on FGymServerOwner");
static_assert(offsetof(FGymServerOwner, DisplayName) == 0x000000, "Member 'FGymServerOwner::DisplayName' has a wrong offset!");
static_assert(offsetof(FGymServerOwner, OwnerId) == 0x000010, "Member 'FGymServerOwner::OwnerId' has a wrong offset!");

// ScriptStruct GYMGAME.GymServerInfo
// 0x0158 (0x0158 - 0x0000)
struct FGymServerInfo final
{
public:
	class FString                                 ServerId;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapId;                                             // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlaylistId;                                        // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGymServerMapInfo                      MapInfo;                                           // 0x0050(0x0040)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 ConnectionString;                                  // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x00A0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HttpPort;                                          // 0x00A4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x00A8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerVersion;                                     // 0x00B8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x00C8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x00D8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentDisplayName;                                // 0x00E8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StartMode;                                         // 0x00F8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 JoinCode;                                          // 0x0108(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuickplayTimer;                                    // 0x0118(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymServerOwner                        Owner;                                             // 0x0120(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         Players;                                           // 0x0140(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayers;                                        // 0x0144(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ipv4;                                              // 0x0148(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymServerInfo) == 0x000008, "Wrong alignment on FGymServerInfo");
static_assert(sizeof(FGymServerInfo) == 0x000158, "Wrong size on FGymServerInfo");
static_assert(offsetof(FGymServerInfo, ServerId) == 0x000000, "Member 'FGymServerInfo::ServerId' has a wrong offset!");
static_assert(offsetof(FGymServerInfo, ServerName) == 0x000010, "Member 'FGymServerInfo::ServerName' has a wrong offset!");
static_assert(offsetof(FGymServerInfo, MapName) == 0x000020, "Member 'FGymServerInfo::MapName' has a wrong offset!");
static_assert(offsetof(FGymServerInfo, MapId) == 0x000030, "Member 'FGymServerInfo::MapId' has a wrong offset!");
static_assert(offsetof(FGymServerInfo, PlaylistId) == 0x000040, "Member 'FGymServerInfo::PlaylistId' has a wrong offset!");
static_assert(offsetof(FGymServerInfo, MapInfo) == 0x000050, "Member 'FGymServerInfo::MapInfo' has a wrong offset!");
static_assert(offsetof(FGymServerInfo, ConnectionString) == 0x000090, "Member 'FGymServerInfo::ConnectionString' has a wrong offset!");
static_assert(offsetof(FGymServerInfo, Port) == 0x0000A0, "Member 'FGymServerInfo::Port' has a wrong offset!");
static_assert(offsetof(FGymServerInfo, HttpPort) == 0x0000A4, "Member 'FGymServerInfo::HttpPort' has a wrong offset!");
static_assert(offsetof(FGymServerInfo, Type) == 0x0000A8, "Member 'FGymServerInfo::Type' has a wrong offset!");
static_assert(offsetof(FGymServerInfo, ServerVersion) == 0x0000B8, "Member 'FGymServerInfo::ServerVersion' has a wrong offset!");
static_assert(offsetof(FGymServerInfo, GameMode) == 0x0000C8, "Member 'FGymServerInfo::GameMode' has a wrong offset!");
static_assert(offsetof(FGymServerInfo, Status) == 0x0000D8, "Member 'FGymServerInfo::Status' has a wrong offset!");
static_assert(offsetof(FGymServerInfo, ContentDisplayName) == 0x0000E8, "Member 'FGymServerInfo::ContentDisplayName' has a wrong offset!");
static_assert(offsetof(FGymServerInfo, StartMode) == 0x0000F8, "Member 'FGymServerInfo::StartMode' has a wrong offset!");
static_assert(offsetof(FGymServerInfo, JoinCode) == 0x000108, "Member 'FGymServerInfo::JoinCode' has a wrong offset!");
static_assert(offsetof(FGymServerInfo, QuickplayTimer) == 0x000118, "Member 'FGymServerInfo::QuickplayTimer' has a wrong offset!");
static_assert(offsetof(FGymServerInfo, Owner) == 0x000120, "Member 'FGymServerInfo::Owner' has a wrong offset!");
static_assert(offsetof(FGymServerInfo, Players) == 0x000140, "Member 'FGymServerInfo::Players' has a wrong offset!");
static_assert(offsetof(FGymServerInfo, MaxPlayers) == 0x000144, "Member 'FGymServerInfo::MaxPlayers' has a wrong offset!");
static_assert(offsetof(FGymServerInfo, Ipv4) == 0x000148, "Member 'FGymServerInfo::Ipv4' has a wrong offset!");

// ScriptStruct GYMGAME.GymAssetTypesArray
// 0x0040 (0x0040 - 0x0000)
struct FGymAssetTypesArray final
{
public:
	TArray<class AActor*>                         BoxAssets;                                         // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         WallAssets;                                        // 0x0010(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         PillarAssets;                                      // 0x0020(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         FloorAssets;                                       // 0x0030(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymAssetTypesArray) == 0x000008, "Wrong alignment on FGymAssetTypesArray");
static_assert(sizeof(FGymAssetTypesArray) == 0x000040, "Wrong size on FGymAssetTypesArray");
static_assert(offsetof(FGymAssetTypesArray, BoxAssets) == 0x000000, "Member 'FGymAssetTypesArray::BoxAssets' has a wrong offset!");
static_assert(offsetof(FGymAssetTypesArray, WallAssets) == 0x000010, "Member 'FGymAssetTypesArray::WallAssets' has a wrong offset!");
static_assert(offsetof(FGymAssetTypesArray, PillarAssets) == 0x000020, "Member 'FGymAssetTypesArray::PillarAssets' has a wrong offset!");
static_assert(offsetof(FGymAssetTypesArray, FloorAssets) == 0x000030, "Member 'FGymAssetTypesArray::FloorAssets' has a wrong offset!");

// ScriptStruct GYMGAME.GymChallengeReward
// 0x0018 (0x0018 - 0x0000)
struct FGymChallengeReward final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XPAmount;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymChallengeReward) == 0x000008, "Wrong alignment on FGymChallengeReward");
static_assert(sizeof(FGymChallengeReward) == 0x000018, "Wrong size on FGymChallengeReward");
static_assert(offsetof(FGymChallengeReward, ItemId) == 0x000000, "Member 'FGymChallengeReward::ItemId' has a wrong offset!");
static_assert(offsetof(FGymChallengeReward, XPAmount) == 0x000010, "Member 'FGymChallengeReward::XPAmount' has a wrong offset!");

// ScriptStruct GYMGAME.GymMapOriginalDetails
// 0x0040 (0x0040 - 0x0000)
struct FGymMapOriginalDetails final
{
public:
	class FString                                 MapId;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatorName;                                       // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatorId;                                         // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymMapOriginalDetails) == 0x000008, "Wrong alignment on FGymMapOriginalDetails");
static_assert(sizeof(FGymMapOriginalDetails) == 0x000040, "Wrong size on FGymMapOriginalDetails");
static_assert(offsetof(FGymMapOriginalDetails, MapId) == 0x000000, "Member 'FGymMapOriginalDetails::MapId' has a wrong offset!");
static_assert(offsetof(FGymMapOriginalDetails, MapName) == 0x000010, "Member 'FGymMapOriginalDetails::MapName' has a wrong offset!");
static_assert(offsetof(FGymMapOriginalDetails, CreatorName) == 0x000020, "Member 'FGymMapOriginalDetails::CreatorName' has a wrong offset!");
static_assert(offsetof(FGymMapOriginalDetails, CreatorId) == 0x000030, "Member 'FGymMapOriginalDetails::CreatorId' has a wrong offset!");

// ScriptStruct GYMGAME.GymMapDetailsResult
// 0x00C8 (0x00C8 - 0x0000)
struct FGymMapDetailsResult final
{
public:
	class FString                                 MapId;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KitId;                                             // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatorName;                                       // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Owner;                                             // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerCount;                                       // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Upvotes;                                           // 0x0064(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Downvotes;                                         // 0x0068(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MyVote;                                            // 0x006C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CoverPhoto;                                        // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapVersion;                                        // 0x0080(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMapVisibility                                Visibility;                                        // 0x0084(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymMapOriginalDetails                 Original;                                          // 0x0088(0x0040)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymMapDetailsResult) == 0x000008, "Wrong alignment on FGymMapDetailsResult");
static_assert(sizeof(FGymMapDetailsResult) == 0x0000C8, "Wrong size on FGymMapDetailsResult");
static_assert(offsetof(FGymMapDetailsResult, MapId) == 0x000000, "Member 'FGymMapDetailsResult::MapId' has a wrong offset!");
static_assert(offsetof(FGymMapDetailsResult, MapName) == 0x000010, "Member 'FGymMapDetailsResult::MapName' has a wrong offset!");
static_assert(offsetof(FGymMapDetailsResult, KitId) == 0x000020, "Member 'FGymMapDetailsResult::KitId' has a wrong offset!");
static_assert(offsetof(FGymMapDetailsResult, CreatorName) == 0x000030, "Member 'FGymMapDetailsResult::CreatorName' has a wrong offset!");
static_assert(offsetof(FGymMapDetailsResult, Owner) == 0x000040, "Member 'FGymMapDetailsResult::Owner' has a wrong offset!");
static_assert(offsetof(FGymMapDetailsResult, GameMode) == 0x000050, "Member 'FGymMapDetailsResult::GameMode' has a wrong offset!");
static_assert(offsetof(FGymMapDetailsResult, PlayerCount) == 0x000060, "Member 'FGymMapDetailsResult::PlayerCount' has a wrong offset!");
static_assert(offsetof(FGymMapDetailsResult, Upvotes) == 0x000064, "Member 'FGymMapDetailsResult::Upvotes' has a wrong offset!");
static_assert(offsetof(FGymMapDetailsResult, Downvotes) == 0x000068, "Member 'FGymMapDetailsResult::Downvotes' has a wrong offset!");
static_assert(offsetof(FGymMapDetailsResult, MyVote) == 0x00006C, "Member 'FGymMapDetailsResult::MyVote' has a wrong offset!");
static_assert(offsetof(FGymMapDetailsResult, CoverPhoto) == 0x000070, "Member 'FGymMapDetailsResult::CoverPhoto' has a wrong offset!");
static_assert(offsetof(FGymMapDetailsResult, MapVersion) == 0x000080, "Member 'FGymMapDetailsResult::MapVersion' has a wrong offset!");
static_assert(offsetof(FGymMapDetailsResult, Visibility) == 0x000084, "Member 'FGymMapDetailsResult::Visibility' has a wrong offset!");
static_assert(offsetof(FGymMapDetailsResult, Original) == 0x000088, "Member 'FGymMapDetailsResult::Original' has a wrong offset!");

// ScriptStruct GYMGAME.GymCustomizationMesh
// 0x0048 (0x0048 - 0x0000)
struct FGymCustomizationMesh final
{
public:
	class FName                                   Slot;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Extra;                                             // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0018(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFirstPerson;                                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsShadowCasterInstance;                            // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymCustomizationAsset*                 AssetPtr;                                          // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForDynamicHands;                                   // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 ParentMeshForDynamicHands;                         // 0x0038(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      NiagaraComponent;                                  // 0x0040(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymCustomizationMesh) == 0x000008, "Wrong alignment on FGymCustomizationMesh");
static_assert(sizeof(FGymCustomizationMesh) == 0x000048, "Wrong size on FGymCustomizationMesh");
static_assert(offsetof(FGymCustomizationMesh, Slot) == 0x000000, "Member 'FGymCustomizationMesh::Slot' has a wrong offset!");
static_assert(offsetof(FGymCustomizationMesh, Extra) == 0x000008, "Member 'FGymCustomizationMesh::Extra' has a wrong offset!");
static_assert(offsetof(FGymCustomizationMesh, SkeletalMeshComponent) == 0x000018, "Member 'FGymCustomizationMesh::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(FGymCustomizationMesh, IsFirstPerson) == 0x000020, "Member 'FGymCustomizationMesh::IsFirstPerson' has a wrong offset!");
static_assert(offsetof(FGymCustomizationMesh, IsShadowCasterInstance) == 0x000021, "Member 'FGymCustomizationMesh::IsShadowCasterInstance' has a wrong offset!");
static_assert(offsetof(FGymCustomizationMesh, AssetPtr) == 0x000028, "Member 'FGymCustomizationMesh::AssetPtr' has a wrong offset!");
static_assert(offsetof(FGymCustomizationMesh, ForDynamicHands) == 0x000030, "Member 'FGymCustomizationMesh::ForDynamicHands' has a wrong offset!");
static_assert(offsetof(FGymCustomizationMesh, ParentMeshForDynamicHands) == 0x000038, "Member 'FGymCustomizationMesh::ParentMeshForDynamicHands' has a wrong offset!");
static_assert(offsetof(FGymCustomizationMesh, NiagaraComponent) == 0x000040, "Member 'FGymCustomizationMesh::NiagaraComponent' has a wrong offset!");

// ScriptStruct GYMGAME.CharacterPartMeshGroupBindingPtr
// 0x0078 (0x0078 - 0x0000)
struct FCharacterPartMeshGroupBindingPtr final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 MasterGroupMesh;                                   // 0x0060(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FGymCustomizationMesh>          BoundCharacterParts;                               // 0x0068(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FCharacterPartMeshGroupBindingPtr) == 0x000008, "Wrong alignment on FCharacterPartMeshGroupBindingPtr");
static_assert(sizeof(FCharacterPartMeshGroupBindingPtr) == 0x000078, "Wrong size on FCharacterPartMeshGroupBindingPtr");
static_assert(offsetof(FCharacterPartMeshGroupBindingPtr, MasterGroupMesh) == 0x000060, "Member 'FCharacterPartMeshGroupBindingPtr::MasterGroupMesh' has a wrong offset!");
static_assert(offsetof(FCharacterPartMeshGroupBindingPtr, BoundCharacterParts) == 0x000068, "Member 'FCharacterPartMeshGroupBindingPtr::BoundCharacterParts' has a wrong offset!");

// ScriptStruct GYMGAME.PhotoMetaData
// 0x0018 (0x0018 - 0x0000)
struct FPhotoMetaData final
{
public:
	class FString                                 MapId;                                             // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetAsThumbnail;                                    // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPhotoMetaData) == 0x000008, "Wrong alignment on FPhotoMetaData");
static_assert(sizeof(FPhotoMetaData) == 0x000018, "Wrong size on FPhotoMetaData");
static_assert(offsetof(FPhotoMetaData, MapId) == 0x000000, "Member 'FPhotoMetaData::MapId' has a wrong offset!");
static_assert(offsetof(FPhotoMetaData, SetAsThumbnail) == 0x000010, "Member 'FPhotoMetaData::SetAsThumbnail' has a wrong offset!");

// ScriptStruct GYMGAME.StaticAssetInfo
// 0x0040 (0x0040 - 0x0000)
struct FStaticAssetInfo final
{
public:
	struct FGymAssetVariantId                     VariantId;                                         // 0x0000(0x0010)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStaticAssetInfo) == 0x000008, "Wrong alignment on FStaticAssetInfo");
static_assert(sizeof(FStaticAssetInfo) == 0x000040, "Wrong size on FStaticAssetInfo");
static_assert(offsetof(FStaticAssetInfo, VariantId) == 0x000000, "Member 'FStaticAssetInfo::VariantId' has a wrong offset!");
static_assert(offsetof(FStaticAssetInfo, Location) == 0x000010, "Member 'FStaticAssetInfo::Location' has a wrong offset!");
static_assert(offsetof(FStaticAssetInfo, Rotator) == 0x000028, "Member 'FStaticAssetInfo::Rotator' has a wrong offset!");

// ScriptStruct GYMGAME.GymMapVersionLocator
// 0x0018 (0x0018 - 0x0000)
struct FGymMapVersionLocator final
{
public:
	class FString                                 MapId;                                             // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapVersion;                                        // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymMapVersionLocator) == 0x000008, "Wrong alignment on FGymMapVersionLocator");
static_assert(sizeof(FGymMapVersionLocator) == 0x000018, "Wrong size on FGymMapVersionLocator");
static_assert(offsetof(FGymMapVersionLocator, MapId) == 0x000000, "Member 'FGymMapVersionLocator::MapId' has a wrong offset!");
static_assert(offsetof(FGymMapVersionLocator, MapVersion) == 0x000010, "Member 'FGymMapVersionLocator::MapVersion' has a wrong offset!");

// ScriptStruct GYMGAME.GymTiltCameraModifierProps
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FGymTiltCameraModifierProps final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymTiltCameraModifierProps) == 0x000004, "Wrong alignment on FGymTiltCameraModifierProps");
static_assert(sizeof(FGymTiltCameraModifierProps) == 0x000008, "Wrong size on FGymTiltCameraModifierProps");

// ScriptStruct GYMGAME.GymWallSerializationCell
// 0x0020 (0x0020 - 0x0000)
struct FGymWallSerializationCell final
{
public:
	struct FIntVector                             Position;                                          // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Shape;                                             // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymWallSerializationCell) == 0x000008, "Wrong alignment on FGymWallSerializationCell");
static_assert(sizeof(FGymWallSerializationCell) == 0x000020, "Wrong size on FGymWallSerializationCell");
static_assert(offsetof(FGymWallSerializationCell, Position) == 0x000000, "Member 'FGymWallSerializationCell::Position' has a wrong offset!");
static_assert(offsetof(FGymWallSerializationCell, Shape) == 0x000010, "Member 'FGymWallSerializationCell::Shape' has a wrong offset!");

// ScriptStruct GYMGAME.GymMapSearchResult
// 0x0060 (0x0060 - 0x0000)
struct FGymMapSearchResult final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MapName;                                           // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapVersion;                                        // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CreatorName;                                       // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OriginalCreatorName;                               // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Thumbnail;                                         // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymMapSearchResult) == 0x000008, "Wrong alignment on FGymMapSearchResult");
static_assert(sizeof(FGymMapSearchResult) == 0x000060, "Wrong size on FGymMapSearchResult");
static_assert(offsetof(FGymMapSearchResult, MapId) == 0x000000, "Member 'FGymMapSearchResult::MapId' has a wrong offset!");
static_assert(offsetof(FGymMapSearchResult, MapName) == 0x000008, "Member 'FGymMapSearchResult::MapName' has a wrong offset!");
static_assert(offsetof(FGymMapSearchResult, MapVersion) == 0x000018, "Member 'FGymMapSearchResult::MapVersion' has a wrong offset!");
static_assert(offsetof(FGymMapSearchResult, CreatorName) == 0x000020, "Member 'FGymMapSearchResult::CreatorName' has a wrong offset!");
static_assert(offsetof(FGymMapSearchResult, OriginalCreatorName) == 0x000030, "Member 'FGymMapSearchResult::OriginalCreatorName' has a wrong offset!");
static_assert(offsetof(FGymMapSearchResult, GameMode) == 0x000040, "Member 'FGymMapSearchResult::GameMode' has a wrong offset!");
static_assert(offsetof(FGymMapSearchResult, Thumbnail) == 0x000050, "Member 'FGymMapSearchResult::Thumbnail' has a wrong offset!");

// ScriptStruct GYMGAME.GymSerializableMapOptions
// 0x001C (0x001C - 0x0000)
struct FGymSerializableMapOptions final
{
public:
	float                                         TimeOfDay;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Weather;                                           // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Music;                                             // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RuleId;                                            // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymSerializableMapOptions) == 0x000004, "Wrong alignment on FGymSerializableMapOptions");
static_assert(sizeof(FGymSerializableMapOptions) == 0x00001C, "Wrong size on FGymSerializableMapOptions");
static_assert(offsetof(FGymSerializableMapOptions, TimeOfDay) == 0x000000, "Member 'FGymSerializableMapOptions::TimeOfDay' has a wrong offset!");
static_assert(offsetof(FGymSerializableMapOptions, Weather) == 0x000004, "Member 'FGymSerializableMapOptions::Weather' has a wrong offset!");
static_assert(offsetof(FGymSerializableMapOptions, Music) == 0x00000C, "Member 'FGymSerializableMapOptions::Music' has a wrong offset!");
static_assert(offsetof(FGymSerializableMapOptions, RuleId) == 0x000014, "Member 'FGymSerializableMapOptions::RuleId' has a wrong offset!");

// ScriptStruct GYMGAME.GymWallSerializationDataV2
// 0x0028 (0x0028 - 0x0000)
struct FGymWallSerializationDataV2 final
{
public:
	struct FIntVector                             Size;                                              // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FloorLevel;                                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Shape;                                             // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         StateIndex;                                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymWallSerializationDataV2) == 0x000008, "Wrong alignment on FGymWallSerializationDataV2");
static_assert(sizeof(FGymWallSerializationDataV2) == 0x000028, "Wrong size on FGymWallSerializationDataV2");
static_assert(offsetof(FGymWallSerializationDataV2, Size) == 0x000000, "Member 'FGymWallSerializationDataV2::Size' has a wrong offset!");
static_assert(offsetof(FGymWallSerializationDataV2, FloorLevel) == 0x00000C, "Member 'FGymWallSerializationDataV2::FloorLevel' has a wrong offset!");
static_assert(offsetof(FGymWallSerializationDataV2, Shape) == 0x000010, "Member 'FGymWallSerializationDataV2::Shape' has a wrong offset!");
static_assert(offsetof(FGymWallSerializationDataV2, StateIndex) == 0x000020, "Member 'FGymWallSerializationDataV2::StateIndex' has a wrong offset!");

// ScriptStruct GYMGAME.GymSerializableMap
// 0x0038 (0x0038 - 0x0000)
struct FGymSerializableMap
{
public:
	class FString                                 FileVersion;                                       // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KitId;                                             // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseMapIndex;                                      // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymSerializableMap) == 0x000008, "Wrong alignment on FGymSerializableMap");
static_assert(sizeof(FGymSerializableMap) == 0x000038, "Wrong size on FGymSerializableMap");
static_assert(offsetof(FGymSerializableMap, FileVersion) == 0x000000, "Member 'FGymSerializableMap::FileVersion' has a wrong offset!");
static_assert(offsetof(FGymSerializableMap, Name) == 0x000010, "Member 'FGymSerializableMap::Name' has a wrong offset!");
static_assert(offsetof(FGymSerializableMap, KitId) == 0x000020, "Member 'FGymSerializableMap::KitId' has a wrong offset!");
static_assert(offsetof(FGymSerializableMap, BaseMapIndex) == 0x000030, "Member 'FGymSerializableMap::BaseMapIndex' has a wrong offset!");

// ScriptStruct GYMGAME.GymMapAssetRecord_WallAttachment
// 0x0008 (0x0008 - 0x0000)
struct FGymMapAssetRecord_WallAttachment final
{
public:
	int16                                         X;                                                 // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Y;                                                 // 0x0002(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Z;                                                 // 0x0004(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGymWallDirection                             D;                                                 // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymMapAssetRecord_WallAttachment) == 0x000002, "Wrong alignment on FGymMapAssetRecord_WallAttachment");
static_assert(sizeof(FGymMapAssetRecord_WallAttachment) == 0x000008, "Wrong size on FGymMapAssetRecord_WallAttachment");
static_assert(offsetof(FGymMapAssetRecord_WallAttachment, X) == 0x000000, "Member 'FGymMapAssetRecord_WallAttachment::X' has a wrong offset!");
static_assert(offsetof(FGymMapAssetRecord_WallAttachment, Y) == 0x000002, "Member 'FGymMapAssetRecord_WallAttachment::Y' has a wrong offset!");
static_assert(offsetof(FGymMapAssetRecord_WallAttachment, Z) == 0x000004, "Member 'FGymMapAssetRecord_WallAttachment::Z' has a wrong offset!");
static_assert(offsetof(FGymMapAssetRecord_WallAttachment, D) == 0x000006, "Member 'FGymMapAssetRecord_WallAttachment::D' has a wrong offset!");

// ScriptStruct GYMGAME.GymSerializableAssetProperty
// 0x0038 (0x0038 - 0x0000)
struct FGymSerializableAssetProperty final
{
public:
	class FName                                   PropertyId;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatVal;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntVal;                                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBoolVal;                                          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 WriteableVal;                                      // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SelectableVal;                                     // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymSerializableAssetProperty) == 0x000008, "Wrong alignment on FGymSerializableAssetProperty");
static_assert(sizeof(FGymSerializableAssetProperty) == 0x000038, "Wrong size on FGymSerializableAssetProperty");
static_assert(offsetof(FGymSerializableAssetProperty, PropertyId) == 0x000000, "Member 'FGymSerializableAssetProperty::PropertyId' has a wrong offset!");
static_assert(offsetof(FGymSerializableAssetProperty, FloatVal) == 0x000008, "Member 'FGymSerializableAssetProperty::FloatVal' has a wrong offset!");
static_assert(offsetof(FGymSerializableAssetProperty, IntVal) == 0x00000C, "Member 'FGymSerializableAssetProperty::IntVal' has a wrong offset!");
static_assert(offsetof(FGymSerializableAssetProperty, bBoolVal) == 0x000010, "Member 'FGymSerializableAssetProperty::bBoolVal' has a wrong offset!");
static_assert(offsetof(FGymSerializableAssetProperty, WriteableVal) == 0x000018, "Member 'FGymSerializableAssetProperty::WriteableVal' has a wrong offset!");
static_assert(offsetof(FGymSerializableAssetProperty, SelectableVal) == 0x000028, "Member 'FGymSerializableAssetProperty::SelectableVal' has a wrong offset!");

// ScriptStruct GYMGAME.StaticAssetSerializationInfo
// 0x0058 (0x0058 - 0x0000)
struct FStaticAssetSerializationInfo final
{
public:
	int32                                         AssetId;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PaletteId;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Parent;                                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize100                 Location;                                          // 0x0010(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FGymMapAssetRecord_WallAttachment      Attachment;                                        // 0x0040(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGymSerializableAssetProperty>  Properties;                                        // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStaticAssetSerializationInfo) == 0x000008, "Wrong alignment on FStaticAssetSerializationInfo");
static_assert(sizeof(FStaticAssetSerializationInfo) == 0x000058, "Wrong size on FStaticAssetSerializationInfo");
static_assert(offsetof(FStaticAssetSerializationInfo, AssetId) == 0x000000, "Member 'FStaticAssetSerializationInfo::AssetId' has a wrong offset!");
static_assert(offsetof(FStaticAssetSerializationInfo, PaletteId) == 0x000004, "Member 'FStaticAssetSerializationInfo::PaletteId' has a wrong offset!");
static_assert(offsetof(FStaticAssetSerializationInfo, Parent) == 0x000008, "Member 'FStaticAssetSerializationInfo::Parent' has a wrong offset!");
static_assert(offsetof(FStaticAssetSerializationInfo, Location) == 0x000010, "Member 'FStaticAssetSerializationInfo::Location' has a wrong offset!");
static_assert(offsetof(FStaticAssetSerializationInfo, Rotator) == 0x000028, "Member 'FStaticAssetSerializationInfo::Rotator' has a wrong offset!");
static_assert(offsetof(FStaticAssetSerializationInfo, Attachment) == 0x000040, "Member 'FStaticAssetSerializationInfo::Attachment' has a wrong offset!");
static_assert(offsetof(FStaticAssetSerializationInfo, Properties) == 0x000048, "Member 'FStaticAssetSerializationInfo::Properties' has a wrong offset!");

// ScriptStruct GYMGAME.GymSerializableSpline
// 0x0018 (0x0018 - 0x0000)
struct FGymSerializableSpline final
{
public:
	int32                                         SplineId;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Parts;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymSerializableSpline) == 0x000008, "Wrong alignment on FGymSerializableSpline");
static_assert(sizeof(FGymSerializableSpline) == 0x000018, "Wrong size on FGymSerializableSpline");
static_assert(offsetof(FGymSerializableSpline, SplineId) == 0x000000, "Member 'FGymSerializableSpline::SplineId' has a wrong offset!");
static_assert(offsetof(FGymSerializableSpline, Parts) == 0x000008, "Member 'FGymSerializableSpline::Parts' has a wrong offset!");

// ScriptStruct GYMGAME.GymSerializableMapV010
// 0x0078 (0x00B0 - 0x0038)
struct FGymSerializableMapV010 : public FGymSerializableMap
{
public:
	struct FGymSerializableMapOptions             Options;                                           // 0x0038(0x001C)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymWallSerializationDataV2            Walls;                                             // 0x0058(0x0028)(NativeAccessSpecifierPublic)
	TArray<struct FGymAssetVariantId>             Palette;                                           // 0x0080(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FStaticAssetSerializationInfo>  Assets;                                            // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGymSerializableSpline>         Splines;                                           // 0x00A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymSerializableMapV010) == 0x000008, "Wrong alignment on FGymSerializableMapV010");
static_assert(sizeof(FGymSerializableMapV010) == 0x0000B0, "Wrong size on FGymSerializableMapV010");
static_assert(offsetof(FGymSerializableMapV010, Options) == 0x000038, "Member 'FGymSerializableMapV010::Options' has a wrong offset!");
static_assert(offsetof(FGymSerializableMapV010, Walls) == 0x000058, "Member 'FGymSerializableMapV010::Walls' has a wrong offset!");
static_assert(offsetof(FGymSerializableMapV010, Palette) == 0x000080, "Member 'FGymSerializableMapV010::Palette' has a wrong offset!");
static_assert(offsetof(FGymSerializableMapV010, Assets) == 0x000090, "Member 'FGymSerializableMapV010::Assets' has a wrong offset!");
static_assert(offsetof(FGymSerializableMapV010, Splines) == 0x0000A0, "Member 'FGymSerializableMapV010::Splines' has a wrong offset!");

// ScriptStruct GYMGAME.GymPlaylistSearchResult
// 0x0038 (0x0038 - 0x0000)
struct FGymPlaylistSearchResult final
{
public:
	class FString                                 PlaylistId;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlaylistName;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatorName;                                       // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapCount;                                          // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymPlaylistSearchResult) == 0x000008, "Wrong alignment on FGymPlaylistSearchResult");
static_assert(sizeof(FGymPlaylistSearchResult) == 0x000038, "Wrong size on FGymPlaylistSearchResult");
static_assert(offsetof(FGymPlaylistSearchResult, PlaylistId) == 0x000000, "Member 'FGymPlaylistSearchResult::PlaylistId' has a wrong offset!");
static_assert(offsetof(FGymPlaylistSearchResult, PlaylistName) == 0x000010, "Member 'FGymPlaylistSearchResult::PlaylistName' has a wrong offset!");
static_assert(offsetof(FGymPlaylistSearchResult, CreatorName) == 0x000020, "Member 'FGymPlaylistSearchResult::CreatorName' has a wrong offset!");
static_assert(offsetof(FGymPlaylistSearchResult, MapCount) == 0x000030, "Member 'FGymPlaylistSearchResult::MapCount' has a wrong offset!");

// ScriptStruct GYMGAME.CharacterPartSlottedMaterial
// 0x0010 (0x0010 - 0x0000)
struct FCharacterPartSlottedMaterial final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterPartSlottedMaterial) == 0x000008, "Wrong alignment on FCharacterPartSlottedMaterial");
static_assert(sizeof(FCharacterPartSlottedMaterial) == 0x000010, "Wrong size on FCharacterPartSlottedMaterial");
static_assert(offsetof(FCharacterPartSlottedMaterial, Material) == 0x000008, "Member 'FCharacterPartSlottedMaterial::Material' has a wrong offset!");

// ScriptStruct GYMGAME.GymRuleParticipant
// 0x0068 (0x0068 - 0x0000)
struct FGymRuleParticipant final
{
public:
	TWeakObjectPtr<class UGymParticipantRepData>  RepData;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGymRuleParticipantState                      State;                                             // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Standing;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinishTime;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGymRespawnLocationInterface> LastVisitedCheckpoint;                             // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawned;                                          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ObbyFlag;                                          // 0x0030(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRoyaleEliminated;                                 // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AController>             Controller;                                        // 0x003C(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AGymAIController>        AIController;                                      // 0x0044(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AGymPlayerController>    PlayerController;                                  // 0x004C(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AGymCharacter>           Character;                                         // 0x0054(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AGymPlayerState>         PlayerState;                                       // 0x005C(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymRuleParticipant) == 0x000008, "Wrong alignment on FGymRuleParticipant");
static_assert(sizeof(FGymRuleParticipant) == 0x000068, "Wrong size on FGymRuleParticipant");
static_assert(offsetof(FGymRuleParticipant, RepData) == 0x000000, "Member 'FGymRuleParticipant::RepData' has a wrong offset!");
static_assert(offsetof(FGymRuleParticipant, State) == 0x000008, "Member 'FGymRuleParticipant::State' has a wrong offset!");
static_assert(offsetof(FGymRuleParticipant, Standing) == 0x00000C, "Member 'FGymRuleParticipant::Standing' has a wrong offset!");
static_assert(offsetof(FGymRuleParticipant, FinishTime) == 0x000010, "Member 'FGymRuleParticipant::FinishTime' has a wrong offset!");
static_assert(offsetof(FGymRuleParticipant, LastVisitedCheckpoint) == 0x000018, "Member 'FGymRuleParticipant::LastVisitedCheckpoint' has a wrong offset!");
static_assert(offsetof(FGymRuleParticipant, bSpawned) == 0x000028, "Member 'FGymRuleParticipant::bSpawned' has a wrong offset!");
static_assert(offsetof(FGymRuleParticipant, ObbyFlag) == 0x000030, "Member 'FGymRuleParticipant::ObbyFlag' has a wrong offset!");
static_assert(offsetof(FGymRuleParticipant, bRoyaleEliminated) == 0x000038, "Member 'FGymRuleParticipant::bRoyaleEliminated' has a wrong offset!");
static_assert(offsetof(FGymRuleParticipant, Controller) == 0x00003C, "Member 'FGymRuleParticipant::Controller' has a wrong offset!");
static_assert(offsetof(FGymRuleParticipant, AIController) == 0x000044, "Member 'FGymRuleParticipant::AIController' has a wrong offset!");
static_assert(offsetof(FGymRuleParticipant, PlayerController) == 0x00004C, "Member 'FGymRuleParticipant::PlayerController' has a wrong offset!");
static_assert(offsetof(FGymRuleParticipant, Character) == 0x000054, "Member 'FGymRuleParticipant::Character' has a wrong offset!");
static_assert(offsetof(FGymRuleParticipant, PlayerState) == 0x00005C, "Member 'FGymRuleParticipant::PlayerState' has a wrong offset!");

// ScriptStruct GYMGAME.GymLevelKit
// 0x0050 (0x0050 - 0x0000)
struct FGymLevelKit final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn, NativeAccessSpecifierPublic)
	class UTexture2D*                             Preview;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         BaseLevels;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, NativeAccessSpecifierPublic)
	bool                                          Internal;                                          // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PreraceCameraDuration;                             // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AGymTide>                   TideClassBP;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymLevelKit) == 0x000008, "Wrong alignment on FGymLevelKit");
static_assert(sizeof(FGymLevelKit) == 0x000050, "Wrong size on FGymLevelKit");
static_assert(offsetof(FGymLevelKit, ID) == 0x000000, "Member 'FGymLevelKit::ID' has a wrong offset!");
static_assert(offsetof(FGymLevelKit, DisplayName) == 0x000010, "Member 'FGymLevelKit::DisplayName' has a wrong offset!");
static_assert(offsetof(FGymLevelKit, Preview) == 0x000028, "Member 'FGymLevelKit::Preview' has a wrong offset!");
static_assert(offsetof(FGymLevelKit, BaseLevels) == 0x000030, "Member 'FGymLevelKit::BaseLevels' has a wrong offset!");
static_assert(offsetof(FGymLevelKit, Internal) == 0x000040, "Member 'FGymLevelKit::Internal' has a wrong offset!");
static_assert(offsetof(FGymLevelKit, PreraceCameraDuration) == 0x000044, "Member 'FGymLevelKit::PreraceCameraDuration' has a wrong offset!");
static_assert(offsetof(FGymLevelKit, TideClassBP) == 0x000048, "Member 'FGymLevelKit::TideClassBP' has a wrong offset!");

// ScriptStruct GYMGAME.GymLoadingScreenOptions
// 0x0058 (0x0058 - 0x0000)
struct FGymLoadingScreenOptions final
{
public:
	class FString                                 GameMode;                                          // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KitId;                                             // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextureUri;                                        // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatorName;                                       // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocalUrl;                                         // 0x0050(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymLoadingScreenOptions) == 0x000008, "Wrong alignment on FGymLoadingScreenOptions");
static_assert(sizeof(FGymLoadingScreenOptions) == 0x000058, "Wrong size on FGymLoadingScreenOptions");
static_assert(offsetof(FGymLoadingScreenOptions, GameMode) == 0x000000, "Member 'FGymLoadingScreenOptions::GameMode' has a wrong offset!");
static_assert(offsetof(FGymLoadingScreenOptions, MapName) == 0x000010, "Member 'FGymLoadingScreenOptions::MapName' has a wrong offset!");
static_assert(offsetof(FGymLoadingScreenOptions, KitId) == 0x000020, "Member 'FGymLoadingScreenOptions::KitId' has a wrong offset!");
static_assert(offsetof(FGymLoadingScreenOptions, TextureUri) == 0x000030, "Member 'FGymLoadingScreenOptions::TextureUri' has a wrong offset!");
static_assert(offsetof(FGymLoadingScreenOptions, CreatorName) == 0x000040, "Member 'FGymLoadingScreenOptions::CreatorName' has a wrong offset!");
static_assert(offsetof(FGymLoadingScreenOptions, bLocalUrl) == 0x000050, "Member 'FGymLoadingScreenOptions::bLocalUrl' has a wrong offset!");

// ScriptStruct GYMGAME.GymMapAssetRecordCategorizedList
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FGymMapAssetRecordCategorizedList final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymMapAssetRecordCategorizedList) == 0x000008, "Wrong alignment on FGymMapAssetRecordCategorizedList");
static_assert(sizeof(FGymMapAssetRecordCategorizedList) == 0x000010, "Wrong size on FGymMapAssetRecordCategorizedList");

// ScriptStruct GYMGAME.GymCustomizationColorAttribute
// 0x0018 (0x0018 - 0x0000)
struct FGymCustomizationColorAttribute final
{
public:
	class FName                                   Slot;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymCustomizationColorAttribute) == 0x000008, "Wrong alignment on FGymCustomizationColorAttribute");
static_assert(sizeof(FGymCustomizationColorAttribute) == 0x000018, "Wrong size on FGymCustomizationColorAttribute");
static_assert(offsetof(FGymCustomizationColorAttribute, Slot) == 0x000000, "Member 'FGymCustomizationColorAttribute::Slot' has a wrong offset!");
static_assert(offsetof(FGymCustomizationColorAttribute, Value) == 0x000008, "Member 'FGymCustomizationColorAttribute::Value' has a wrong offset!");

// ScriptStruct GYMGAME.GymMapAssetLink
// 0x0010 (0x0010 - 0x0000)
struct FGymMapAssetLink final
{
public:
	int32                                         From;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         To;                                                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkType;                                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymMapAssetLink) == 0x000004, "Wrong alignment on FGymMapAssetLink");
static_assert(sizeof(FGymMapAssetLink) == 0x000010, "Wrong size on FGymMapAssetLink");
static_assert(offsetof(FGymMapAssetLink, From) == 0x000000, "Member 'FGymMapAssetLink::From' has a wrong offset!");
static_assert(offsetof(FGymMapAssetLink, To) == 0x000004, "Member 'FGymMapAssetLink::To' has a wrong offset!");
static_assert(offsetof(FGymMapAssetLink, LinkType) == 0x000008, "Member 'FGymMapAssetLink::LinkType' has a wrong offset!");

// ScriptStruct GYMGAME.TabPanelContainer
// 0x0020 (0x0020 - 0x0000)
struct FTabPanelContainer final
{
public:
	class FString                                 TabName;                                           // 0x0000(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UGymGuiGlobalMetaWidget*>        Widgets;                                           // 0x0010(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTabPanelContainer) == 0x000008, "Wrong alignment on FTabPanelContainer");
static_assert(sizeof(FTabPanelContainer) == 0x000020, "Wrong size on FTabPanelContainer");
static_assert(offsetof(FTabPanelContainer, TabName) == 0x000000, "Member 'FTabPanelContainer::TabName' has a wrong offset!");
static_assert(offsetof(FTabPanelContainer, Widgets) == 0x000010, "Member 'FTabPanelContainer::Widgets' has a wrong offset!");

// ScriptStruct GYMGAME.GymAssetRecord
// 0x0060 (0x0060 - 0x0000)
struct FGymAssetRecord final
{
public:
	int32                                         RecordId;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParentId;                                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGymMapAssetRecord_WallAttachment      Attachment;                                        // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStaticAssetInfo                       Info;                                              // 0x0010(0x0040)(NoDestructor, NativeAccessSpecifierPublic)
	class AGymStaticLevelAsset*                   Actor;                                             // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Replicated;                                        // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymAssetRecord) == 0x000008, "Wrong alignment on FGymAssetRecord");
static_assert(sizeof(FGymAssetRecord) == 0x000060, "Wrong size on FGymAssetRecord");
static_assert(offsetof(FGymAssetRecord, RecordId) == 0x000000, "Member 'FGymAssetRecord::RecordId' has a wrong offset!");
static_assert(offsetof(FGymAssetRecord, ParentId) == 0x000004, "Member 'FGymAssetRecord::ParentId' has a wrong offset!");
static_assert(offsetof(FGymAssetRecord, Attachment) == 0x000008, "Member 'FGymAssetRecord::Attachment' has a wrong offset!");
static_assert(offsetof(FGymAssetRecord, Info) == 0x000010, "Member 'FGymAssetRecord::Info' has a wrong offset!");
static_assert(offsetof(FGymAssetRecord, Actor) == 0x000050, "Member 'FGymAssetRecord::Actor' has a wrong offset!");
static_assert(offsetof(FGymAssetRecord, Replicated) == 0x000058, "Member 'FGymAssetRecord::Replicated' has a wrong offset!");

// ScriptStruct GYMGAME.PhotoSearchResult
// 0x0020 (0x0020 - 0x0000)
struct FPhotoSearchResult final
{
public:
	class FString                                 Blob;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Thumbnail;                                         // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhotoSearchResult) == 0x000008, "Wrong alignment on FPhotoSearchResult");
static_assert(sizeof(FPhotoSearchResult) == 0x000020, "Wrong size on FPhotoSearchResult");
static_assert(offsetof(FPhotoSearchResult, Blob) == 0x000000, "Member 'FPhotoSearchResult::Blob' has a wrong offset!");
static_assert(offsetof(FPhotoSearchResult, Thumbnail) == 0x000010, "Member 'FPhotoSearchResult::Thumbnail' has a wrong offset!");

// ScriptStruct GYMGAME.GymMapURIResult
// 0x0040 (0x0040 - 0x0000)
struct FGymMapURIResult final
{
public:
	class FString                                 MapName;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Resource;                                          // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KitId;                                             // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapVariant;                                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymMapURIResult) == 0x000008, "Wrong alignment on FGymMapURIResult");
static_assert(sizeof(FGymMapURIResult) == 0x000040, "Wrong size on FGymMapURIResult");
static_assert(offsetof(FGymMapURIResult, MapName) == 0x000000, "Member 'FGymMapURIResult::MapName' has a wrong offset!");
static_assert(offsetof(FGymMapURIResult, Version) == 0x000010, "Member 'FGymMapURIResult::Version' has a wrong offset!");
static_assert(offsetof(FGymMapURIResult, Resource) == 0x000018, "Member 'FGymMapURIResult::Resource' has a wrong offset!");
static_assert(offsetof(FGymMapURIResult, KitId) == 0x000028, "Member 'FGymMapURIResult::KitId' has a wrong offset!");
static_assert(offsetof(FGymMapURIResult, MapVariant) == 0x000038, "Member 'FGymMapURIResult::MapVariant' has a wrong offset!");

// ScriptStruct GYMGAME.GymPlaylistMapInfo
// 0x0080 (0x0080 - 0x0000)
struct FGymPlaylistMapInfo final
{
public:
	class FString                                 MapId;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KitId;                                             // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapVersion;                                        // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CreatorName;                                       // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerCount;                                       // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Thumbnail;                                         // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CoverPhoto;                                        // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymPlaylistMapInfo) == 0x000008, "Wrong alignment on FGymPlaylistMapInfo");
static_assert(sizeof(FGymPlaylistMapInfo) == 0x000080, "Wrong size on FGymPlaylistMapInfo");
static_assert(offsetof(FGymPlaylistMapInfo, MapId) == 0x000000, "Member 'FGymPlaylistMapInfo::MapId' has a wrong offset!");
static_assert(offsetof(FGymPlaylistMapInfo, MapName) == 0x000010, "Member 'FGymPlaylistMapInfo::MapName' has a wrong offset!");
static_assert(offsetof(FGymPlaylistMapInfo, KitId) == 0x000020, "Member 'FGymPlaylistMapInfo::KitId' has a wrong offset!");
static_assert(offsetof(FGymPlaylistMapInfo, MapVersion) == 0x000030, "Member 'FGymPlaylistMapInfo::MapVersion' has a wrong offset!");
static_assert(offsetof(FGymPlaylistMapInfo, CreatorName) == 0x000038, "Member 'FGymPlaylistMapInfo::CreatorName' has a wrong offset!");
static_assert(offsetof(FGymPlaylistMapInfo, GameMode) == 0x000048, "Member 'FGymPlaylistMapInfo::GameMode' has a wrong offset!");
static_assert(offsetof(FGymPlaylistMapInfo, PlayerCount) == 0x000058, "Member 'FGymPlaylistMapInfo::PlayerCount' has a wrong offset!");
static_assert(offsetof(FGymPlaylistMapInfo, Thumbnail) == 0x000060, "Member 'FGymPlaylistMapInfo::Thumbnail' has a wrong offset!");
static_assert(offsetof(FGymPlaylistMapInfo, CoverPhoto) == 0x000070, "Member 'FGymPlaylistMapInfo::CoverPhoto' has a wrong offset!");

// ScriptStruct GYMGAME.GymPlaylistDetailsResult
// 0x0060 (0x0060 - 0x0000)
struct FGymPlaylistDetailsResult final
{
public:
	class FString                                 PlaylistId;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlaylistName;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatorName;                                       // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGymPlaylistMapInfo>            Maps;                                              // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsOwner;                                           // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Type;                                              // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOfficial;                                        // 0x0058(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFeatured;                                        // 0x0059(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLocal;                                           // 0x005A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B[0x5];                                       // 0x005B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymPlaylistDetailsResult) == 0x000008, "Wrong alignment on FGymPlaylistDetailsResult");
static_assert(sizeof(FGymPlaylistDetailsResult) == 0x000060, "Wrong size on FGymPlaylistDetailsResult");
static_assert(offsetof(FGymPlaylistDetailsResult, PlaylistId) == 0x000000, "Member 'FGymPlaylistDetailsResult::PlaylistId' has a wrong offset!");
static_assert(offsetof(FGymPlaylistDetailsResult, PlaylistName) == 0x000010, "Member 'FGymPlaylistDetailsResult::PlaylistName' has a wrong offset!");
static_assert(offsetof(FGymPlaylistDetailsResult, CreatorName) == 0x000020, "Member 'FGymPlaylistDetailsResult::CreatorName' has a wrong offset!");
static_assert(offsetof(FGymPlaylistDetailsResult, Maps) == 0x000030, "Member 'FGymPlaylistDetailsResult::Maps' has a wrong offset!");
static_assert(offsetof(FGymPlaylistDetailsResult, IsOwner) == 0x000040, "Member 'FGymPlaylistDetailsResult::IsOwner' has a wrong offset!");
static_assert(offsetof(FGymPlaylistDetailsResult, Type) == 0x000048, "Member 'FGymPlaylistDetailsResult::Type' has a wrong offset!");
static_assert(offsetof(FGymPlaylistDetailsResult, IsOfficial) == 0x000058, "Member 'FGymPlaylistDetailsResult::IsOfficial' has a wrong offset!");
static_assert(offsetof(FGymPlaylistDetailsResult, IsFeatured) == 0x000059, "Member 'FGymPlaylistDetailsResult::IsFeatured' has a wrong offset!");
static_assert(offsetof(FGymPlaylistDetailsResult, IsLocal) == 0x00005A, "Member 'FGymPlaylistDetailsResult::IsLocal' has a wrong offset!");

// ScriptStruct GYMGAME.GymPlaylistScoreboardEntry
// 0x0038 (0x0038 - 0x0000)
struct FGymPlaylistScoreboardEntry final
{
public:
	class AGymPlayerState*                        PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThisLevelStanding;                                 // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastLevelStandingTotal;                            // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThisLevelStandingTotal;                            // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RaceStatusString;                                  // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThisLevelScore;                                    // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalScore;                                        // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEliminated;                                       // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymPlaylistScoreboardEntry) == 0x000008, "Wrong alignment on FGymPlaylistScoreboardEntry");
static_assert(sizeof(FGymPlaylistScoreboardEntry) == 0x000038, "Wrong size on FGymPlaylistScoreboardEntry");
static_assert(offsetof(FGymPlaylistScoreboardEntry, PlayerState) == 0x000000, "Member 'FGymPlaylistScoreboardEntry::PlayerState' has a wrong offset!");
static_assert(offsetof(FGymPlaylistScoreboardEntry, ThisLevelStanding) == 0x000008, "Member 'FGymPlaylistScoreboardEntry::ThisLevelStanding' has a wrong offset!");
static_assert(offsetof(FGymPlaylistScoreboardEntry, LastLevelStandingTotal) == 0x00000C, "Member 'FGymPlaylistScoreboardEntry::LastLevelStandingTotal' has a wrong offset!");
static_assert(offsetof(FGymPlaylistScoreboardEntry, ThisLevelStandingTotal) == 0x000010, "Member 'FGymPlaylistScoreboardEntry::ThisLevelStandingTotal' has a wrong offset!");
static_assert(offsetof(FGymPlaylistScoreboardEntry, RaceStatusString) == 0x000018, "Member 'FGymPlaylistScoreboardEntry::RaceStatusString' has a wrong offset!");
static_assert(offsetof(FGymPlaylistScoreboardEntry, ThisLevelScore) == 0x000028, "Member 'FGymPlaylistScoreboardEntry::ThisLevelScore' has a wrong offset!");
static_assert(offsetof(FGymPlaylistScoreboardEntry, TotalScore) == 0x00002C, "Member 'FGymPlaylistScoreboardEntry::TotalScore' has a wrong offset!");
static_assert(offsetof(FGymPlaylistScoreboardEntry, bEliminated) == 0x000030, "Member 'FGymPlaylistScoreboardEntry::bEliminated' has a wrong offset!");

// ScriptStruct GYMGAME.GymPlayerXPRow
// 0x0020 (0x0020 - 0x0000)
struct FGymPlayerXPRow final
{
public:
	class FText                                   XPcategory;                                        // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XPAmount;                                          // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymPlayerXPRow) == 0x000008, "Wrong alignment on FGymPlayerXPRow");
static_assert(sizeof(FGymPlayerXPRow) == 0x000020, "Wrong size on FGymPlayerXPRow");
static_assert(offsetof(FGymPlayerXPRow, XPcategory) == 0x000000, "Member 'FGymPlayerXPRow::XPcategory' has a wrong offset!");
static_assert(offsetof(FGymPlayerXPRow, Count) == 0x000018, "Member 'FGymPlayerXPRow::Count' has a wrong offset!");
static_assert(offsetof(FGymPlayerXPRow, XPAmount) == 0x00001C, "Member 'FGymPlayerXPRow::XPAmount' has a wrong offset!");

// ScriptStruct GYMGAME.GymPlayerXPMultiplierRow
// 0x0020 (0x0020 - 0x0000)
struct FGymPlayerXPMultiplierRow final
{
public:
	class FText                                   MultiplierCategory;                                // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         Multiplier;                                        // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymPlayerXPMultiplierRow) == 0x000008, "Wrong alignment on FGymPlayerXPMultiplierRow");
static_assert(sizeof(FGymPlayerXPMultiplierRow) == 0x000020, "Wrong size on FGymPlayerXPMultiplierRow");
static_assert(offsetof(FGymPlayerXPMultiplierRow, MultiplierCategory) == 0x000000, "Member 'FGymPlayerXPMultiplierRow::MultiplierCategory' has a wrong offset!");
static_assert(offsetof(FGymPlayerXPMultiplierRow, Multiplier) == 0x000018, "Member 'FGymPlayerXPMultiplierRow::Multiplier' has a wrong offset!");

// ScriptStruct GYMGAME.GymPlayerXPResults
// 0x0038 (0x0038 - 0x0000)
struct FGymPlayerXPResults final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGymPlayerXPRow>                XPRows;                                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGymPlayerXPMultiplierRow>      MultiplierRows;                                    // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         BaseXP;                                            // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Multiplier;                                        // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalXP;                                           // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymPlayerXPResults) == 0x000008, "Wrong alignment on FGymPlayerXPResults");
static_assert(sizeof(FGymPlayerXPResults) == 0x000038, "Wrong size on FGymPlayerXPResults");
static_assert(offsetof(FGymPlayerXPResults, XPRows) == 0x000008, "Member 'FGymPlayerXPResults::XPRows' has a wrong offset!");
static_assert(offsetof(FGymPlayerXPResults, MultiplierRows) == 0x000018, "Member 'FGymPlayerXPResults::MultiplierRows' has a wrong offset!");
static_assert(offsetof(FGymPlayerXPResults, BaseXP) == 0x000028, "Member 'FGymPlayerXPResults::BaseXP' has a wrong offset!");
static_assert(offsetof(FGymPlayerXPResults, Multiplier) == 0x00002C, "Member 'FGymPlayerXPResults::Multiplier' has a wrong offset!");
static_assert(offsetof(FGymPlayerXPResults, TotalXP) == 0x000030, "Member 'FGymPlayerXPResults::TotalXP' has a wrong offset!");

// ScriptStruct GYMGAME.GymPlayerScoreboard
// 0x0048 (0x0048 - 0x0000)
struct FGymPlayerScoreboard final
{
public:
	TArray<struct FGymPlaylistScoreboardEntry>    ScoreboardEntries;                                 // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGymPlayerXPResults                    XPResults;                                         // 0x0010(0x0038)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymPlayerScoreboard) == 0x000008, "Wrong alignment on FGymPlayerScoreboard");
static_assert(sizeof(FGymPlayerScoreboard) == 0x000048, "Wrong size on FGymPlayerScoreboard");
static_assert(offsetof(FGymPlayerScoreboard, ScoreboardEntries) == 0x000000, "Member 'FGymPlayerScoreboard::ScoreboardEntries' has a wrong offset!");
static_assert(offsetof(FGymPlayerScoreboard, XPResults) == 0x000010, "Member 'FGymPlayerScoreboard::XPResults' has a wrong offset!");

// ScriptStruct GYMGAME.WallScanTraceResult
// 0x0750 (0x0750 - 0x0000)
struct alignas(0x08) FWallScanTraceResult final
{
public:
	uint8                                         Pad_0[0x750];                                      // 0x0000(0x0750)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWallScanTraceResult) == 0x000008, "Wrong alignment on FWallScanTraceResult");
static_assert(sizeof(FWallScanTraceResult) == 0x000750, "Wrong size on FWallScanTraceResult");

// ScriptStruct GYMGAME.GymCriterionCreationData
// 0x0010 (0x0010 - 0x0000)
struct FGymCriterionCreationData final
{
public:
	int32                                         GroupId;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGymObjectiveCriterion>     CriterionClass;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymCriterionCreationData) == 0x000008, "Wrong alignment on FGymCriterionCreationData");
static_assert(sizeof(FGymCriterionCreationData) == 0x000010, "Wrong size on FGymCriterionCreationData");
static_assert(offsetof(FGymCriterionCreationData, GroupId) == 0x000000, "Member 'FGymCriterionCreationData::GroupId' has a wrong offset!");
static_assert(offsetof(FGymCriterionCreationData, CriterionClass) == 0x000008, "Member 'FGymCriterionCreationData::CriterionClass' has a wrong offset!");

// ScriptStruct GYMGAME.GymSessionSearchResult
// 0x0148 (0x0148 - 0x0000)
struct FGymSessionSearchResult final
{
public:
	uint8                                         Pad_0[0x120];                                      // 0x0000(0x0120)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OwnerName;                                         // 0x0120(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x0130(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Players;                                           // 0x0140(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ping;                                              // 0x0144(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymSessionSearchResult) == 0x000008, "Wrong alignment on FGymSessionSearchResult");
static_assert(sizeof(FGymSessionSearchResult) == 0x000148, "Wrong size on FGymSessionSearchResult");
static_assert(offsetof(FGymSessionSearchResult, OwnerName) == 0x000120, "Member 'FGymSessionSearchResult::OwnerName' has a wrong offset!");
static_assert(offsetof(FGymSessionSearchResult, MapName) == 0x000130, "Member 'FGymSessionSearchResult::MapName' has a wrong offset!");
static_assert(offsetof(FGymSessionSearchResult, Players) == 0x000140, "Member 'FGymSessionSearchResult::Players' has a wrong offset!");
static_assert(offsetof(FGymSessionSearchResult, Ping) == 0x000144, "Member 'FGymSessionSearchResult::Ping' has a wrong offset!");

// ScriptStruct GYMGAME.GymWallScrambleAnimatorProps
// 0x0018 (0x0018 - 0x0000)
struct FGymWallScrambleAnimatorProps final
{
public:
	bool                                          IsWallScrambling;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpolationPower;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerCurrentClimbingSpeed;                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerCurrentZEulerAngle;                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGoingUp;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DidEndWithJump;                                    // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LookDirection;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymWallScrambleAnimatorProps) == 0x000004, "Wrong alignment on FGymWallScrambleAnimatorProps");
static_assert(sizeof(FGymWallScrambleAnimatorProps) == 0x000018, "Wrong size on FGymWallScrambleAnimatorProps");
static_assert(offsetof(FGymWallScrambleAnimatorProps, IsWallScrambling) == 0x000000, "Member 'FGymWallScrambleAnimatorProps::IsWallScrambling' has a wrong offset!");
static_assert(offsetof(FGymWallScrambleAnimatorProps, InterpolationPower) == 0x000004, "Member 'FGymWallScrambleAnimatorProps::InterpolationPower' has a wrong offset!");
static_assert(offsetof(FGymWallScrambleAnimatorProps, PlayerCurrentClimbingSpeed) == 0x000008, "Member 'FGymWallScrambleAnimatorProps::PlayerCurrentClimbingSpeed' has a wrong offset!");
static_assert(offsetof(FGymWallScrambleAnimatorProps, PlayerCurrentZEulerAngle) == 0x00000C, "Member 'FGymWallScrambleAnimatorProps::PlayerCurrentZEulerAngle' has a wrong offset!");
static_assert(offsetof(FGymWallScrambleAnimatorProps, IsGoingUp) == 0x000010, "Member 'FGymWallScrambleAnimatorProps::IsGoingUp' has a wrong offset!");
static_assert(offsetof(FGymWallScrambleAnimatorProps, DidEndWithJump) == 0x000011, "Member 'FGymWallScrambleAnimatorProps::DidEndWithJump' has a wrong offset!");
static_assert(offsetof(FGymWallScrambleAnimatorProps, LookDirection) == 0x000014, "Member 'FGymWallScrambleAnimatorProps::LookDirection' has a wrong offset!");

// ScriptStruct GYMGAME.GymMapSearchFilters
// 0x0040 (0x0040 - 0x0000)
struct FGymMapSearchFilters final
{
public:
	class FString                                 CreatorId;                                         // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatorName;                                       // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymMapSearchFilters) == 0x000008, "Wrong alignment on FGymMapSearchFilters");
static_assert(sizeof(FGymMapSearchFilters) == 0x000040, "Wrong size on FGymMapSearchFilters");
static_assert(offsetof(FGymMapSearchFilters, CreatorId) == 0x000000, "Member 'FGymMapSearchFilters::CreatorId' has a wrong offset!");
static_assert(offsetof(FGymMapSearchFilters, CreatorName) == 0x000010, "Member 'FGymMapSearchFilters::CreatorName' has a wrong offset!");
static_assert(offsetof(FGymMapSearchFilters, MapName) == 0x000020, "Member 'FGymMapSearchFilters::MapName' has a wrong offset!");
static_assert(offsetof(FGymMapSearchFilters, GameMode) == 0x000030, "Member 'FGymMapSearchFilters::GameMode' has a wrong offset!");

// ScriptStruct GYMGAME.PhotoSearchFilters
// 0x0010 (0x0010 - 0x0000)
struct FPhotoSearchFilters final
{
public:
	class FString                                 Session;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhotoSearchFilters) == 0x000008, "Wrong alignment on FPhotoSearchFilters");
static_assert(sizeof(FPhotoSearchFilters) == 0x000010, "Wrong size on FPhotoSearchFilters");
static_assert(offsetof(FPhotoSearchFilters, Session) == 0x000000, "Member 'FPhotoSearchFilters::Session' has a wrong offset!");

// ScriptStruct GYMGAME.GymRewardNotification
// 0x0018 (0x0018 - 0x0000)
struct FGymRewardNotification final
{
public:
	class FString                                 InternalName;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XPAmount;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Premium;                                           // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymRewardNotification) == 0x000008, "Wrong alignment on FGymRewardNotification");
static_assert(sizeof(FGymRewardNotification) == 0x000018, "Wrong size on FGymRewardNotification");
static_assert(offsetof(FGymRewardNotification, InternalName) == 0x000000, "Member 'FGymRewardNotification::InternalName' has a wrong offset!");
static_assert(offsetof(FGymRewardNotification, XPAmount) == 0x000010, "Member 'FGymRewardNotification::XPAmount' has a wrong offset!");
static_assert(offsetof(FGymRewardNotification, Premium) == 0x000014, "Member 'FGymRewardNotification::Premium' has a wrong offset!");

// ScriptStruct GYMGAME.GymProgressNotification
// 0x0048 (0x0048 - 0x0000)
struct FGymProgressNotification final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SeasonName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChallengeName;                                     // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Goal;                                              // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGymRewardNotification>         RewardNotifications;                               // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymProgressNotification) == 0x000008, "Wrong alignment on FGymProgressNotification");
static_assert(sizeof(FGymProgressNotification) == 0x000048, "Wrong size on FGymProgressNotification");
static_assert(offsetof(FGymProgressNotification, UserId) == 0x000000, "Member 'FGymProgressNotification::UserId' has a wrong offset!");
static_assert(offsetof(FGymProgressNotification, SeasonName) == 0x000010, "Member 'FGymProgressNotification::SeasonName' has a wrong offset!");
static_assert(offsetof(FGymProgressNotification, ChallengeName) == 0x000020, "Member 'FGymProgressNotification::ChallengeName' has a wrong offset!");
static_assert(offsetof(FGymProgressNotification, Value) == 0x000030, "Member 'FGymProgressNotification::Value' has a wrong offset!");
static_assert(offsetof(FGymProgressNotification, Goal) == 0x000034, "Member 'FGymProgressNotification::Goal' has a wrong offset!");
static_assert(offsetof(FGymProgressNotification, RewardNotifications) == 0x000038, "Member 'FGymProgressNotification::RewardNotifications' has a wrong offset!");

// ScriptStruct GYMGAME.GymChallengeTrackable
// 0x0020 (0x0020 - 0x0000)
struct FGymChallengeTrackable final
{
public:
	class FString                                 InternalName;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Progress;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Goal;                                              // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Completed;                                         // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymChallengeTrackable) == 0x000008, "Wrong alignment on FGymChallengeTrackable");
static_assert(sizeof(FGymChallengeTrackable) == 0x000020, "Wrong size on FGymChallengeTrackable");
static_assert(offsetof(FGymChallengeTrackable, InternalName) == 0x000000, "Member 'FGymChallengeTrackable::InternalName' has a wrong offset!");
static_assert(offsetof(FGymChallengeTrackable, Progress) == 0x000010, "Member 'FGymChallengeTrackable::Progress' has a wrong offset!");
static_assert(offsetof(FGymChallengeTrackable, Goal) == 0x000014, "Member 'FGymChallengeTrackable::Goal' has a wrong offset!");
static_assert(offsetof(FGymChallengeTrackable, Completed) == 0x000018, "Member 'FGymChallengeTrackable::Completed' has a wrong offset!");

// ScriptStruct GYMGAME.GymChallenge
// 0x0058 (0x0058 - 0x0000)
struct FGymChallenge final
{
public:
	class FString                                 ChallengeId;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InternalName;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndDate;                                           // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGymChallengeTrackable>         Trackables;                                        // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGymChallengeReward>            Rewards;                                           // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymChallenge) == 0x000008, "Wrong alignment on FGymChallenge");
static_assert(sizeof(FGymChallenge) == 0x000058, "Wrong size on FGymChallenge");
static_assert(offsetof(FGymChallenge, ChallengeId) == 0x000000, "Member 'FGymChallenge::ChallengeId' has a wrong offset!");
static_assert(offsetof(FGymChallenge, InternalName) == 0x000010, "Member 'FGymChallenge::InternalName' has a wrong offset!");
static_assert(offsetof(FGymChallenge, DisplayName) == 0x000020, "Member 'FGymChallenge::DisplayName' has a wrong offset!");
static_assert(offsetof(FGymChallenge, EndDate) == 0x000030, "Member 'FGymChallenge::EndDate' has a wrong offset!");
static_assert(offsetof(FGymChallenge, Trackables) == 0x000038, "Member 'FGymChallenge::Trackables' has a wrong offset!");
static_assert(offsetof(FGymChallenge, Rewards) == 0x000048, "Member 'FGymChallenge::Rewards' has a wrong offset!");

// ScriptStruct GYMGAME.GymCHallengeResponse
// 0x0020 (0x0020 - 0x0000)
struct FGymCHallengeResponse final
{
public:
	TArray<struct FGymChallenge>                  Daily;                                             // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGymChallenge>                  Weekly;                                            // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymCHallengeResponse) == 0x000008, "Wrong alignment on FGymCHallengeResponse");
static_assert(sizeof(FGymCHallengeResponse) == 0x000020, "Wrong size on FGymCHallengeResponse");
static_assert(offsetof(FGymCHallengeResponse, Daily) == 0x000000, "Member 'FGymCHallengeResponse::Daily' has a wrong offset!");
static_assert(offsetof(FGymCHallengeResponse, Weekly) == 0x000010, "Member 'FGymCHallengeResponse::Weekly' has a wrong offset!");

// ScriptStruct GYMGAME.GymDailyPlaylist
// 0x0028 (0x0028 - 0x0000)
struct FGymDailyPlaylist final
{
public:
	int32                                         PlaylistSlot;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlaylistId;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlaylistName;                                      // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymDailyPlaylist) == 0x000008, "Wrong alignment on FGymDailyPlaylist");
static_assert(sizeof(FGymDailyPlaylist) == 0x000028, "Wrong size on FGymDailyPlaylist");
static_assert(offsetof(FGymDailyPlaylist, PlaylistSlot) == 0x000000, "Member 'FGymDailyPlaylist::PlaylistSlot' has a wrong offset!");
static_assert(offsetof(FGymDailyPlaylist, PlaylistId) == 0x000008, "Member 'FGymDailyPlaylist::PlaylistId' has a wrong offset!");
static_assert(offsetof(FGymDailyPlaylist, PlaylistName) == 0x000018, "Member 'FGymDailyPlaylist::PlaylistName' has a wrong offset!");

// ScriptStruct GYMGAME.GymLeaderboardRow
// 0x0018 (0x0018 - 0x0000)
struct FGymLeaderboardRow final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Seconds;                                           // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymLeaderboardRow) == 0x000008, "Wrong alignment on FGymLeaderboardRow");
static_assert(sizeof(FGymLeaderboardRow) == 0x000018, "Wrong size on FGymLeaderboardRow");
static_assert(offsetof(FGymLeaderboardRow, DisplayName) == 0x000000, "Member 'FGymLeaderboardRow::DisplayName' has a wrong offset!");
static_assert(offsetof(FGymLeaderboardRow, Rank) == 0x000010, "Member 'FGymLeaderboardRow::Rank' has a wrong offset!");
static_assert(offsetof(FGymLeaderboardRow, Seconds) == 0x000014, "Member 'FGymLeaderboardRow::Seconds' has a wrong offset!");

// ScriptStruct GYMGAME.GymLeaderboard
// 0x0010 (0x0010 - 0x0000)
struct FGymLeaderboard final
{
public:
	TArray<struct FGymLeaderboardRow>             Rows;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymLeaderboard) == 0x000008, "Wrong alignment on FGymLeaderboard");
static_assert(sizeof(FGymLeaderboard) == 0x000010, "Wrong size on FGymLeaderboard");
static_assert(offsetof(FGymLeaderboard, Rows) == 0x000000, "Member 'FGymLeaderboard::Rows' has a wrong offset!");

// ScriptStruct GYMGAME.GymWallSerializationData
// 0x0020 (0x0020 - 0x0000)
struct FGymWallSerializationData final
{
public:
	struct FIntVector                             Size;                                              // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FloorLevel;                                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Shape;                                             // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymWallSerializationData) == 0x000008, "Wrong alignment on FGymWallSerializationData");
static_assert(sizeof(FGymWallSerializationData) == 0x000020, "Wrong size on FGymWallSerializationData");
static_assert(offsetof(FGymWallSerializationData, Size) == 0x000000, "Member 'FGymWallSerializationData::Size' has a wrong offset!");
static_assert(offsetof(FGymWallSerializationData, FloorLevel) == 0x00000C, "Member 'FGymWallSerializationData::FloorLevel' has a wrong offset!");
static_assert(offsetof(FGymWallSerializationData, Shape) == 0x000010, "Member 'FGymWallSerializationData::Shape' has a wrong offset!");

// ScriptStruct GYMGAME.GymObjectiveConstructData
// 0x0010 (0x0010 - 0x0000)
struct FGymObjectiveConstructData final
{
public:
	int32                                         ObjectiveGroup;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGymObjective>              ObjectiveClass;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymObjectiveConstructData) == 0x000008, "Wrong alignment on FGymObjectiveConstructData");
static_assert(sizeof(FGymObjectiveConstructData) == 0x000010, "Wrong size on FGymObjectiveConstructData");
static_assert(offsetof(FGymObjectiveConstructData, ObjectiveGroup) == 0x000000, "Member 'FGymObjectiveConstructData::ObjectiveGroup' has a wrong offset!");
static_assert(offsetof(FGymObjectiveConstructData, ObjectiveClass) == 0x000008, "Member 'FGymObjectiveConstructData::ObjectiveClass' has a wrong offset!");

// ScriptStruct GYMGAME.GymUnclaimedReward
// 0x0038 (0x0038 - 0x0000)
struct FGymUnclaimedReward final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InternalName;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Premium;                                           // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymUnclaimedReward) == 0x000008, "Wrong alignment on FGymUnclaimedReward");
static_assert(sizeof(FGymUnclaimedReward) == 0x000038, "Wrong size on FGymUnclaimedReward");
static_assert(offsetof(FGymUnclaimedReward, ID) == 0x000000, "Member 'FGymUnclaimedReward::ID' has a wrong offset!");
static_assert(offsetof(FGymUnclaimedReward, InternalName) == 0x000010, "Member 'FGymUnclaimedReward::InternalName' has a wrong offset!");
static_assert(offsetof(FGymUnclaimedReward, ItemId) == 0x000020, "Member 'FGymUnclaimedReward::ItemId' has a wrong offset!");
static_assert(offsetof(FGymUnclaimedReward, Premium) == 0x000030, "Member 'FGymUnclaimedReward::Premium' has a wrong offset!");

// ScriptStruct GYMGAME.GymUnclaimedRewardResponse
// 0x0010 (0x0010 - 0x0000)
struct FGymUnclaimedRewardResponse final
{
public:
	TArray<struct FGymUnclaimedReward>            Rewards;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymUnclaimedRewardResponse) == 0x000008, "Wrong alignment on FGymUnclaimedRewardResponse");
static_assert(sizeof(FGymUnclaimedRewardResponse) == 0x000010, "Wrong size on FGymUnclaimedRewardResponse");
static_assert(offsetof(FGymUnclaimedRewardResponse, Rewards) == 0x000000, "Member 'FGymUnclaimedRewardResponse::Rewards' has a wrong offset!");

// ScriptStruct GYMGAME.GymInventoryItem
// 0x0020 (0x0020 - 0x0000)
struct FGymInventoryItem final
{
public:
	class FString                                 InternalName;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymInventoryItem) == 0x000008, "Wrong alignment on FGymInventoryItem");
static_assert(sizeof(FGymInventoryItem) == 0x000020, "Wrong size on FGymInventoryItem");
static_assert(offsetof(FGymInventoryItem, InternalName) == 0x000000, "Member 'FGymInventoryItem::InternalName' has a wrong offset!");
static_assert(offsetof(FGymInventoryItem, Tags) == 0x000010, "Member 'FGymInventoryItem::Tags' has a wrong offset!");

// ScriptStruct GYMGAME.GymInventory
// 0x0010 (0x0010 - 0x0000)
struct FGymInventory final
{
public:
	TArray<struct FGymInventoryItem>              Items;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymInventory) == 0x000008, "Wrong alignment on FGymInventory");
static_assert(sizeof(FGymInventory) == 0x000010, "Wrong size on FGymInventory");
static_assert(offsetof(FGymInventory, Items) == 0x000000, "Member 'FGymInventory::Items' has a wrong offset!");

// ScriptStruct GYMGAME.GymGuiChooseLevelSlotInfo
// 0x0090 (0x0090 - 0x0000)
struct FGymGuiChooseLevelSlotInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LevelInfoDisplayText;                              // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             LevelInfoPicture;                                  // 0x0018(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelURL;                                          // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCustomLevelFileInfo                   CustomLevelFileInfo;                               // 0x0030(0x0060)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymGuiChooseLevelSlotInfo) == 0x000008, "Wrong alignment on FGymGuiChooseLevelSlotInfo");
static_assert(sizeof(FGymGuiChooseLevelSlotInfo) == 0x000090, "Wrong size on FGymGuiChooseLevelSlotInfo");
static_assert(offsetof(FGymGuiChooseLevelSlotInfo, LevelInfoDisplayText) == 0x000008, "Member 'FGymGuiChooseLevelSlotInfo::LevelInfoDisplayText' has a wrong offset!");
static_assert(offsetof(FGymGuiChooseLevelSlotInfo, LevelInfoPicture) == 0x000018, "Member 'FGymGuiChooseLevelSlotInfo::LevelInfoPicture' has a wrong offset!");
static_assert(offsetof(FGymGuiChooseLevelSlotInfo, LevelURL) == 0x000020, "Member 'FGymGuiChooseLevelSlotInfo::LevelURL' has a wrong offset!");
static_assert(offsetof(FGymGuiChooseLevelSlotInfo, CustomLevelFileInfo) == 0x000030, "Member 'FGymGuiChooseLevelSlotInfo::CustomLevelFileInfo' has a wrong offset!");

// ScriptStruct GYMGAME.GymSeasonReward
// 0x0030 (0x0030 - 0x0000)
struct FGymSeasonReward final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InternalName;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XpRequired;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Claimed;                                           // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymSeasonReward) == 0x000008, "Wrong alignment on FGymSeasonReward");
static_assert(sizeof(FGymSeasonReward) == 0x000030, "Wrong size on FGymSeasonReward");
static_assert(offsetof(FGymSeasonReward, ID) == 0x000000, "Member 'FGymSeasonReward::ID' has a wrong offset!");
static_assert(offsetof(FGymSeasonReward, InternalName) == 0x000010, "Member 'FGymSeasonReward::InternalName' has a wrong offset!");
static_assert(offsetof(FGymSeasonReward, XpRequired) == 0x000020, "Member 'FGymSeasonReward::XpRequired' has a wrong offset!");
static_assert(offsetof(FGymSeasonReward, Claimed) == 0x000024, "Member 'FGymSeasonReward::Claimed' has a wrong offset!");
static_assert(offsetof(FGymSeasonReward, Level) == 0x000028, "Member 'FGymSeasonReward::Level' has a wrong offset!");

// ScriptStruct GYMGAME.GymSeason
// 0x0060 (0x0060 - 0x0000)
struct FGymSeason final
{
public:
	class FString                                 InternalName;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxXp;                                             // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentXp;                                         // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGymSeasonReward>               FreeRewards;                                       // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGymSeasonReward>               PremiumRewards;                                    // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGymRewardNotification>         Notifications;                                     // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              EndDate;                                           // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymSeason) == 0x000008, "Wrong alignment on FGymSeason");
static_assert(sizeof(FGymSeason) == 0x000060, "Wrong size on FGymSeason");
static_assert(offsetof(FGymSeason, InternalName) == 0x000000, "Member 'FGymSeason::InternalName' has a wrong offset!");
static_assert(offsetof(FGymSeason, DisplayName) == 0x000010, "Member 'FGymSeason::DisplayName' has a wrong offset!");
static_assert(offsetof(FGymSeason, MaxXp) == 0x000020, "Member 'FGymSeason::MaxXp' has a wrong offset!");
static_assert(offsetof(FGymSeason, CurrentXp) == 0x000024, "Member 'FGymSeason::CurrentXp' has a wrong offset!");
static_assert(offsetof(FGymSeason, FreeRewards) == 0x000028, "Member 'FGymSeason::FreeRewards' has a wrong offset!");
static_assert(offsetof(FGymSeason, PremiumRewards) == 0x000038, "Member 'FGymSeason::PremiumRewards' has a wrong offset!");
static_assert(offsetof(FGymSeason, Notifications) == 0x000048, "Member 'FGymSeason::Notifications' has a wrong offset!");
static_assert(offsetof(FGymSeason, EndDate) == 0x000058, "Member 'FGymSeason::EndDate' has a wrong offset!");

// ScriptStruct GYMGAME.GymSplineExportInfo
// 0x0010 (0x0010 - 0x0000)
struct FGymSplineExportInfo final
{
public:
	TArray<int32>                                 Parts;                                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymSplineExportInfo) == 0x000008, "Wrong alignment on FGymSplineExportInfo");
static_assert(sizeof(FGymSplineExportInfo) == 0x000010, "Wrong size on FGymSplineExportInfo");
static_assert(offsetof(FGymSplineExportInfo, Parts) == 0x000000, "Member 'FGymSplineExportInfo::Parts' has a wrong offset!");

// ScriptStruct GYMGAME.GymSerializableMapV002
// 0x0050 (0x0088 - 0x0038)
struct FGymSerializableMapV002 final : public FGymSerializableMap
{
public:
	float                                         TimeOfDay;                                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Weather;                                           // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStaticAssetInfo>               Assets;                                            // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGymSplineExportInfo>           Splines;                                           // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGymWallSerializationData              Walls;                                             // 0x0068(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymSerializableMapV002) == 0x000008, "Wrong alignment on FGymSerializableMapV002");
static_assert(sizeof(FGymSerializableMapV002) == 0x000088, "Wrong size on FGymSerializableMapV002");
static_assert(offsetof(FGymSerializableMapV002, TimeOfDay) == 0x000038, "Member 'FGymSerializableMapV002::TimeOfDay' has a wrong offset!");
static_assert(offsetof(FGymSerializableMapV002, Weather) == 0x00003C, "Member 'FGymSerializableMapV002::Weather' has a wrong offset!");
static_assert(offsetof(FGymSerializableMapV002, Assets) == 0x000048, "Member 'FGymSerializableMapV002::Assets' has a wrong offset!");
static_assert(offsetof(FGymSerializableMapV002, Splines) == 0x000058, "Member 'FGymSerializableMapV002::Splines' has a wrong offset!");
static_assert(offsetof(FGymSerializableMapV002, Walls) == 0x000068, "Member 'FGymSerializableMapV002::Walls' has a wrong offset!");

// ScriptStruct GYMGAME.GymPropertyValues
// 0x0048 (0x0048 - 0x0000)
struct FGymPropertyValues final
{
public:
	class FName                                   PropertyId;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatVal;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntVal;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBoolVal;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 WriteableVal;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SelectableVal;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGymAssetVariantId                     VariantIdVal;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymPropertyValues) == 0x000008, "Wrong alignment on FGymPropertyValues");
static_assert(sizeof(FGymPropertyValues) == 0x000048, "Wrong size on FGymPropertyValues");
static_assert(offsetof(FGymPropertyValues, PropertyId) == 0x000000, "Member 'FGymPropertyValues::PropertyId' has a wrong offset!");
static_assert(offsetof(FGymPropertyValues, FloatVal) == 0x000008, "Member 'FGymPropertyValues::FloatVal' has a wrong offset!");
static_assert(offsetof(FGymPropertyValues, IntVal) == 0x00000C, "Member 'FGymPropertyValues::IntVal' has a wrong offset!");
static_assert(offsetof(FGymPropertyValues, bBoolVal) == 0x000010, "Member 'FGymPropertyValues::bBoolVal' has a wrong offset!");
static_assert(offsetof(FGymPropertyValues, WriteableVal) == 0x000018, "Member 'FGymPropertyValues::WriteableVal' has a wrong offset!");
static_assert(offsetof(FGymPropertyValues, SelectableVal) == 0x000028, "Member 'FGymPropertyValues::SelectableVal' has a wrong offset!");
static_assert(offsetof(FGymPropertyValues, VariantIdVal) == 0x000038, "Member 'FGymPropertyValues::VariantIdVal' has a wrong offset!");

// ScriptStruct GYMGAME.GymModifier
// 0x0020 (0x0020 - 0x0000)
struct FGymModifier final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntValue;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatValue;                                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringValue;                                       // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymModifier) == 0x000008, "Wrong alignment on FGymModifier");
static_assert(sizeof(FGymModifier) == 0x000020, "Wrong size on FGymModifier");
static_assert(offsetof(FGymModifier, Key) == 0x000000, "Member 'FGymModifier::Key' has a wrong offset!");
static_assert(offsetof(FGymModifier, IntValue) == 0x000008, "Member 'FGymModifier::IntValue' has a wrong offset!");
static_assert(offsetof(FGymModifier, FloatValue) == 0x00000C, "Member 'FGymModifier::FloatValue' has a wrong offset!");
static_assert(offsetof(FGymModifier, StringValue) == 0x000010, "Member 'FGymModifier::StringValue' has a wrong offset!");

// ScriptStruct GYMGAME.GymSerializableMapV011
// 0x0010 (0x00C0 - 0x00B0)
struct FGymSerializableMapV011 final : public FGymSerializableMapV010
{
public:
	TArray<class FString>                         CustomObjectFlags;                                 // 0x00B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymSerializableMapV011) == 0x000008, "Wrong alignment on FGymSerializableMapV011");
static_assert(sizeof(FGymSerializableMapV011) == 0x0000C0, "Wrong size on FGymSerializableMapV011");
static_assert(offsetof(FGymSerializableMapV011, CustomObjectFlags) == 0x0000B0, "Member 'FGymSerializableMapV011::CustomObjectFlags' has a wrong offset!");

// ScriptStruct GYMGAME.GymWallSerializationDataV3
// 0x0020 (0x0020 - 0x0000)
struct FGymWallSerializationDataV3 final
{
public:
	int32                                         StateIndex;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellSize;                                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGymWallSerializationCell>      Cells;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         FloorLevel;                                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymWallSerializationDataV3) == 0x000008, "Wrong alignment on FGymWallSerializationDataV3");
static_assert(sizeof(FGymWallSerializationDataV3) == 0x000020, "Wrong size on FGymWallSerializationDataV3");
static_assert(offsetof(FGymWallSerializationDataV3, StateIndex) == 0x000000, "Member 'FGymWallSerializationDataV3::StateIndex' has a wrong offset!");
static_assert(offsetof(FGymWallSerializationDataV3, CellSize) == 0x000004, "Member 'FGymWallSerializationDataV3::CellSize' has a wrong offset!");
static_assert(offsetof(FGymWallSerializationDataV3, Cells) == 0x000008, "Member 'FGymWallSerializationDataV3::Cells' has a wrong offset!");
static_assert(offsetof(FGymWallSerializationDataV3, FloorLevel) == 0x000018, "Member 'FGymWallSerializationDataV3::FloorLevel' has a wrong offset!");

// ScriptStruct GYMGAME.GymSerializableMapV020
// 0x00A0 (0x00D8 - 0x0038)
struct FGymSerializableMapV020 final : public FGymSerializableMap
{
public:
	struct FGymSerializableMapOptions             Options;                                           // 0x0038(0x001C)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymWallSerializationDataV3            Walls;                                             // 0x0058(0x0020)(NativeAccessSpecifierPublic)
	TArray<struct FGymAssetVariantId>             Palette;                                           // 0x0078(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FStaticAssetSerializationInfo>  Assets;                                            // 0x0088(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           LinkTypes;                                         // 0x0098(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGymMapAssetLink>               Links;                                             // 0x00A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         CustomObjectFlags;                                 // 0x00B8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGymModifier>                   Modifiers;                                         // 0x00C8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymSerializableMapV020) == 0x000008, "Wrong alignment on FGymSerializableMapV020");
static_assert(sizeof(FGymSerializableMapV020) == 0x0000D8, "Wrong size on FGymSerializableMapV020");
static_assert(offsetof(FGymSerializableMapV020, Options) == 0x000038, "Member 'FGymSerializableMapV020::Options' has a wrong offset!");
static_assert(offsetof(FGymSerializableMapV020, Walls) == 0x000058, "Member 'FGymSerializableMapV020::Walls' has a wrong offset!");
static_assert(offsetof(FGymSerializableMapV020, Palette) == 0x000078, "Member 'FGymSerializableMapV020::Palette' has a wrong offset!");
static_assert(offsetof(FGymSerializableMapV020, Assets) == 0x000088, "Member 'FGymSerializableMapV020::Assets' has a wrong offset!");
static_assert(offsetof(FGymSerializableMapV020, LinkTypes) == 0x000098, "Member 'FGymSerializableMapV020::LinkTypes' has a wrong offset!");
static_assert(offsetof(FGymSerializableMapV020, Links) == 0x0000A8, "Member 'FGymSerializableMapV020::Links' has a wrong offset!");
static_assert(offsetof(FGymSerializableMapV020, CustomObjectFlags) == 0x0000B8, "Member 'FGymSerializableMapV020::CustomObjectFlags' has a wrong offset!");
static_assert(offsetof(FGymSerializableMapV020, Modifiers) == 0x0000C8, "Member 'FGymSerializableMapV020::Modifiers' has a wrong offset!");

// ScriptStruct GYMGAME.GymAIPersona
// 0x0020 (0x0028 - 0x0008)
struct FGymAIPersona final : public FTableRowBase
{
public:
	class FString                                 ParticipantName;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomizationFile;                                 // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymAIPersona) == 0x000008, "Wrong alignment on FGymAIPersona");
static_assert(sizeof(FGymAIPersona) == 0x000028, "Wrong size on FGymAIPersona");
static_assert(offsetof(FGymAIPersona, ParticipantName) == 0x000008, "Member 'FGymAIPersona::ParticipantName' has a wrong offset!");
static_assert(offsetof(FGymAIPersona, CustomizationFile) == 0x000018, "Member 'FGymAIPersona::CustomizationFile' has a wrong offset!");

// ScriptStruct GYMGAME.GymAISelectionData
// 0x000C (0x000C - 0x0000)
struct FGymAISelectionData final
{
public:
	class FName                                   NPCId;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Difficulty;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymAISelectionData) == 0x000004, "Wrong alignment on FGymAISelectionData");
static_assert(sizeof(FGymAISelectionData) == 0x00000C, "Wrong size on FGymAISelectionData");
static_assert(offsetof(FGymAISelectionData, NPCId) == 0x000000, "Member 'FGymAISelectionData::NPCId' has a wrong offset!");
static_assert(offsetof(FGymAISelectionData, Difficulty) == 0x000008, "Member 'FGymAISelectionData::Difficulty' has a wrong offset!");

// ScriptStruct GYMGAME.AnimationNotifyEvent
// 0x0020 (0x0020 - 0x0000)
struct FAnimationNotifyEvent final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 OwningMeshComponent;                               // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimationNotifyEvent) == 0x000008, "Wrong alignment on FAnimationNotifyEvent");
static_assert(sizeof(FAnimationNotifyEvent) == 0x000020, "Wrong size on FAnimationNotifyEvent");
static_assert(offsetof(FAnimationNotifyEvent, OwningMeshComponent) == 0x000010, "Member 'FAnimationNotifyEvent::OwningMeshComponent' has a wrong offset!");

// ScriptStruct GYMGAME.AnimatorMovementStateBinding
// 0x0018 (0x0018 - 0x0000)
struct FAnimatorMovementStateBinding final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGymMetaAnimator*>               Animators;                                         // 0x0008(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimatorMovementStateBinding) == 0x000008, "Wrong alignment on FAnimatorMovementStateBinding");
static_assert(sizeof(FAnimatorMovementStateBinding) == 0x000018, "Wrong size on FAnimatorMovementStateBinding");
static_assert(offsetof(FAnimatorMovementStateBinding, Animators) == 0x000008, "Member 'FAnimatorMovementStateBinding::Animators' has a wrong offset!");

// ScriptStruct GYMGAME.LevelAssetCollectionLoadOperation
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FLevelAssetCollectionLoadOperation final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLevelAssetCollectionLoadOperation) == 0x000008, "Wrong alignment on FLevelAssetCollectionLoadOperation");
static_assert(sizeof(FLevelAssetCollectionLoadOperation) == 0x000018, "Wrong size on FLevelAssetCollectionLoadOperation");

// ScriptStruct GYMGAME.GymAudioSource
// 0x0040 (0x0040 - 0x0000)
struct FGymAudioSource final
{
public:
	class AGymAudioPlayerActor*                   AudioPlayerActor;                                  // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        AudioComponent;                                    // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x30];                                      // 0x0010(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymAudioSource) == 0x000008, "Wrong alignment on FGymAudioSource");
static_assert(sizeof(FGymAudioSource) == 0x000040, "Wrong size on FGymAudioSource");
static_assert(offsetof(FGymAudioSource, AudioPlayerActor) == 0x000000, "Member 'FGymAudioSource::AudioPlayerActor' has a wrong offset!");
static_assert(offsetof(FGymAudioSource, AudioComponent) == 0x000008, "Member 'FGymAudioSource::AudioComponent' has a wrong offset!");

// ScriptStruct GYMGAME.GymBasicAnimatorProps
// 0x0098 (0x0098 - 0x0000)
struct FGymBasicAnimatorProps final
{
public:
	bool                                          IsHovering;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForwardHorizontalSpeedRatio;                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SidewaysHorizontalSpeedRatio;                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalSpeed;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalSpeedThreshold;                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandingWeightRatio;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawDegreesRotatedRatioTarget;                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawDegreesRotatedRatioCurrent;                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawDegreesRotatedRatioCurrentAbs;                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotateBlendAlpha;                                  // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopForceBlendAlpha;                               // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0xC];                                       // 0x002C(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          IsStopped;                                         // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForwardInput;                                      // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AnyAxisInput;                                      // 0x003A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StopForce;                                         // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardStopForce;                                  // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawDegreesRotatedAdjustedSpeed;                    // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          JumpPressed;                                       // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGrounded;                                        // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBasic;                                           // 0x0062(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFalling;                                         // 0x0063(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CharacterComponentGrounded;                        // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RightFootForwardOnJump;                            // 0x0065(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RightFootForwardOnStop;                            // 0x0066(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RightFootForwardOnEnd;                             // 0x0067(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirTime;                                           // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentLandingTime;                                // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastLandingZVelocity;                              // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PelvisOffset;                                      // 0x0078(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PelvisOffsetAlpha;                                 // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PelvisOffsetIsAnimatingLanding;                    // 0x0094(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExecutingBackFlip;                                 // 0x0095(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExecutingFrontFlip;                                // 0x0096(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          JumpFromMomentum;                                  // 0x0097(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymBasicAnimatorProps) == 0x000008, "Wrong alignment on FGymBasicAnimatorProps");
static_assert(sizeof(FGymBasicAnimatorProps) == 0x000098, "Wrong size on FGymBasicAnimatorProps");
static_assert(offsetof(FGymBasicAnimatorProps, IsHovering) == 0x000000, "Member 'FGymBasicAnimatorProps::IsHovering' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorProps, ForwardHorizontalSpeedRatio) == 0x000004, "Member 'FGymBasicAnimatorProps::ForwardHorizontalSpeedRatio' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorProps, SidewaysHorizontalSpeedRatio) == 0x000008, "Member 'FGymBasicAnimatorProps::SidewaysHorizontalSpeedRatio' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorProps, VerticalSpeed) == 0x00000C, "Member 'FGymBasicAnimatorProps::VerticalSpeed' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorProps, VerticalSpeedThreshold) == 0x000010, "Member 'FGymBasicAnimatorProps::VerticalSpeedThreshold' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorProps, LandingWeightRatio) == 0x000014, "Member 'FGymBasicAnimatorProps::LandingWeightRatio' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorProps, YawDegreesRotatedRatioTarget) == 0x000018, "Member 'FGymBasicAnimatorProps::YawDegreesRotatedRatioTarget' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorProps, YawDegreesRotatedRatioCurrent) == 0x00001C, "Member 'FGymBasicAnimatorProps::YawDegreesRotatedRatioCurrent' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorProps, YawDegreesRotatedRatioCurrentAbs) == 0x000020, "Member 'FGymBasicAnimatorProps::YawDegreesRotatedRatioCurrentAbs' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorProps, RotateBlendAlpha) == 0x000024, "Member 'FGymBasicAnimatorProps::RotateBlendAlpha' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorProps, StopForceBlendAlpha) == 0x000028, "Member 'FGymBasicAnimatorProps::StopForceBlendAlpha' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorProps, IsStopped) == 0x000038, "Member 'FGymBasicAnimatorProps::IsStopped' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorProps, ForwardInput) == 0x000039, "Member 'FGymBasicAnimatorProps::ForwardInput' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorProps, AnyAxisInput) == 0x00003A, "Member 'FGymBasicAnimatorProps::AnyAxisInput' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorProps, StopForce) == 0x000040, "Member 'FGymBasicAnimatorProps::StopForce' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorProps, ForwardStopForce) == 0x000058, "Member 'FGymBasicAnimatorProps::ForwardStopForce' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorProps, YawDegreesRotatedAdjustedSpeed) == 0x00005C, "Member 'FGymBasicAnimatorProps::YawDegreesRotatedAdjustedSpeed' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorProps, JumpPressed) == 0x000060, "Member 'FGymBasicAnimatorProps::JumpPressed' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorProps, IsGrounded) == 0x000061, "Member 'FGymBasicAnimatorProps::IsGrounded' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorProps, IsBasic) == 0x000062, "Member 'FGymBasicAnimatorProps::IsBasic' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorProps, IsFalling) == 0x000063, "Member 'FGymBasicAnimatorProps::IsFalling' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorProps, CharacterComponentGrounded) == 0x000064, "Member 'FGymBasicAnimatorProps::CharacterComponentGrounded' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorProps, RightFootForwardOnJump) == 0x000065, "Member 'FGymBasicAnimatorProps::RightFootForwardOnJump' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorProps, RightFootForwardOnStop) == 0x000066, "Member 'FGymBasicAnimatorProps::RightFootForwardOnStop' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorProps, RightFootForwardOnEnd) == 0x000067, "Member 'FGymBasicAnimatorProps::RightFootForwardOnEnd' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorProps, AirTime) == 0x000068, "Member 'FGymBasicAnimatorProps::AirTime' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorProps, CurrentLandingTime) == 0x00006C, "Member 'FGymBasicAnimatorProps::CurrentLandingTime' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorProps, LastLandingZVelocity) == 0x000070, "Member 'FGymBasicAnimatorProps::LastLandingZVelocity' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorProps, PelvisOffset) == 0x000078, "Member 'FGymBasicAnimatorProps::PelvisOffset' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorProps, PelvisOffsetAlpha) == 0x000090, "Member 'FGymBasicAnimatorProps::PelvisOffsetAlpha' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorProps, PelvisOffsetIsAnimatingLanding) == 0x000094, "Member 'FGymBasicAnimatorProps::PelvisOffsetIsAnimatingLanding' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorProps, ExecutingBackFlip) == 0x000095, "Member 'FGymBasicAnimatorProps::ExecutingBackFlip' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorProps, ExecutingFrontFlip) == 0x000096, "Member 'FGymBasicAnimatorProps::ExecutingFrontFlip' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorProps, JumpFromMomentum) == 0x000097, "Member 'FGymBasicAnimatorProps::JumpFromMomentum' has a wrong offset!");

// ScriptStruct GYMGAME.GymBasicAnimatorPropsReplicated
// 0x001C (0x001C - 0x0000)
struct FGymBasicAnimatorPropsReplicated final
{
public:
	float                                         AirTime;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentLandingTime;                                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastLandingZVelocity;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BackFlip;                                          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FrontFlip;                                         // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Forward;                                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Sideways;                                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          JumpFromMomentum;                                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymBasicAnimatorPropsReplicated) == 0x000004, "Wrong alignment on FGymBasicAnimatorPropsReplicated");
static_assert(sizeof(FGymBasicAnimatorPropsReplicated) == 0x00001C, "Wrong size on FGymBasicAnimatorPropsReplicated");
static_assert(offsetof(FGymBasicAnimatorPropsReplicated, AirTime) == 0x000000, "Member 'FGymBasicAnimatorPropsReplicated::AirTime' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorPropsReplicated, CurrentLandingTime) == 0x000004, "Member 'FGymBasicAnimatorPropsReplicated::CurrentLandingTime' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorPropsReplicated, LastLandingZVelocity) == 0x000008, "Member 'FGymBasicAnimatorPropsReplicated::LastLandingZVelocity' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorPropsReplicated, BackFlip) == 0x00000C, "Member 'FGymBasicAnimatorPropsReplicated::BackFlip' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorPropsReplicated, FrontFlip) == 0x00000D, "Member 'FGymBasicAnimatorPropsReplicated::FrontFlip' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorPropsReplicated, Forward) == 0x000010, "Member 'FGymBasicAnimatorPropsReplicated::Forward' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorPropsReplicated, Sideways) == 0x000014, "Member 'FGymBasicAnimatorPropsReplicated::Sideways' has a wrong offset!");
static_assert(offsetof(FGymBasicAnimatorPropsReplicated, JumpFromMomentum) == 0x000018, "Member 'FGymBasicAnimatorPropsReplicated::JumpFromMomentum' has a wrong offset!");

// ScriptStruct GYMGAME.GymBlurVignetteCameraModifierSettings
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FGymBlurVignetteCameraModifierSettings final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymBlurVignetteCameraModifierSettings) == 0x000004, "Wrong alignment on FGymBlurVignetteCameraModifierSettings");
static_assert(sizeof(FGymBlurVignetteCameraModifierSettings) == 0x00000C, "Wrong size on FGymBlurVignetteCameraModifierSettings");

// ScriptStruct GYMGAME.GymBlurVignetteCameraModifierProps
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FGymBlurVignetteCameraModifierProps final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymBlurVignetteCameraModifierProps) == 0x000004, "Wrong alignment on FGymBlurVignetteCameraModifierProps");
static_assert(sizeof(FGymBlurVignetteCameraModifierProps) == 0x00000C, "Wrong size on FGymBlurVignetteCameraModifierProps");

// ScriptStruct GYMGAME.GymCameraAimAssistModifierSettings
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FGymCameraAimAssistModifierSettings final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymCameraAimAssistModifierSettings) == 0x000008, "Wrong alignment on FGymCameraAimAssistModifierSettings");
static_assert(sizeof(FGymCameraAimAssistModifierSettings) == 0x000020, "Wrong size on FGymCameraAimAssistModifierSettings");

// ScriptStruct GYMGAME.GymCameraAimAssistModifierProps
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FGymCameraAimAssistModifierProps final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymCameraAimAssistModifierProps) == 0x000008, "Wrong alignment on FGymCameraAimAssistModifierProps");
static_assert(sizeof(FGymCameraAimAssistModifierProps) == 0x000020, "Wrong size on FGymCameraAimAssistModifierProps");

// ScriptStruct GYMGAME.GymCameraShakeModifierSettings
// 0x001C (0x001C - 0x0000)
struct alignas(0x04) FGymCameraShakeModifierSettings final
{
public:
	uint8                                         Pad_0[0x1C];                                       // 0x0000(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymCameraShakeModifierSettings) == 0x000004, "Wrong alignment on FGymCameraShakeModifierSettings");
static_assert(sizeof(FGymCameraShakeModifierSettings) == 0x00001C, "Wrong size on FGymCameraShakeModifierSettings");

// ScriptStruct GYMGAME.GymCameraShakeModifierProps
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FGymCameraShakeModifierProps final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymCameraShakeModifierProps) == 0x000008, "Wrong alignment on FGymCameraShakeModifierProps");
static_assert(sizeof(FGymCameraShakeModifierProps) == 0x000030, "Wrong size on FGymCameraShakeModifierProps");

// ScriptStruct GYMGAME.GymCameraTPAimAssistModifierSettings
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FGymCameraTPAimAssistModifierSettings final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymCameraTPAimAssistModifierSettings) == 0x000008, "Wrong alignment on FGymCameraTPAimAssistModifierSettings");
static_assert(sizeof(FGymCameraTPAimAssistModifierSettings) == 0x000020, "Wrong size on FGymCameraTPAimAssistModifierSettings");

// ScriptStruct GYMGAME.GymCameraTPAimAssistModifierProps
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FGymCameraTPAimAssistModifierProps final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymCameraTPAimAssistModifierProps) == 0x000008, "Wrong alignment on FGymCameraTPAimAssistModifierProps");
static_assert(sizeof(FGymCameraTPAimAssistModifierProps) == 0x000038, "Wrong size on FGymCameraTPAimAssistModifierProps");

// ScriptStruct GYMGAME.GymCustomizationColors
// 0x0014 (0x0014 - 0x0000)
struct FGymCustomizationColors final
{
public:
	struct FColor                                 Primary;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSecondary;                                      // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 Secondary;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseTertiary;                                       // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 Tertiary;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymCustomizationColors) == 0x000004, "Wrong alignment on FGymCustomizationColors");
static_assert(sizeof(FGymCustomizationColors) == 0x000014, "Wrong size on FGymCustomizationColors");
static_assert(offsetof(FGymCustomizationColors, Primary) == 0x000000, "Member 'FGymCustomizationColors::Primary' has a wrong offset!");
static_assert(offsetof(FGymCustomizationColors, UseSecondary) == 0x000004, "Member 'FGymCustomizationColors::UseSecondary' has a wrong offset!");
static_assert(offsetof(FGymCustomizationColors, Secondary) == 0x000008, "Member 'FGymCustomizationColors::Secondary' has a wrong offset!");
static_assert(offsetof(FGymCustomizationColors, UseTertiary) == 0x00000C, "Member 'FGymCustomizationColors::UseTertiary' has a wrong offset!");
static_assert(offsetof(FGymCustomizationColors, Tertiary) == 0x000010, "Member 'FGymCustomizationColors::Tertiary' has a wrong offset!");

// ScriptStruct GYMGAME.GymCharacterCustomizationGUIOption
// 0x0050 (0x0050 - 0x0000)
struct FGymCharacterCustomizationGUIOption final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UTexture*                               Thumbnail;                                         // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Slot;                                              // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortingPriority;                                   // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGymCustomizationColors                Colors;                                            // 0x003C(0x0014)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymCharacterCustomizationGUIOption) == 0x000008, "Wrong alignment on FGymCharacterCustomizationGUIOption");
static_assert(sizeof(FGymCharacterCustomizationGUIOption) == 0x000050, "Wrong size on FGymCharacterCustomizationGUIOption");
static_assert(offsetof(FGymCharacterCustomizationGUIOption, ID) == 0x000000, "Member 'FGymCharacterCustomizationGUIOption::ID' has a wrong offset!");
static_assert(offsetof(FGymCharacterCustomizationGUIOption, DisplayName) == 0x000010, "Member 'FGymCharacterCustomizationGUIOption::DisplayName' has a wrong offset!");
static_assert(offsetof(FGymCharacterCustomizationGUIOption, Thumbnail) == 0x000028, "Member 'FGymCharacterCustomizationGUIOption::Thumbnail' has a wrong offset!");
static_assert(offsetof(FGymCharacterCustomizationGUIOption, Slot) == 0x000030, "Member 'FGymCharacterCustomizationGUIOption::Slot' has a wrong offset!");
static_assert(offsetof(FGymCharacterCustomizationGUIOption, SortingPriority) == 0x000038, "Member 'FGymCharacterCustomizationGUIOption::SortingPriority' has a wrong offset!");
static_assert(offsetof(FGymCharacterCustomizationGUIOption, Colors) == 0x00003C, "Member 'FGymCharacterCustomizationGUIOption::Colors' has a wrong offset!");

// ScriptStruct GYMGAME.CustomizationOptionCache
// 0x0020 (0x0020 - 0x0000)
struct FCustomizationOptionCache final
{
public:
	class FString                                 BodyId;                                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGymCharacterCustomizationGUIOption> Options;                                           // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizationOptionCache) == 0x000008, "Wrong alignment on FCustomizationOptionCache");
static_assert(sizeof(FCustomizationOptionCache) == 0x000020, "Wrong size on FCustomizationOptionCache");
static_assert(offsetof(FCustomizationOptionCache, BodyId) == 0x000000, "Member 'FCustomizationOptionCache::BodyId' has a wrong offset!");
static_assert(offsetof(FCustomizationOptionCache, Options) == 0x000010, "Member 'FCustomizationOptionCache::Options' has a wrong offset!");

// ScriptStruct GYMGAME.GymClampCameraModifierSettings
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x04) FGymClampCameraModifierSettings final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymClampCameraModifierSettings) == 0x000004, "Wrong alignment on FGymClampCameraModifierSettings");
static_assert(sizeof(FGymClampCameraModifierSettings) == 0x000020, "Wrong size on FGymClampCameraModifierSettings");

// ScriptStruct GYMGAME.GymClampCameraModifierProps
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x04) FGymClampCameraModifierProps final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymClampCameraModifierProps) == 0x000004, "Wrong alignment on FGymClampCameraModifierProps");
static_assert(sizeof(FGymClampCameraModifierProps) == 0x000020, "Wrong size on FGymClampCameraModifierProps");

// ScriptStruct GYMGAME.GymServerSettings
// 0x0018 (0x0018 - 0x0000)
struct FGymServerSettings final
{
public:
	class FString                                 ServerName;                                        // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayers;                                        // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymServerSettings) == 0x000008, "Wrong alignment on FGymServerSettings");
static_assert(sizeof(FGymServerSettings) == 0x000018, "Wrong size on FGymServerSettings");
static_assert(offsetof(FGymServerSettings, ServerName) == 0x000000, "Member 'FGymServerSettings::ServerName' has a wrong offset!");
static_assert(offsetof(FGymServerSettings, MaxPlayers) == 0x000010, "Member 'FGymServerSettings::MaxPlayers' has a wrong offset!");

// ScriptStruct GYMGAME.GymRegionInfo
// 0x0020 (0x0020 - 0x0000)
struct FGymRegionInfo final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PingEndpoint;                                      // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymRegionInfo) == 0x000008, "Wrong alignment on FGymRegionInfo");
static_assert(sizeof(FGymRegionInfo) == 0x000020, "Wrong size on FGymRegionInfo");
static_assert(offsetof(FGymRegionInfo, Name) == 0x000000, "Member 'FGymRegionInfo::Name' has a wrong offset!");
static_assert(offsetof(FGymRegionInfo, PingEndpoint) == 0x000010, "Member 'FGymRegionInfo::PingEndpoint' has a wrong offset!");

// ScriptStruct GYMGAME.GymMapSearchPayload
// 0x0040 (0x0040 - 0x0000)
struct FGymMapSearchPayload final
{
public:
	struct FGymMapSearchFilters                   Filters;                                           // 0x0000(0x0040)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymMapSearchPayload) == 0x000008, "Wrong alignment on FGymMapSearchPayload");
static_assert(sizeof(FGymMapSearchPayload) == 0x000040, "Wrong size on FGymMapSearchPayload");
static_assert(offsetof(FGymMapSearchPayload, Filters) == 0x000000, "Member 'FGymMapSearchPayload::Filters' has a wrong offset!");

// ScriptStruct GYMGAME.GymMapRenamePayload
// 0x0010 (0x0010 - 0x0000)
struct FGymMapRenamePayload final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymMapRenamePayload) == 0x000008, "Wrong alignment on FGymMapRenamePayload");
static_assert(sizeof(FGymMapRenamePayload) == 0x000010, "Wrong size on FGymMapRenamePayload");
static_assert(offsetof(FGymMapRenamePayload, Name) == 0x000000, "Member 'FGymMapRenamePayload::Name' has a wrong offset!");

// ScriptStruct GYMGAME.GymPlaylistCreatePayload
// 0x0020 (0x0020 - 0x0000)
struct FGymPlaylistCreatePayload final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymPlaylistCreatePayload) == 0x000008, "Wrong alignment on FGymPlaylistCreatePayload");
static_assert(sizeof(FGymPlaylistCreatePayload) == 0x000020, "Wrong size on FGymPlaylistCreatePayload");
static_assert(offsetof(FGymPlaylistCreatePayload, Name) == 0x000000, "Member 'FGymPlaylistCreatePayload::Name' has a wrong offset!");
static_assert(offsetof(FGymPlaylistCreatePayload, Type) == 0x000010, "Member 'FGymPlaylistCreatePayload::Type' has a wrong offset!");

// ScriptStruct GYMGAME.GymFrontPageSlotDescription
// 0x0040 (0x0040 - 0x0000)
struct FGymFrontPageSlotDescription final
{
public:
	class FString                                 SlotId;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResourceType;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Resource;                                          // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Thumbnail;                                         // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymFrontPageSlotDescription) == 0x000008, "Wrong alignment on FGymFrontPageSlotDescription");
static_assert(sizeof(FGymFrontPageSlotDescription) == 0x000040, "Wrong size on FGymFrontPageSlotDescription");
static_assert(offsetof(FGymFrontPageSlotDescription, SlotId) == 0x000000, "Member 'FGymFrontPageSlotDescription::SlotId' has a wrong offset!");
static_assert(offsetof(FGymFrontPageSlotDescription, ResourceType) == 0x000010, "Member 'FGymFrontPageSlotDescription::ResourceType' has a wrong offset!");
static_assert(offsetof(FGymFrontPageSlotDescription, Resource) == 0x000020, "Member 'FGymFrontPageSlotDescription::Resource' has a wrong offset!");
static_assert(offsetof(FGymFrontPageSlotDescription, Thumbnail) == 0x000030, "Member 'FGymFrontPageSlotDescription::Thumbnail' has a wrong offset!");

// ScriptStruct GYMGAME.GymMapCreateOptions
// 0x0028 (0x0028 - 0x0000)
struct FGymMapCreateOptions final
{
public:
	class FString                                 MapName;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KitId;                                             // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapVariant;                                        // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymMapCreateOptions) == 0x000008, "Wrong alignment on FGymMapCreateOptions");
static_assert(sizeof(FGymMapCreateOptions) == 0x000028, "Wrong size on FGymMapCreateOptions");
static_assert(offsetof(FGymMapCreateOptions, MapName) == 0x000000, "Member 'FGymMapCreateOptions::MapName' has a wrong offset!");
static_assert(offsetof(FGymMapCreateOptions, KitId) == 0x000010, "Member 'FGymMapCreateOptions::KitId' has a wrong offset!");
static_assert(offsetof(FGymMapCreateOptions, MapVariant) == 0x000020, "Member 'FGymMapCreateOptions::MapVariant' has a wrong offset!");

// ScriptStruct GYMGAME.GymServerJoinResponse
// 0x0168 (0x0168 - 0x0000)
struct FGymServerJoinResponse final
{
public:
	class FString                                 Token;                                             // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGymServerInfo                         Server;                                            // 0x0010(0x0158)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymServerJoinResponse) == 0x000008, "Wrong alignment on FGymServerJoinResponse");
static_assert(sizeof(FGymServerJoinResponse) == 0x000168, "Wrong size on FGymServerJoinResponse");
static_assert(offsetof(FGymServerJoinResponse, Token) == 0x000000, "Member 'FGymServerJoinResponse::Token' has a wrong offset!");
static_assert(offsetof(FGymServerJoinResponse, Server) == 0x000010, "Member 'FGymServerJoinResponse::Server' has a wrong offset!");

// ScriptStruct GYMGAME.GymMapAttribute
// 0x0010 (0x0010 - 0x0000)
struct FGymMapAttribute
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymMapAttribute) == 0x000008, "Wrong alignment on FGymMapAttribute");
static_assert(sizeof(FGymMapAttribute) == 0x000010, "Wrong size on FGymMapAttribute");
static_assert(offsetof(FGymMapAttribute, Name) == 0x000000, "Member 'FGymMapAttribute::Name' has a wrong offset!");

// ScriptStruct GYMGAME.GymMapStringAttribute
// 0x0010 (0x0020 - 0x0010)
struct FGymMapStringAttribute final : public FGymMapAttribute
{
public:
	class FString                                 Value;                                             // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymMapStringAttribute) == 0x000008, "Wrong alignment on FGymMapStringAttribute");
static_assert(sizeof(FGymMapStringAttribute) == 0x000020, "Wrong size on FGymMapStringAttribute");
static_assert(offsetof(FGymMapStringAttribute, Value) == 0x000010, "Member 'FGymMapStringAttribute::Value' has a wrong offset!");

// ScriptStruct GYMGAME.GymMapIntAttribute
// 0x0008 (0x0018 - 0x0010)
struct FGymMapIntAttribute final : public FGymMapAttribute
{
public:
	int32                                         Value;                                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymMapIntAttribute) == 0x000008, "Wrong alignment on FGymMapIntAttribute");
static_assert(sizeof(FGymMapIntAttribute) == 0x000018, "Wrong size on FGymMapIntAttribute");
static_assert(offsetof(FGymMapIntAttribute, Value) == 0x000010, "Member 'FGymMapIntAttribute::Value' has a wrong offset!");

// ScriptStruct GYMGAME.GymSteamLoginPayload
// 0x0030 (0x0030 - 0x0000)
struct FGymSteamLoginPayload final
{
public:
	class FString                                 Ticket;                                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamName;                                         // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppId;                                             // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymSteamLoginPayload) == 0x000008, "Wrong alignment on FGymSteamLoginPayload");
static_assert(sizeof(FGymSteamLoginPayload) == 0x000030, "Wrong size on FGymSteamLoginPayload");
static_assert(offsetof(FGymSteamLoginPayload, Ticket) == 0x000000, "Member 'FGymSteamLoginPayload::Ticket' has a wrong offset!");
static_assert(offsetof(FGymSteamLoginPayload, SteamName) == 0x000010, "Member 'FGymSteamLoginPayload::SteamName' has a wrong offset!");
static_assert(offsetof(FGymSteamLoginPayload, AppId) == 0x000020, "Member 'FGymSteamLoginPayload::AppId' has a wrong offset!");

// ScriptStruct GYMGAME.GymPlayerInfoResponse
// 0x0018 (0x0018 - 0x0000)
struct FGymPlayerInfoResponse final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Valid;                                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAdmin;                                           // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymPlayerInfoResponse) == 0x000008, "Wrong alignment on FGymPlayerInfoResponse");
static_assert(sizeof(FGymPlayerInfoResponse) == 0x000018, "Wrong size on FGymPlayerInfoResponse");
static_assert(offsetof(FGymPlayerInfoResponse, PlayerId) == 0x000000, "Member 'FGymPlayerInfoResponse::PlayerId' has a wrong offset!");
static_assert(offsetof(FGymPlayerInfoResponse, Valid) == 0x000010, "Member 'FGymPlayerInfoResponse::Valid' has a wrong offset!");
static_assert(offsetof(FGymPlayerInfoResponse, IsAdmin) == 0x000011, "Member 'FGymPlayerInfoResponse::IsAdmin' has a wrong offset!");

// ScriptStruct GYMGAME.KeycloakTokenResponse
// 0x0058 (0x0058 - 0x0000)
struct FKeycloakTokenResponse final
{
public:
	class FString                                 Access_token;                                      // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Expires_in;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Refresh_expires_in;                                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Refresh_token;                                     // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Token_type;                                        // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Session_state;                                     // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Scope;                                             // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeycloakTokenResponse) == 0x000008, "Wrong alignment on FKeycloakTokenResponse");
static_assert(sizeof(FKeycloakTokenResponse) == 0x000058, "Wrong size on FKeycloakTokenResponse");
static_assert(offsetof(FKeycloakTokenResponse, Access_token) == 0x000000, "Member 'FKeycloakTokenResponse::Access_token' has a wrong offset!");
static_assert(offsetof(FKeycloakTokenResponse, Expires_in) == 0x000010, "Member 'FKeycloakTokenResponse::Expires_in' has a wrong offset!");
static_assert(offsetof(FKeycloakTokenResponse, Refresh_expires_in) == 0x000014, "Member 'FKeycloakTokenResponse::Refresh_expires_in' has a wrong offset!");
static_assert(offsetof(FKeycloakTokenResponse, Refresh_token) == 0x000018, "Member 'FKeycloakTokenResponse::Refresh_token' has a wrong offset!");
static_assert(offsetof(FKeycloakTokenResponse, Token_type) == 0x000028, "Member 'FKeycloakTokenResponse::Token_type' has a wrong offset!");
static_assert(offsetof(FKeycloakTokenResponse, Session_state) == 0x000038, "Member 'FKeycloakTokenResponse::Session_state' has a wrong offset!");
static_assert(offsetof(FKeycloakTokenResponse, Scope) == 0x000048, "Member 'FKeycloakTokenResponse::Scope' has a wrong offset!");

// ScriptStruct GYMGAME.GymLoginResponse
// 0x0028 (0x0028 - 0x0000)
struct FGymLoginResponse final
{
public:
	class FString                                 GymId;                                             // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Session;                                           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AcceptedTos;                                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymLoginResponse) == 0x000008, "Wrong alignment on FGymLoginResponse");
static_assert(sizeof(FGymLoginResponse) == 0x000028, "Wrong size on FGymLoginResponse");
static_assert(offsetof(FGymLoginResponse, GymId) == 0x000000, "Member 'FGymLoginResponse::GymId' has a wrong offset!");
static_assert(offsetof(FGymLoginResponse, Session) == 0x000010, "Member 'FGymLoginResponse::Session' has a wrong offset!");
static_assert(offsetof(FGymLoginResponse, AcceptedTos) == 0x000020, "Member 'FGymLoginResponse::AcceptedTos' has a wrong offset!");

// ScriptStruct GYMGAME.GymServerListFilters
// 0x0030 (0x0030 - 0x0000)
struct FGymServerListFilters final
{
public:
	class FString                                 MapId;                                             // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlaylistId;                                        // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlaylistHack;                                      // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymServerListFilters) == 0x000008, "Wrong alignment on FGymServerListFilters");
static_assert(sizeof(FGymServerListFilters) == 0x000030, "Wrong size on FGymServerListFilters");
static_assert(offsetof(FGymServerListFilters, MapId) == 0x000000, "Member 'FGymServerListFilters::MapId' has a wrong offset!");
static_assert(offsetof(FGymServerListFilters, PlaylistId) == 0x000010, "Member 'FGymServerListFilters::PlaylistId' has a wrong offset!");
static_assert(offsetof(FGymServerListFilters, PlaylistHack) == 0x000020, "Member 'FGymServerListFilters::PlaylistHack' has a wrong offset!");

// ScriptStruct GYMGAME.GymPlayerActionRecord
// 0x0038 (0x0038 - 0x0000)
struct FGymPlayerActionRecord final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActionType;                                        // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapId;                                             // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymPlayerActionRecord) == 0x000008, "Wrong alignment on FGymPlayerActionRecord");
static_assert(sizeof(FGymPlayerActionRecord) == 0x000038, "Wrong size on FGymPlayerActionRecord");
static_assert(offsetof(FGymPlayerActionRecord, UserId) == 0x000000, "Member 'FGymPlayerActionRecord::UserId' has a wrong offset!");
static_assert(offsetof(FGymPlayerActionRecord, ActionType) == 0x000010, "Member 'FGymPlayerActionRecord::ActionType' has a wrong offset!");
static_assert(offsetof(FGymPlayerActionRecord, MapId) == 0x000020, "Member 'FGymPlayerActionRecord::MapId' has a wrong offset!");
static_assert(offsetof(FGymPlayerActionRecord, Value) == 0x000030, "Member 'FGymPlayerActionRecord::Value' has a wrong offset!");

// ScriptStruct GYMGAME.GymQuickPlayParams
// 0x0020 (0x0020 - 0x0000)
struct FGymQuickPlayParams final
{
public:
	class FString                                 Type;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerVersion;                                     // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymQuickPlayParams) == 0x000008, "Wrong alignment on FGymQuickPlayParams");
static_assert(sizeof(FGymQuickPlayParams) == 0x000020, "Wrong size on FGymQuickPlayParams");
static_assert(offsetof(FGymQuickPlayParams, Type) == 0x000000, "Member 'FGymQuickPlayParams::Type' has a wrong offset!");
static_assert(offsetof(FGymQuickPlayParams, ServerVersion) == 0x000010, "Member 'FGymQuickPlayParams::ServerVersion' has a wrong offset!");

// ScriptStruct GYMGAME.GymCloudXPRow
// 0x0018 (0x0018 - 0x0000)
struct FGymCloudXPRow final
{
public:
	class FString                                 XpId;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCount;                                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymCloudXPRow) == 0x000008, "Wrong alignment on FGymCloudXPRow");
static_assert(sizeof(FGymCloudXPRow) == 0x000018, "Wrong size on FGymCloudXPRow");
static_assert(offsetof(FGymCloudXPRow, XpId) == 0x000000, "Member 'FGymCloudXPRow::XpId' has a wrong offset!");
static_assert(offsetof(FGymCloudXPRow, Value) == 0x000010, "Member 'FGymCloudXPRow::Value' has a wrong offset!");
static_assert(offsetof(FGymCloudXPRow, MaxCount) == 0x000014, "Member 'FGymCloudXPRow::MaxCount' has a wrong offset!");

// ScriptStruct GYMGAME.GymCloudMultiplierRow
// 0x0018 (0x0018 - 0x0000)
struct FGymCloudMultiplierRow final
{
public:
	class FString                                 MultiplierId;                                      // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymCloudMultiplierRow) == 0x000008, "Wrong alignment on FGymCloudMultiplierRow");
static_assert(sizeof(FGymCloudMultiplierRow) == 0x000018, "Wrong size on FGymCloudMultiplierRow");
static_assert(offsetof(FGymCloudMultiplierRow, MultiplierId) == 0x000000, "Member 'FGymCloudMultiplierRow::MultiplierId' has a wrong offset!");
static_assert(offsetof(FGymCloudMultiplierRow, Value) == 0x000010, "Member 'FGymCloudMultiplierRow::Value' has a wrong offset!");

// ScriptStruct GYMGAME.GymCloudXPConfig
// 0x0020 (0x0020 - 0x0000)
struct FGymCloudXPConfig final
{
public:
	TArray<struct FGymCloudXPRow>                 XPRows;                                            // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGymCloudMultiplierRow>         MultiplierRows;                                    // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymCloudXPConfig) == 0x000008, "Wrong alignment on FGymCloudXPConfig");
static_assert(sizeof(FGymCloudXPConfig) == 0x000020, "Wrong size on FGymCloudXPConfig");
static_assert(offsetof(FGymCloudXPConfig, XPRows) == 0x000000, "Member 'FGymCloudXPConfig::XPRows' has a wrong offset!");
static_assert(offsetof(FGymCloudXPConfig, MultiplierRows) == 0x000010, "Member 'FGymCloudXPConfig::MultiplierRows' has a wrong offset!");

// ScriptStruct GYMGAME.GymLeaderboardPayload
// 0x0040 (0x0040 - 0x0000)
struct FGymLeaderboardPayload final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapId;                                             // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapVersion;                                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Build;                                             // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Seconds;                                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymLeaderboardPayload) == 0x000008, "Wrong alignment on FGymLeaderboardPayload");
static_assert(sizeof(FGymLeaderboardPayload) == 0x000040, "Wrong size on FGymLeaderboardPayload");
static_assert(offsetof(FGymLeaderboardPayload, UserId) == 0x000000, "Member 'FGymLeaderboardPayload::UserId' has a wrong offset!");
static_assert(offsetof(FGymLeaderboardPayload, MapId) == 0x000010, "Member 'FGymLeaderboardPayload::MapId' has a wrong offset!");
static_assert(offsetof(FGymLeaderboardPayload, MapVersion) == 0x000020, "Member 'FGymLeaderboardPayload::MapVersion' has a wrong offset!");
static_assert(offsetof(FGymLeaderboardPayload, Build) == 0x000028, "Member 'FGymLeaderboardPayload::Build' has a wrong offset!");
static_assert(offsetof(FGymLeaderboardPayload, Seconds) == 0x000038, "Member 'FGymLeaderboardPayload::Seconds' has a wrong offset!");

// ScriptStruct GYMGAME.GymMapReportPayload
// 0x0020 (0x0020 - 0x0000)
struct FGymMapReportPayload final
{
public:
	class FString                                 MapId;                                             // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymMapReportPayload) == 0x000008, "Wrong alignment on FGymMapReportPayload");
static_assert(sizeof(FGymMapReportPayload) == 0x000020, "Wrong size on FGymMapReportPayload");
static_assert(offsetof(FGymMapReportPayload, MapId) == 0x000000, "Member 'FGymMapReportPayload::MapId' has a wrong offset!");
static_assert(offsetof(FGymMapReportPayload, Description) == 0x000010, "Member 'FGymMapReportPayload::Description' has a wrong offset!");

// ScriptStruct GYMGAME.GymCompatibleSkeletonAsset
// 0x0008 (0x0008 - 0x0000)
struct FGymCompatibleSkeletonAsset final
{
public:
	class USkeleton*                              SkeletalAsset;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymCompatibleSkeletonAsset) == 0x000008, "Wrong alignment on FGymCompatibleSkeletonAsset");
static_assert(sizeof(FGymCompatibleSkeletonAsset) == 0x000008, "Wrong size on FGymCompatibleSkeletonAsset");
static_assert(offsetof(FGymCompatibleSkeletonAsset, SkeletalAsset) == 0x000000, "Member 'FGymCompatibleSkeletonAsset::SkeletalAsset' has a wrong offset!");

// ScriptStruct GYMGAME.GymSoundBaseEntry
// 0x0020 (0x0020 - 0x0000)
struct FGymSoundBaseEntry final
{
public:
	class USoundBase*                             SoundObjectPtr;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AGymAudioPlayerActor>       AudioPlayerBPClass;                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocal;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoPlayAndStopWithMatch;                          // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumeMultiplier;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAudioLevelKitOption                          LevelKit;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymSoundBaseEntry) == 0x000008, "Wrong alignment on FGymSoundBaseEntry");
static_assert(sizeof(FGymSoundBaseEntry) == 0x000020, "Wrong size on FGymSoundBaseEntry");
static_assert(offsetof(FGymSoundBaseEntry, SoundObjectPtr) == 0x000000, "Member 'FGymSoundBaseEntry::SoundObjectPtr' has a wrong offset!");
static_assert(offsetof(FGymSoundBaseEntry, AudioPlayerBPClass) == 0x000008, "Member 'FGymSoundBaseEntry::AudioPlayerBPClass' has a wrong offset!");
static_assert(offsetof(FGymSoundBaseEntry, bIsLocal) == 0x000010, "Member 'FGymSoundBaseEntry::bIsLocal' has a wrong offset!");
static_assert(offsetof(FGymSoundBaseEntry, AutoPlayAndStopWithMatch) == 0x000011, "Member 'FGymSoundBaseEntry::AutoPlayAndStopWithMatch' has a wrong offset!");
static_assert(offsetof(FGymSoundBaseEntry, VolumeMultiplier) == 0x000014, "Member 'FGymSoundBaseEntry::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(FGymSoundBaseEntry, LevelKit) == 0x000018, "Member 'FGymSoundBaseEntry::LevelKit' has a wrong offset!");

// ScriptStruct GYMGAME.GymChallengeLocalization
// 0x0028 (0x0028 - 0x0000)
struct FGymChallengeLocalization final
{
public:
	class FString                                 InternalName;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymChallengeLocalization) == 0x000008, "Wrong alignment on FGymChallengeLocalization");
static_assert(sizeof(FGymChallengeLocalization) == 0x000028, "Wrong size on FGymChallengeLocalization");
static_assert(offsetof(FGymChallengeLocalization, InternalName) == 0x000000, "Member 'FGymChallengeLocalization::InternalName' has a wrong offset!");
static_assert(offsetof(FGymChallengeLocalization, DisplayName) == 0x000010, "Member 'FGymChallengeLocalization::DisplayName' has a wrong offset!");

// ScriptStruct GYMGAME.GymXP
// 0x0018 (0x0018 - 0x0000)
struct FGymXP final
{
public:
	class FString                                 XpId;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCount;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymXP) == 0x000008, "Wrong alignment on FGymXP");
static_assert(sizeof(FGymXP) == 0x000018, "Wrong size on FGymXP");
static_assert(offsetof(FGymXP, XpId) == 0x000000, "Member 'FGymXP::XpId' has a wrong offset!");
static_assert(offsetof(FGymXP, Amount) == 0x000010, "Member 'FGymXP::Amount' has a wrong offset!");
static_assert(offsetof(FGymXP, MaxCount) == 0x000014, "Member 'FGymXP::MaxCount' has a wrong offset!");

// ScriptStruct GYMGAME.GymXPMultiplier
// 0x0018 (0x0018 - 0x0000)
struct FGymXPMultiplier final
{
public:
	class FString                                 MultiplierId;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymXPMultiplier) == 0x000008, "Wrong alignment on FGymXPMultiplier");
static_assert(sizeof(FGymXPMultiplier) == 0x000018, "Wrong size on FGymXPMultiplier");
static_assert(offsetof(FGymXPMultiplier, MultiplierId) == 0x000000, "Member 'FGymXPMultiplier::MultiplierId' has a wrong offset!");
static_assert(offsetof(FGymXPMultiplier, Amount) == 0x000010, "Member 'FGymXPMultiplier::Amount' has a wrong offset!");

// ScriptStruct GYMGAME.CharacterPartShapekeyModifier
// 0x0014 (0x0014 - 0x0000)
struct FCharacterPartShapekeyModifier final
{
public:
	class FName                                   TargetSlot;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterPartShapekeyModifier) == 0x000004, "Wrong alignment on FCharacterPartShapekeyModifier");
static_assert(sizeof(FCharacterPartShapekeyModifier) == 0x000014, "Wrong size on FCharacterPartShapekeyModifier");
static_assert(offsetof(FCharacterPartShapekeyModifier, TargetSlot) == 0x000000, "Member 'FCharacterPartShapekeyModifier::TargetSlot' has a wrong offset!");
static_assert(offsetof(FCharacterPartShapekeyModifier, Key) == 0x000008, "Member 'FCharacterPartShapekeyModifier::Key' has a wrong offset!");
static_assert(offsetof(FCharacterPartShapekeyModifier, Value) == 0x000010, "Member 'FCharacterPartShapekeyModifier::Value' has a wrong offset!");

// ScriptStruct GYMGAME.CharacterMaterialSlotOverride
// 0x0010 (0x0010 - 0x0000)
struct FCharacterMaterialSlotOverride final
{
public:
	class FName                                   MaterialSlot;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterMaterialSlotOverride) == 0x000008, "Wrong alignment on FCharacterMaterialSlotOverride");
static_assert(sizeof(FCharacterMaterialSlotOverride) == 0x000010, "Wrong size on FCharacterMaterialSlotOverride");
static_assert(offsetof(FCharacterMaterialSlotOverride, MaterialSlot) == 0x000000, "Member 'FCharacterMaterialSlotOverride::MaterialSlot' has a wrong offset!");
static_assert(offsetof(FCharacterMaterialSlotOverride, Material) == 0x000008, "Member 'FCharacterMaterialSlotOverride::Material' has a wrong offset!");

// ScriptStruct GYMGAME.GymCustomizationClippingMask
// 0x0010 (0x0010 - 0x0000)
struct FGymCustomizationClippingMask final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Offset;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Invert;                                            // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymCustomizationClippingMask) == 0x000004, "Wrong alignment on FGymCustomizationClippingMask");
static_assert(sizeof(FGymCustomizationClippingMask) == 0x000010, "Wrong size on FGymCustomizationClippingMask");
static_assert(offsetof(FGymCustomizationClippingMask, Active) == 0x000000, "Member 'FGymCustomizationClippingMask::Active' has a wrong offset!");
static_assert(offsetof(FGymCustomizationClippingMask, Offset) == 0x000004, "Member 'FGymCustomizationClippingMask::Offset' has a wrong offset!");
static_assert(offsetof(FGymCustomizationClippingMask, Range) == 0x000008, "Member 'FGymCustomizationClippingMask::Range' has a wrong offset!");
static_assert(offsetof(FGymCustomizationClippingMask, Invert) == 0x00000C, "Member 'FGymCustomizationClippingMask::Invert' has a wrong offset!");

// ScriptStruct GYMGAME.GymCustomizationColor
// 0x0030 (0x0030 - 0x0000)
struct FGymCustomizationColor final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FixedDetailColor;                                  // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 DetailColor;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymCustomizationColor) == 0x000008, "Wrong alignment on FGymCustomizationColor");
static_assert(sizeof(FGymCustomizationColor) == 0x000030, "Wrong size on FGymCustomizationColor");
static_assert(offsetof(FGymCustomizationColor, ID) == 0x000000, "Member 'FGymCustomizationColor::ID' has a wrong offset!");
static_assert(offsetof(FGymCustomizationColor, DisplayName) == 0x000008, "Member 'FGymCustomizationColor::DisplayName' has a wrong offset!");
static_assert(offsetof(FGymCustomizationColor, Color) == 0x000020, "Member 'FGymCustomizationColor::Color' has a wrong offset!");
static_assert(offsetof(FGymCustomizationColor, FixedDetailColor) == 0x000024, "Member 'FGymCustomizationColor::FixedDetailColor' has a wrong offset!");
static_assert(offsetof(FGymCustomizationColor, DetailColor) == 0x000028, "Member 'FGymCustomizationColor::DetailColor' has a wrong offset!");

// ScriptStruct GYMGAME.GymTestQueryData
// 0x0010 (0x0010 - 0x0000)
struct FGymTestQueryData final
{
public:
	TWeakObjectPtr<class AAIController>           TestController;                                    // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AGymNPC>                 NPC;                                               // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymTestQueryData) == 0x000004, "Wrong alignment on FGymTestQueryData");
static_assert(sizeof(FGymTestQueryData) == 0x000010, "Wrong size on FGymTestQueryData");
static_assert(offsetof(FGymTestQueryData, TestController) == 0x000000, "Member 'FGymTestQueryData::TestController' has a wrong offset!");
static_assert(offsetof(FGymTestQueryData, NPC) == 0x000008, "Member 'FGymTestQueryData::NPC' has a wrong offset!");

// ScriptStruct GYMGAME.GymAnswer
// 0x0020 (0x0020 - 0x0000)
struct FGymAnswer final
{
public:
	EGymAnswerType                                Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   AnswerText;                                        // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymAnswer) == 0x000008, "Wrong alignment on FGymAnswer");
static_assert(sizeof(FGymAnswer) == 0x000020, "Wrong size on FGymAnswer");
static_assert(offsetof(FGymAnswer, Type) == 0x000000, "Member 'FGymAnswer::Type' has a wrong offset!");
static_assert(offsetof(FGymAnswer, AnswerText) == 0x000008, "Member 'FGymAnswer::AnswerText' has a wrong offset!");

// ScriptStruct GYMGAME.GymTaskQueryStruct
// 0x0018 (0x0018 - 0x0000)
struct FGymTaskQueryStruct final
{
public:
	TArray<class FName>                           RequiredTasks;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   TaskToQuery;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymTaskQueryStruct) == 0x000008, "Wrong alignment on FGymTaskQueryStruct");
static_assert(sizeof(FGymTaskQueryStruct) == 0x000018, "Wrong size on FGymTaskQueryStruct");
static_assert(offsetof(FGymTaskQueryStruct, RequiredTasks) == 0x000000, "Member 'FGymTaskQueryStruct::RequiredTasks' has a wrong offset!");
static_assert(offsetof(FGymTaskQueryStruct, TaskToQuery) == 0x000010, "Member 'FGymTaskQueryStruct::TaskToQuery' has a wrong offset!");

// ScriptStruct GYMGAME.UndoData
// 0x00B0 (0x00B0 - 0x0000)
struct FUndoData final
{
public:
	struct FGymAssetVariantId                     AssetVariantId;                                    // 0x0000(0x0010)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         RecordId;                                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParentRecordId;                                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MovedSomething;                                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BuiltSomething;                                    // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   AssetBounds;                                       // 0x0050(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGymMapAssetLink>               Links;                                             // 0x00A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUndoData) == 0x000008, "Wrong alignment on FUndoData");
static_assert(sizeof(FUndoData) == 0x0000B0, "Wrong size on FUndoData");
static_assert(offsetof(FUndoData, AssetVariantId) == 0x000000, "Member 'FUndoData::AssetVariantId' has a wrong offset!");
static_assert(offsetof(FUndoData, Location) == 0x000010, "Member 'FUndoData::Location' has a wrong offset!");
static_assert(offsetof(FUndoData, Rotation) == 0x000028, "Member 'FUndoData::Rotation' has a wrong offset!");
static_assert(offsetof(FUndoData, RecordId) == 0x000040, "Member 'FUndoData::RecordId' has a wrong offset!");
static_assert(offsetof(FUndoData, ParentRecordId) == 0x000044, "Member 'FUndoData::ParentRecordId' has a wrong offset!");
static_assert(offsetof(FUndoData, MovedSomething) == 0x000048, "Member 'FUndoData::MovedSomething' has a wrong offset!");
static_assert(offsetof(FUndoData, BuiltSomething) == 0x000049, "Member 'FUndoData::BuiltSomething' has a wrong offset!");
static_assert(offsetof(FUndoData, AssetBounds) == 0x000050, "Member 'FUndoData::AssetBounds' has a wrong offset!");
static_assert(offsetof(FUndoData, Scale) == 0x000088, "Member 'FUndoData::Scale' has a wrong offset!");
static_assert(offsetof(FUndoData, Links) == 0x0000A0, "Member 'FUndoData::Links' has a wrong offset!");

// ScriptStruct GYMGAME.UndoParams
// 0x0003 (0x0003 - 0x0000)
struct FUndoParams final
{
public:
	bool                                          IsUndo;                                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRedo;                                            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ignore;                                            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUndoParams) == 0x000001, "Wrong alignment on FUndoParams");
static_assert(sizeof(FUndoParams) == 0x000003, "Wrong size on FUndoParams");
static_assert(offsetof(FUndoParams, IsUndo) == 0x000000, "Member 'FUndoParams::IsUndo' has a wrong offset!");
static_assert(offsetof(FUndoParams, IsRedo) == 0x000001, "Member 'FUndoParams::IsRedo' has a wrong offset!");
static_assert(offsetof(FUndoParams, Ignore) == 0x000002, "Member 'FUndoParams::Ignore' has a wrong offset!");

// ScriptStruct GYMGAME.MultiBuildParams
// 0x0038 (0x0038 - 0x0000)
struct FMultiBuildParams final
{
public:
	int32                                         NumStepsA;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumStepsB;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StepSizeA;                                         // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StepSizeB;                                         // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiBuildParams) == 0x000008, "Wrong alignment on FMultiBuildParams");
static_assert(sizeof(FMultiBuildParams) == 0x000038, "Wrong size on FMultiBuildParams");
static_assert(offsetof(FMultiBuildParams, NumStepsA) == 0x000000, "Member 'FMultiBuildParams::NumStepsA' has a wrong offset!");
static_assert(offsetof(FMultiBuildParams, NumStepsB) == 0x000004, "Member 'FMultiBuildParams::NumStepsB' has a wrong offset!");
static_assert(offsetof(FMultiBuildParams, StepSizeA) == 0x000008, "Member 'FMultiBuildParams::StepSizeA' has a wrong offset!");
static_assert(offsetof(FMultiBuildParams, StepSizeB) == 0x000020, "Member 'FMultiBuildParams::StepSizeB' has a wrong offset!");

// ScriptStruct GYMGAME.RetryTimerData
// 0x0018 (0x0018 - 0x0000)
struct FRetryTimerData final
{
public:
	int32                                         Data;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerHandle;                                       // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NumAttempts;                                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRetryTimerData) == 0x000008, "Wrong alignment on FRetryTimerData");
static_assert(sizeof(FRetryTimerData) == 0x000018, "Wrong size on FRetryTimerData");
static_assert(offsetof(FRetryTimerData, Data) == 0x000000, "Member 'FRetryTimerData::Data' has a wrong offset!");
static_assert(offsetof(FRetryTimerData, TimerHandle) == 0x000008, "Member 'FRetryTimerData::TimerHandle' has a wrong offset!");
static_assert(offsetof(FRetryTimerData, NumAttempts) == 0x000010, "Member 'FRetryTimerData::NumAttempts' has a wrong offset!");

// ScriptStruct GYMGAME.GymCategoryInfo
// 0x0030 (0x0030 - 0x0000)
struct FGymCategoryInfo final
{
public:
	EGymEditorCategory                            Category;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UTexture2D*                             Icon;                                              // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGymEditorCategoryType                        Type;                                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThumbnailScale;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymCategoryInfo) == 0x000008, "Wrong alignment on FGymCategoryInfo");
static_assert(sizeof(FGymCategoryInfo) == 0x000030, "Wrong size on FGymCategoryInfo");
static_assert(offsetof(FGymCategoryInfo, Category) == 0x000000, "Member 'FGymCategoryInfo::Category' has a wrong offset!");
static_assert(offsetof(FGymCategoryInfo, DisplayName) == 0x000008, "Member 'FGymCategoryInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FGymCategoryInfo, Icon) == 0x000020, "Member 'FGymCategoryInfo::Icon' has a wrong offset!");
static_assert(offsetof(FGymCategoryInfo, Type) == 0x000028, "Member 'FGymCategoryInfo::Type' has a wrong offset!");
static_assert(offsetof(FGymCategoryInfo, ThumbnailScale) == 0x00002C, "Member 'FGymCategoryInfo::ThumbnailScale' has a wrong offset!");

// ScriptStruct GYMGAME.EditorGuiOption
// 0x0040 (0x0040 - 0x0000)
struct FEditorGuiOption final
{
public:
	class FName                                   OptionId;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayText;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EEditorGuiOptionType                          Type;                                              // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StringValue;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatValue;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntValue;                                          // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEditorGuiOption) == 0x000008, "Wrong alignment on FEditorGuiOption");
static_assert(sizeof(FEditorGuiOption) == 0x000040, "Wrong size on FEditorGuiOption");
static_assert(offsetof(FEditorGuiOption, OptionId) == 0x000000, "Member 'FEditorGuiOption::OptionId' has a wrong offset!");
static_assert(offsetof(FEditorGuiOption, DisplayText) == 0x000008, "Member 'FEditorGuiOption::DisplayText' has a wrong offset!");
static_assert(offsetof(FEditorGuiOption, Type) == 0x000020, "Member 'FEditorGuiOption::Type' has a wrong offset!");
static_assert(offsetof(FEditorGuiOption, StringValue) == 0x000028, "Member 'FEditorGuiOption::StringValue' has a wrong offset!");
static_assert(offsetof(FEditorGuiOption, FloatValue) == 0x000038, "Member 'FEditorGuiOption::FloatValue' has a wrong offset!");
static_assert(offsetof(FEditorGuiOption, IntValue) == 0x00003C, "Member 'FEditorGuiOption::IntValue' has a wrong offset!");

// ScriptStruct GYMGAME.GymFallDamageMovementModifierSettings
// 0x0020 (0x0020 - 0x0000)
struct FGymFallDamageMovementModifierSettings final
{
public:
	float                                         ForSeconds;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SlowDownSpeedMultipliers;                          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymFallDamageMovementModifierSettings) == 0x000008, "Wrong alignment on FGymFallDamageMovementModifierSettings");
static_assert(sizeof(FGymFallDamageMovementModifierSettings) == 0x000020, "Wrong size on FGymFallDamageMovementModifierSettings");
static_assert(offsetof(FGymFallDamageMovementModifierSettings, ForSeconds) == 0x000000, "Member 'FGymFallDamageMovementModifierSettings::ForSeconds' has a wrong offset!");
static_assert(offsetof(FGymFallDamageMovementModifierSettings, SlowDownSpeedMultipliers) == 0x000008, "Member 'FGymFallDamageMovementModifierSettings::SlowDownSpeedMultipliers' has a wrong offset!");

// ScriptStruct GYMGAME.GymFallingProps
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FGymFallingProps final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymFallingProps) == 0x000008, "Wrong alignment on FGymFallingProps");
static_assert(sizeof(FGymFallingProps) == 0x000020, "Wrong size on FGymFallingProps");

// ScriptStruct GYMGAME.GymFootIKAnimatorProps
// 0x0048 (0x0048 - 0x0000)
struct FGymFootIKAnimatorProps final
{
public:
	float                                         YawDegreesRotatedRatioTarget;                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawDegreesRotatedRatioCurrent;                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawDegreesRotatedRatioCurrentAbs;                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftFootIKOffsetAlpha;                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightFootIKOffsetAlpha;                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LeftFootIKDesiredLocation;                         // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RightFootIKDesiredLocation;                        // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymFootIKAnimatorProps) == 0x000008, "Wrong alignment on FGymFootIKAnimatorProps");
static_assert(sizeof(FGymFootIKAnimatorProps) == 0x000048, "Wrong size on FGymFootIKAnimatorProps");
static_assert(offsetof(FGymFootIKAnimatorProps, YawDegreesRotatedRatioTarget) == 0x000000, "Member 'FGymFootIKAnimatorProps::YawDegreesRotatedRatioTarget' has a wrong offset!");
static_assert(offsetof(FGymFootIKAnimatorProps, YawDegreesRotatedRatioCurrent) == 0x000004, "Member 'FGymFootIKAnimatorProps::YawDegreesRotatedRatioCurrent' has a wrong offset!");
static_assert(offsetof(FGymFootIKAnimatorProps, YawDegreesRotatedRatioCurrentAbs) == 0x000008, "Member 'FGymFootIKAnimatorProps::YawDegreesRotatedRatioCurrentAbs' has a wrong offset!");
static_assert(offsetof(FGymFootIKAnimatorProps, LeftFootIKOffsetAlpha) == 0x00000C, "Member 'FGymFootIKAnimatorProps::LeftFootIKOffsetAlpha' has a wrong offset!");
static_assert(offsetof(FGymFootIKAnimatorProps, RightFootIKOffsetAlpha) == 0x000010, "Member 'FGymFootIKAnimatorProps::RightFootIKOffsetAlpha' has a wrong offset!");
static_assert(offsetof(FGymFootIKAnimatorProps, LeftFootIKDesiredLocation) == 0x000018, "Member 'FGymFootIKAnimatorProps::LeftFootIKDesiredLocation' has a wrong offset!");
static_assert(offsetof(FGymFootIKAnimatorProps, RightFootIKDesiredLocation) == 0x000030, "Member 'FGymFootIKAnimatorProps::RightFootIKDesiredLocation' has a wrong offset!");

// ScriptStruct GYMGAME.GymFOVCameraModifierSettings
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FGymFOVCameraModifierSettings final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymFOVCameraModifierSettings) == 0x000004, "Wrong alignment on FGymFOVCameraModifierSettings");
static_assert(sizeof(FGymFOVCameraModifierSettings) == 0x000008, "Wrong size on FGymFOVCameraModifierSettings");

// ScriptStruct GYMGAME.GymFOVBlurCameraModifierProps
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FGymFOVBlurCameraModifierProps final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymFOVBlurCameraModifierProps) == 0x000004, "Wrong alignment on FGymFOVBlurCameraModifierProps");
static_assert(sizeof(FGymFOVBlurCameraModifierProps) == 0x000008, "Wrong size on FGymFOVBlurCameraModifierProps");

// ScriptStruct GYMGAME.GymConfigAssetPointers
// 0x0078 (0x0078 - 0x0000)
struct FGymConfigAssetPointers final
{
public:
	TSoftClassPtr<class UClass>                   CameraConfigDataAsset;                             // 0x0000(0x0028)(Edit, BlueprintVisible, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   AnimationConfigDataAsset;                          // 0x0028(0x0028)(Edit, BlueprintVisible, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   AudioConfigDataAsset;                              // 0x0050(0x0028)(Edit, BlueprintVisible, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymConfigAssetPointers) == 0x000008, "Wrong alignment on FGymConfigAssetPointers");
static_assert(sizeof(FGymConfigAssetPointers) == 0x000078, "Wrong size on FGymConfigAssetPointers");
static_assert(offsetof(FGymConfigAssetPointers, CameraConfigDataAsset) == 0x000000, "Member 'FGymConfigAssetPointers::CameraConfigDataAsset' has a wrong offset!");
static_assert(offsetof(FGymConfigAssetPointers, AnimationConfigDataAsset) == 0x000028, "Member 'FGymConfigAssetPointers::AnimationConfigDataAsset' has a wrong offset!");
static_assert(offsetof(FGymConfigAssetPointers, AudioConfigDataAsset) == 0x000050, "Member 'FGymConfigAssetPointers::AudioConfigDataAsset' has a wrong offset!");

// ScriptStruct GYMGAME.GymConfigObjectInstances
// 0x0018 (0x0018 - 0x0000)
struct FGymConfigObjectInstances final
{
public:
	class UGymConfigCameraDataAsset*              CameraConfig;                                      // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymConfigAnimationDataAsset*           AnimationConfig;                                   // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymConfigAudioDataAsset*               AudioConfig;                                       // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymConfigObjectInstances) == 0x000008, "Wrong alignment on FGymConfigObjectInstances");
static_assert(sizeof(FGymConfigObjectInstances) == 0x000018, "Wrong size on FGymConfigObjectInstances");
static_assert(offsetof(FGymConfigObjectInstances, CameraConfig) == 0x000000, "Member 'FGymConfigObjectInstances::CameraConfig' has a wrong offset!");
static_assert(offsetof(FGymConfigObjectInstances, AnimationConfig) == 0x000008, "Member 'FGymConfigObjectInstances::AnimationConfig' has a wrong offset!");
static_assert(offsetof(FGymConfigObjectInstances, AudioConfig) == 0x000010, "Member 'FGymConfigObjectInstances::AudioConfig' has a wrong offset!");

// ScriptStruct GYMGAME.GymActionContainer
// 0x0030 (0x0030 - 0x0000)
struct FGymActionContainer final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   PageTitle;                                         // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<class UGymMetaAction*>                 Actions;                                           // 0x0020(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymActionContainer) == 0x000008, "Wrong alignment on FGymActionContainer");
static_assert(sizeof(FGymActionContainer) == 0x000030, "Wrong size on FGymActionContainer");
static_assert(offsetof(FGymActionContainer, PageTitle) == 0x000008, "Member 'FGymActionContainer::PageTitle' has a wrong offset!");
static_assert(offsetof(FGymActionContainer, Actions) == 0x000020, "Member 'FGymActionContainer::Actions' has a wrong offset!");

// ScriptStruct GYMGAME.GymUIInputState
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x04) FGymUIInputState final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymUIInputState) == 0x000004, "Wrong alignment on FGymUIInputState");
static_assert(sizeof(FGymUIInputState) == 0x000020, "Wrong size on FGymUIInputState");

// ScriptStruct GYMGAME.TickerSettingsStruct
// 0x0058 (0x0058 - 0x0000)
struct FTickerSettingsStruct final
{
public:
	class FName                                   MessageId;                                         // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETickerMessageType                            MessageType;                                       // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETickerPosition                               Position;                                          // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time;                                              // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTutorialPrompt;                                 // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   LeftText;                                          // 0x0018(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 IconTexture;                                       // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   RightText;                                         // 0x0040(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTickerSettingsStruct) == 0x000008, "Wrong alignment on FTickerSettingsStruct");
static_assert(sizeof(FTickerSettingsStruct) == 0x000058, "Wrong size on FTickerSettingsStruct");
static_assert(offsetof(FTickerSettingsStruct, MessageId) == 0x000000, "Member 'FTickerSettingsStruct::MessageId' has a wrong offset!");
static_assert(offsetof(FTickerSettingsStruct, MessageType) == 0x000008, "Member 'FTickerSettingsStruct::MessageType' has a wrong offset!");
static_assert(offsetof(FTickerSettingsStruct, Position) == 0x000009, "Member 'FTickerSettingsStruct::Position' has a wrong offset!");
static_assert(offsetof(FTickerSettingsStruct, Time) == 0x00000C, "Member 'FTickerSettingsStruct::Time' has a wrong offset!");
static_assert(offsetof(FTickerSettingsStruct, bIsTutorialPrompt) == 0x000010, "Member 'FTickerSettingsStruct::bIsTutorialPrompt' has a wrong offset!");
static_assert(offsetof(FTickerSettingsStruct, LeftText) == 0x000018, "Member 'FTickerSettingsStruct::LeftText' has a wrong offset!");
static_assert(offsetof(FTickerSettingsStruct, IconTexture) == 0x000030, "Member 'FTickerSettingsStruct::IconTexture' has a wrong offset!");
static_assert(offsetof(FTickerSettingsStruct, RightText) == 0x000040, "Member 'FTickerSettingsStruct::RightText' has a wrong offset!");

// ScriptStruct GYMGAME.GymGrindingAnimatorProps
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FGymGrindingAnimatorProps final
{
public:
	bool                                          GrindingEnabled;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GrindingSuperMoveTBN;                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x26];                                       // 0x0002(0x0026)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymGrindingAnimatorProps) == 0x000008, "Wrong alignment on FGymGrindingAnimatorProps");
static_assert(sizeof(FGymGrindingAnimatorProps) == 0x000028, "Wrong size on FGymGrindingAnimatorProps");
static_assert(offsetof(FGymGrindingAnimatorProps, GrindingEnabled) == 0x000000, "Member 'FGymGrindingAnimatorProps::GrindingEnabled' has a wrong offset!");
static_assert(offsetof(FGymGrindingAnimatorProps, GrindingSuperMoveTBN) == 0x000001, "Member 'FGymGrindingAnimatorProps::GrindingSuperMoveTBN' has a wrong offset!");

// ScriptStruct GYMGAME.PreviewUIWidget
// 0x0050 (0x0050 - 0x0000)
struct FPreviewUIWidget final
{
public:
	class UGymGuiMetaWidget*                      WidgetPtr;                                         // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   UniqueName;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsStatic;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowOnStart;                                       // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGymGuiCharacterMetaWidget> Type;                                              // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInLength;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutLength;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Hotkey;                                            // 0x0038(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPreviewUIWidget) == 0x000008, "Wrong alignment on FPreviewUIWidget");
static_assert(sizeof(FPreviewUIWidget) == 0x000050, "Wrong size on FPreviewUIWidget");
static_assert(offsetof(FPreviewUIWidget, WidgetPtr) == 0x000000, "Member 'FPreviewUIWidget::WidgetPtr' has a wrong offset!");
static_assert(offsetof(FPreviewUIWidget, UniqueName) == 0x000018, "Member 'FPreviewUIWidget::UniqueName' has a wrong offset!");
static_assert(offsetof(FPreviewUIWidget, IsStatic) == 0x000020, "Member 'FPreviewUIWidget::IsStatic' has a wrong offset!");
static_assert(offsetof(FPreviewUIWidget, ShowOnStart) == 0x000021, "Member 'FPreviewUIWidget::ShowOnStart' has a wrong offset!");
static_assert(offsetof(FPreviewUIWidget, Type) == 0x000028, "Member 'FPreviewUIWidget::Type' has a wrong offset!");
static_assert(offsetof(FPreviewUIWidget, FadeInLength) == 0x000030, "Member 'FPreviewUIWidget::FadeInLength' has a wrong offset!");
static_assert(offsetof(FPreviewUIWidget, FadeOutLength) == 0x000034, "Member 'FPreviewUIWidget::FadeOutLength' has a wrong offset!");
static_assert(offsetof(FPreviewUIWidget, Hotkey) == 0x000038, "Member 'FPreviewUIWidget::Hotkey' has a wrong offset!");

// ScriptStruct GYMGAME.GymHandsIKAnimatorProps
// 0x00A0 (0x00A0 - 0x0000)
struct FGymHandsIKAnimatorProps final
{
public:
	struct FVector                                RightHandIKLocation;                               // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RightHandIKEuler;                                  // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightHandIKAlpha;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LeftHandIKLocation;                                // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LeftHandIKEuler;                                   // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftHandIKAlpha;                                   // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGrounded;                                        // 0x006C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x33];                                      // 0x006D(0x0033)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymHandsIKAnimatorProps) == 0x000008, "Wrong alignment on FGymHandsIKAnimatorProps");
static_assert(sizeof(FGymHandsIKAnimatorProps) == 0x0000A0, "Wrong size on FGymHandsIKAnimatorProps");
static_assert(offsetof(FGymHandsIKAnimatorProps, RightHandIKLocation) == 0x000000, "Member 'FGymHandsIKAnimatorProps::RightHandIKLocation' has a wrong offset!");
static_assert(offsetof(FGymHandsIKAnimatorProps, RightHandIKEuler) == 0x000018, "Member 'FGymHandsIKAnimatorProps::RightHandIKEuler' has a wrong offset!");
static_assert(offsetof(FGymHandsIKAnimatorProps, RightHandIKAlpha) == 0x000030, "Member 'FGymHandsIKAnimatorProps::RightHandIKAlpha' has a wrong offset!");
static_assert(offsetof(FGymHandsIKAnimatorProps, LeftHandIKLocation) == 0x000038, "Member 'FGymHandsIKAnimatorProps::LeftHandIKLocation' has a wrong offset!");
static_assert(offsetof(FGymHandsIKAnimatorProps, LeftHandIKEuler) == 0x000050, "Member 'FGymHandsIKAnimatorProps::LeftHandIKEuler' has a wrong offset!");
static_assert(offsetof(FGymHandsIKAnimatorProps, LeftHandIKAlpha) == 0x000068, "Member 'FGymHandsIKAnimatorProps::LeftHandIKAlpha' has a wrong offset!");
static_assert(offsetof(FGymHandsIKAnimatorProps, IsGrounded) == 0x00006C, "Member 'FGymHandsIKAnimatorProps::IsGrounded' has a wrong offset!");

// ScriptStruct GYMGAME.GymHeadMovementCameraModifierSettings
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x04) FGymHeadMovementCameraModifierSettings final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymHeadMovementCameraModifierSettings) == 0x000004, "Wrong alignment on FGymHeadMovementCameraModifierSettings");
static_assert(sizeof(FGymHeadMovementCameraModifierSettings) == 0x000028, "Wrong size on FGymHeadMovementCameraModifierSettings");

// ScriptStruct GYMGAME.GymHeadMovementCameraModifierProps
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FGymHeadMovementCameraModifierProps final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymHeadMovementCameraModifierProps) == 0x000008, "Wrong alignment on FGymHeadMovementCameraModifierProps");
static_assert(sizeof(FGymHeadMovementCameraModifierProps) == 0x000050, "Wrong size on FGymHeadMovementCameraModifierProps");

// ScriptStruct GYMGAME.GymIdleAnimatorProps
// 0x0002 (0x0002 - 0x0000)
struct FGymIdleAnimatorProps final
{
public:
	uint8                                         IdleAnimID;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnabled;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymIdleAnimatorProps) == 0x000001, "Wrong alignment on FGymIdleAnimatorProps");
static_assert(sizeof(FGymIdleAnimatorProps) == 0x000002, "Wrong size on FGymIdleAnimatorProps");
static_assert(offsetof(FGymIdleAnimatorProps, IdleAnimID) == 0x000000, "Member 'FGymIdleAnimatorProps::IdleAnimID' has a wrong offset!");
static_assert(offsetof(FGymIdleAnimatorProps, bIsEnabled) == 0x000001, "Member 'FGymIdleAnimatorProps::bIsEnabled' has a wrong offset!");

// ScriptStruct GYMGAME.GymIdleAnimatorPropsReplicated
// 0x0001 (0x0001 - 0x0000)
struct FGymIdleAnimatorPropsReplicated final
{
public:
	uint8                                         IdleAnimID;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymIdleAnimatorPropsReplicated) == 0x000001, "Wrong alignment on FGymIdleAnimatorPropsReplicated");
static_assert(sizeof(FGymIdleAnimatorPropsReplicated) == 0x000001, "Wrong size on FGymIdleAnimatorPropsReplicated");
static_assert(offsetof(FGymIdleAnimatorPropsReplicated, IdleAnimID) == 0x000000, "Member 'FGymIdleAnimatorPropsReplicated::IdleAnimID' has a wrong offset!");

// ScriptStruct GYMGAME.GymIdleMovementProps
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FGymIdleMovementProps final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymIdleMovementProps) == 0x000004, "Wrong alignment on FGymIdleMovementProps");
static_assert(sizeof(FGymIdleMovementProps) == 0x000008, "Wrong size on FGymIdleMovementProps");

// ScriptStruct GYMGAME.InputState
// 0x0068 (0x0068 - 0x0000)
struct FInputState final
{
public:
	bool                                          ExitPressed;                                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MouseX;                                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MouseY;                                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EditorRotate;                                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Horizontal;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Vertical;                                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContextualHorizontal;                              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MouseXRaw;                                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MouseYRaw;                                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MouseWheelRaw;                                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizontalRaw;                                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalRaw;                                       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          JumpHold;                                          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SlidingPressed;                                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SlidingHold;                                       // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          JumpPressed;                                       // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DecHold;                                           // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ChangeCameraModePressed;                           // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OpenEditorPressed;                                 // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OpenWallEditorPressed;                             // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContextualLeftPressed;                             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContextualRightPressed;                            // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContextualUpPressed;                               // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContextualDownPressed;                             // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MouseClickLeftPressed;                             // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MouseClickRightPressed;                            // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MouseClickLeftHold;                                // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MouseClickRightHold;                               // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HideUIPressed;                                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartRacePressed;                                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FinishVotePressed;                                 // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CancelStartVotePressed;                            // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VotePressed;                                       // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RemoveVotePressed;                                 // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpectatePressed;                                   // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EditorDebugExportPressed;                          // 0x0047(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EditorDebugImportPressed;                          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          JumpReleased;                                      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DescendHold;                                       // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EditorSnappingHold;                                // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EditorSnappingPressed;                             // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EditorChangeVariantPressed;                        // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EditorDestroyPressed;                              // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ConfirmPressed;                                    // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeclinePressed;                                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EditorUndoPressed;                                 // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EditorRedoPressed;                                 // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EditorCopyPressed;                                 // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EditorPastePressed;                                // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EditorSelectAssetPressed;                          // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SuperMoveRight;                                    // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SuperMoveLeft;                                     // 0x0057(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NextTabPressed;                                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PrevTabPressed;                                    // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NextKitPressed;                                    // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PrevKitPressed;                                    // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotateAxisPressed;                                // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetRotationPressed;                             // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowMovementDebugInfo;                             // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlaceFlagPressed;                                 // 0x005F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRespawnPressed;                                   // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInteractPressed;                                  // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPhotoModeStartPressed;                            // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPhotoModeFreeCameraModePressed;                   // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropertyEditPressed;                              // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AnimationDebugModePressed;                         // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DebugRotateHold;                                   // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DebugResetPressed;                                 // 0x0067(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInputState) == 0x000004, "Wrong alignment on FInputState");
static_assert(sizeof(FInputState) == 0x000068, "Wrong size on FInputState");
static_assert(offsetof(FInputState, ExitPressed) == 0x000000, "Member 'FInputState::ExitPressed' has a wrong offset!");
static_assert(offsetof(FInputState, MouseX) == 0x000004, "Member 'FInputState::MouseX' has a wrong offset!");
static_assert(offsetof(FInputState, MouseY) == 0x000008, "Member 'FInputState::MouseY' has a wrong offset!");
static_assert(offsetof(FInputState, EditorRotate) == 0x00000C, "Member 'FInputState::EditorRotate' has a wrong offset!");
static_assert(offsetof(FInputState, Horizontal) == 0x000010, "Member 'FInputState::Horizontal' has a wrong offset!");
static_assert(offsetof(FInputState, Vertical) == 0x000014, "Member 'FInputState::Vertical' has a wrong offset!");
static_assert(offsetof(FInputState, ContextualHorizontal) == 0x000018, "Member 'FInputState::ContextualHorizontal' has a wrong offset!");
static_assert(offsetof(FInputState, MouseXRaw) == 0x00001C, "Member 'FInputState::MouseXRaw' has a wrong offset!");
static_assert(offsetof(FInputState, MouseYRaw) == 0x000020, "Member 'FInputState::MouseYRaw' has a wrong offset!");
static_assert(offsetof(FInputState, MouseWheelRaw) == 0x000024, "Member 'FInputState::MouseWheelRaw' has a wrong offset!");
static_assert(offsetof(FInputState, HorizontalRaw) == 0x000028, "Member 'FInputState::HorizontalRaw' has a wrong offset!");
static_assert(offsetof(FInputState, VerticalRaw) == 0x00002C, "Member 'FInputState::VerticalRaw' has a wrong offset!");
static_assert(offsetof(FInputState, JumpHold) == 0x000030, "Member 'FInputState::JumpHold' has a wrong offset!");
static_assert(offsetof(FInputState, SlidingPressed) == 0x000031, "Member 'FInputState::SlidingPressed' has a wrong offset!");
static_assert(offsetof(FInputState, SlidingHold) == 0x000032, "Member 'FInputState::SlidingHold' has a wrong offset!");
static_assert(offsetof(FInputState, JumpPressed) == 0x000033, "Member 'FInputState::JumpPressed' has a wrong offset!");
static_assert(offsetof(FInputState, DecHold) == 0x000034, "Member 'FInputState::DecHold' has a wrong offset!");
static_assert(offsetof(FInputState, ChangeCameraModePressed) == 0x000035, "Member 'FInputState::ChangeCameraModePressed' has a wrong offset!");
static_assert(offsetof(FInputState, OpenEditorPressed) == 0x000036, "Member 'FInputState::OpenEditorPressed' has a wrong offset!");
static_assert(offsetof(FInputState, OpenWallEditorPressed) == 0x000037, "Member 'FInputState::OpenWallEditorPressed' has a wrong offset!");
static_assert(offsetof(FInputState, ContextualLeftPressed) == 0x000038, "Member 'FInputState::ContextualLeftPressed' has a wrong offset!");
static_assert(offsetof(FInputState, ContextualRightPressed) == 0x000039, "Member 'FInputState::ContextualRightPressed' has a wrong offset!");
static_assert(offsetof(FInputState, ContextualUpPressed) == 0x00003A, "Member 'FInputState::ContextualUpPressed' has a wrong offset!");
static_assert(offsetof(FInputState, ContextualDownPressed) == 0x00003B, "Member 'FInputState::ContextualDownPressed' has a wrong offset!");
static_assert(offsetof(FInputState, MouseClickLeftPressed) == 0x00003C, "Member 'FInputState::MouseClickLeftPressed' has a wrong offset!");
static_assert(offsetof(FInputState, MouseClickRightPressed) == 0x00003D, "Member 'FInputState::MouseClickRightPressed' has a wrong offset!");
static_assert(offsetof(FInputState, MouseClickLeftHold) == 0x00003E, "Member 'FInputState::MouseClickLeftHold' has a wrong offset!");
static_assert(offsetof(FInputState, MouseClickRightHold) == 0x00003F, "Member 'FInputState::MouseClickRightHold' has a wrong offset!");
static_assert(offsetof(FInputState, HideUIPressed) == 0x000040, "Member 'FInputState::HideUIPressed' has a wrong offset!");
static_assert(offsetof(FInputState, StartRacePressed) == 0x000041, "Member 'FInputState::StartRacePressed' has a wrong offset!");
static_assert(offsetof(FInputState, FinishVotePressed) == 0x000042, "Member 'FInputState::FinishVotePressed' has a wrong offset!");
static_assert(offsetof(FInputState, CancelStartVotePressed) == 0x000043, "Member 'FInputState::CancelStartVotePressed' has a wrong offset!");
static_assert(offsetof(FInputState, VotePressed) == 0x000044, "Member 'FInputState::VotePressed' has a wrong offset!");
static_assert(offsetof(FInputState, RemoveVotePressed) == 0x000045, "Member 'FInputState::RemoveVotePressed' has a wrong offset!");
static_assert(offsetof(FInputState, SpectatePressed) == 0x000046, "Member 'FInputState::SpectatePressed' has a wrong offset!");
static_assert(offsetof(FInputState, EditorDebugExportPressed) == 0x000047, "Member 'FInputState::EditorDebugExportPressed' has a wrong offset!");
static_assert(offsetof(FInputState, EditorDebugImportPressed) == 0x000048, "Member 'FInputState::EditorDebugImportPressed' has a wrong offset!");
static_assert(offsetof(FInputState, JumpReleased) == 0x000049, "Member 'FInputState::JumpReleased' has a wrong offset!");
static_assert(offsetof(FInputState, DescendHold) == 0x00004A, "Member 'FInputState::DescendHold' has a wrong offset!");
static_assert(offsetof(FInputState, EditorSnappingHold) == 0x00004B, "Member 'FInputState::EditorSnappingHold' has a wrong offset!");
static_assert(offsetof(FInputState, EditorSnappingPressed) == 0x00004C, "Member 'FInputState::EditorSnappingPressed' has a wrong offset!");
static_assert(offsetof(FInputState, EditorChangeVariantPressed) == 0x00004D, "Member 'FInputState::EditorChangeVariantPressed' has a wrong offset!");
static_assert(offsetof(FInputState, EditorDestroyPressed) == 0x00004E, "Member 'FInputState::EditorDestroyPressed' has a wrong offset!");
static_assert(offsetof(FInputState, ConfirmPressed) == 0x00004F, "Member 'FInputState::ConfirmPressed' has a wrong offset!");
static_assert(offsetof(FInputState, DeclinePressed) == 0x000050, "Member 'FInputState::DeclinePressed' has a wrong offset!");
static_assert(offsetof(FInputState, EditorUndoPressed) == 0x000051, "Member 'FInputState::EditorUndoPressed' has a wrong offset!");
static_assert(offsetof(FInputState, EditorRedoPressed) == 0x000052, "Member 'FInputState::EditorRedoPressed' has a wrong offset!");
static_assert(offsetof(FInputState, EditorCopyPressed) == 0x000053, "Member 'FInputState::EditorCopyPressed' has a wrong offset!");
static_assert(offsetof(FInputState, EditorPastePressed) == 0x000054, "Member 'FInputState::EditorPastePressed' has a wrong offset!");
static_assert(offsetof(FInputState, EditorSelectAssetPressed) == 0x000055, "Member 'FInputState::EditorSelectAssetPressed' has a wrong offset!");
static_assert(offsetof(FInputState, SuperMoveRight) == 0x000056, "Member 'FInputState::SuperMoveRight' has a wrong offset!");
static_assert(offsetof(FInputState, SuperMoveLeft) == 0x000057, "Member 'FInputState::SuperMoveLeft' has a wrong offset!");
static_assert(offsetof(FInputState, NextTabPressed) == 0x000058, "Member 'FInputState::NextTabPressed' has a wrong offset!");
static_assert(offsetof(FInputState, PrevTabPressed) == 0x000059, "Member 'FInputState::PrevTabPressed' has a wrong offset!");
static_assert(offsetof(FInputState, NextKitPressed) == 0x00005A, "Member 'FInputState::NextKitPressed' has a wrong offset!");
static_assert(offsetof(FInputState, PrevKitPressed) == 0x00005B, "Member 'FInputState::PrevKitPressed' has a wrong offset!");
static_assert(offsetof(FInputState, bRotateAxisPressed) == 0x00005C, "Member 'FInputState::bRotateAxisPressed' has a wrong offset!");
static_assert(offsetof(FInputState, bResetRotationPressed) == 0x00005D, "Member 'FInputState::bResetRotationPressed' has a wrong offset!");
static_assert(offsetof(FInputState, ShowMovementDebugInfo) == 0x00005E, "Member 'FInputState::ShowMovementDebugInfo' has a wrong offset!");
static_assert(offsetof(FInputState, bPlaceFlagPressed) == 0x00005F, "Member 'FInputState::bPlaceFlagPressed' has a wrong offset!");
static_assert(offsetof(FInputState, bRespawnPressed) == 0x000060, "Member 'FInputState::bRespawnPressed' has a wrong offset!");
static_assert(offsetof(FInputState, bInteractPressed) == 0x000061, "Member 'FInputState::bInteractPressed' has a wrong offset!");
static_assert(offsetof(FInputState, bPhotoModeStartPressed) == 0x000062, "Member 'FInputState::bPhotoModeStartPressed' has a wrong offset!");
static_assert(offsetof(FInputState, bPhotoModeFreeCameraModePressed) == 0x000063, "Member 'FInputState::bPhotoModeFreeCameraModePressed' has a wrong offset!");
static_assert(offsetof(FInputState, bPropertyEditPressed) == 0x000064, "Member 'FInputState::bPropertyEditPressed' has a wrong offset!");
static_assert(offsetof(FInputState, AnimationDebugModePressed) == 0x000065, "Member 'FInputState::AnimationDebugModePressed' has a wrong offset!");
static_assert(offsetof(FInputState, DebugRotateHold) == 0x000066, "Member 'FInputState::DebugRotateHold' has a wrong offset!");
static_assert(offsetof(FInputState, DebugResetPressed) == 0x000067, "Member 'FInputState::DebugResetPressed' has a wrong offset!");

// ScriptStruct GYMGAME.GymInputRecord
// 0x0058 (0x0058 - 0x0000)
struct FGymInputRecord final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            Data;                                              // 0x0008(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymInputRecord) == 0x000008, "Wrong alignment on FGymInputRecord");
static_assert(sizeof(FGymInputRecord) == 0x000058, "Wrong size on FGymInputRecord");
static_assert(offsetof(FGymInputRecord, Timestamp) == 0x000000, "Member 'FGymInputRecord::Timestamp' has a wrong offset!");
static_assert(offsetof(FGymInputRecord, Data) == 0x000008, "Member 'FGymInputRecord::Data' has a wrong offset!");

// ScriptStruct GYMGAME.GymSerializableInputRecord
// 0x0080 (0x0080 - 0x0000)
struct FGymSerializableInputRecord final
{
public:
	TArray<struct FGymInputRecord>                InputRecordArray;                                  // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         RecordTime;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InitialLocation;                                   // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InitialRotation;                                   // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               InitialControlRotation;                            // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                InitialInputVector;                                // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InitialMovementMode;                               // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InitialCustomMovement;                             // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymSerializableInputRecord) == 0x000008, "Wrong alignment on FGymSerializableInputRecord");
static_assert(sizeof(FGymSerializableInputRecord) == 0x000080, "Wrong size on FGymSerializableInputRecord");
static_assert(offsetof(FGymSerializableInputRecord, InputRecordArray) == 0x000000, "Member 'FGymSerializableInputRecord::InputRecordArray' has a wrong offset!");
static_assert(offsetof(FGymSerializableInputRecord, RecordTime) == 0x000010, "Member 'FGymSerializableInputRecord::RecordTime' has a wrong offset!");
static_assert(offsetof(FGymSerializableInputRecord, InitialLocation) == 0x000018, "Member 'FGymSerializableInputRecord::InitialLocation' has a wrong offset!");
static_assert(offsetof(FGymSerializableInputRecord, InitialRotation) == 0x000030, "Member 'FGymSerializableInputRecord::InitialRotation' has a wrong offset!");
static_assert(offsetof(FGymSerializableInputRecord, InitialControlRotation) == 0x000048, "Member 'FGymSerializableInputRecord::InitialControlRotation' has a wrong offset!");
static_assert(offsetof(FGymSerializableInputRecord, InitialInputVector) == 0x000060, "Member 'FGymSerializableInputRecord::InitialInputVector' has a wrong offset!");
static_assert(offsetof(FGymSerializableInputRecord, InitialMovementMode) == 0x000078, "Member 'FGymSerializableInputRecord::InitialMovementMode' has a wrong offset!");
static_assert(offsetof(FGymSerializableInputRecord, InitialCustomMovement) == 0x000079, "Member 'FGymSerializableInputRecord::InitialCustomMovement' has a wrong offset!");

// ScriptStruct GYMGAME.GymPlayableRecordDatapoint
// 0x00A8 (0x00A8 - 0x0000)
struct alignas(0x08) FGymPlayableRecordDatapoint final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xA4];                                       // 0x0004(0x00A4)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymPlayableRecordDatapoint) == 0x000008, "Wrong alignment on FGymPlayableRecordDatapoint");
static_assert(sizeof(FGymPlayableRecordDatapoint) == 0x0000A8, "Wrong size on FGymPlayableRecordDatapoint");
static_assert(offsetof(FGymPlayableRecordDatapoint, Timestamp) == 0x000000, "Member 'FGymPlayableRecordDatapoint::Timestamp' has a wrong offset!");

// ScriptStruct GYMGAME.GymPlayableInputRecord
// 0x0080 (0x0080 - 0x0000)
struct FGymPlayableInputRecord final
{
public:
	TArray<struct FGymPlayableRecordDatapoint>    InputRecordArray;                                  // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         RecordTime;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InitialLocation;                                   // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InitialRotation;                                   // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               InitialControlRotation;                            // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                InitialInputVector;                                // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InitialMovementMode;                               // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InitialCustomMovement;                             // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymPlayableInputRecord) == 0x000008, "Wrong alignment on FGymPlayableInputRecord");
static_assert(sizeof(FGymPlayableInputRecord) == 0x000080, "Wrong size on FGymPlayableInputRecord");
static_assert(offsetof(FGymPlayableInputRecord, InputRecordArray) == 0x000000, "Member 'FGymPlayableInputRecord::InputRecordArray' has a wrong offset!");
static_assert(offsetof(FGymPlayableInputRecord, RecordTime) == 0x000010, "Member 'FGymPlayableInputRecord::RecordTime' has a wrong offset!");
static_assert(offsetof(FGymPlayableInputRecord, InitialLocation) == 0x000018, "Member 'FGymPlayableInputRecord::InitialLocation' has a wrong offset!");
static_assert(offsetof(FGymPlayableInputRecord, InitialRotation) == 0x000030, "Member 'FGymPlayableInputRecord::InitialRotation' has a wrong offset!");
static_assert(offsetof(FGymPlayableInputRecord, InitialControlRotation) == 0x000048, "Member 'FGymPlayableInputRecord::InitialControlRotation' has a wrong offset!");
static_assert(offsetof(FGymPlayableInputRecord, InitialInputVector) == 0x000060, "Member 'FGymPlayableInputRecord::InitialInputVector' has a wrong offset!");
static_assert(offsetof(FGymPlayableInputRecord, InitialMovementMode) == 0x000078, "Member 'FGymPlayableInputRecord::InitialMovementMode' has a wrong offset!");
static_assert(offsetof(FGymPlayableInputRecord, InitialCustomMovement) == 0x000079, "Member 'FGymPlayableInputRecord::InitialCustomMovement' has a wrong offset!");

// ScriptStruct GYMGAME.AutoSplineAction
// 0x0048 (0x0048 - 0x0000)
struct FAutoSplineAction final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       Spline;                                            // 0x0038(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGymSplinePlacer*                       SplinePlacer;                                      // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAutoSplineAction) == 0x000008, "Wrong alignment on FAutoSplineAction");
static_assert(sizeof(FAutoSplineAction) == 0x000048, "Wrong size on FAutoSplineAction");
static_assert(offsetof(FAutoSplineAction, Spline) == 0x000038, "Member 'FAutoSplineAction::Spline' has a wrong offset!");
static_assert(offsetof(FAutoSplineAction, SplinePlacer) == 0x000040, "Member 'FAutoSplineAction::SplinePlacer' has a wrong offset!");

// ScriptStruct GYMGAME.GymLedgeAutoSpline
// 0x0058 (0x0058 - 0x0000)
struct FGymLedgeAutoSpline final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class AGymCharacter*                          Player;                                            // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymLedgeAutoSpline) == 0x000008, "Wrong alignment on FGymLedgeAutoSpline");
static_assert(sizeof(FGymLedgeAutoSpline) == 0x000058, "Wrong size on FGymLedgeAutoSpline");
static_assert(offsetof(FGymLedgeAutoSpline, Player) == 0x000048, "Member 'FGymLedgeAutoSpline::Player' has a wrong offset!");

// ScriptStruct GYMGAME.GymLevelAssetVariant
// 0x0038 (0x0038 - 0x0000)
struct FGymLevelAssetVariant final
{
public:
	class FName                                   VariantName;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ExposeOnSpawn, NativeAccessSpecifierPublic)
	class UTexture*                               VariantThumbnail;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AGymStaticLevelAsset>       AssetBP;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Legacy;                                            // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertThumbnail;                                  // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCareerCompleted;                                  // 0x0032(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymLevelAssetVariant) == 0x000008, "Wrong alignment on FGymLevelAssetVariant");
static_assert(sizeof(FGymLevelAssetVariant) == 0x000038, "Wrong size on FGymLevelAssetVariant");
static_assert(offsetof(FGymLevelAssetVariant, VariantName) == 0x000000, "Member 'FGymLevelAssetVariant::VariantName' has a wrong offset!");
static_assert(offsetof(FGymLevelAssetVariant, DisplayName) == 0x000008, "Member 'FGymLevelAssetVariant::DisplayName' has a wrong offset!");
static_assert(offsetof(FGymLevelAssetVariant, VariantThumbnail) == 0x000020, "Member 'FGymLevelAssetVariant::VariantThumbnail' has a wrong offset!");
static_assert(offsetof(FGymLevelAssetVariant, AssetBP) == 0x000028, "Member 'FGymLevelAssetVariant::AssetBP' has a wrong offset!");
static_assert(offsetof(FGymLevelAssetVariant, Legacy) == 0x000030, "Member 'FGymLevelAssetVariant::Legacy' has a wrong offset!");
static_assert(offsetof(FGymLevelAssetVariant, bInvertThumbnail) == 0x000031, "Member 'FGymLevelAssetVariant::bInvertThumbnail' has a wrong offset!");
static_assert(offsetof(FGymLevelAssetVariant, bCareerCompleted) == 0x000032, "Member 'FGymLevelAssetVariant::bCareerCompleted' has a wrong offset!");

// ScriptStruct GYMGAME.GymMotionBlurCameraModifierSettings
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FGymMotionBlurCameraModifierSettings final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymMotionBlurCameraModifierSettings) == 0x000004, "Wrong alignment on FGymMotionBlurCameraModifierSettings");
static_assert(sizeof(FGymMotionBlurCameraModifierSettings) == 0x000008, "Wrong size on FGymMotionBlurCameraModifierSettings");

// ScriptStruct GYMGAME.GymMotionBlurCameraModifierProps
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FGymMotionBlurCameraModifierProps final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymMotionBlurCameraModifierProps) == 0x000004, "Wrong alignment on FGymMotionBlurCameraModifierProps");
static_assert(sizeof(FGymMotionBlurCameraModifierProps) == 0x000008, "Wrong size on FGymMotionBlurCameraModifierProps");

// ScriptStruct GYMGAME.GymNetSessionInfo
// 0x0158 (0x0158 - 0x0000)
struct alignas(0x08) FGymNetSessionInfo final
{
public:
	uint8                                         Pad_0[0x158];                                      // 0x0000(0x0158)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymNetSessionInfo) == 0x000008, "Wrong alignment on FGymNetSessionInfo");
static_assert(sizeof(FGymNetSessionInfo) == 0x000158, "Wrong size on FGymNetSessionInfo");

// ScriptStruct GYMGAME.GymNPCSpawnData
// 0x0028 (0x0030 - 0x0008)
struct FGymNPCSpawnData final : public FTableRowBase
{
public:
	class FString                                 NPCName;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomizationId;                                   // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGymDialogueTree>           DialogueTree;                                      // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymNPCSpawnData) == 0x000008, "Wrong alignment on FGymNPCSpawnData");
static_assert(sizeof(FGymNPCSpawnData) == 0x000030, "Wrong size on FGymNPCSpawnData");
static_assert(offsetof(FGymNPCSpawnData, NPCName) == 0x000008, "Member 'FGymNPCSpawnData::NPCName' has a wrong offset!");
static_assert(offsetof(FGymNPCSpawnData, CustomizationId) == 0x000018, "Member 'FGymNPCSpawnData::CustomizationId' has a wrong offset!");
static_assert(offsetof(FGymNPCSpawnData, DialogueTree) == 0x000028, "Member 'FGymNPCSpawnData::DialogueTree' has a wrong offset!");

// ScriptStruct GYMGAME.GymOffsetCameraModifierSettings
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FGymOffsetCameraModifierSettings final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymOffsetCameraModifierSettings) == 0x000008, "Wrong alignment on FGymOffsetCameraModifierSettings");
static_assert(sizeof(FGymOffsetCameraModifierSettings) == 0x000020, "Wrong size on FGymOffsetCameraModifierSettings");

// ScriptStruct GYMGAME.GymOffsetCameraModifierProps
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FGymOffsetCameraModifierProps final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymOffsetCameraModifierProps) == 0x000008, "Wrong alignment on FGymOffsetCameraModifierProps");
static_assert(sizeof(FGymOffsetCameraModifierProps) == 0x000048, "Wrong size on FGymOffsetCameraModifierProps");

// ScriptStruct GYMGAME.PhotoModeInputState
// 0x0018 (0x0018 - 0x0000)
struct FPhotoModeInputState final
{
public:
	float                                         MouseX;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MouseY;                                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Horizontal;                                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Vertical;                                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputUp;                                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTakePhotoPressed;                                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToggleFreeModePressed;                            // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExitPhotoModePressed;                             // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPhotoModeInputState) == 0x000004, "Wrong alignment on FPhotoModeInputState");
static_assert(sizeof(FPhotoModeInputState) == 0x000018, "Wrong size on FPhotoModeInputState");
static_assert(offsetof(FPhotoModeInputState, MouseX) == 0x000000, "Member 'FPhotoModeInputState::MouseX' has a wrong offset!");
static_assert(offsetof(FPhotoModeInputState, MouseY) == 0x000004, "Member 'FPhotoModeInputState::MouseY' has a wrong offset!");
static_assert(offsetof(FPhotoModeInputState, Horizontal) == 0x000008, "Member 'FPhotoModeInputState::Horizontal' has a wrong offset!");
static_assert(offsetof(FPhotoModeInputState, Vertical) == 0x00000C, "Member 'FPhotoModeInputState::Vertical' has a wrong offset!");
static_assert(offsetof(FPhotoModeInputState, InputUp) == 0x000010, "Member 'FPhotoModeInputState::InputUp' has a wrong offset!");
static_assert(offsetof(FPhotoModeInputState, bTakePhotoPressed) == 0x000014, "Member 'FPhotoModeInputState::bTakePhotoPressed' has a wrong offset!");
static_assert(offsetof(FPhotoModeInputState, bToggleFreeModePressed) == 0x000015, "Member 'FPhotoModeInputState::bToggleFreeModePressed' has a wrong offset!");
static_assert(offsetof(FPhotoModeInputState, bExitPhotoModePressed) == 0x000016, "Member 'FPhotoModeInputState::bExitPhotoModePressed' has a wrong offset!");

// ScriptStruct GYMGAME.GymPlayerCollision
// 0x0120 (0x0120 - 0x0000)
struct FGymPlayerCollision final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    HitComp;                                           // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x100];                                     // 0x0020(0x0100)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymPlayerCollision) == 0x000008, "Wrong alignment on FGymPlayerCollision");
static_assert(sizeof(FGymPlayerCollision) == 0x000120, "Wrong size on FGymPlayerCollision");
static_assert(offsetof(FGymPlayerCollision, HitComp) == 0x000008, "Member 'FGymPlayerCollision::HitComp' has a wrong offset!");
static_assert(offsetof(FGymPlayerCollision, OtherComp) == 0x000010, "Member 'FGymPlayerCollision::OtherComp' has a wrong offset!");
static_assert(offsetof(FGymPlayerCollision, OtherActor) == 0x000018, "Member 'FGymPlayerCollision::OtherActor' has a wrong offset!");

// ScriptStruct GYMGAME.GymPlayerBalancer
// 0x0028 (0x0028 - 0x0000)
struct FGymPlayerBalancer final
{
public:
	class AGymCharacter*                          CurrentPlayer;                                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8[0x20];                                       // 0x0008(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymPlayerBalancer) == 0x000008, "Wrong alignment on FGymPlayerBalancer");
static_assert(sizeof(FGymPlayerBalancer) == 0x000028, "Wrong size on FGymPlayerBalancer");
static_assert(offsetof(FGymPlayerBalancer, CurrentPlayer) == 0x000000, "Member 'FGymPlayerBalancer::CurrentPlayer' has a wrong offset!");

// ScriptStruct GYMGAME.GymCareerPlaylistMapInfo
// 0x0050 (0x0058 - 0x0008)
struct FGymCareerPlaylistMapInfo final : public FTableRowBase
{
public:
	class FString                                 MapId;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KitId;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   MapName;                                           // 0x0038(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UTexture2D*                             LoadingScreenImage;                                // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymCareerPlaylistMapInfo) == 0x000008, "Wrong alignment on FGymCareerPlaylistMapInfo");
static_assert(sizeof(FGymCareerPlaylistMapInfo) == 0x000058, "Wrong size on FGymCareerPlaylistMapInfo");
static_assert(offsetof(FGymCareerPlaylistMapInfo, MapId) == 0x000008, "Member 'FGymCareerPlaylistMapInfo::MapId' has a wrong offset!");
static_assert(offsetof(FGymCareerPlaylistMapInfo, KitId) == 0x000018, "Member 'FGymCareerPlaylistMapInfo::KitId' has a wrong offset!");
static_assert(offsetof(FGymCareerPlaylistMapInfo, GameMode) == 0x000028, "Member 'FGymCareerPlaylistMapInfo::GameMode' has a wrong offset!");
static_assert(offsetof(FGymCareerPlaylistMapInfo, MapName) == 0x000038, "Member 'FGymCareerPlaylistMapInfo::MapName' has a wrong offset!");
static_assert(offsetof(FGymCareerPlaylistMapInfo, LoadingScreenImage) == 0x000050, "Member 'FGymCareerPlaylistMapInfo::LoadingScreenImage' has a wrong offset!");

// ScriptStruct GYMGAME.GymPlaylistScore
// 0x0028 (0x0028 - 0x0000)
struct FGymPlaylistScore final
{
public:
	EGymPlaylistScoreType                         Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Completed;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LevelStatusString;                                 // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Standing;                                          // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TournamentScore;                                   // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalStanding;                                     // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymPlaylistScore) == 0x000008, "Wrong alignment on FGymPlaylistScore");
static_assert(sizeof(FGymPlaylistScore) == 0x000028, "Wrong size on FGymPlaylistScore");
static_assert(offsetof(FGymPlaylistScore, Type) == 0x000000, "Member 'FGymPlaylistScore::Type' has a wrong offset!");
static_assert(offsetof(FGymPlaylistScore, Completed) == 0x000001, "Member 'FGymPlaylistScore::Completed' has a wrong offset!");
static_assert(offsetof(FGymPlaylistScore, LevelStatusString) == 0x000008, "Member 'FGymPlaylistScore::LevelStatusString' has a wrong offset!");
static_assert(offsetof(FGymPlaylistScore, Standing) == 0x000018, "Member 'FGymPlaylistScore::Standing' has a wrong offset!");
static_assert(offsetof(FGymPlaylistScore, TournamentScore) == 0x00001C, "Member 'FGymPlaylistScore::TournamentScore' has a wrong offset!");
static_assert(offsetof(FGymPlaylistScore, TotalStanding) == 0x000020, "Member 'FGymPlaylistScore::TotalStanding' has a wrong offset!");

// ScriptStruct GYMGAME.GymPlaylistParticipant
// 0x0030 (0x0030 - 0x0000)
struct FGymPlaylistParticipant final
{
public:
	class FString                                 GymId;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGymPlaylistScore>              Scores;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	EGymPlaylistParticipantState                  State;                                             // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerReady;                                      // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAIParticipant;                                  // 0x0022(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AIDifficulty;                                      // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AController>             Controller;                                        // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FGymPlaylistParticipant) == 0x000008, "Wrong alignment on FGymPlaylistParticipant");
static_assert(sizeof(FGymPlaylistParticipant) == 0x000030, "Wrong size on FGymPlaylistParticipant");
static_assert(offsetof(FGymPlaylistParticipant, GymId) == 0x000000, "Member 'FGymPlaylistParticipant::GymId' has a wrong offset!");
static_assert(offsetof(FGymPlaylistParticipant, Scores) == 0x000010, "Member 'FGymPlaylistParticipant::Scores' has a wrong offset!");
static_assert(offsetof(FGymPlaylistParticipant, State) == 0x000020, "Member 'FGymPlaylistParticipant::State' has a wrong offset!");
static_assert(offsetof(FGymPlaylistParticipant, bPlayerReady) == 0x000021, "Member 'FGymPlaylistParticipant::bPlayerReady' has a wrong offset!");
static_assert(offsetof(FGymPlaylistParticipant, bIsAIParticipant) == 0x000022, "Member 'FGymPlaylistParticipant::bIsAIParticipant' has a wrong offset!");
static_assert(offsetof(FGymPlaylistParticipant, AIDifficulty) == 0x000024, "Member 'FGymPlaylistParticipant::AIDifficulty' has a wrong offset!");
static_assert(offsetof(FGymPlaylistParticipant, Controller) == 0x000028, "Member 'FGymPlaylistParticipant::Controller' has a wrong offset!");

// ScriptStruct GYMGAME.GymRollingAnimatorProps
// 0x000C (0x000C - 0x0000)
struct FGymRollingAnimatorProps final
{
public:
	bool                                          Rolling;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Rolling1PPCurvePlayRate;                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rolling3PPPlayRateVelMulti;                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymRollingAnimatorProps) == 0x000004, "Wrong alignment on FGymRollingAnimatorProps");
static_assert(sizeof(FGymRollingAnimatorProps) == 0x00000C, "Wrong size on FGymRollingAnimatorProps");
static_assert(offsetof(FGymRollingAnimatorProps, Rolling) == 0x000000, "Member 'FGymRollingAnimatorProps::Rolling' has a wrong offset!");
static_assert(offsetof(FGymRollingAnimatorProps, Rolling1PPCurvePlayRate) == 0x000004, "Member 'FGymRollingAnimatorProps::Rolling1PPCurvePlayRate' has a wrong offset!");
static_assert(offsetof(FGymRollingAnimatorProps, Rolling3PPPlayRateVelMulti) == 0x000008, "Member 'FGymRollingAnimatorProps::Rolling3PPPlayRateVelMulti' has a wrong offset!");

// ScriptStruct GYMGAME.GymPodiumScoreData
// 0x0028 (0x0028 - 0x0000)
struct FGymPodiumScoreData final
{
public:
	class AGymPlayerState*                        Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Standing;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Status;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TournamentScore;                                   // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEliminated;                                       // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFinal;                                          // 0x0025(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTournament;                                     // 0x0026(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymPodiumScoreData) == 0x000008, "Wrong alignment on FGymPodiumScoreData");
static_assert(sizeof(FGymPodiumScoreData) == 0x000028, "Wrong size on FGymPodiumScoreData");
static_assert(offsetof(FGymPodiumScoreData, Player) == 0x000000, "Member 'FGymPodiumScoreData::Player' has a wrong offset!");
static_assert(offsetof(FGymPodiumScoreData, Standing) == 0x000008, "Member 'FGymPodiumScoreData::Standing' has a wrong offset!");
static_assert(offsetof(FGymPodiumScoreData, Status) == 0x000010, "Member 'FGymPodiumScoreData::Status' has a wrong offset!");
static_assert(offsetof(FGymPodiumScoreData, TournamentScore) == 0x000020, "Member 'FGymPodiumScoreData::TournamentScore' has a wrong offset!");
static_assert(offsetof(FGymPodiumScoreData, bEliminated) == 0x000024, "Member 'FGymPodiumScoreData::bEliminated' has a wrong offset!");
static_assert(offsetof(FGymPodiumScoreData, bIsFinal) == 0x000025, "Member 'FGymPodiumScoreData::bIsFinal' has a wrong offset!");
static_assert(offsetof(FGymPodiumScoreData, bIsTournament) == 0x000026, "Member 'FGymPodiumScoreData::bIsTournament' has a wrong offset!");

// ScriptStruct GYMGAME.RuleAdvanceResponse
// 0x0020 (0x0020 - 0x0000)
struct FRuleAdvanceResponse final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Message;                                           // 0x0008(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRuleAdvanceResponse) == 0x000008, "Wrong alignment on FRuleAdvanceResponse");
static_assert(sizeof(FRuleAdvanceResponse) == 0x000020, "Wrong size on FRuleAdvanceResponse");
static_assert(offsetof(FRuleAdvanceResponse, Success) == 0x000000, "Member 'FRuleAdvanceResponse::Success' has a wrong offset!");
static_assert(offsetof(FRuleAdvanceResponse, Message) == 0x000008, "Member 'FRuleAdvanceResponse::Message' has a wrong offset!");

// ScriptStruct GYMGAME.RuleStartInfo
// 0x0018 (0x0018 - 0x0000)
struct FRuleStartInfo final
{
public:
	int32                                         Participants;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RuleId;                                            // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRuleStartInfo) == 0x000008, "Wrong alignment on FRuleStartInfo");
static_assert(sizeof(FRuleStartInfo) == 0x000018, "Wrong size on FRuleStartInfo");
static_assert(offsetof(FRuleStartInfo, Participants) == 0x000000, "Member 'FRuleStartInfo::Participants' has a wrong offset!");
static_assert(offsetof(FRuleStartInfo, RuleId) == 0x000008, "Member 'FRuleStartInfo::RuleId' has a wrong offset!");

// ScriptStruct GYMGAME.RuleDisplayInfo
// 0x0038 (0x0040 - 0x0008)
struct FRuleDisplayInfo final : public FTableRowBase
{
public:
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UTexture2D*                             Texture;                                           // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRuleDisplayInfo) == 0x000008, "Wrong alignment on FRuleDisplayInfo");
static_assert(sizeof(FRuleDisplayInfo) == 0x000040, "Wrong size on FRuleDisplayInfo");
static_assert(offsetof(FRuleDisplayInfo, DisplayName) == 0x000008, "Member 'FRuleDisplayInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FRuleDisplayInfo, Description) == 0x000020, "Member 'FRuleDisplayInfo::Description' has a wrong offset!");
static_assert(offsetof(FRuleDisplayInfo, Texture) == 0x000038, "Member 'FRuleDisplayInfo::Texture' has a wrong offset!");

// ScriptStruct GYMGAME.GymCareerTournamentData
// 0x0018 (0x0018 - 0x0000)
struct FGymCareerTournamentData final
{
public:
	class FString                                 TournamentId;                                      // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Placement;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTapeCollected;                                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymCareerTournamentData) == 0x000008, "Wrong alignment on FGymCareerTournamentData");
static_assert(sizeof(FGymCareerTournamentData) == 0x000018, "Wrong size on FGymCareerTournamentData");
static_assert(offsetof(FGymCareerTournamentData, TournamentId) == 0x000000, "Member 'FGymCareerTournamentData::TournamentId' has a wrong offset!");
static_assert(offsetof(FGymCareerTournamentData, Placement) == 0x000010, "Member 'FGymCareerTournamentData::Placement' has a wrong offset!");
static_assert(offsetof(FGymCareerTournamentData, bTapeCollected) == 0x000014, "Member 'FGymCareerTournamentData::bTapeCollected' has a wrong offset!");

// ScriptStruct GYMGAME.GymCareerNPCState
// 0x0038 (0x0038 - 0x0000)
struct FGymCareerNPCState final
{
public:
	class FName                                   NPCId;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LastLocation;                                      // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LastSavedRotation;                                 // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymCareerNPCState) == 0x000008, "Wrong alignment on FGymCareerNPCState");
static_assert(sizeof(FGymCareerNPCState) == 0x000038, "Wrong size on FGymCareerNPCState");
static_assert(offsetof(FGymCareerNPCState, NPCId) == 0x000000, "Member 'FGymCareerNPCState::NPCId' has a wrong offset!");
static_assert(offsetof(FGymCareerNPCState, LastLocation) == 0x000008, "Member 'FGymCareerNPCState::LastLocation' has a wrong offset!");
static_assert(offsetof(FGymCareerNPCState, LastSavedRotation) == 0x000020, "Member 'FGymCareerNPCState::LastSavedRotation' has a wrong offset!");

// ScriptStruct GYMGAME.GymCareerLevelData
// 0x0078 (0x0078 - 0x0000)
struct FGymCareerLevelData final
{
public:
	class FString                                 LevelName;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           CompletedTasks;                                    // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bTapeCollected;                                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastSavedLocation;                                 // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LastSavedRotation;                                 // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bLocationSaved;                                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGymCareerNPCState>             NPCState;                                          // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsCompleted;                                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasPlayedBefore;                                  // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymCareerLevelData) == 0x000008, "Wrong alignment on FGymCareerLevelData");
static_assert(sizeof(FGymCareerLevelData) == 0x000078, "Wrong size on FGymCareerLevelData");
static_assert(offsetof(FGymCareerLevelData, LevelName) == 0x000000, "Member 'FGymCareerLevelData::LevelName' has a wrong offset!");
static_assert(offsetof(FGymCareerLevelData, CompletedTasks) == 0x000010, "Member 'FGymCareerLevelData::CompletedTasks' has a wrong offset!");
static_assert(offsetof(FGymCareerLevelData, bTapeCollected) == 0x000020, "Member 'FGymCareerLevelData::bTapeCollected' has a wrong offset!");
static_assert(offsetof(FGymCareerLevelData, LastSavedLocation) == 0x000028, "Member 'FGymCareerLevelData::LastSavedLocation' has a wrong offset!");
static_assert(offsetof(FGymCareerLevelData, LastSavedRotation) == 0x000040, "Member 'FGymCareerLevelData::LastSavedRotation' has a wrong offset!");
static_assert(offsetof(FGymCareerLevelData, bLocationSaved) == 0x000058, "Member 'FGymCareerLevelData::bLocationSaved' has a wrong offset!");
static_assert(offsetof(FGymCareerLevelData, NPCState) == 0x000060, "Member 'FGymCareerLevelData::NPCState' has a wrong offset!");
static_assert(offsetof(FGymCareerLevelData, bIsCompleted) == 0x000070, "Member 'FGymCareerLevelData::bIsCompleted' has a wrong offset!");
static_assert(offsetof(FGymCareerLevelData, bHasPlayedBefore) == 0x000071, "Member 'FGymCareerLevelData::bHasPlayedBefore' has a wrong offset!");

// ScriptStruct GYMGAME.GymLocalProgressData
// 0x0020 (0x0020 - 0x0000)
struct FGymLocalProgressData final
{
public:
	bool                                          bVisitedGym;                                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisitedSchoolyard;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisitedWarehouse;                                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisitedIndustrial;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisitedRooftops;                                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisitedFlatlands;                                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisitedOcean;                                     // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisitedStadium;                                   // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisitedStreets;                                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisitedCourtyard;                                 // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TotalRunDistance;                                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalLootCollected;                                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalTrampolineJumps;                              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfRewardsClaimed;                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfTimesCompleted;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymLocalProgressData) == 0x000004, "Wrong alignment on FGymLocalProgressData");
static_assert(sizeof(FGymLocalProgressData) == 0x000020, "Wrong size on FGymLocalProgressData");
static_assert(offsetof(FGymLocalProgressData, bVisitedGym) == 0x000000, "Member 'FGymLocalProgressData::bVisitedGym' has a wrong offset!");
static_assert(offsetof(FGymLocalProgressData, bVisitedSchoolyard) == 0x000001, "Member 'FGymLocalProgressData::bVisitedSchoolyard' has a wrong offset!");
static_assert(offsetof(FGymLocalProgressData, bVisitedWarehouse) == 0x000002, "Member 'FGymLocalProgressData::bVisitedWarehouse' has a wrong offset!");
static_assert(offsetof(FGymLocalProgressData, bVisitedIndustrial) == 0x000003, "Member 'FGymLocalProgressData::bVisitedIndustrial' has a wrong offset!");
static_assert(offsetof(FGymLocalProgressData, bVisitedRooftops) == 0x000004, "Member 'FGymLocalProgressData::bVisitedRooftops' has a wrong offset!");
static_assert(offsetof(FGymLocalProgressData, bVisitedFlatlands) == 0x000005, "Member 'FGymLocalProgressData::bVisitedFlatlands' has a wrong offset!");
static_assert(offsetof(FGymLocalProgressData, bVisitedOcean) == 0x000006, "Member 'FGymLocalProgressData::bVisitedOcean' has a wrong offset!");
static_assert(offsetof(FGymLocalProgressData, bVisitedStadium) == 0x000007, "Member 'FGymLocalProgressData::bVisitedStadium' has a wrong offset!");
static_assert(offsetof(FGymLocalProgressData, bVisitedStreets) == 0x000008, "Member 'FGymLocalProgressData::bVisitedStreets' has a wrong offset!");
static_assert(offsetof(FGymLocalProgressData, bVisitedCourtyard) == 0x000009, "Member 'FGymLocalProgressData::bVisitedCourtyard' has a wrong offset!");
static_assert(offsetof(FGymLocalProgressData, TotalRunDistance) == 0x00000C, "Member 'FGymLocalProgressData::TotalRunDistance' has a wrong offset!");
static_assert(offsetof(FGymLocalProgressData, TotalLootCollected) == 0x000010, "Member 'FGymLocalProgressData::TotalLootCollected' has a wrong offset!");
static_assert(offsetof(FGymLocalProgressData, TotalTrampolineJumps) == 0x000014, "Member 'FGymLocalProgressData::TotalTrampolineJumps' has a wrong offset!");
static_assert(offsetof(FGymLocalProgressData, NumberOfRewardsClaimed) == 0x000018, "Member 'FGymLocalProgressData::NumberOfRewardsClaimed' has a wrong offset!");
static_assert(offsetof(FGymLocalProgressData, NumberOfTimesCompleted) == 0x00001C, "Member 'FGymLocalProgressData::NumberOfTimesCompleted' has a wrong offset!");

// ScriptStruct GYMGAME.SessionStartPayload
// 0x0040 (0x0040 - 0x0000)
struct FSessionStartPayload final
{
public:
	class FString                                 SessionId;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapId;                                             // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Version;                                           // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSessionStartPayload) == 0x000008, "Wrong alignment on FSessionStartPayload");
static_assert(sizeof(FSessionStartPayload) == 0x000040, "Wrong size on FSessionStartPayload");
static_assert(offsetof(FSessionStartPayload, SessionId) == 0x000000, "Member 'FSessionStartPayload::SessionId' has a wrong offset!");
static_assert(offsetof(FSessionStartPayload, MapName) == 0x000010, "Member 'FSessionStartPayload::MapName' has a wrong offset!");
static_assert(offsetof(FSessionStartPayload, MapId) == 0x000020, "Member 'FSessionStartPayload::MapId' has a wrong offset!");
static_assert(offsetof(FSessionStartPayload, Version) == 0x000030, "Member 'FSessionStartPayload::Version' has a wrong offset!");

// ScriptStruct GYMGAME.RacePayload
// 0x0028 (0x0028 - 0x0000)
struct FRacePayload final
{
public:
	class FString                                 SessionId;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Participants;                                      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRacePayload) == 0x000008, "Wrong alignment on FRacePayload");
static_assert(sizeof(FRacePayload) == 0x000028, "Wrong size on FRacePayload");
static_assert(offsetof(FRacePayload, SessionId) == 0x000000, "Member 'FRacePayload::SessionId' has a wrong offset!");
static_assert(offsetof(FRacePayload, GameMode) == 0x000010, "Member 'FRacePayload::GameMode' has a wrong offset!");
static_assert(offsetof(FRacePayload, Participants) == 0x000020, "Member 'FRacePayload::Participants' has a wrong offset!");

// ScriptStruct GYMGAME.SessionEndPayload
// 0x0018 (0x0018 - 0x0000)
struct FSessionEndPayload final
{
public:
	class FString                                 SessionId;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Participants;                                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Duration;                                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSessionEndPayload) == 0x000008, "Wrong alignment on FSessionEndPayload");
static_assert(sizeof(FSessionEndPayload) == 0x000018, "Wrong size on FSessionEndPayload");
static_assert(offsetof(FSessionEndPayload, SessionId) == 0x000000, "Member 'FSessionEndPayload::SessionId' has a wrong offset!");
static_assert(offsetof(FSessionEndPayload, Participants) == 0x000010, "Member 'FSessionEndPayload::Participants' has a wrong offset!");
static_assert(offsetof(FSessionEndPayload, Duration) == 0x000014, "Member 'FSessionEndPayload::Duration' has a wrong offset!");

// ScriptStruct GYMGAME.GymSessionSearchFilters
// 0x0020 (0x0020 - 0x0000)
struct FGymSessionSearchFilters final
{
public:
	bool                                          bFindWithKey;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Key;                                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFindOnlyFeaturedPlaylist;                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymSessionSearchFilters) == 0x000008, "Wrong alignment on FGymSessionSearchFilters");
static_assert(sizeof(FGymSessionSearchFilters) == 0x000020, "Wrong size on FGymSessionSearchFilters");
static_assert(offsetof(FGymSessionSearchFilters, bFindWithKey) == 0x000000, "Member 'FGymSessionSearchFilters::bFindWithKey' has a wrong offset!");
static_assert(offsetof(FGymSessionSearchFilters, Key) == 0x000008, "Member 'FGymSessionSearchFilters::Key' has a wrong offset!");
static_assert(offsetof(FGymSessionSearchFilters, bFindOnlyFeaturedPlaylist) == 0x000018, "Member 'FGymSessionSearchFilters::bFindOnlyFeaturedPlaylist' has a wrong offset!");

// ScriptStruct GYMGAME.GymSkyboxSlot
// 0x0018 (0x0018 - 0x0000)
struct FGymSkyboxSlot final
{
public:
	class AGymSkyboxPiece*                        SkyboxPiece;                                       // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymSkyboxSlot) == 0x000008, "Wrong alignment on FGymSkyboxSlot");
static_assert(sizeof(FGymSkyboxSlot) == 0x000018, "Wrong size on FGymSkyboxSlot");
static_assert(offsetof(FGymSkyboxSlot, SkyboxPiece) == 0x000000, "Member 'FGymSkyboxSlot::SkyboxPiece' has a wrong offset!");

// ScriptStruct GYMGAME.GymSkyboxRoadStruct
// 0x0010 (0x0010 - 0x0000)
struct FGymSkyboxRoadStruct final
{
public:
	TArray<bool>                                  HasRoad;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymSkyboxRoadStruct) == 0x000008, "Wrong alignment on FGymSkyboxRoadStruct");
static_assert(sizeof(FGymSkyboxRoadStruct) == 0x000010, "Wrong size on FGymSkyboxRoadStruct");
static_assert(offsetof(FGymSkyboxRoadStruct, HasRoad) == 0x000000, "Member 'FGymSkyboxRoadStruct::HasRoad' has a wrong offset!");

// ScriptStruct GYMGAME.GymSkyboxPieceType
// 0x0040 (0x0040 - 0x0000)
struct FGymSkyboxPieceType final
{
public:
	TSubclassOf<class AGymSkyboxPiece>            PieceClass;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGymSkyboxRoadStruct>           HasRoad;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FGymSkyboxRoadStruct>           IsBridge;                                          // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bCanGenerate;                                      // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanGenerateOutside;                               // 0x0029(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanGenerateInside;                                // 0x002A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  PossibleWorldRotations;                            // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymSkyboxPieceType) == 0x000008, "Wrong alignment on FGymSkyboxPieceType");
static_assert(sizeof(FGymSkyboxPieceType) == 0x000040, "Wrong size on FGymSkyboxPieceType");
static_assert(offsetof(FGymSkyboxPieceType, PieceClass) == 0x000000, "Member 'FGymSkyboxPieceType::PieceClass' has a wrong offset!");
static_assert(offsetof(FGymSkyboxPieceType, HasRoad) == 0x000008, "Member 'FGymSkyboxPieceType::HasRoad' has a wrong offset!");
static_assert(offsetof(FGymSkyboxPieceType, IsBridge) == 0x000018, "Member 'FGymSkyboxPieceType::IsBridge' has a wrong offset!");
static_assert(offsetof(FGymSkyboxPieceType, bCanGenerate) == 0x000028, "Member 'FGymSkyboxPieceType::bCanGenerate' has a wrong offset!");
static_assert(offsetof(FGymSkyboxPieceType, bCanGenerateOutside) == 0x000029, "Member 'FGymSkyboxPieceType::bCanGenerateOutside' has a wrong offset!");
static_assert(offsetof(FGymSkyboxPieceType, bCanGenerateInside) == 0x00002A, "Member 'FGymSkyboxPieceType::bCanGenerateInside' has a wrong offset!");
static_assert(offsetof(FGymSkyboxPieceType, PossibleWorldRotations) == 0x000030, "Member 'FGymSkyboxPieceType::PossibleWorldRotations' has a wrong offset!");

// ScriptStruct GYMGAME.GymSlidingAnimatorProps
// 0x0003 (0x0003 - 0x0000)
struct FGymSlidingAnimatorProps final
{
public:
	bool                                          Sliding;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FromRoll;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SlidingForceEnd;                                   // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymSlidingAnimatorProps) == 0x000001, "Wrong alignment on FGymSlidingAnimatorProps");
static_assert(sizeof(FGymSlidingAnimatorProps) == 0x000003, "Wrong size on FGymSlidingAnimatorProps");
static_assert(offsetof(FGymSlidingAnimatorProps, Sliding) == 0x000000, "Member 'FGymSlidingAnimatorProps::Sliding' has a wrong offset!");
static_assert(offsetof(FGymSlidingAnimatorProps, FromRoll) == 0x000001, "Member 'FGymSlidingAnimatorProps::FromRoll' has a wrong offset!");
static_assert(offsetof(FGymSlidingAnimatorProps, SlidingForceEnd) == 0x000002, "Member 'FGymSlidingAnimatorProps::SlidingForceEnd' has a wrong offset!");

// ScriptStruct GYMGAME.SpectatingInputState
// 0x001C (0x001C - 0x0000)
struct FSpectatingInputState final
{
public:
	float                                         MouseX;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MouseY;                                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Horizontal;                                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Vertical;                                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputUp;                                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNextPlayerPressed;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreviousPlayerPressed;                            // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNextCameraModePressed;                            // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreviousCameraModePressed;                        // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExitSpectatorModePressed;                         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideUIPressed;                                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InvertX;                                           // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InvertY;                                           // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpectatingInputState) == 0x000004, "Wrong alignment on FSpectatingInputState");
static_assert(sizeof(FSpectatingInputState) == 0x00001C, "Wrong size on FSpectatingInputState");
static_assert(offsetof(FSpectatingInputState, MouseX) == 0x000000, "Member 'FSpectatingInputState::MouseX' has a wrong offset!");
static_assert(offsetof(FSpectatingInputState, MouseY) == 0x000004, "Member 'FSpectatingInputState::MouseY' has a wrong offset!");
static_assert(offsetof(FSpectatingInputState, Horizontal) == 0x000008, "Member 'FSpectatingInputState::Horizontal' has a wrong offset!");
static_assert(offsetof(FSpectatingInputState, Vertical) == 0x00000C, "Member 'FSpectatingInputState::Vertical' has a wrong offset!");
static_assert(offsetof(FSpectatingInputState, InputUp) == 0x000010, "Member 'FSpectatingInputState::InputUp' has a wrong offset!");
static_assert(offsetof(FSpectatingInputState, bNextPlayerPressed) == 0x000014, "Member 'FSpectatingInputState::bNextPlayerPressed' has a wrong offset!");
static_assert(offsetof(FSpectatingInputState, bPreviousPlayerPressed) == 0x000015, "Member 'FSpectatingInputState::bPreviousPlayerPressed' has a wrong offset!");
static_assert(offsetof(FSpectatingInputState, bNextCameraModePressed) == 0x000016, "Member 'FSpectatingInputState::bNextCameraModePressed' has a wrong offset!");
static_assert(offsetof(FSpectatingInputState, bPreviousCameraModePressed) == 0x000017, "Member 'FSpectatingInputState::bPreviousCameraModePressed' has a wrong offset!");
static_assert(offsetof(FSpectatingInputState, bExitSpectatorModePressed) == 0x000018, "Member 'FSpectatingInputState::bExitSpectatorModePressed' has a wrong offset!");
static_assert(offsetof(FSpectatingInputState, bHideUIPressed) == 0x000019, "Member 'FSpectatingInputState::bHideUIPressed' has a wrong offset!");
static_assert(offsetof(FSpectatingInputState, InvertX) == 0x00001A, "Member 'FSpectatingInputState::InvertX' has a wrong offset!");
static_assert(offsetof(FSpectatingInputState, InvertY) == 0x00001B, "Member 'FSpectatingInputState::InvertY' has a wrong offset!");

// ScriptStruct GYMGAME.GymSpectatorSpringArmSettings
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FGymSpectatorSpringArmSettings final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymSpectatorSpringArmSettings) == 0x000004, "Wrong alignment on FGymSpectatorSpringArmSettings");
static_assert(sizeof(FGymSpectatorSpringArmSettings) == 0x000010, "Wrong size on FGymSpectatorSpringArmSettings");

// ScriptStruct GYMGAME.GymSpectatorSpringArmProps
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FGymSpectatorSpringArmProps final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymSpectatorSpringArmProps) == 0x000004, "Wrong alignment on FGymSpectatorSpringArmProps");
static_assert(sizeof(FGymSpectatorSpringArmProps) == 0x000004, "Wrong size on FGymSpectatorSpringArmProps");

// ScriptStruct GYMGAME.GymAssetCachedMeshOriginalMaterials
// 0x0018 (0x0018 - 0x0000)
struct FGymAssetCachedMeshOriginalMaterials final
{
public:
	class UStaticMeshComponent*                   Owner;                                             // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             Materials;                                         // 0x0008(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymAssetCachedMeshOriginalMaterials) == 0x000008, "Wrong alignment on FGymAssetCachedMeshOriginalMaterials");
static_assert(sizeof(FGymAssetCachedMeshOriginalMaterials) == 0x000018, "Wrong size on FGymAssetCachedMeshOriginalMaterials");
static_assert(offsetof(FGymAssetCachedMeshOriginalMaterials, Owner) == 0x000000, "Member 'FGymAssetCachedMeshOriginalMaterials::Owner' has a wrong offset!");
static_assert(offsetof(FGymAssetCachedMeshOriginalMaterials, Materials) == 0x000008, "Member 'FGymAssetCachedMeshOriginalMaterials::Materials' has a wrong offset!");

// ScriptStruct GYMGAME.GymSwimmingAnimatorProps
// 0x0020 (0x0020 - 0x0000)
struct FGymSwimmingAnimatorProps final
{
public:
	bool                                          IsSwimming;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SwimmingVelocity;                                  // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymSwimmingAnimatorProps) == 0x000008, "Wrong alignment on FGymSwimmingAnimatorProps");
static_assert(sizeof(FGymSwimmingAnimatorProps) == 0x000020, "Wrong size on FGymSwimmingAnimatorProps");
static_assert(offsetof(FGymSwimmingAnimatorProps, IsSwimming) == 0x000000, "Member 'FGymSwimmingAnimatorProps::IsSwimming' has a wrong offset!");
static_assert(offsetof(FGymSwimmingAnimatorProps, SwimmingVelocity) == 0x000008, "Member 'FGymSwimmingAnimatorProps::SwimmingVelocity' has a wrong offset!");

// ScriptStruct GYMGAME.GymTauntData
// 0x0058 (0x0060 - 0x0008)
struct FGymTauntData final : public FTableRowBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UAnimSequence*                          StartAnim;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          LoopAnim;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          LoopAnimBlendSpace;                                // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          EndAnim;                                           // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          FailAnimBlendSpace;                                // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBalanceMinigame;                                // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxLoopStateLength;                                // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayLoopOnceOnly;                                 // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymTauntData) == 0x000008, "Wrong alignment on FGymTauntData");
static_assert(sizeof(FGymTauntData) == 0x000060, "Wrong size on FGymTauntData");
static_assert(offsetof(FGymTauntData, DisplayName) == 0x000010, "Member 'FGymTauntData::DisplayName' has a wrong offset!");
static_assert(offsetof(FGymTauntData, StartAnim) == 0x000028, "Member 'FGymTauntData::StartAnim' has a wrong offset!");
static_assert(offsetof(FGymTauntData, LoopAnim) == 0x000030, "Member 'FGymTauntData::LoopAnim' has a wrong offset!");
static_assert(offsetof(FGymTauntData, LoopAnimBlendSpace) == 0x000038, "Member 'FGymTauntData::LoopAnimBlendSpace' has a wrong offset!");
static_assert(offsetof(FGymTauntData, EndAnim) == 0x000040, "Member 'FGymTauntData::EndAnim' has a wrong offset!");
static_assert(offsetof(FGymTauntData, FailAnimBlendSpace) == 0x000048, "Member 'FGymTauntData::FailAnimBlendSpace' has a wrong offset!");
static_assert(offsetof(FGymTauntData, bIsBalanceMinigame) == 0x000050, "Member 'FGymTauntData::bIsBalanceMinigame' has a wrong offset!");
static_assert(offsetof(FGymTauntData, MaxLoopStateLength) == 0x000054, "Member 'FGymTauntData::MaxLoopStateLength' has a wrong offset!");
static_assert(offsetof(FGymTauntData, bPlayLoopOnceOnly) == 0x000058, "Member 'FGymTauntData::bPlayLoopOnceOnly' has a wrong offset!");

// ScriptStruct GYMGAME.GymTauntAnimatorProps
// 0x0070 (0x0070 - 0x0000)
struct FGymTauntAnimatorProps final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETauntState                                   TauntState;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymTauntData                          TauntData;                                         // 0x0008(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         Balance;                                           // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymTauntAnimatorProps) == 0x000008, "Wrong alignment on FGymTauntAnimatorProps");
static_assert(sizeof(FGymTauntAnimatorProps) == 0x000070, "Wrong size on FGymTauntAnimatorProps");
static_assert(offsetof(FGymTauntAnimatorProps, bIsEnabled) == 0x000000, "Member 'FGymTauntAnimatorProps::bIsEnabled' has a wrong offset!");
static_assert(offsetof(FGymTauntAnimatorProps, TauntState) == 0x000001, "Member 'FGymTauntAnimatorProps::TauntState' has a wrong offset!");
static_assert(offsetof(FGymTauntAnimatorProps, TauntData) == 0x000008, "Member 'FGymTauntAnimatorProps::TauntData' has a wrong offset!");
static_assert(offsetof(FGymTauntAnimatorProps, Balance) == 0x000068, "Member 'FGymTauntAnimatorProps::Balance' has a wrong offset!");

// ScriptStruct GYMGAME.GymTauntReplicatedProps
// 0x0008 (0x0008 - 0x0000)
struct FGymTauntReplicatedProps final
{
public:
	ETauntState                                   TauntState;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Balance;                                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymTauntReplicatedProps) == 0x000004, "Wrong alignment on FGymTauntReplicatedProps");
static_assert(sizeof(FGymTauntReplicatedProps) == 0x000008, "Wrong size on FGymTauntReplicatedProps");
static_assert(offsetof(FGymTauntReplicatedProps, TauntState) == 0x000000, "Member 'FGymTauntReplicatedProps::TauntState' has a wrong offset!");
static_assert(offsetof(FGymTauntReplicatedProps, Balance) == 0x000004, "Member 'FGymTauntReplicatedProps::Balance' has a wrong offset!");

// ScriptStruct GYMGAME.GymSprayData
// 0x0020 (0x0028 - 0x0008)
struct FGymSprayData final : public FTableRowBase
{
public:
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSubclassOf<class AGymStaticLevelAsset>       SprayAsset;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymSprayData) == 0x000008, "Wrong alignment on FGymSprayData");
static_assert(sizeof(FGymSprayData) == 0x000028, "Wrong size on FGymSprayData");
static_assert(offsetof(FGymSprayData, DisplayName) == 0x000008, "Member 'FGymSprayData::DisplayName' has a wrong offset!");
static_assert(offsetof(FGymSprayData, SprayAsset) == 0x000020, "Member 'FGymSprayData::SprayAsset' has a wrong offset!");

// ScriptStruct GYMGAME.GymTauntMovementProps
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FGymTauntMovementProps final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymTauntMovementProps) == 0x000008, "Wrong alignment on FGymTauntMovementProps");
static_assert(sizeof(FGymTauntMovementProps) == 0x000040, "Wrong size on FGymTauntMovementProps");

// ScriptStruct GYMGAME.GymTiltCameraModifierSettings
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FGymTiltCameraModifierSettings final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymTiltCameraModifierSettings) == 0x000004, "Wrong alignment on FGymTiltCameraModifierSettings");
static_assert(sizeof(FGymTiltCameraModifierSettings) == 0x000008, "Wrong size on FGymTiltCameraModifierSettings");

// ScriptStruct GYMGAME.GymTimer
// 0x0008 (0x0008 - 0x0000)
struct FGymTimer final
{
public:
	float                                         MaxTime;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymTimer) == 0x000004, "Wrong alignment on FGymTimer");
static_assert(sizeof(FGymTimer) == 0x000008, "Wrong size on FGymTimer");
static_assert(offsetof(FGymTimer, MaxTime) == 0x000000, "Member 'FGymTimer::MaxTime' has a wrong offset!");

// ScriptStruct GYMGAME.GymTubeAssist
// 0x0018 (0x0018 - 0x0000)
struct FGymTubeAssist final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymMovementControl*                    Control;                                           // 0x0008(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AGymCharacter*                          Player;                                            // 0x0010(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FGymTubeAssist) == 0x000008, "Wrong alignment on FGymTubeAssist");
static_assert(sizeof(FGymTubeAssist) == 0x000018, "Wrong size on FGymTubeAssist");
static_assert(offsetof(FGymTubeAssist, Control) == 0x000008, "Member 'FGymTubeAssist::Control' has a wrong offset!");
static_assert(offsetof(FGymTubeAssist, Player) == 0x000010, "Member 'FGymTubeAssist::Player' has a wrong offset!");

// ScriptStruct GYMGAME.GymVaultingAnimationParameters
// 0x0003 (0x0003 - 0x0000)
struct FGymVaultingAnimationParameters final
{
public:
	EGymVaultingEngineAnimationSetRole            AnimationRole;                                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Mirror;                                            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AnimationSetIndex;                                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymVaultingAnimationParameters) == 0x000001, "Wrong alignment on FGymVaultingAnimationParameters");
static_assert(sizeof(FGymVaultingAnimationParameters) == 0x000003, "Wrong size on FGymVaultingAnimationParameters");
static_assert(offsetof(FGymVaultingAnimationParameters, AnimationRole) == 0x000000, "Member 'FGymVaultingAnimationParameters::AnimationRole' has a wrong offset!");
static_assert(offsetof(FGymVaultingAnimationParameters, Mirror) == 0x000001, "Member 'FGymVaultingAnimationParameters::Mirror' has a wrong offset!");
static_assert(offsetof(FGymVaultingAnimationParameters, AnimationSetIndex) == 0x000002, "Member 'FGymVaultingAnimationParameters::AnimationSetIndex' has a wrong offset!");

// ScriptStruct GYMGAME.GymVaultingAnimatorProps
// 0x0080 (0x0080 - 0x0000)
struct FGymVaultingAnimatorProps final
{
public:
	uint8                                         DescSlot;                                          // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpolationPower;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandSeparation;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4C];                                       // 0x000C(0x004C)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          UseThirdPersonAnimations;                          // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WallVaultEnabled;                                  // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HighSpeedWallVaultEnabled;                         // 0x005A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceStopCalled;                                   // 0x005B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGymVaultingAnimationParameters        AnimationParameters;                               // 0x005C(0x0003)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F[0x1];                                       // 0x005F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          VaultingAnimationSequence;                         // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VaultingAnimationPlayRate;                         // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VaultingAnimationStartPosition;                    // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VaultingComboCount;                                // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentSplinePoint;                                // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DidComboCountIncrease;                             // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymVaultingAnimatorProps) == 0x000008, "Wrong alignment on FGymVaultingAnimatorProps");
static_assert(sizeof(FGymVaultingAnimatorProps) == 0x000080, "Wrong size on FGymVaultingAnimatorProps");
static_assert(offsetof(FGymVaultingAnimatorProps, DescSlot) == 0x000000, "Member 'FGymVaultingAnimatorProps::DescSlot' has a wrong offset!");
static_assert(offsetof(FGymVaultingAnimatorProps, InterpolationPower) == 0x000004, "Member 'FGymVaultingAnimatorProps::InterpolationPower' has a wrong offset!");
static_assert(offsetof(FGymVaultingAnimatorProps, HandSeparation) == 0x000008, "Member 'FGymVaultingAnimatorProps::HandSeparation' has a wrong offset!");
static_assert(offsetof(FGymVaultingAnimatorProps, UseThirdPersonAnimations) == 0x000058, "Member 'FGymVaultingAnimatorProps::UseThirdPersonAnimations' has a wrong offset!");
static_assert(offsetof(FGymVaultingAnimatorProps, WallVaultEnabled) == 0x000059, "Member 'FGymVaultingAnimatorProps::WallVaultEnabled' has a wrong offset!");
static_assert(offsetof(FGymVaultingAnimatorProps, HighSpeedWallVaultEnabled) == 0x00005A, "Member 'FGymVaultingAnimatorProps::HighSpeedWallVaultEnabled' has a wrong offset!");
static_assert(offsetof(FGymVaultingAnimatorProps, ForceStopCalled) == 0x00005B, "Member 'FGymVaultingAnimatorProps::ForceStopCalled' has a wrong offset!");
static_assert(offsetof(FGymVaultingAnimatorProps, AnimationParameters) == 0x00005C, "Member 'FGymVaultingAnimatorProps::AnimationParameters' has a wrong offset!");
static_assert(offsetof(FGymVaultingAnimatorProps, VaultingAnimationSequence) == 0x000060, "Member 'FGymVaultingAnimatorProps::VaultingAnimationSequence' has a wrong offset!");
static_assert(offsetof(FGymVaultingAnimatorProps, VaultingAnimationPlayRate) == 0x000068, "Member 'FGymVaultingAnimatorProps::VaultingAnimationPlayRate' has a wrong offset!");
static_assert(offsetof(FGymVaultingAnimatorProps, VaultingAnimationStartPosition) == 0x00006C, "Member 'FGymVaultingAnimatorProps::VaultingAnimationStartPosition' has a wrong offset!");
static_assert(offsetof(FGymVaultingAnimatorProps, VaultingComboCount) == 0x000070, "Member 'FGymVaultingAnimatorProps::VaultingComboCount' has a wrong offset!");
static_assert(offsetof(FGymVaultingAnimatorProps, CurrentSplinePoint) == 0x000074, "Member 'FGymVaultingAnimatorProps::CurrentSplinePoint' has a wrong offset!");
static_assert(offsetof(FGymVaultingAnimatorProps, DidComboCountIncrease) == 0x000078, "Member 'FGymVaultingAnimatorProps::DidComboCountIncrease' has a wrong offset!");

// ScriptStruct GYMGAME.GymVAVEAnimationSet
// 0x00B0 (0x00B0 - 0x0000)
struct FGymVAVEAnimationSet final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGymVaultingEngineAnimationSetRole            Role;                                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AnimationPathOffset;                               // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimationPathMaxTrimRatio;                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PureAnimationMaxTrimRatio;                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PathExtendMulti;                                   // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AnimationSequence;                                 // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AnimationSequenceMirror;                           // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          SampleRootAnimationSequence;                       // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          SampleRootAnimationSequenceMirror;                 // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          TPAnimationSequence;                               // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          TPAnimationSequenceMirror;                         // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          TPSampleRootAnimationSequence;                     // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          TPSampleRootAnimationSequenceMirror;               // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimationRelativePlayRate;                         // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseKinematic;                                      // 0x0084(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DontHideBody;                                      // 0x0085(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_86[0x2];                                       // 0x0086(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HideBodyExtraTimeSeconds;                          // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector3f>                      ExtractedPosKeys;                                  // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, NativeAccessSpecifierPublic)
	TArray<struct FVector3f>                      ExtractedPosKeysMirror;                            // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymVAVEAnimationSet) == 0x000008, "Wrong alignment on FGymVAVEAnimationSet");
static_assert(sizeof(FGymVAVEAnimationSet) == 0x0000B0, "Wrong size on FGymVAVEAnimationSet");
static_assert(offsetof(FGymVAVEAnimationSet, IsActive) == 0x000000, "Member 'FGymVAVEAnimationSet::IsActive' has a wrong offset!");
static_assert(offsetof(FGymVAVEAnimationSet, Role) == 0x000001, "Member 'FGymVAVEAnimationSet::Role' has a wrong offset!");
static_assert(offsetof(FGymVAVEAnimationSet, AnimationPathOffset) == 0x000008, "Member 'FGymVAVEAnimationSet::AnimationPathOffset' has a wrong offset!");
static_assert(offsetof(FGymVAVEAnimationSet, AnimationPathMaxTrimRatio) == 0x000020, "Member 'FGymVAVEAnimationSet::AnimationPathMaxTrimRatio' has a wrong offset!");
static_assert(offsetof(FGymVAVEAnimationSet, PureAnimationMaxTrimRatio) == 0x000024, "Member 'FGymVAVEAnimationSet::PureAnimationMaxTrimRatio' has a wrong offset!");
static_assert(offsetof(FGymVAVEAnimationSet, PathExtendMulti) == 0x000028, "Member 'FGymVAVEAnimationSet::PathExtendMulti' has a wrong offset!");
static_assert(offsetof(FGymVAVEAnimationSet, AnimationSequence) == 0x000040, "Member 'FGymVAVEAnimationSet::AnimationSequence' has a wrong offset!");
static_assert(offsetof(FGymVAVEAnimationSet, AnimationSequenceMirror) == 0x000048, "Member 'FGymVAVEAnimationSet::AnimationSequenceMirror' has a wrong offset!");
static_assert(offsetof(FGymVAVEAnimationSet, SampleRootAnimationSequence) == 0x000050, "Member 'FGymVAVEAnimationSet::SampleRootAnimationSequence' has a wrong offset!");
static_assert(offsetof(FGymVAVEAnimationSet, SampleRootAnimationSequenceMirror) == 0x000058, "Member 'FGymVAVEAnimationSet::SampleRootAnimationSequenceMirror' has a wrong offset!");
static_assert(offsetof(FGymVAVEAnimationSet, TPAnimationSequence) == 0x000060, "Member 'FGymVAVEAnimationSet::TPAnimationSequence' has a wrong offset!");
static_assert(offsetof(FGymVAVEAnimationSet, TPAnimationSequenceMirror) == 0x000068, "Member 'FGymVAVEAnimationSet::TPAnimationSequenceMirror' has a wrong offset!");
static_assert(offsetof(FGymVAVEAnimationSet, TPSampleRootAnimationSequence) == 0x000070, "Member 'FGymVAVEAnimationSet::TPSampleRootAnimationSequence' has a wrong offset!");
static_assert(offsetof(FGymVAVEAnimationSet, TPSampleRootAnimationSequenceMirror) == 0x000078, "Member 'FGymVAVEAnimationSet::TPSampleRootAnimationSequenceMirror' has a wrong offset!");
static_assert(offsetof(FGymVAVEAnimationSet, AnimationRelativePlayRate) == 0x000080, "Member 'FGymVAVEAnimationSet::AnimationRelativePlayRate' has a wrong offset!");
static_assert(offsetof(FGymVAVEAnimationSet, UseKinematic) == 0x000084, "Member 'FGymVAVEAnimationSet::UseKinematic' has a wrong offset!");
static_assert(offsetof(FGymVAVEAnimationSet, DontHideBody) == 0x000085, "Member 'FGymVAVEAnimationSet::DontHideBody' has a wrong offset!");
static_assert(offsetof(FGymVAVEAnimationSet, HideBodyExtraTimeSeconds) == 0x000088, "Member 'FGymVAVEAnimationSet::HideBodyExtraTimeSeconds' has a wrong offset!");
static_assert(offsetof(FGymVAVEAnimationSet, ExtractedPosKeys) == 0x000090, "Member 'FGymVAVEAnimationSet::ExtractedPosKeys' has a wrong offset!");
static_assert(offsetof(FGymVAVEAnimationSet, ExtractedPosKeysMirror) == 0x0000A0, "Member 'FGymVAVEAnimationSet::ExtractedPosKeysMirror' has a wrong offset!");

// ScriptStruct GYMGAME.GymVignetteCameraModifierSettings
// 0x001C (0x001C - 0x0000)
struct alignas(0x04) FGymVignetteCameraModifierSettings final
{
public:
	uint8                                         Pad_0[0x1C];                                       // 0x0000(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymVignetteCameraModifierSettings) == 0x000004, "Wrong alignment on FGymVignetteCameraModifierSettings");
static_assert(sizeof(FGymVignetteCameraModifierSettings) == 0x00001C, "Wrong size on FGymVignetteCameraModifierSettings");

// ScriptStruct GYMGAME.GymVignetteCameraModifierProps
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FGymVignetteCameraModifierProps final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymVignetteCameraModifierProps) == 0x000004, "Wrong alignment on FGymVignetteCameraModifierProps");
static_assert(sizeof(FGymVignetteCameraModifierProps) == 0x000008, "Wrong size on FGymVignetteCameraModifierProps");

// ScriptStruct GYMGAME.GymVote
// 0x0020 (0x0020 - 0x0000)
struct FGymVote final
{
public:
	int32                                         VotesNeeded;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaximumVotes;                                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoteState                                    VoteState;                                         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AGymPlayerController*>           PlayersVoted;                                      // 0x0010(0x0010)(ZeroConstructor, Transient, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymVote) == 0x000008, "Wrong alignment on FGymVote");
static_assert(sizeof(FGymVote) == 0x000020, "Wrong size on FGymVote");
static_assert(offsetof(FGymVote, VotesNeeded) == 0x000000, "Member 'FGymVote::VotesNeeded' has a wrong offset!");
static_assert(offsetof(FGymVote, MaximumVotes) == 0x000004, "Member 'FGymVote::MaximumVotes' has a wrong offset!");
static_assert(offsetof(FGymVote, VoteState) == 0x000008, "Member 'FGymVote::VoteState' has a wrong offset!");
static_assert(offsetof(FGymVote, PlayersVoted) == 0x000010, "Member 'FGymVote::PlayersVoted' has a wrong offset!");

// ScriptStruct GYMGAME.GymWallRunningAnimatorProps
// 0x000C (0x000C - 0x0000)
struct FGymWallRunningAnimatorProps final
{
public:
	bool                                          WallRunSidewaysEnabled;                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WallRunSidewaysWasJump;                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WallRunSidewaysOrientation;                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWallRunMode                                  WallRunMode;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymWallRunningAnimatorProps) == 0x000004, "Wrong alignment on FGymWallRunningAnimatorProps");
static_assert(sizeof(FGymWallRunningAnimatorProps) == 0x00000C, "Wrong size on FGymWallRunningAnimatorProps");
static_assert(offsetof(FGymWallRunningAnimatorProps, WallRunSidewaysEnabled) == 0x000000, "Member 'FGymWallRunningAnimatorProps::WallRunSidewaysEnabled' has a wrong offset!");
static_assert(offsetof(FGymWallRunningAnimatorProps, WallRunSidewaysWasJump) == 0x000001, "Member 'FGymWallRunningAnimatorProps::WallRunSidewaysWasJump' has a wrong offset!");
static_assert(offsetof(FGymWallRunningAnimatorProps, WallRunSidewaysOrientation) == 0x000004, "Member 'FGymWallRunningAnimatorProps::WallRunSidewaysOrientation' has a wrong offset!");
static_assert(offsetof(FGymWallRunningAnimatorProps, WallRunMode) == 0x000008, "Member 'FGymWallRunningAnimatorProps::WallRunMode' has a wrong offset!");

// ScriptStruct GYMGAME.GymShapeVoxel
// 0x0068 (0x0068 - 0x0000)
struct FGymShapeVoxel final
{
public:
	bool                                          IsOutside;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymWallPiece*                          Floor;                                             // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymWallPiece*                          Ceiling;                                           // 0x0018(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymWallPiece*                          WallN;                                             // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymWallPiece*                          Walls;                                             // 0x0038(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymWallPiece*                          WallW;                                             // 0x0048(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymWallPiece*                          WallE;                                             // 0x0058(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x8];                                       // 0x0060(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymShapeVoxel) == 0x000008, "Wrong alignment on FGymShapeVoxel");
static_assert(sizeof(FGymShapeVoxel) == 0x000068, "Wrong size on FGymShapeVoxel");
static_assert(offsetof(FGymShapeVoxel, IsOutside) == 0x000000, "Member 'FGymShapeVoxel::IsOutside' has a wrong offset!");
static_assert(offsetof(FGymShapeVoxel, Floor) == 0x000008, "Member 'FGymShapeVoxel::Floor' has a wrong offset!");
static_assert(offsetof(FGymShapeVoxel, Ceiling) == 0x000018, "Member 'FGymShapeVoxel::Ceiling' has a wrong offset!");
static_assert(offsetof(FGymShapeVoxel, WallN) == 0x000028, "Member 'FGymShapeVoxel::WallN' has a wrong offset!");
static_assert(offsetof(FGymShapeVoxel, Walls) == 0x000038, "Member 'FGymShapeVoxel::Walls' has a wrong offset!");
static_assert(offsetof(FGymShapeVoxel, WallW) == 0x000048, "Member 'FGymShapeVoxel::WallW' has a wrong offset!");
static_assert(offsetof(FGymShapeVoxel, WallE) == 0x000058, "Member 'FGymShapeVoxel::WallE' has a wrong offset!");

// ScriptStruct GYMGAME.GymShape
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FGymShape final
{
public:
	int32                                         FloorLevel;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x54];                                       // 0x0004(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymShape) == 0x000008, "Wrong alignment on FGymShape");
static_assert(sizeof(FGymShape) == 0x000058, "Wrong size on FGymShape");
static_assert(offsetof(FGymShape, FloorLevel) == 0x000000, "Member 'FGymShape::FloorLevel' has a wrong offset!");

// ScriptStruct GYMGAME.GymWallLocator
// 0x0010 (0x0010 - 0x0000)
struct FGymWallLocator final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Z;                                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGymWallDirection                             D;                                                 // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymWallLocator) == 0x000004, "Wrong alignment on FGymWallLocator");
static_assert(sizeof(FGymWallLocator) == 0x000010, "Wrong size on FGymWallLocator");
static_assert(offsetof(FGymWallLocator, X) == 0x000000, "Member 'FGymWallLocator::X' has a wrong offset!");
static_assert(offsetof(FGymWallLocator, Y) == 0x000004, "Member 'FGymWallLocator::Y' has a wrong offset!");
static_assert(offsetof(FGymWallLocator, Z) == 0x000008, "Member 'FGymWallLocator::Z' has a wrong offset!");
static_assert(offsetof(FGymWallLocator, D) == 0x00000C, "Member 'FGymWallLocator::D' has a wrong offset!");

// ScriptStruct GYMGAME.GymWallThemeVariant
// 0x0010 (0x0010 - 0x0000)
struct FGymWallThemeVariant final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AGymStaticLevelAsset>       Asset;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymWallThemeVariant) == 0x000008, "Wrong alignment on FGymWallThemeVariant");
static_assert(sizeof(FGymWallThemeVariant) == 0x000010, "Wrong size on FGymWallThemeVariant");
static_assert(offsetof(FGymWallThemeVariant, Name) == 0x000000, "Member 'FGymWallThemeVariant::Name' has a wrong offset!");
static_assert(offsetof(FGymWallThemeVariant, Asset) == 0x000008, "Member 'FGymWallThemeVariant::Asset' has a wrong offset!");

// ScriptStruct GYMGAME.GymWireWalkingAnimatorProps
// 0x000C (0x000C - 0x0000)
struct FGymWireWalkingAnimatorProps final
{
public:
	bool                                          WireWalkingEnabled;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WireWalkingCartwheel;                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WireWalkingExitToFalling;                          // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WireWalkingBalance;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WireWalkingCurrentSpeed;                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGymWireWalkingAnimatorProps) == 0x000004, "Wrong alignment on FGymWireWalkingAnimatorProps");
static_assert(sizeof(FGymWireWalkingAnimatorProps) == 0x00000C, "Wrong size on FGymWireWalkingAnimatorProps");
static_assert(offsetof(FGymWireWalkingAnimatorProps, WireWalkingEnabled) == 0x000000, "Member 'FGymWireWalkingAnimatorProps::WireWalkingEnabled' has a wrong offset!");
static_assert(offsetof(FGymWireWalkingAnimatorProps, WireWalkingCartwheel) == 0x000001, "Member 'FGymWireWalkingAnimatorProps::WireWalkingCartwheel' has a wrong offset!");
static_assert(offsetof(FGymWireWalkingAnimatorProps, WireWalkingExitToFalling) == 0x000002, "Member 'FGymWireWalkingAnimatorProps::WireWalkingExitToFalling' has a wrong offset!");
static_assert(offsetof(FGymWireWalkingAnimatorProps, WireWalkingBalance) == 0x000004, "Member 'FGymWireWalkingAnimatorProps::WireWalkingBalance' has a wrong offset!");
static_assert(offsetof(FGymWireWalkingAnimatorProps, WireWalkingCurrentSpeed) == 0x000008, "Member 'FGymWireWalkingAnimatorProps::WireWalkingCurrentSpeed' has a wrong offset!");

// ScriptStruct GYMGAME.GYmZiplineAnimatorProps
// 0x0008 (0x0008 - 0x0000)
struct FGYmZiplineAnimatorProps final
{
public:
	bool                                          bZiplineEnabled;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VerticalAngle;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGYmZiplineAnimatorProps) == 0x000004, "Wrong alignment on FGYmZiplineAnimatorProps");
static_assert(sizeof(FGYmZiplineAnimatorProps) == 0x000008, "Wrong size on FGYmZiplineAnimatorProps");
static_assert(offsetof(FGYmZiplineAnimatorProps, bZiplineEnabled) == 0x000000, "Member 'FGYmZiplineAnimatorProps::bZiplineEnabled' has a wrong offset!");
static_assert(offsetof(FGYmZiplineAnimatorProps, VerticalAngle) == 0x000004, "Member 'FGYmZiplineAnimatorProps::VerticalAngle' has a wrong offset!");

// ScriptStruct GYMGAME.GymZoomInOutCameraModifierSettings
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x04) FGymZoomInOutCameraModifierSettings final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymZoomInOutCameraModifierSettings) == 0x000004, "Wrong alignment on FGymZoomInOutCameraModifierSettings");
static_assert(sizeof(FGymZoomInOutCameraModifierSettings) == 0x000018, "Wrong size on FGymZoomInOutCameraModifierSettings");

// ScriptStruct GYMGAME.GymZoomInOutCameraModifierProps
// 0x0024 (0x0024 - 0x0000)
struct alignas(0x04) FGymZoomInOutCameraModifierProps final
{
public:
	uint8                                         Pad_0[0x24];                                       // 0x0000(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGymZoomInOutCameraModifierProps) == 0x000004, "Wrong alignment on FGymZoomInOutCameraModifierProps");
static_assert(sizeof(FGymZoomInOutCameraModifierProps) == 0x000024, "Wrong size on FGymZoomInOutCameraModifierProps");

}

