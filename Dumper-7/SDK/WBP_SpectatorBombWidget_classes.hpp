#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_SpectatorBombWidget

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GYMGAME_structs.hpp"
#include "GYMGAME_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_SpectatorBombWidget.WBP_SpectatorBombWidget_C
// 0x00C0 (0x0400 - 0x0340)
class UWBP_SpectatorBombWidget_C final : public UGymGuiSpectatorRuleWidgetBomb
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0340(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       UntaggedFlamesAnim;                                // 0x0348(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       TaggedFlamesAnim;                                  // 0x0350(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       ShowStatusPanel;                                   // 0x0358(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UTextBlock*                             BombText;                                          // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 CheckpointBrushBG;                                 // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       RoundText;                                         // 0x0370(0x0008)(ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             RuleStatusText;                                    // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 TaggedFlames;                                      // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 TimerBrushBG;                                      // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Vignette;                                          // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_RoyaleQualified_C*                 WBP_RoyaleQualified;                               // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class AGymGameState*                          GameState;                                         // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	EGymRulesState                                LastRuleStatus;                                    // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A9[0x7];                                      // 0x03A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               VignetteDynamicMaterial;                           // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDensity;                                        // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BC[0x4];                                      // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CurrentOpacity;                                    // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           GamePanel;                                         // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        TargetOpacity;                                     // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TagState;                                          // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D9[0x7];                                      // 0x03D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FadeSpeed;                                         // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LastTickTagState;                                  // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E9[0x7];                                      // 0x03E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymBombModeReplicatedData*             RuleData;                                          // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UGymParticipantRepDataBomb*             ParticipantData;                                   // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void Construct();
	void ExecuteUbergraph_WBP_SpectatorBombWidget(int32 EntryPoint);
	class FText Get_RoundText_Text();
	class FText GetBombCounterText();
	void GetGameState(class AGymGameState** State);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void TickParticipantAndRule();
	void TickTagState();
	void TickUI();
	void TickVignette(double DeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_SpectatorBombWidget_C">();
	}
	static class UWBP_SpectatorBombWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_SpectatorBombWidget_C>();
	}
};
static_assert(alignof(UWBP_SpectatorBombWidget_C) == 0x000008, "Wrong alignment on UWBP_SpectatorBombWidget_C");
static_assert(sizeof(UWBP_SpectatorBombWidget_C) == 0x000400, "Wrong size on UWBP_SpectatorBombWidget_C");
static_assert(offsetof(UWBP_SpectatorBombWidget_C, UberGraphFrame) == 0x000340, "Member 'UWBP_SpectatorBombWidget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorBombWidget_C, UntaggedFlamesAnim) == 0x000348, "Member 'UWBP_SpectatorBombWidget_C::UntaggedFlamesAnim' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorBombWidget_C, TaggedFlamesAnim) == 0x000350, "Member 'UWBP_SpectatorBombWidget_C::TaggedFlamesAnim' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorBombWidget_C, ShowStatusPanel) == 0x000358, "Member 'UWBP_SpectatorBombWidget_C::ShowStatusPanel' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorBombWidget_C, BombText) == 0x000360, "Member 'UWBP_SpectatorBombWidget_C::BombText' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorBombWidget_C, CheckpointBrushBG) == 0x000368, "Member 'UWBP_SpectatorBombWidget_C::CheckpointBrushBG' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorBombWidget_C, RoundText) == 0x000370, "Member 'UWBP_SpectatorBombWidget_C::RoundText' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorBombWidget_C, RuleStatusText) == 0x000378, "Member 'UWBP_SpectatorBombWidget_C::RuleStatusText' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorBombWidget_C, TaggedFlames) == 0x000380, "Member 'UWBP_SpectatorBombWidget_C::TaggedFlames' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorBombWidget_C, TimerBrushBG) == 0x000388, "Member 'UWBP_SpectatorBombWidget_C::TimerBrushBG' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorBombWidget_C, Vignette) == 0x000390, "Member 'UWBP_SpectatorBombWidget_C::Vignette' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorBombWidget_C, WBP_RoyaleQualified) == 0x000398, "Member 'UWBP_SpectatorBombWidget_C::WBP_RoyaleQualified' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorBombWidget_C, GameState) == 0x0003A0, "Member 'UWBP_SpectatorBombWidget_C::GameState' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorBombWidget_C, LastRuleStatus) == 0x0003A8, "Member 'UWBP_SpectatorBombWidget_C::LastRuleStatus' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorBombWidget_C, VignetteDynamicMaterial) == 0x0003B0, "Member 'UWBP_SpectatorBombWidget_C::VignetteDynamicMaterial' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorBombWidget_C, MaxDensity) == 0x0003B8, "Member 'UWBP_SpectatorBombWidget_C::MaxDensity' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorBombWidget_C, CurrentOpacity) == 0x0003C0, "Member 'UWBP_SpectatorBombWidget_C::CurrentOpacity' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorBombWidget_C, GamePanel) == 0x0003C8, "Member 'UWBP_SpectatorBombWidget_C::GamePanel' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorBombWidget_C, TargetOpacity) == 0x0003D0, "Member 'UWBP_SpectatorBombWidget_C::TargetOpacity' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorBombWidget_C, TagState) == 0x0003D8, "Member 'UWBP_SpectatorBombWidget_C::TagState' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorBombWidget_C, FadeSpeed) == 0x0003E0, "Member 'UWBP_SpectatorBombWidget_C::FadeSpeed' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorBombWidget_C, LastTickTagState) == 0x0003E8, "Member 'UWBP_SpectatorBombWidget_C::LastTickTagState' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorBombWidget_C, RuleData) == 0x0003F0, "Member 'UWBP_SpectatorBombWidget_C::RuleData' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorBombWidget_C, ParticipantData) == 0x0003F8, "Member 'UWBP_SpectatorBombWidget_C::ParticipantData' has a wrong offset!");

}

