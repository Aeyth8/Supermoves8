#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CameraPreflow

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "GYMGAME_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CameraPreflow.BP_CameraPreflow_C
// 0x00B8 (0x0360 - 0x02A8)
class ABP_CameraPreflow_C final : public ACameraPreflow
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCameraComponent*                       Camera1;                                           // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm;                                         // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Actors;                                            // 0x02D0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<struct FTransform>                     CameraLocations;                                   // 0x02E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Should_Get_Next_Point;                             // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F1[0x7];                                      // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               StartRotation;                                     // 0x02F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               TargetRotation;                                    // 0x0310(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        CurrentTime;                                       // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InterpTime;                                        // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Curve;                                             // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Timer;                                             // 0x0340(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentLocationIndex;                              // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDirection;                                        // 0x034C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInPreraceSequence;                               // 0x034D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34E[0x2];                                      // 0x034E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymFadeWidget*                         FaderWidget;                                       // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          TransitionToFPState;                               // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_CameraPreflow(int32 EntryPoint);
	void FindNextLocation();
	void GenerateCameraLocations();
	void GetPreflowTime(double* PreflowTime);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void StartPreraceSequence();
	void TickCameraMovementFlythrough(double DeltaTime);
	void TickCameramovementPreraceState(double DeltaSeconds);
	bool TraceDist(const struct FVector& Start, const struct FVector& End, float* Out_Hit_Distance);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CameraPreflow_C">();
	}
	static class ABP_CameraPreflow_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CameraPreflow_C>();
	}
};
static_assert(alignof(ABP_CameraPreflow_C) == 0x000008, "Wrong alignment on ABP_CameraPreflow_C");
static_assert(sizeof(ABP_CameraPreflow_C) == 0x000360, "Wrong size on ABP_CameraPreflow_C");
static_assert(offsetof(ABP_CameraPreflow_C, UberGraphFrame) == 0x0002A8, "Member 'ABP_CameraPreflow_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CameraPreflow_C, Camera1) == 0x0002B0, "Member 'ABP_CameraPreflow_C::Camera1' has a wrong offset!");
static_assert(offsetof(ABP_CameraPreflow_C, SpringArm) == 0x0002B8, "Member 'ABP_CameraPreflow_C::SpringArm' has a wrong offset!");
static_assert(offsetof(ABP_CameraPreflow_C, DefaultSceneRoot) == 0x0002C0, "Member 'ABP_CameraPreflow_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_CameraPreflow_C, Camera) == 0x0002C8, "Member 'ABP_CameraPreflow_C::Camera' has a wrong offset!");
static_assert(offsetof(ABP_CameraPreflow_C, Actors) == 0x0002D0, "Member 'ABP_CameraPreflow_C::Actors' has a wrong offset!");
static_assert(offsetof(ABP_CameraPreflow_C, CameraLocations) == 0x0002E0, "Member 'ABP_CameraPreflow_C::CameraLocations' has a wrong offset!");
static_assert(offsetof(ABP_CameraPreflow_C, Should_Get_Next_Point) == 0x0002F0, "Member 'ABP_CameraPreflow_C::Should_Get_Next_Point' has a wrong offset!");
static_assert(offsetof(ABP_CameraPreflow_C, StartRotation) == 0x0002F8, "Member 'ABP_CameraPreflow_C::StartRotation' has a wrong offset!");
static_assert(offsetof(ABP_CameraPreflow_C, TargetRotation) == 0x000310, "Member 'ABP_CameraPreflow_C::TargetRotation' has a wrong offset!");
static_assert(offsetof(ABP_CameraPreflow_C, CurrentTime) == 0x000328, "Member 'ABP_CameraPreflow_C::CurrentTime' has a wrong offset!");
static_assert(offsetof(ABP_CameraPreflow_C, InterpTime) == 0x000330, "Member 'ABP_CameraPreflow_C::InterpTime' has a wrong offset!");
static_assert(offsetof(ABP_CameraPreflow_C, Curve) == 0x000338, "Member 'ABP_CameraPreflow_C::Curve' has a wrong offset!");
static_assert(offsetof(ABP_CameraPreflow_C, Timer) == 0x000340, "Member 'ABP_CameraPreflow_C::Timer' has a wrong offset!");
static_assert(offsetof(ABP_CameraPreflow_C, CurrentLocationIndex) == 0x000348, "Member 'ABP_CameraPreflow_C::CurrentLocationIndex' has a wrong offset!");
static_assert(offsetof(ABP_CameraPreflow_C, bDirection) == 0x00034C, "Member 'ABP_CameraPreflow_C::bDirection' has a wrong offset!");
static_assert(offsetof(ABP_CameraPreflow_C, IsInPreraceSequence) == 0x00034D, "Member 'ABP_CameraPreflow_C::IsInPreraceSequence' has a wrong offset!");
static_assert(offsetof(ABP_CameraPreflow_C, FaderWidget) == 0x000350, "Member 'ABP_CameraPreflow_C::FaderWidget' has a wrong offset!");
static_assert(offsetof(ABP_CameraPreflow_C, TransitionToFPState) == 0x000358, "Member 'ABP_CameraPreflow_C::TransitionToFPState' has a wrong offset!");

}

