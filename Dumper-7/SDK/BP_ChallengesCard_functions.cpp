#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ChallengesCard

#include "Basic.hpp"

#include "BP_ChallengesCard_classes.hpp"
#include "BP_ChallengesCard_parameters.hpp"


namespace SDK
{

// Function BP_ChallengesCard.BP_ChallengesCard_C.CalculateMultiProgress
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FGymChallengeTrackable>   Trackables                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   Progress                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Goal                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Complete                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ChallengesCard_C::CalculateMultiProgress(TArray<struct FGymChallengeTrackable>& Trackables, int32* Progress, int32* Goal, bool* Complete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengesCard_C", "CalculateMultiProgress");

	Params::BP_ChallengesCard_C_CalculateMultiProgress Parms{};

	Parms.Trackables = std::move(Trackables);

	UObject::ProcessEvent(Func, &Parms);

	Trackables = std::move(Parms.Trackables);

	if (Progress != nullptr)
		*Progress = Parms.Progress;

	if (Goal != nullptr)
		*Goal = Parms.Goal;

	if (Complete != nullptr)
		*Complete = Parms.Complete;
}


// Function BP_ChallengesCard.BP_ChallengesCard_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UBP_ChallengesCard_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengesCard_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChallengesCard.BP_ChallengesCard_C.ExecuteUbergraph_BP_ChallengesCard
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ChallengesCard_C::ExecuteUbergraph_BP_ChallengesCard(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengesCard_C", "ExecuteUbergraph_BP_ChallengesCard");

	Params::BP_ChallengesCard_C_ExecuteUbergraph_BP_ChallengesCard Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengesCard.BP_ChallengesCard_C.GetChallengeDisplayName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           InternalName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FText                             DisplayName                                            (Parm, OutParm)

void UBP_ChallengesCard_C::GetChallengeDisplayName(const class FString& InternalName, class FText* DisplayName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengesCard_C", "GetChallengeDisplayName");

	Params::BP_ChallengesCard_C_GetChallengeDisplayName Parms{};

	Parms.InternalName = std::move(InternalName);

	UObject::ProcessEvent(Func, &Parms);

	if (DisplayName != nullptr)
		*DisplayName = std::move(Parms.DisplayName);
}


// Function BP_ChallengesCard.BP_ChallengesCard_C.TrackableCompleted
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FGymChallengeTrackable           Trackable                                              (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    Complete                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ChallengesCard_C::TrackableCompleted(const struct FGymChallengeTrackable& Trackable, bool* Complete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengesCard_C", "TrackableCompleted");

	Params::BP_ChallengesCard_C_TrackableCompleted Parms{};

	Parms.Trackable = std::move(Trackable);

	UObject::ProcessEvent(Func, &Parms);

	if (Complete != nullptr)
		*Complete = Parms.Complete;
}

}

