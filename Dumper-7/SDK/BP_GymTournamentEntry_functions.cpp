#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GymTournamentEntry

#include "Basic.hpp"

#include "BP_GymTournamentEntry_classes.hpp"
#include "BP_GymTournamentEntry_parameters.hpp"


namespace SDK
{

// Function BP_GymTournamentEntry.BP_GymTournamentEntry_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UBP_GymTournamentEntry_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GymTournamentEntry_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GymTournamentEntry.BP_GymTournamentEntry_C.ExecuteUbergraph_BP_GymTournamentEntry
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GymTournamentEntry_C::ExecuteUbergraph_BP_GymTournamentEntry(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GymTournamentEntry_C", "ExecuteUbergraph_BP_GymTournamentEntry");

	Params::BP_GymTournamentEntry_C_ExecuteUbergraph_BP_GymTournamentEntry Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GymTournamentEntry.BP_GymTournamentEntry_C.GetThisLevelScore
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Score                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GymTournamentEntry_C::GetThisLevelScore(int32* Score)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GymTournamentEntry_C", "GetThisLevelScore");

	Params::BP_GymTournamentEntry_C_GetThisLevelScore Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Score != nullptr)
		*Score = Parms.Score;
}


// Function BP_GymTournamentEntry.BP_GymTournamentEntry_C.GetTotalScore
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Total_Score                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GymTournamentEntry_C::GetTotalScore(int32* Total_Score)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GymTournamentEntry_C", "GetTotalScore");

	Params::BP_GymTournamentEntry_C_GetTotalScore Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Total_Score != nullptr)
		*Total_Score = Parms.Total_Score;
}


// Function BP_GymTournamentEntry.BP_GymTournamentEntry_C.Hide
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_GymTournamentEntry_C::Hide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GymTournamentEntry_C", "Hide");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GymTournamentEntry.BP_GymTournamentEntry_C.PlayAnim
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_GymTournamentEntry_C::PlayAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GymTournamentEntry_C", "PlayAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GymTournamentEntry.BP_GymTournamentEntry_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GymTournamentEntry_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GymTournamentEntry_C", "PreConstruct");

	Params::BP_GymTournamentEntry_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GymTournamentEntry.BP_GymTournamentEntry_C.SetTextInSlot
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// int32                                   Slot_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GymTournamentEntry_C::SetTextInSlot(const class FText& Text, int32 Slot_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GymTournamentEntry_C", "SetTextInSlot");

	Params::BP_GymTournamentEntry_C_SetTextInSlot Parms{};

	Parms.Text = std::move(Text);
	Parms.Slot_0 = Slot_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GymTournamentEntry.BP_GymTournamentEntry_C.SetupRow
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_GymTournamentEntry_C::SetupRow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GymTournamentEntry_C", "SetupRow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GymTournamentEntry.BP_GymTournamentEntry_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GymTournamentEntry_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GymTournamentEntry_C", "Tick");

	Params::BP_GymTournamentEntry_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}

}

