#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GymMap

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UDS_SkyMode_structs.hpp"
#include "GYMGAME_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GymMap.BP_GymMap_C
// 0x0058 (0x0500 - 0x04A8)
class ABP_GymMap_C final : public AGymMap
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x04B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         TimeOfDayLerp_Value_2501D6FC430E98F6236DD1A0B61568D6; // 0x04B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TimeOfDayLerp__Direction_2501D6FC430E98F6236DD1A0B61568D6; // 0x04BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BD[0x3];                                      // 0x04BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TimeOfDayLerp;                                     // 0x04C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AUltra_Dynamic_Sky_C*                   SkyActor;                                          // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AUltra_Dynamic_Weather_C*               WeatherActor;                                      // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        LerpStartTime;                                     // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGymMapSkyData_C*                       MapSkySettings;                                    // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          InEditor;                                          // 0x04E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableWeather;                                    // 0x04E9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasPreparedSky;                                    // 0x04EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4EB[0x5];                                      // 0x04EB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnTimeSet;                                         // 0x04F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ExecuteUbergraph_BP_GymMap(int32 EntryPoint);
	float GetTime();
	class FName GetWeather();
	void GetWeatherFromName(class FName Name_0, class UUDS_Weather_Settings_C** Weather_0);
	void LoadMapSettings();
	void OnSetTime();
	void OnSetTimeImmediate();
	void OnSetWeather();
	void OnTimeSet__DelegateSignature(double Time);
	void PrepareSky();
	void ReceiveBeginPlay();
	void ReconstructSky();
	void SetupBasicControls();
	void SetupFog();
	void SetupMoon();
	void SetupSkyLight();
	void SetupSun();
	void SetupVolumetricClouds();
	void SetVolumetric(bool bVolumetric);
	void TimeOfDayLerp__FinishedFunc();
	void TimeOfDayLerp__UpdateFunc();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GymMap_C">();
	}
	static class ABP_GymMap_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GymMap_C>();
	}
};
static_assert(alignof(ABP_GymMap_C) == 0x000008, "Wrong alignment on ABP_GymMap_C");
static_assert(sizeof(ABP_GymMap_C) == 0x000500, "Wrong size on ABP_GymMap_C");
static_assert(offsetof(ABP_GymMap_C, UberGraphFrame) == 0x0004A8, "Member 'ABP_GymMap_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GymMap_C, DefaultSceneRoot) == 0x0004B0, "Member 'ABP_GymMap_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_GymMap_C, TimeOfDayLerp_Value_2501D6FC430E98F6236DD1A0B61568D6) == 0x0004B8, "Member 'ABP_GymMap_C::TimeOfDayLerp_Value_2501D6FC430E98F6236DD1A0B61568D6' has a wrong offset!");
static_assert(offsetof(ABP_GymMap_C, TimeOfDayLerp__Direction_2501D6FC430E98F6236DD1A0B61568D6) == 0x0004BC, "Member 'ABP_GymMap_C::TimeOfDayLerp__Direction_2501D6FC430E98F6236DD1A0B61568D6' has a wrong offset!");
static_assert(offsetof(ABP_GymMap_C, TimeOfDayLerp) == 0x0004C0, "Member 'ABP_GymMap_C::TimeOfDayLerp' has a wrong offset!");
static_assert(offsetof(ABP_GymMap_C, SkyActor) == 0x0004C8, "Member 'ABP_GymMap_C::SkyActor' has a wrong offset!");
static_assert(offsetof(ABP_GymMap_C, WeatherActor) == 0x0004D0, "Member 'ABP_GymMap_C::WeatherActor' has a wrong offset!");
static_assert(offsetof(ABP_GymMap_C, LerpStartTime) == 0x0004D8, "Member 'ABP_GymMap_C::LerpStartTime' has a wrong offset!");
static_assert(offsetof(ABP_GymMap_C, MapSkySettings) == 0x0004E0, "Member 'ABP_GymMap_C::MapSkySettings' has a wrong offset!");
static_assert(offsetof(ABP_GymMap_C, InEditor) == 0x0004E8, "Member 'ABP_GymMap_C::InEditor' has a wrong offset!");
static_assert(offsetof(ABP_GymMap_C, DisableWeather) == 0x0004E9, "Member 'ABP_GymMap_C::DisableWeather' has a wrong offset!");
static_assert(offsetof(ABP_GymMap_C, HasPreparedSky) == 0x0004EA, "Member 'ABP_GymMap_C::HasPreparedSky' has a wrong offset!");
static_assert(offsetof(ABP_GymMap_C, OnTimeSet) == 0x0004F0, "Member 'ABP_GymMap_C::OnTimeSet' has a wrong offset!");

}

