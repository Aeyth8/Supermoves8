#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RollDownSlope_ActorComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass RollDownSlope_ActorComponent.RollDownSlope_ActorComponent_C
// 0x0140 (0x01E0 - 0x00A0)
class URollDownSlope_ActorComponent_C final : public UActorComponent
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPhysical_Behavior_ActorComponent_C*    PhyscialBehaviorActorComponent;                    // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Owner;                                             // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        SlopeTraceDistance;                                // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SlopeTraceRadius;                                  // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CriticalSlopeAngleForRoll;                         // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RollPhaseOffset;                                   // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CriticalSpeedForRollTorque;                        // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxRollTorque;                                     // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TorqueRampUpTime;                                  // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RollSpeedForMaxStrength;                           // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RollMinStrengthMultiplier;                         // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RollMaxStrengthMultiplier;                         // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   PelvisTorquePart;                                  // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SpineTorquePart;                                   // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ChestTorquePart;                                   // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RollMinDampingMultiplier;                          // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RollMaxDampingMultiplier;                          // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SlopeFound;                                        // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SlopeNormal;                                       // 0x0138(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SlopeTangent;                                      // 0x0150(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SlopeDir;                                          // 0x0168(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SlopeAngle;                                        // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SmoothedRollSpeed;                                 // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PrevCenterOfMass;                                  // 0x0190(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFloatSpringState                      RollSpeedSpringState;                              // 0x01A8(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AppliedTorque;                                     // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRolling;                                         // 0x01C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C1[0x7];                                      // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RollRightPhase;                                    // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RollRightAmount;                                   // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowInfo;                                          // 0x01D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CalculateRollRightAmount(double* RollRightAmount_0);
	void CalculateRollRLPhase(double* Phase);
	void Get_Slope(const struct FVector& PelvisPosition, struct FVector* SlopePosition, struct FVector* SlopeNormal_0, bool* FoundSlope);
	void InitializeOwnerVars();
	void StartRollDownSlope();
	void StopRollDownSlope();
	void Update_Roll_Down_Slope();
	void UpdateRollDownSlopeForces();
	void UpdateRollDownSlopeStrengths();
	void UpdateSlopeInfo();
	void UpdateSmoothedRollSpeed();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"RollDownSlope_ActorComponent_C">();
	}
	static class URollDownSlope_ActorComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<URollDownSlope_ActorComponent_C>();
	}
};
static_assert(alignof(URollDownSlope_ActorComponent_C) == 0x000008, "Wrong alignment on URollDownSlope_ActorComponent_C");
static_assert(sizeof(URollDownSlope_ActorComponent_C) == 0x0001E0, "Wrong size on URollDownSlope_ActorComponent_C");
static_assert(offsetof(URollDownSlope_ActorComponent_C, Mesh) == 0x0000A0, "Member 'URollDownSlope_ActorComponent_C::Mesh' has a wrong offset!");
static_assert(offsetof(URollDownSlope_ActorComponent_C, PhyscialBehaviorActorComponent) == 0x0000A8, "Member 'URollDownSlope_ActorComponent_C::PhyscialBehaviorActorComponent' has a wrong offset!");
static_assert(offsetof(URollDownSlope_ActorComponent_C, Owner) == 0x0000B0, "Member 'URollDownSlope_ActorComponent_C::Owner' has a wrong offset!");
static_assert(offsetof(URollDownSlope_ActorComponent_C, SlopeTraceDistance) == 0x0000B8, "Member 'URollDownSlope_ActorComponent_C::SlopeTraceDistance' has a wrong offset!");
static_assert(offsetof(URollDownSlope_ActorComponent_C, SlopeTraceRadius) == 0x0000C0, "Member 'URollDownSlope_ActorComponent_C::SlopeTraceRadius' has a wrong offset!");
static_assert(offsetof(URollDownSlope_ActorComponent_C, CriticalSlopeAngleForRoll) == 0x0000C8, "Member 'URollDownSlope_ActorComponent_C::CriticalSlopeAngleForRoll' has a wrong offset!");
static_assert(offsetof(URollDownSlope_ActorComponent_C, RollPhaseOffset) == 0x0000D0, "Member 'URollDownSlope_ActorComponent_C::RollPhaseOffset' has a wrong offset!");
static_assert(offsetof(URollDownSlope_ActorComponent_C, CriticalSpeedForRollTorque) == 0x0000D8, "Member 'URollDownSlope_ActorComponent_C::CriticalSpeedForRollTorque' has a wrong offset!");
static_assert(offsetof(URollDownSlope_ActorComponent_C, MaxRollTorque) == 0x0000E0, "Member 'URollDownSlope_ActorComponent_C::MaxRollTorque' has a wrong offset!");
static_assert(offsetof(URollDownSlope_ActorComponent_C, TorqueRampUpTime) == 0x0000E8, "Member 'URollDownSlope_ActorComponent_C::TorqueRampUpTime' has a wrong offset!");
static_assert(offsetof(URollDownSlope_ActorComponent_C, RollSpeedForMaxStrength) == 0x0000F0, "Member 'URollDownSlope_ActorComponent_C::RollSpeedForMaxStrength' has a wrong offset!");
static_assert(offsetof(URollDownSlope_ActorComponent_C, RollMinStrengthMultiplier) == 0x0000F8, "Member 'URollDownSlope_ActorComponent_C::RollMinStrengthMultiplier' has a wrong offset!");
static_assert(offsetof(URollDownSlope_ActorComponent_C, RollMaxStrengthMultiplier) == 0x000100, "Member 'URollDownSlope_ActorComponent_C::RollMaxStrengthMultiplier' has a wrong offset!");
static_assert(offsetof(URollDownSlope_ActorComponent_C, PelvisTorquePart) == 0x000108, "Member 'URollDownSlope_ActorComponent_C::PelvisTorquePart' has a wrong offset!");
static_assert(offsetof(URollDownSlope_ActorComponent_C, SpineTorquePart) == 0x000110, "Member 'URollDownSlope_ActorComponent_C::SpineTorquePart' has a wrong offset!");
static_assert(offsetof(URollDownSlope_ActorComponent_C, ChestTorquePart) == 0x000118, "Member 'URollDownSlope_ActorComponent_C::ChestTorquePart' has a wrong offset!");
static_assert(offsetof(URollDownSlope_ActorComponent_C, RollMinDampingMultiplier) == 0x000120, "Member 'URollDownSlope_ActorComponent_C::RollMinDampingMultiplier' has a wrong offset!");
static_assert(offsetof(URollDownSlope_ActorComponent_C, RollMaxDampingMultiplier) == 0x000128, "Member 'URollDownSlope_ActorComponent_C::RollMaxDampingMultiplier' has a wrong offset!");
static_assert(offsetof(URollDownSlope_ActorComponent_C, SlopeFound) == 0x000130, "Member 'URollDownSlope_ActorComponent_C::SlopeFound' has a wrong offset!");
static_assert(offsetof(URollDownSlope_ActorComponent_C, SlopeNormal) == 0x000138, "Member 'URollDownSlope_ActorComponent_C::SlopeNormal' has a wrong offset!");
static_assert(offsetof(URollDownSlope_ActorComponent_C, SlopeTangent) == 0x000150, "Member 'URollDownSlope_ActorComponent_C::SlopeTangent' has a wrong offset!");
static_assert(offsetof(URollDownSlope_ActorComponent_C, SlopeDir) == 0x000168, "Member 'URollDownSlope_ActorComponent_C::SlopeDir' has a wrong offset!");
static_assert(offsetof(URollDownSlope_ActorComponent_C, SlopeAngle) == 0x000180, "Member 'URollDownSlope_ActorComponent_C::SlopeAngle' has a wrong offset!");
static_assert(offsetof(URollDownSlope_ActorComponent_C, SmoothedRollSpeed) == 0x000188, "Member 'URollDownSlope_ActorComponent_C::SmoothedRollSpeed' has a wrong offset!");
static_assert(offsetof(URollDownSlope_ActorComponent_C, PrevCenterOfMass) == 0x000190, "Member 'URollDownSlope_ActorComponent_C::PrevCenterOfMass' has a wrong offset!");
static_assert(offsetof(URollDownSlope_ActorComponent_C, RollSpeedSpringState) == 0x0001A8, "Member 'URollDownSlope_ActorComponent_C::RollSpeedSpringState' has a wrong offset!");
static_assert(offsetof(URollDownSlope_ActorComponent_C, AppliedTorque) == 0x0001B8, "Member 'URollDownSlope_ActorComponent_C::AppliedTorque' has a wrong offset!");
static_assert(offsetof(URollDownSlope_ActorComponent_C, IsRolling) == 0x0001C0, "Member 'URollDownSlope_ActorComponent_C::IsRolling' has a wrong offset!");
static_assert(offsetof(URollDownSlope_ActorComponent_C, RollRightPhase) == 0x0001C8, "Member 'URollDownSlope_ActorComponent_C::RollRightPhase' has a wrong offset!");
static_assert(offsetof(URollDownSlope_ActorComponent_C, RollRightAmount) == 0x0001D0, "Member 'URollDownSlope_ActorComponent_C::RollRightAmount' has a wrong offset!");
static_assert(offsetof(URollDownSlope_ActorComponent_C, ShowInfo) == 0x0001D8, "Member 'URollDownSlope_ActorComponent_C::ShowInfo' has a wrong offset!");

}

