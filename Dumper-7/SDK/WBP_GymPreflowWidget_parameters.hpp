#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_GymPreflowWidget

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "GYMGAME_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_GymPreflowWidget.WBP_GymPreflowWidget_C.ExecuteUbergraph_WBP_GymPreflowWidget
// 0x0044 (0x0044 - 0x0000)
struct WBP_GymPreflowWidget_C_ExecuteUbergraph_WBP_GymPreflowWidget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOpen_ReturnValue;                       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0008(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_GymPreflowWidget_C_ExecuteUbergraph_WBP_GymPreflowWidget) == 0x000004, "Wrong alignment on WBP_GymPreflowWidget_C_ExecuteUbergraph_WBP_GymPreflowWidget");
static_assert(sizeof(WBP_GymPreflowWidget_C_ExecuteUbergraph_WBP_GymPreflowWidget) == 0x000044, "Wrong size on WBP_GymPreflowWidget_C_ExecuteUbergraph_WBP_GymPreflowWidget");
static_assert(offsetof(WBP_GymPreflowWidget_C_ExecuteUbergraph_WBP_GymPreflowWidget, EntryPoint) == 0x000000, "Member 'WBP_GymPreflowWidget_C_ExecuteUbergraph_WBP_GymPreflowWidget::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_ExecuteUbergraph_WBP_GymPreflowWidget, CallFunc_IsOpen_ReturnValue) == 0x000004, "Member 'WBP_GymPreflowWidget_C_ExecuteUbergraph_WBP_GymPreflowWidget::CallFunc_IsOpen_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_ExecuteUbergraph_WBP_GymPreflowWidget, K2Node_Event_MyGeometry) == 0x000008, "Member 'WBP_GymPreflowWidget_C_ExecuteUbergraph_WBP_GymPreflowWidget::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_ExecuteUbergraph_WBP_GymPreflowWidget, K2Node_Event_InDeltaTime) == 0x000040, "Member 'WBP_GymPreflowWidget_C_ExecuteUbergraph_WBP_GymPreflowWidget::K2Node_Event_InDeltaTime' has a wrong offset!");

// Function WBP_GymPreflowWidget.WBP_GymPreflowWidget_C.SetupGamemode
// 0x0068 (0x0068 - 0x0000)
struct WBP_GymPreflowWidget_C_SetupGamemode final
{
public:
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGymGameState*                          K2Node_DynamicCast_AsGym_Game_State;               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuleDisplayInfo                       CallFunc_GetDataTableRowFromName_OutRow;           // 0x0020(0x0040)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_GymPreflowWidget_C_SetupGamemode) == 0x000008, "Wrong alignment on WBP_GymPreflowWidget_C_SetupGamemode");
static_assert(sizeof(WBP_GymPreflowWidget_C_SetupGamemode) == 0x000068, "Wrong size on WBP_GymPreflowWidget_C_SetupGamemode");
static_assert(offsetof(WBP_GymPreflowWidget_C_SetupGamemode, CallFunc_GetGameState_ReturnValue) == 0x000000, "Member 'WBP_GymPreflowWidget_C_SetupGamemode::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_SetupGamemode, K2Node_DynamicCast_AsGym_Game_State) == 0x000008, "Member 'WBP_GymPreflowWidget_C_SetupGamemode::K2Node_DynamicCast_AsGym_Game_State' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_SetupGamemode, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'WBP_GymPreflowWidget_C_SetupGamemode::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_SetupGamemode, CallFunc_Conv_StringToName_ReturnValue) == 0x000014, "Member 'WBP_GymPreflowWidget_C_SetupGamemode::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_SetupGamemode, CallFunc_GetDataTableRowFromName_OutRow) == 0x000020, "Member 'WBP_GymPreflowWidget_C_SetupGamemode::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_SetupGamemode, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000060, "Member 'WBP_GymPreflowWidget_C_SetupGamemode::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");

// Function WBP_GymPreflowWidget.WBP_GymPreflowWidget_C.SetupMapdata
// 0x0060 (0x0060 - 0x0000)
struct WBP_GymPreflowWidget_C_SetupMapdata final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGymGameInstance*                       K2Node_DynamicCast_AsGym_Game_Instance;            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetText_ReturnValue;                      // 0x0020(0x0018)()
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0040(0x0018)()
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_GymPreflowWidget_C_SetupMapdata) == 0x000008, "Wrong alignment on WBP_GymPreflowWidget_C_SetupMapdata");
static_assert(sizeof(WBP_GymPreflowWidget_C_SetupMapdata) == 0x000060, "Wrong size on WBP_GymPreflowWidget_C_SetupMapdata");
static_assert(offsetof(WBP_GymPreflowWidget_C_SetupMapdata, Temp_bool_Variable) == 0x000000, "Member 'WBP_GymPreflowWidget_C_SetupMapdata::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_SetupMapdata, Temp_byte_Variable) == 0x000001, "Member 'WBP_GymPreflowWidget_C_SetupMapdata::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_SetupMapdata, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_GymPreflowWidget_C_SetupMapdata::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_SetupMapdata, CallFunc_GetGameInstance_ReturnValue) == 0x000008, "Member 'WBP_GymPreflowWidget_C_SetupMapdata::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_SetupMapdata, K2Node_DynamicCast_AsGym_Game_Instance) == 0x000010, "Member 'WBP_GymPreflowWidget_C_SetupMapdata::K2Node_DynamicCast_AsGym_Game_Instance' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_SetupMapdata, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WBP_GymPreflowWidget_C_SetupMapdata::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_SetupMapdata, CallFunc_GetText_ReturnValue) == 0x000020, "Member 'WBP_GymPreflowWidget_C_SetupMapdata::CallFunc_GetText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_SetupMapdata, CallFunc_TextIsEmpty_ReturnValue) == 0x000038, "Member 'WBP_GymPreflowWidget_C_SetupMapdata::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_SetupMapdata, CallFunc_Conv_StringToText_ReturnValue) == 0x000040, "Member 'WBP_GymPreflowWidget_C_SetupMapdata::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_SetupMapdata, K2Node_Select_Default) == 0x000058, "Member 'WBP_GymPreflowWidget_C_SetupMapdata::K2Node_Select_Default' has a wrong offset!");

// Function WBP_GymPreflowWidget.WBP_GymPreflowWidget_C.Tick
// 0x003C (0x003C - 0x0000)
struct WBP_GymPreflowWidget_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_GymPreflowWidget_C_Tick) == 0x000004, "Wrong alignment on WBP_GymPreflowWidget_C_Tick");
static_assert(sizeof(WBP_GymPreflowWidget_C_Tick) == 0x00003C, "Wrong size on WBP_GymPreflowWidget_C_Tick");
static_assert(offsetof(WBP_GymPreflowWidget_C_Tick, MyGeometry) == 0x000000, "Member 'WBP_GymPreflowWidget_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_Tick, InDeltaTime) == 0x000038, "Member 'WBP_GymPreflowWidget_C_Tick::InDeltaTime' has a wrong offset!");

// Function WBP_GymPreflowWidget.WBP_GymPreflowWidget_C.UpdateSkipBoxVisibility
// 0x0040 (0x0040 - 0x0000)
struct WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGymGameState*                          K2Node_DynamicCast_AsGym_Game_State;               // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymRuleReplicatedData*                 CallFunc_GetBasicRuleData_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGymRulesState                                CallFunc_GetRuleState_ReturnValue;                 // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_ByteByte_ReturnValue;        // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RunningInPIE_ReturnValue;                 // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility) == 0x000008, "Wrong alignment on WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility");
static_assert(sizeof(WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility) == 0x000040, "Wrong size on WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility");
static_assert(offsetof(WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility, Temp_bool_Variable) == 0x000000, "Member 'WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility, Temp_byte_Variable) == 0x000001, "Member 'WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility, CallFunc_MakeLiteralByte_ReturnValue) == 0x000010, "Member 'WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility, K2Node_DynamicCast_AsGym_Game_State) == 0x000018, "Member 'WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility::K2Node_DynamicCast_AsGym_Game_State' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility, CallFunc_GetBasicRuleData_ReturnValue) == 0x000028, "Member 'WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility::CallFunc_GetBasicRuleData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000030, "Member 'WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility, CallFunc_IsValid_ReturnValue) == 0x000031, "Member 'WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility, CallFunc_GetRuleState_ReturnValue) == 0x000032, "Member 'WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility::CallFunc_GetRuleState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility, CallFunc_GreaterEqual_ByteByte_ReturnValue) == 0x000033, "Member 'WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility::CallFunc_GreaterEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility, CallFunc_RunningInPIE_ReturnValue) == 0x000034, "Member 'WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility::CallFunc_RunningInPIE_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00003C, "Member 'WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility, CallFunc_BooleanOR_ReturnValue) == 0x00003D, "Member 'WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility, CallFunc_BooleanAND_ReturnValue) == 0x00003E, "Member 'WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility, K2Node_Select_Default) == 0x00003F, "Member 'WBP_GymPreflowWidget_C_UpdateSkipBoxVisibility::K2Node_Select_Default' has a wrong offset!");

// Function WBP_GymPreflowWidget.WBP_GymPreflowWidget_C.UpdateText
// 0x0078 (0x0078 - 0x0000)
struct WBP_GymPreflowWidget_C_UpdateText final
{
public:
	class FText                                   Temp_text_Variable;                                // 0x0000(0x0018)()
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGymGameState*                          K2Node_DynamicCast_AsGym_Game_State;               // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_1;                              // 0x0038(0x0018)()
	class UGymRuleReplicatedData*                 CallFunc_GetBasicRuleData_ReturnValue;             // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGymRulesState                                CallFunc_GetRuleState_ReturnValue;                 // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_ByteByte_ReturnValue;                // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0060(0x0018)()
};
static_assert(alignof(WBP_GymPreflowWidget_C_UpdateText) == 0x000008, "Wrong alignment on WBP_GymPreflowWidget_C_UpdateText");
static_assert(sizeof(WBP_GymPreflowWidget_C_UpdateText) == 0x000078, "Wrong size on WBP_GymPreflowWidget_C_UpdateText");
static_assert(offsetof(WBP_GymPreflowWidget_C_UpdateText, Temp_text_Variable) == 0x000000, "Member 'WBP_GymPreflowWidget_C_UpdateText::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_UpdateText, CallFunc_MakeLiteralByte_ReturnValue) == 0x000018, "Member 'WBP_GymPreflowWidget_C_UpdateText::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_UpdateText, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000019, "Member 'WBP_GymPreflowWidget_C_UpdateText::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_UpdateText, CallFunc_GetGameState_ReturnValue) == 0x000020, "Member 'WBP_GymPreflowWidget_C_UpdateText::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_UpdateText, K2Node_DynamicCast_AsGym_Game_State) == 0x000028, "Member 'WBP_GymPreflowWidget_C_UpdateText::K2Node_DynamicCast_AsGym_Game_State' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_UpdateText, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'WBP_GymPreflowWidget_C_UpdateText::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_UpdateText, Temp_text_Variable_1) == 0x000038, "Member 'WBP_GymPreflowWidget_C_UpdateText::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_UpdateText, CallFunc_GetBasicRuleData_ReturnValue) == 0x000050, "Member 'WBP_GymPreflowWidget_C_UpdateText::CallFunc_GetBasicRuleData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_UpdateText, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'WBP_GymPreflowWidget_C_UpdateText::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_UpdateText, CallFunc_GetRuleState_ReturnValue) == 0x000059, "Member 'WBP_GymPreflowWidget_C_UpdateText::CallFunc_GetRuleState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_UpdateText, CallFunc_Less_ByteByte_ReturnValue) == 0x00005A, "Member 'WBP_GymPreflowWidget_C_UpdateText::CallFunc_Less_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_UpdateText, Temp_bool_Variable) == 0x00005B, "Member 'WBP_GymPreflowWidget_C_UpdateText::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_GymPreflowWidget_C_UpdateText, K2Node_Select_Default) == 0x000060, "Member 'WBP_GymPreflowWidget_C_UpdateText::K2Node_Select_Default' has a wrong offset!");

}

