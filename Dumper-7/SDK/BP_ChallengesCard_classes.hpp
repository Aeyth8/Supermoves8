#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ChallengesCard

#include "Basic.hpp"

#include "GYMGAME_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_ChallengesCard.BP_ChallengesCard_C
// 0x00C0 (0x0380 - 0x02C0)
class UBP_ChallengesCard_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       ChallengeCompleted;                                // 0x02C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UButton*                                ChallengeCard;                                     // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 CompletedIcon;                                     // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Description_CommonText;                            // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 HalftoneTexture;                                   // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 PaperTexture;                                      // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           ProgressBar;                                       // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       ProgressText;                                      // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       ProgressTitle;                                     // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       RewardAmount;                                      // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                RewardBorder;                                      // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FGymChallenge                          Challenge;                                         // 0x0320(0x0058)(Edit, BlueprintVisible, ExposeOnSpawn)
	class UGymChallengeLocalizationAsset*         Challenge_localization_data;                       // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void CalculateMultiProgress(TArray<struct FGymChallengeTrackable>& Trackables, int32* Progress, int32* Goal, bool* Complete);
	void Construct();
	void ExecuteUbergraph_BP_ChallengesCard(int32 EntryPoint);
	void GetChallengeDisplayName(const class FString& InternalName, class FText* DisplayName);
	void TrackableCompleted(const struct FGymChallengeTrackable& Trackable, bool* Complete);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ChallengesCard_C">();
	}
	static class UBP_ChallengesCard_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_ChallengesCard_C>();
	}
};
static_assert(alignof(UBP_ChallengesCard_C) == 0x000008, "Wrong alignment on UBP_ChallengesCard_C");
static_assert(sizeof(UBP_ChallengesCard_C) == 0x000380, "Wrong size on UBP_ChallengesCard_C");
static_assert(offsetof(UBP_ChallengesCard_C, UberGraphFrame) == 0x0002C0, "Member 'UBP_ChallengesCard_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_ChallengesCard_C, ChallengeCompleted) == 0x0002C8, "Member 'UBP_ChallengesCard_C::ChallengeCompleted' has a wrong offset!");
static_assert(offsetof(UBP_ChallengesCard_C, ChallengeCard) == 0x0002D0, "Member 'UBP_ChallengesCard_C::ChallengeCard' has a wrong offset!");
static_assert(offsetof(UBP_ChallengesCard_C, CompletedIcon) == 0x0002D8, "Member 'UBP_ChallengesCard_C::CompletedIcon' has a wrong offset!");
static_assert(offsetof(UBP_ChallengesCard_C, Description_CommonText) == 0x0002E0, "Member 'UBP_ChallengesCard_C::Description_CommonText' has a wrong offset!");
static_assert(offsetof(UBP_ChallengesCard_C, HalftoneTexture) == 0x0002E8, "Member 'UBP_ChallengesCard_C::HalftoneTexture' has a wrong offset!");
static_assert(offsetof(UBP_ChallengesCard_C, PaperTexture) == 0x0002F0, "Member 'UBP_ChallengesCard_C::PaperTexture' has a wrong offset!");
static_assert(offsetof(UBP_ChallengesCard_C, ProgressBar) == 0x0002F8, "Member 'UBP_ChallengesCard_C::ProgressBar' has a wrong offset!");
static_assert(offsetof(UBP_ChallengesCard_C, ProgressText) == 0x000300, "Member 'UBP_ChallengesCard_C::ProgressText' has a wrong offset!");
static_assert(offsetof(UBP_ChallengesCard_C, ProgressTitle) == 0x000308, "Member 'UBP_ChallengesCard_C::ProgressTitle' has a wrong offset!");
static_assert(offsetof(UBP_ChallengesCard_C, RewardAmount) == 0x000310, "Member 'UBP_ChallengesCard_C::RewardAmount' has a wrong offset!");
static_assert(offsetof(UBP_ChallengesCard_C, RewardBorder) == 0x000318, "Member 'UBP_ChallengesCard_C::RewardBorder' has a wrong offset!");
static_assert(offsetof(UBP_ChallengesCard_C, Challenge) == 0x000320, "Member 'UBP_ChallengesCard_C::Challenge' has a wrong offset!");
static_assert(offsetof(UBP_ChallengesCard_C, Challenge_localization_data) == 0x000378, "Member 'UBP_ChallengesCard_C::Challenge_localization_data' has a wrong offset!");

}

