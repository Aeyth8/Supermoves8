#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GymTournamentEntry

#include "Basic.hpp"

#include "RowData_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BP_GymTournamentEntry.BP_GymTournamentEntry_C.ExecuteUbergraph_BP_GymTournamentEntry
// 0x0044 (0x0044 - 0x0000)
struct BP_GymTournamentEntry_C_ExecuteUbergraph_BP_GymTournamentEntry final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0008(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GymTournamentEntry_C_ExecuteUbergraph_BP_GymTournamentEntry) == 0x000004, "Wrong alignment on BP_GymTournamentEntry_C_ExecuteUbergraph_BP_GymTournamentEntry");
static_assert(sizeof(BP_GymTournamentEntry_C_ExecuteUbergraph_BP_GymTournamentEntry) == 0x000044, "Wrong size on BP_GymTournamentEntry_C_ExecuteUbergraph_BP_GymTournamentEntry");
static_assert(offsetof(BP_GymTournamentEntry_C_ExecuteUbergraph_BP_GymTournamentEntry, EntryPoint) == 0x000000, "Member 'BP_GymTournamentEntry_C_ExecuteUbergraph_BP_GymTournamentEntry::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_GymTournamentEntry_C_ExecuteUbergraph_BP_GymTournamentEntry, K2Node_Event_IsDesignTime) == 0x000004, "Member 'BP_GymTournamentEntry_C_ExecuteUbergraph_BP_GymTournamentEntry::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_GymTournamentEntry_C_ExecuteUbergraph_BP_GymTournamentEntry, K2Node_Event_MyGeometry) == 0x000008, "Member 'BP_GymTournamentEntry_C_ExecuteUbergraph_BP_GymTournamentEntry::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_GymTournamentEntry_C_ExecuteUbergraph_BP_GymTournamentEntry, K2Node_Event_InDeltaTime) == 0x000040, "Member 'BP_GymTournamentEntry_C_ExecuteUbergraph_BP_GymTournamentEntry::K2Node_Event_InDeltaTime' has a wrong offset!");

// Function BP_GymTournamentEntry.BP_GymTournamentEntry_C.GetThisLevelScore
// 0x0004 (0x0004 - 0x0000)
struct BP_GymTournamentEntry_C_GetThisLevelScore final
{
public:
	int32                                         Score;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GymTournamentEntry_C_GetThisLevelScore) == 0x000004, "Wrong alignment on BP_GymTournamentEntry_C_GetThisLevelScore");
static_assert(sizeof(BP_GymTournamentEntry_C_GetThisLevelScore) == 0x000004, "Wrong size on BP_GymTournamentEntry_C_GetThisLevelScore");
static_assert(offsetof(BP_GymTournamentEntry_C_GetThisLevelScore, Score) == 0x000000, "Member 'BP_GymTournamentEntry_C_GetThisLevelScore::Score' has a wrong offset!");

// Function BP_GymTournamentEntry.BP_GymTournamentEntry_C.GetTotalScore
// 0x0004 (0x0004 - 0x0000)
struct BP_GymTournamentEntry_C_GetTotalScore final
{
public:
	int32                                         Total_Score;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GymTournamentEntry_C_GetTotalScore) == 0x000004, "Wrong alignment on BP_GymTournamentEntry_C_GetTotalScore");
static_assert(sizeof(BP_GymTournamentEntry_C_GetTotalScore) == 0x000004, "Wrong size on BP_GymTournamentEntry_C_GetTotalScore");
static_assert(offsetof(BP_GymTournamentEntry_C_GetTotalScore, Total_Score) == 0x000000, "Member 'BP_GymTournamentEntry_C_GetTotalScore::Total_Score' has a wrong offset!");

// Function BP_GymTournamentEntry.BP_GymTournamentEntry_C.PlayAnim
// 0x0008 (0x0008 - 0x0000)
struct BP_GymTournamentEntry_C_PlayAnim final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GymTournamentEntry_C_PlayAnim) == 0x000008, "Wrong alignment on BP_GymTournamentEntry_C_PlayAnim");
static_assert(sizeof(BP_GymTournamentEntry_C_PlayAnim) == 0x000008, "Wrong size on BP_GymTournamentEntry_C_PlayAnim");
static_assert(offsetof(BP_GymTournamentEntry_C_PlayAnim, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_GymTournamentEntry_C_PlayAnim::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_GymTournamentEntry.BP_GymTournamentEntry_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_GymTournamentEntry_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GymTournamentEntry_C_PreConstruct) == 0x000001, "Wrong alignment on BP_GymTournamentEntry_C_PreConstruct");
static_assert(sizeof(BP_GymTournamentEntry_C_PreConstruct) == 0x000001, "Wrong size on BP_GymTournamentEntry_C_PreConstruct");
static_assert(offsetof(BP_GymTournamentEntry_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_GymTournamentEntry_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_GymTournamentEntry.BP_GymTournamentEntry_C.SetTextInSlot
// 0x0038 (0x0038 - 0x0000)
struct BP_GymTournamentEntry_C_SetTextInSlot final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	int32                                         Slot_0;                                            // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_GetChildAt_ReturnValue;                   // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWBP_TournamentEntrySlot_C*             K2Node_DynamicCast_AsWBP_Tournament_Entry_Slot;    // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GymTournamentEntry_C_SetTextInSlot) == 0x000008, "Wrong alignment on BP_GymTournamentEntry_C_SetTextInSlot");
static_assert(sizeof(BP_GymTournamentEntry_C_SetTextInSlot) == 0x000038, "Wrong size on BP_GymTournamentEntry_C_SetTextInSlot");
static_assert(offsetof(BP_GymTournamentEntry_C_SetTextInSlot, Text) == 0x000000, "Member 'BP_GymTournamentEntry_C_SetTextInSlot::Text' has a wrong offset!");
static_assert(offsetof(BP_GymTournamentEntry_C_SetTextInSlot, Slot_0) == 0x000018, "Member 'BP_GymTournamentEntry_C_SetTextInSlot::Slot_0' has a wrong offset!");
static_assert(offsetof(BP_GymTournamentEntry_C_SetTextInSlot, CallFunc_GetChildAt_ReturnValue) == 0x000020, "Member 'BP_GymTournamentEntry_C_SetTextInSlot::CallFunc_GetChildAt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GymTournamentEntry_C_SetTextInSlot, K2Node_DynamicCast_AsWBP_Tournament_Entry_Slot) == 0x000028, "Member 'BP_GymTournamentEntry_C_SetTextInSlot::K2Node_DynamicCast_AsWBP_Tournament_Entry_Slot' has a wrong offset!");
static_assert(offsetof(BP_GymTournamentEntry_C_SetTextInSlot, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_GymTournamentEntry_C_SetTextInSlot::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_GymTournamentEntry.BP_GymTournamentEntry_C.SetupRow
// 0x0120 (0x0120 - 0x0000)
struct BP_GymTournamentEntry_C_SetupRow final
{
public:
	struct FRowData                               CurrentData;                                       // 0x0000(0x0040)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FRowData                               CurrentRowData;                                    // 0x0040(0x0040)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable;                              // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWBP_TournamentEntrySlot_C*             CallFunc_Create_ReturnValue;                       // 0x0088(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_GymPlayerState_C*                   K2Node_DynamicCast_AsBP_Gym_Player_State;          // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGridSlot*                              CallFunc_AddChildToGrid_ReturnValue;               // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             CallFunc_GetPlayerAvatar_ReturnValue;              // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default;                             // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRowData                               CallFunc_Array_Get_Item;                           // 0x00D0(0x0040)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetColumnFill_Coefficient_ImplicitCast;   // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GymTournamentEntry_C_SetupRow) == 0x000008, "Wrong alignment on BP_GymTournamentEntry_C_SetupRow");
static_assert(sizeof(BP_GymTournamentEntry_C_SetupRow) == 0x000120, "Wrong size on BP_GymTournamentEntry_C_SetupRow");
static_assert(offsetof(BP_GymTournamentEntry_C_SetupRow, CurrentData) == 0x000000, "Member 'BP_GymTournamentEntry_C_SetupRow::CurrentData' has a wrong offset!");
static_assert(offsetof(BP_GymTournamentEntry_C_SetupRow, CurrentRowData) == 0x000040, "Member 'BP_GymTournamentEntry_C_SetupRow::CurrentRowData' has a wrong offset!");
static_assert(offsetof(BP_GymTournamentEntry_C_SetupRow, Temp_object_Variable) == 0x000080, "Member 'BP_GymTournamentEntry_C_SetupRow::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_GymTournamentEntry_C_SetupRow, CallFunc_Create_ReturnValue) == 0x000088, "Member 'BP_GymTournamentEntry_C_SetupRow::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GymTournamentEntry_C_SetupRow, Temp_int_Array_Index_Variable) == 0x000090, "Member 'BP_GymTournamentEntry_C_SetupRow::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_GymTournamentEntry_C_SetupRow, Temp_int_Loop_Counter_Variable) == 0x000094, "Member 'BP_GymTournamentEntry_C_SetupRow::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_GymTournamentEntry_C_SetupRow, Temp_bool_Variable) == 0x000098, "Member 'BP_GymTournamentEntry_C_SetupRow::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GymTournamentEntry_C_SetupRow, CallFunc_Add_IntInt_ReturnValue) == 0x00009C, "Member 'BP_GymTournamentEntry_C_SetupRow::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GymTournamentEntry_C_SetupRow, K2Node_DynamicCast_AsBP_Gym_Player_State) == 0x0000A0, "Member 'BP_GymTournamentEntry_C_SetupRow::K2Node_DynamicCast_AsBP_Gym_Player_State' has a wrong offset!");
static_assert(offsetof(BP_GymTournamentEntry_C_SetupRow, K2Node_DynamicCast_bSuccess) == 0x0000A8, "Member 'BP_GymTournamentEntry_C_SetupRow::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_GymTournamentEntry_C_SetupRow, CallFunc_AddChildToGrid_ReturnValue) == 0x0000B0, "Member 'BP_GymTournamentEntry_C_SetupRow::CallFunc_AddChildToGrid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GymTournamentEntry_C_SetupRow, CallFunc_GetPlayerAvatar_ReturnValue) == 0x0000B8, "Member 'BP_GymTournamentEntry_C_SetupRow::CallFunc_GetPlayerAvatar_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GymTournamentEntry_C_SetupRow, CallFunc_IsValid_ReturnValue) == 0x0000C0, "Member 'BP_GymTournamentEntry_C_SetupRow::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GymTournamentEntry_C_SetupRow, K2Node_Select_Default) == 0x0000C8, "Member 'BP_GymTournamentEntry_C_SetupRow::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_GymTournamentEntry_C_SetupRow, CallFunc_Array_Get_Item) == 0x0000D0, "Member 'BP_GymTournamentEntry_C_SetupRow::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_GymTournamentEntry_C_SetupRow, CallFunc_Array_Length_ReturnValue) == 0x000110, "Member 'BP_GymTournamentEntry_C_SetupRow::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GymTournamentEntry_C_SetupRow, CallFunc_Less_IntInt_ReturnValue) == 0x000114, "Member 'BP_GymTournamentEntry_C_SetupRow::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GymTournamentEntry_C_SetupRow, CallFunc_SetColumnFill_Coefficient_ImplicitCast) == 0x000118, "Member 'BP_GymTournamentEntry_C_SetupRow::CallFunc_SetColumnFill_Coefficient_ImplicitCast' has a wrong offset!");

// Function BP_GymTournamentEntry.BP_GymTournamentEntry_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_GymTournamentEntry_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GymTournamentEntry_C_Tick) == 0x000004, "Wrong alignment on BP_GymTournamentEntry_C_Tick");
static_assert(sizeof(BP_GymTournamentEntry_C_Tick) == 0x00003C, "Wrong size on BP_GymTournamentEntry_C_Tick");
static_assert(offsetof(BP_GymTournamentEntry_C_Tick, MyGeometry) == 0x000000, "Member 'BP_GymTournamentEntry_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_GymTournamentEntry_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_GymTournamentEntry_C_Tick::InDeltaTime' has a wrong offset!");

}

