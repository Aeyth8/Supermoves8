#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ReportWidget

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function BP_ReportWidget.BP_ReportWidget_C.CustomEvent
// 0x0001 (0x0001 - 0x0000)
struct BP_ReportWidget_C_CustomEvent final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ReportWidget_C_CustomEvent) == 0x000001, "Wrong alignment on BP_ReportWidget_C_CustomEvent");
static_assert(sizeof(BP_ReportWidget_C_CustomEvent) == 0x000001, "Wrong size on BP_ReportWidget_C_CustomEvent");
static_assert(offsetof(BP_ReportWidget_C_CustomEvent, Success) == 0x000000, "Member 'BP_ReportWidget_C_CustomEvent::Success' has a wrong offset!");

// Function BP_ReportWidget.BP_ReportWidget_C.ExecuteUbergraph_BP_ReportWidget
// 0x01C0 (0x01C0 - 0x0000)
struct BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymCloudApi*                           CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key;                       // 0x0010(0x0018)(HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue_1;       // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_1;       // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_CustomEvent_MapId;                          // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetText_ReturnValue;                      // 0x0070(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Success;                        // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x00A8(0x0018)()
	class AGymPlayerController*                   K2Node_DynamicCast_AsGym_Player_Controller;        // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_1;          // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_3;                     // 0x00E0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_4;                     // 0x00F8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_5;                     // 0x0110(0x0018)(HasGetValueTypeHash)
	TDelegate<void(bool Success)>                 K2Node_CreateDelegate_OutputDelegate;              // 0x0128(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOpenVisibleAndHasPriority_ReturnValue;  // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOpenVisibleAndHasPriority_ReturnValue_1; // 0x013A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOpenVisibleAndHasPriority_ReturnValue_2; // 0x013B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOpenVisibleAndHasPriority_ReturnValue_3; // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOpenVisibleAndHasPriority_ReturnValue_4; // 0x013D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x013E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x013F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_2;    // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetText_ReturnValue_1;                    // 0x0148(0x0018)()
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                K2Node_Select_Default;                             // 0x0168(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_3;    // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOpenVisibleAndHasPriority_ReturnValue_5; // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_172[0x6];                                      // 0x0172(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_1;                     // 0x0178(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_4;    // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_2;                     // 0x0198(0x0018)(HasGetValueTypeHash)
	class UWidget*                                CallFunc_GetCurrentFocusedWidget_ReturnValue;      // 0x01B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget) == 0x000008, "Wrong alignment on BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget");
static_assert(sizeof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget) == 0x0001C0, "Wrong size on BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, EntryPoint) == 0x000000, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000008, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, K2Node_InputActionEvent_Key) == 0x000010, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::K2Node_InputActionEvent_Key' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000028, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, CallFunc_PlayAnimationForward_ReturnValue) == 0x000030, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, CallFunc_PlayAnimation_ReturnValue) == 0x000038, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, CallFunc_PlayAnimationReverse_ReturnValue_1) == 0x000040, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::CallFunc_PlayAnimationReverse_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, CallFunc_PlayAnimationForward_ReturnValue_1) == 0x000048, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::CallFunc_PlayAnimationForward_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, CallFunc_PlayAnimation_ReturnValue_1) == 0x000050, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, K2Node_CustomEvent_MapId) == 0x000058, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::K2Node_CustomEvent_MapId' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, Temp_bool_Variable) == 0x000068, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, CallFunc_GetText_ReturnValue) == 0x000070, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::CallFunc_GetText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, CallFunc_Conv_TextToString_ReturnValue) == 0x000088, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, K2Node_CustomEvent_Success) == 0x000098, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::K2Node_CustomEvent_Success' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, CallFunc_GetOwningPlayer_ReturnValue) == 0x0000A0, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, CallFunc_MakeLiteralText_ReturnValue) == 0x0000A8, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, K2Node_DynamicCast_AsGym_Player_Controller) == 0x0000C0, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::K2Node_DynamicCast_AsGym_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, K2Node_DynamicCast_bSuccess) == 0x0000C8, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, CallFunc_Conv_TextToString_ReturnValue_1) == 0x0000D0, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::CallFunc_Conv_TextToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, K2Node_InputActionEvent_Key_3) == 0x0000E0, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::K2Node_InputActionEvent_Key_3' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, K2Node_InputActionEvent_Key_4) == 0x0000F8, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::K2Node_InputActionEvent_Key_4' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, K2Node_InputActionEvent_Key_5) == 0x000110, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::K2Node_InputActionEvent_Key_5' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, K2Node_CreateDelegate_OutputDelegate) == 0x000128, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000138, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, CallFunc_IsOpenVisibleAndHasPriority_ReturnValue) == 0x000139, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::CallFunc_IsOpenVisibleAndHasPriority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, CallFunc_IsOpenVisibleAndHasPriority_ReturnValue_1) == 0x00013A, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::CallFunc_IsOpenVisibleAndHasPriority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, CallFunc_IsOpenVisibleAndHasPriority_ReturnValue_2) == 0x00013B, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::CallFunc_IsOpenVisibleAndHasPriority_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, CallFunc_IsOpenVisibleAndHasPriority_ReturnValue_3) == 0x00013C, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::CallFunc_IsOpenVisibleAndHasPriority_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, CallFunc_IsOpenVisibleAndHasPriority_ReturnValue_4) == 0x00013D, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::CallFunc_IsOpenVisibleAndHasPriority_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x00013E, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, CallFunc_BooleanOR_ReturnValue) == 0x00013F, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, CallFunc_EqualEqual_ObjectObject_ReturnValue_2) == 0x000140, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::CallFunc_EqualEqual_ObjectObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, CallFunc_GetText_ReturnValue_1) == 0x000148, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::CallFunc_GetText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, CallFunc_TextIsEmpty_ReturnValue) == 0x000160, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, K2Node_Select_Default) == 0x000168, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, CallFunc_EqualEqual_ObjectObject_ReturnValue_3) == 0x000170, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::CallFunc_EqualEqual_ObjectObject_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, CallFunc_IsOpenVisibleAndHasPriority_ReturnValue_5) == 0x000171, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::CallFunc_IsOpenVisibleAndHasPriority_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, K2Node_InputActionEvent_Key_1) == 0x000178, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::K2Node_InputActionEvent_Key_1' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, CallFunc_EqualEqual_ObjectObject_ReturnValue_4) == 0x000190, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::CallFunc_EqualEqual_ObjectObject_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, K2Node_InputActionEvent_Key_2) == 0x000198, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::K2Node_InputActionEvent_Key_2' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, CallFunc_GetCurrentFocusedWidget_ReturnValue) == 0x0001B0, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::CallFunc_GetCurrentFocusedWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x0001B8, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget, CallFunc_IsValid_ReturnValue) == 0x0001B9, "Member 'BP_ReportWidget_C_ExecuteUbergraph_BP_ReportWidget::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_ReportWidget.BP_ReportWidget_C.GetVisibility_0
// 0x0001 (0x0001 - 0x0000)
struct BP_ReportWidget_C_GetVisibility_0 final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ReportWidget_C_GetVisibility_0) == 0x000001, "Wrong alignment on BP_ReportWidget_C_GetVisibility_0");
static_assert(sizeof(BP_ReportWidget_C_GetVisibility_0) == 0x000001, "Wrong size on BP_ReportWidget_C_GetVisibility_0");
static_assert(offsetof(BP_ReportWidget_C_GetVisibility_0, ReturnValue) == 0x000000, "Member 'BP_ReportWidget_C_GetVisibility_0::ReturnValue' has a wrong offset!");

// Function BP_ReportWidget.BP_ReportWidget_C.InpActEvt_UIGamepadCancel_K2Node_InputActionEvent_1
// 0x0018 (0x0018 - 0x0000)
struct BP_ReportWidget_C_InpActEvt_UIGamepadCancel_K2Node_InputActionEvent_1 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_ReportWidget_C_InpActEvt_UIGamepadCancel_K2Node_InputActionEvent_1) == 0x000008, "Wrong alignment on BP_ReportWidget_C_InpActEvt_UIGamepadCancel_K2Node_InputActionEvent_1");
static_assert(sizeof(BP_ReportWidget_C_InpActEvt_UIGamepadCancel_K2Node_InputActionEvent_1) == 0x000018, "Wrong size on BP_ReportWidget_C_InpActEvt_UIGamepadCancel_K2Node_InputActionEvent_1");
static_assert(offsetof(BP_ReportWidget_C_InpActEvt_UIGamepadCancel_K2Node_InputActionEvent_1, Key) == 0x000000, "Member 'BP_ReportWidget_C_InpActEvt_UIGamepadCancel_K2Node_InputActionEvent_1::Key' has a wrong offset!");

// Function BP_ReportWidget.BP_ReportWidget_C.InpActEvt_UIGamepadDown_K2Node_InputActionEvent_4
// 0x0018 (0x0018 - 0x0000)
struct BP_ReportWidget_C_InpActEvt_UIGamepadDown_K2Node_InputActionEvent_4 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_ReportWidget_C_InpActEvt_UIGamepadDown_K2Node_InputActionEvent_4) == 0x000008, "Wrong alignment on BP_ReportWidget_C_InpActEvt_UIGamepadDown_K2Node_InputActionEvent_4");
static_assert(sizeof(BP_ReportWidget_C_InpActEvt_UIGamepadDown_K2Node_InputActionEvent_4) == 0x000018, "Wrong size on BP_ReportWidget_C_InpActEvt_UIGamepadDown_K2Node_InputActionEvent_4");
static_assert(offsetof(BP_ReportWidget_C_InpActEvt_UIGamepadDown_K2Node_InputActionEvent_4, Key) == 0x000000, "Member 'BP_ReportWidget_C_InpActEvt_UIGamepadDown_K2Node_InputActionEvent_4::Key' has a wrong offset!");

// Function BP_ReportWidget.BP_ReportWidget_C.InpActEvt_UIGamepadInteract_K2Node_InputActionEvent_2
// 0x0018 (0x0018 - 0x0000)
struct BP_ReportWidget_C_InpActEvt_UIGamepadInteract_K2Node_InputActionEvent_2 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_ReportWidget_C_InpActEvt_UIGamepadInteract_K2Node_InputActionEvent_2) == 0x000008, "Wrong alignment on BP_ReportWidget_C_InpActEvt_UIGamepadInteract_K2Node_InputActionEvent_2");
static_assert(sizeof(BP_ReportWidget_C_InpActEvt_UIGamepadInteract_K2Node_InputActionEvent_2) == 0x000018, "Wrong size on BP_ReportWidget_C_InpActEvt_UIGamepadInteract_K2Node_InputActionEvent_2");
static_assert(offsetof(BP_ReportWidget_C_InpActEvt_UIGamepadInteract_K2Node_InputActionEvent_2, Key) == 0x000000, "Member 'BP_ReportWidget_C_InpActEvt_UIGamepadInteract_K2Node_InputActionEvent_2::Key' has a wrong offset!");

// Function BP_ReportWidget.BP_ReportWidget_C.InpActEvt_UIGamepadLeft_K2Node_InputActionEvent_0
// 0x0018 (0x0018 - 0x0000)
struct BP_ReportWidget_C_InpActEvt_UIGamepadLeft_K2Node_InputActionEvent_0 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_ReportWidget_C_InpActEvt_UIGamepadLeft_K2Node_InputActionEvent_0) == 0x000008, "Wrong alignment on BP_ReportWidget_C_InpActEvt_UIGamepadLeft_K2Node_InputActionEvent_0");
static_assert(sizeof(BP_ReportWidget_C_InpActEvt_UIGamepadLeft_K2Node_InputActionEvent_0) == 0x000018, "Wrong size on BP_ReportWidget_C_InpActEvt_UIGamepadLeft_K2Node_InputActionEvent_0");
static_assert(offsetof(BP_ReportWidget_C_InpActEvt_UIGamepadLeft_K2Node_InputActionEvent_0, Key) == 0x000000, "Member 'BP_ReportWidget_C_InpActEvt_UIGamepadLeft_K2Node_InputActionEvent_0::Key' has a wrong offset!");

// Function BP_ReportWidget.BP_ReportWidget_C.InpActEvt_UIGamepadRight_K2Node_InputActionEvent_3
// 0x0018 (0x0018 - 0x0000)
struct BP_ReportWidget_C_InpActEvt_UIGamepadRight_K2Node_InputActionEvent_3 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_ReportWidget_C_InpActEvt_UIGamepadRight_K2Node_InputActionEvent_3) == 0x000008, "Wrong alignment on BP_ReportWidget_C_InpActEvt_UIGamepadRight_K2Node_InputActionEvent_3");
static_assert(sizeof(BP_ReportWidget_C_InpActEvt_UIGamepadRight_K2Node_InputActionEvent_3) == 0x000018, "Wrong size on BP_ReportWidget_C_InpActEvt_UIGamepadRight_K2Node_InputActionEvent_3");
static_assert(offsetof(BP_ReportWidget_C_InpActEvt_UIGamepadRight_K2Node_InputActionEvent_3, Key) == 0x000000, "Member 'BP_ReportWidget_C_InpActEvt_UIGamepadRight_K2Node_InputActionEvent_3::Key' has a wrong offset!");

// Function BP_ReportWidget.BP_ReportWidget_C.InpActEvt_UIGamepadUp_K2Node_InputActionEvent_5
// 0x0018 (0x0018 - 0x0000)
struct BP_ReportWidget_C_InpActEvt_UIGamepadUp_K2Node_InputActionEvent_5 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_ReportWidget_C_InpActEvt_UIGamepadUp_K2Node_InputActionEvent_5) == 0x000008, "Wrong alignment on BP_ReportWidget_C_InpActEvt_UIGamepadUp_K2Node_InputActionEvent_5");
static_assert(sizeof(BP_ReportWidget_C_InpActEvt_UIGamepadUp_K2Node_InputActionEvent_5) == 0x000018, "Wrong size on BP_ReportWidget_C_InpActEvt_UIGamepadUp_K2Node_InputActionEvent_5");
static_assert(offsetof(BP_ReportWidget_C_InpActEvt_UIGamepadUp_K2Node_InputActionEvent_5, Key) == 0x000000, "Member 'BP_ReportWidget_C_InpActEvt_UIGamepadUp_K2Node_InputActionEvent_5::Key' has a wrong offset!");

// Function BP_ReportWidget.BP_ReportWidget_C.Show
// 0x0010 (0x0010 - 0x0000)
struct BP_ReportWidget_C_Show final
{
public:
	class FString                                 MapId;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ReportWidget_C_Show) == 0x000008, "Wrong alignment on BP_ReportWidget_C_Show");
static_assert(sizeof(BP_ReportWidget_C_Show) == 0x000010, "Wrong size on BP_ReportWidget_C_Show");
static_assert(offsetof(BP_ReportWidget_C_Show, MapId) == 0x000000, "Member 'BP_ReportWidget_C_Show::MapId' has a wrong offset!");

// Function BP_ReportWidget.BP_ReportWidget_C.ShowConfirm
// 0x0050 (0x0050 - 0x0000)
struct BP_ReportWidget_C_ShowConfirm final
{
public:
	class FText                                   Message_0;                                         // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   AcceptMessage;                                     // 0x0018(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   DeclineMessage;                                    // 0x0030(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ReportWidget_C_ShowConfirm) == 0x000008, "Wrong alignment on BP_ReportWidget_C_ShowConfirm");
static_assert(sizeof(BP_ReportWidget_C_ShowConfirm) == 0x000050, "Wrong size on BP_ReportWidget_C_ShowConfirm");
static_assert(offsetof(BP_ReportWidget_C_ShowConfirm, Message_0) == 0x000000, "Member 'BP_ReportWidget_C_ShowConfirm::Message_0' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ShowConfirm, AcceptMessage) == 0x000018, "Member 'BP_ReportWidget_C_ShowConfirm::AcceptMessage' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ShowConfirm, DeclineMessage) == 0x000030, "Member 'BP_ReportWidget_C_ShowConfirm::DeclineMessage' has a wrong offset!");
static_assert(offsetof(BP_ReportWidget_C_ShowConfirm, ReturnValue) == 0x000048, "Member 'BP_ReportWidget_C_ShowConfirm::ReturnValue' has a wrong offset!");

// Function BP_ReportWidget.BP_ReportWidget_C.IsConfirmOpen
// 0x0001 (0x0001 - 0x0000)
struct BP_ReportWidget_C_IsConfirmOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ReportWidget_C_IsConfirmOpen) == 0x000001, "Wrong alignment on BP_ReportWidget_C_IsConfirmOpen");
static_assert(sizeof(BP_ReportWidget_C_IsConfirmOpen) == 0x000001, "Wrong size on BP_ReportWidget_C_IsConfirmOpen");
static_assert(offsetof(BP_ReportWidget_C_IsConfirmOpen, ReturnValue) == 0x000000, "Member 'BP_ReportWidget_C_IsConfirmOpen::ReturnValue' has a wrong offset!");

}

