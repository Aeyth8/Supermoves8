#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CameraPreflow

#include "Basic.hpp"

#include "BP_CameraPreflow_classes.hpp"
#include "BP_CameraPreflow_parameters.hpp"


namespace SDK
{

// Function BP_CameraPreflow.BP_CameraPreflow_C.ExecuteUbergraph_BP_CameraPreflow
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CameraPreflow_C::ExecuteUbergraph_BP_CameraPreflow(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraPreflow_C", "ExecuteUbergraph_BP_CameraPreflow");

	Params::BP_CameraPreflow_C_ExecuteUbergraph_BP_CameraPreflow Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraPreflow.BP_CameraPreflow_C.FindNextLocation
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CameraPreflow_C::FindNextLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraPreflow_C", "FindNextLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CameraPreflow.BP_CameraPreflow_C.GenerateCameraLocations
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_CameraPreflow_C::GenerateCameraLocations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraPreflow_C", "GenerateCameraLocations");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CameraPreflow.BP_CameraPreflow_C.GetPreflowTime
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  PreflowTime                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CameraPreflow_C::GetPreflowTime(double* PreflowTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraPreflow_C", "GetPreflowTime");

	Params::BP_CameraPreflow_C_GetPreflowTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PreflowTime != nullptr)
		*PreflowTime = Parms.PreflowTime;
}


// Function BP_CameraPreflow.BP_CameraPreflow_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_CameraPreflow_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraPreflow_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CameraPreflow.BP_CameraPreflow_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CameraPreflow_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraPreflow_C", "ReceiveTick");

	Params::BP_CameraPreflow_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraPreflow.BP_CameraPreflow_C.StartPreraceSequence
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_CameraPreflow_C::StartPreraceSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraPreflow_C", "StartPreraceSequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CameraPreflow.BP_CameraPreflow_C.TickCameraMovementFlythrough
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CameraPreflow_C::TickCameraMovementFlythrough(double DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraPreflow_C", "TickCameraMovementFlythrough");

	Params::BP_CameraPreflow_C_TickCameraMovementFlythrough Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraPreflow.BP_CameraPreflow_C.TickCameramovementPreraceState
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CameraPreflow_C::TickCameramovementPreraceState(double DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraPreflow_C", "TickCameramovementPreraceState");

	Params::BP_CameraPreflow_C_TickCameramovementPreraceState Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraPreflow.BP_CameraPreflow_C.TraceDist
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Start                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          End                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Out_Hit_Distance                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_CameraPreflow_C::TraceDist(const struct FVector& Start, const struct FVector& End, float* Out_Hit_Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraPreflow_C", "TraceDist");

	Params::BP_CameraPreflow_C_TraceDist Parms{};

	Parms.Start = std::move(Start);
	Parms.End = std::move(End);

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Hit_Distance != nullptr)
		*Out_Hit_Distance = Parms.Out_Hit_Distance;

	return Parms.ReturnValue;
}

}

