#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPW_NGX

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "DLSSBlueprint_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "StreamlineBlueprint_structs.hpp"
#include "E_BuiltInAAModes_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BPW_NGX.BPW_NGX_C
// 0x0220 (0x04E0 - 0x02C0)
class UBPW_NGX_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBPWC_Bool_C*                           boolDLSSRR;                                        // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_Bool_C*                           boolDLSSShowDevStat;                               // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_Bool_C*                           boolReflexShowDevStat;                             // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                BrdDLSSDevStats;                                   // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                BrdDLSSFGDevStats;                                 // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                BrdReflexDevStats;                                 // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           DLSSBox;                                           // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_ValueReadOnly_C*                  DLSSDriverOutDate;                                 // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_ValueReadOnly_C*                  DLSSFGDetectedDriverVersion;                       // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_ValueReadOnly_C*                  DLSSFGDetectedOSVersion;                           // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_ValueReadOnly_C*                  DLSSFGHardwareSchedulingRequired;                  // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_ValueReadOnly_C*                  DLSSFGMinDriverVersion;                            // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_ValueReadOnly_C*                  DLSSFGMinOSVersion;                                // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_ValueReadOnly_C*                  DLSSFGSupported;                                   // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_ValueReadOnly_C*                  DLSSFGSupportedAPIs;                               // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_ValueReadOnly_C*                  DLSSFGVerticalSyncOffRequired;                     // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_ValueReadOnly_C*                  DLSSMinDriver;                                     // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_ValueReadOnly_C*                  DLSSModeOptimalSharpness;                          // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_ValueReadOnly_C*                  DLSSModeScreenPer;                                 // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_ValueReadOnly_C*                  DLSSModeScreenPerFixed;                            // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_ValueReadOnly_C*                  DLSSModeScreenPerOptimal;                          // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_ValueReadOnly_C*                  DLSSScreenPer;                                     // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_ValueReadOnly_C*                  DLSSSupported;                                     // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_ValueReadOnly_C*                  FrameRate;                                         // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_ValueReadOnly_C*                  FramesPresented;                                   // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           FSR3Box;                                           // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_List_C*                           LstAAModes;                                        // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_List_C*                           LstDLSSFGModes;                                    // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_List_C*                           LstDLSSModes;                                      // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_List_C*                           LstReflexModes;                                    // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_List_C*                           LstUpscaling;                                      // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_ValueReadOnly_C*                  ReflexDetectedDriverVersion;                       // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_ValueReadOnly_C*                  ReflexDetectedOSVersion;                           // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_ValueReadOnly_C*                  ReflexGameLatency;                                 // 0x03D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_ValueReadOnly_C*                  ReflexGameToRenderLatency;                         // 0x03D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_ValueReadOnly_C*                  ReflexHardwareSchedulingRequired;                  // 0x03E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_ValueReadOnly_C*                  ReflexMinDriverVersion;                            // 0x03E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_ValueReadOnly_C*                  ReflexMinOSVersion;                                // 0x03F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_ValueReadOnly_C*                  ReflexRenderLatency;                               // 0x03F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_ValueReadOnly_C*                  ReflexSupported;                                   // 0x0400(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_ValueReadOnly_C*                  ReflexSupportedAPIs;                               // 0x0408(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_ValueReadOnly_C*                  ReflexVerticalSyncOffRequired;                     // 0x0410(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_Slider_C*                         SldDLSSSharpness;                                  // 0x0418(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_Slider_C*                         SldGraphicsSettingsSharp0ness;                     // 0x0420(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBPWC_Slider_C*                         SldResScale;                                       // 0x0428(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VbReflex;                                          // 0x0430(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<class FString>                         StrDLSSModes;                                      // 0x0438(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         StrAAModes;                                        // 0x0448(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         StrUpscaleModes;                                   // 0x0458(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         StrNISModes;                                       // 0x0468(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         StrReflexModes;                                    // 0x0478(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         StrWinRes;                                         // 0x0488(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UWidget*>                        Widgets;                                           // 0x0498(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	EUDLSSMode                                    DLSSMode;                                          // 0x04A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A9[0x7];                                      // 0x04A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Str_DLSSFG_Modes;                                  // 0x04B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UUpscalerSettingSave_C*                 SavedSettings;                                     // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          DidSaveExist;                                      // 0x04C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C9[0x7];                                      // 0x04C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnDLSSMinusFGEnabled;                              // 0x04D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void Construct();
	void CustomEvent_1(const class FString& SelectedItem, ESelectInfo SelectionType);
	void DLSSMinusFG_Event(const class FString& SelectedItem, ESelectInfo SelectionType);
	void DLSSMinusRR_Event(bool bIsChecked);
	void ExecuteUbergraph_BPW_NGX(int32 EntryPoint);
	void FSRupscaler();
	void IsDLSSMinusFGMinusEnabled(bool* Enabled);
	void LoadSave();
	void OnDLSSMinusFGEnabled__DelegateSignature(bool Enabled);
	void OnReflexSet(const class FString& SelectedItem, ESelectInfo SelectionType);
	void OnSelectionChanged_Event_0(const class FString& SelectedItem, ESelectInfo SelectionType);
	void OnSelectionChanged_Event_1(const class FString& SelectedItem, ESelectInfo SelectionType);
	void OnSelectionChanged_Event_3(const class FString& SelectedItem, ESelectInfo SelectionType);
	void OnValueChanged_Event_3(float Value);
	void PreConstruct(bool IsDesignTime);
	const class FString ReflexModeToStr(EUStreamlineReflexMode Index_0);
	void ReloadFGSettings();
	void ReloadReflexSettings();
	void SetAntiAliasingCVar(E_BuiltInAAModes AAMode);
	void SetNVidiaImageScaling();
	void SetTSR();
	void SetUpscaleBuiltIn();
	void SetUpscaleDLSS();
	void SwapUpscaler(int32 DLSS, int32 FSR3);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UpdateDLSSDevStats();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPW_NGX_C">();
	}
	static class UBPW_NGX_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPW_NGX_C>();
	}
};
static_assert(alignof(UBPW_NGX_C) == 0x000008, "Wrong alignment on UBPW_NGX_C");
static_assert(sizeof(UBPW_NGX_C) == 0x0004E0, "Wrong size on UBPW_NGX_C");
static_assert(offsetof(UBPW_NGX_C, UberGraphFrame) == 0x0002C0, "Member 'UBPW_NGX_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, boolDLSSRR) == 0x0002C8, "Member 'UBPW_NGX_C::boolDLSSRR' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, boolDLSSShowDevStat) == 0x0002D0, "Member 'UBPW_NGX_C::boolDLSSShowDevStat' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, boolReflexShowDevStat) == 0x0002D8, "Member 'UBPW_NGX_C::boolReflexShowDevStat' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, BrdDLSSDevStats) == 0x0002E0, "Member 'UBPW_NGX_C::BrdDLSSDevStats' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, BrdDLSSFGDevStats) == 0x0002E8, "Member 'UBPW_NGX_C::BrdDLSSFGDevStats' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, BrdReflexDevStats) == 0x0002F0, "Member 'UBPW_NGX_C::BrdReflexDevStats' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, DLSSBox) == 0x0002F8, "Member 'UBPW_NGX_C::DLSSBox' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, DLSSDriverOutDate) == 0x000300, "Member 'UBPW_NGX_C::DLSSDriverOutDate' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, DLSSFGDetectedDriverVersion) == 0x000308, "Member 'UBPW_NGX_C::DLSSFGDetectedDriverVersion' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, DLSSFGDetectedOSVersion) == 0x000310, "Member 'UBPW_NGX_C::DLSSFGDetectedOSVersion' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, DLSSFGHardwareSchedulingRequired) == 0x000318, "Member 'UBPW_NGX_C::DLSSFGHardwareSchedulingRequired' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, DLSSFGMinDriverVersion) == 0x000320, "Member 'UBPW_NGX_C::DLSSFGMinDriverVersion' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, DLSSFGMinOSVersion) == 0x000328, "Member 'UBPW_NGX_C::DLSSFGMinOSVersion' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, DLSSFGSupported) == 0x000330, "Member 'UBPW_NGX_C::DLSSFGSupported' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, DLSSFGSupportedAPIs) == 0x000338, "Member 'UBPW_NGX_C::DLSSFGSupportedAPIs' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, DLSSFGVerticalSyncOffRequired) == 0x000340, "Member 'UBPW_NGX_C::DLSSFGVerticalSyncOffRequired' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, DLSSMinDriver) == 0x000348, "Member 'UBPW_NGX_C::DLSSMinDriver' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, DLSSModeOptimalSharpness) == 0x000350, "Member 'UBPW_NGX_C::DLSSModeOptimalSharpness' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, DLSSModeScreenPer) == 0x000358, "Member 'UBPW_NGX_C::DLSSModeScreenPer' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, DLSSModeScreenPerFixed) == 0x000360, "Member 'UBPW_NGX_C::DLSSModeScreenPerFixed' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, DLSSModeScreenPerOptimal) == 0x000368, "Member 'UBPW_NGX_C::DLSSModeScreenPerOptimal' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, DLSSScreenPer) == 0x000370, "Member 'UBPW_NGX_C::DLSSScreenPer' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, DLSSSupported) == 0x000378, "Member 'UBPW_NGX_C::DLSSSupported' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, FrameRate) == 0x000380, "Member 'UBPW_NGX_C::FrameRate' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, FramesPresented) == 0x000388, "Member 'UBPW_NGX_C::FramesPresented' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, FSR3Box) == 0x000390, "Member 'UBPW_NGX_C::FSR3Box' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, LstAAModes) == 0x000398, "Member 'UBPW_NGX_C::LstAAModes' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, LstDLSSFGModes) == 0x0003A0, "Member 'UBPW_NGX_C::LstDLSSFGModes' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, LstDLSSModes) == 0x0003A8, "Member 'UBPW_NGX_C::LstDLSSModes' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, LstReflexModes) == 0x0003B0, "Member 'UBPW_NGX_C::LstReflexModes' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, LstUpscaling) == 0x0003B8, "Member 'UBPW_NGX_C::LstUpscaling' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, ReflexDetectedDriverVersion) == 0x0003C0, "Member 'UBPW_NGX_C::ReflexDetectedDriverVersion' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, ReflexDetectedOSVersion) == 0x0003C8, "Member 'UBPW_NGX_C::ReflexDetectedOSVersion' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, ReflexGameLatency) == 0x0003D0, "Member 'UBPW_NGX_C::ReflexGameLatency' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, ReflexGameToRenderLatency) == 0x0003D8, "Member 'UBPW_NGX_C::ReflexGameToRenderLatency' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, ReflexHardwareSchedulingRequired) == 0x0003E0, "Member 'UBPW_NGX_C::ReflexHardwareSchedulingRequired' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, ReflexMinDriverVersion) == 0x0003E8, "Member 'UBPW_NGX_C::ReflexMinDriverVersion' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, ReflexMinOSVersion) == 0x0003F0, "Member 'UBPW_NGX_C::ReflexMinOSVersion' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, ReflexRenderLatency) == 0x0003F8, "Member 'UBPW_NGX_C::ReflexRenderLatency' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, ReflexSupported) == 0x000400, "Member 'UBPW_NGX_C::ReflexSupported' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, ReflexSupportedAPIs) == 0x000408, "Member 'UBPW_NGX_C::ReflexSupportedAPIs' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, ReflexVerticalSyncOffRequired) == 0x000410, "Member 'UBPW_NGX_C::ReflexVerticalSyncOffRequired' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, SldDLSSSharpness) == 0x000418, "Member 'UBPW_NGX_C::SldDLSSSharpness' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, SldGraphicsSettingsSharp0ness) == 0x000420, "Member 'UBPW_NGX_C::SldGraphicsSettingsSharp0ness' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, SldResScale) == 0x000428, "Member 'UBPW_NGX_C::SldResScale' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, VbReflex) == 0x000430, "Member 'UBPW_NGX_C::VbReflex' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, StrDLSSModes) == 0x000438, "Member 'UBPW_NGX_C::StrDLSSModes' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, StrAAModes) == 0x000448, "Member 'UBPW_NGX_C::StrAAModes' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, StrUpscaleModes) == 0x000458, "Member 'UBPW_NGX_C::StrUpscaleModes' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, StrNISModes) == 0x000468, "Member 'UBPW_NGX_C::StrNISModes' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, StrReflexModes) == 0x000478, "Member 'UBPW_NGX_C::StrReflexModes' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, StrWinRes) == 0x000488, "Member 'UBPW_NGX_C::StrWinRes' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, Widgets) == 0x000498, "Member 'UBPW_NGX_C::Widgets' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, DLSSMode) == 0x0004A8, "Member 'UBPW_NGX_C::DLSSMode' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, Str_DLSSFG_Modes) == 0x0004B0, "Member 'UBPW_NGX_C::Str_DLSSFG_Modes' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, SavedSettings) == 0x0004C0, "Member 'UBPW_NGX_C::SavedSettings' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, DidSaveExist) == 0x0004C8, "Member 'UBPW_NGX_C::DidSaveExist' has a wrong offset!");
static_assert(offsetof(UBPW_NGX_C, OnDLSSMinusFGEnabled) == 0x0004D0, "Member 'UBPW_NGX_C::OnDLSSMinusFGEnabled' has a wrong offset!");

}

