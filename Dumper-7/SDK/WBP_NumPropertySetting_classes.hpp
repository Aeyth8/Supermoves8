#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_NumPropertySetting

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GYMGAME_structs.hpp"
#include "GYMGAME_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_NumPropertySetting.WBP_NumPropertySetting_C
// 0x00A0 (0x04D8 - 0x0438)
class UWBP_NumPropertySetting_C final : public UGymGuiAssetPropertyEditorWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0438(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 ArrowLeft;                                         // 0x0440(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ArrowRight;                                        // 0x0448(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Border_90;                                         // 0x0450(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text;                                              // 0x0458(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       ValueText;                                         // 0x0460(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FGymPropertyValues                     Property_Value;                                    // 0x0468(0x0048)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Value;                                             // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StepSize;                                          // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxValue;                                          // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinValue;                                          // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LimitLow;                                          // 0x04D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LimitMax;                                          // 0x04D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Construct();
	void DecreaseValue();
	void ExecuteUbergraph_WBP_NumPropertySetting(int32 EntryPoint);
	void IncreaseValue();
	void InpActEvt_ContextualDown_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_ContextualUp_K2Node_InputActionEvent_1(const struct FKey& Key);
	void OnHovered();
	void OnPropertyUpdated();
	void OnSelect();
	void OnUnHovered();
	void SelectNextSetting();
	void SelectPrevSetting();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_NumPropertySetting_C">();
	}
	static class UWBP_NumPropertySetting_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_NumPropertySetting_C>();
	}
};
static_assert(alignof(UWBP_NumPropertySetting_C) == 0x000008, "Wrong alignment on UWBP_NumPropertySetting_C");
static_assert(sizeof(UWBP_NumPropertySetting_C) == 0x0004D8, "Wrong size on UWBP_NumPropertySetting_C");
static_assert(offsetof(UWBP_NumPropertySetting_C, UberGraphFrame) == 0x000438, "Member 'UWBP_NumPropertySetting_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_NumPropertySetting_C, ArrowLeft) == 0x000440, "Member 'UWBP_NumPropertySetting_C::ArrowLeft' has a wrong offset!");
static_assert(offsetof(UWBP_NumPropertySetting_C, ArrowRight) == 0x000448, "Member 'UWBP_NumPropertySetting_C::ArrowRight' has a wrong offset!");
static_assert(offsetof(UWBP_NumPropertySetting_C, Border_90) == 0x000450, "Member 'UWBP_NumPropertySetting_C::Border_90' has a wrong offset!");
static_assert(offsetof(UWBP_NumPropertySetting_C, Text) == 0x000458, "Member 'UWBP_NumPropertySetting_C::Text' has a wrong offset!");
static_assert(offsetof(UWBP_NumPropertySetting_C, ValueText) == 0x000460, "Member 'UWBP_NumPropertySetting_C::ValueText' has a wrong offset!");
static_assert(offsetof(UWBP_NumPropertySetting_C, Property_Value) == 0x000468, "Member 'UWBP_NumPropertySetting_C::Property_Value' has a wrong offset!");
static_assert(offsetof(UWBP_NumPropertySetting_C, Value) == 0x0004B0, "Member 'UWBP_NumPropertySetting_C::Value' has a wrong offset!");
static_assert(offsetof(UWBP_NumPropertySetting_C, StepSize) == 0x0004B8, "Member 'UWBP_NumPropertySetting_C::StepSize' has a wrong offset!");
static_assert(offsetof(UWBP_NumPropertySetting_C, MaxValue) == 0x0004C0, "Member 'UWBP_NumPropertySetting_C::MaxValue' has a wrong offset!");
static_assert(offsetof(UWBP_NumPropertySetting_C, MinValue) == 0x0004C8, "Member 'UWBP_NumPropertySetting_C::MinValue' has a wrong offset!");
static_assert(offsetof(UWBP_NumPropertySetting_C, LimitLow) == 0x0004D0, "Member 'UWBP_NumPropertySetting_C::LimitLow' has a wrong offset!");
static_assert(offsetof(UWBP_NumPropertySetting_C, LimitMax) == 0x0004D1, "Member 'UWBP_NumPropertySetting_C::LimitMax' has a wrong offset!");

}

