#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPW_NGX

#include "Basic.hpp"

#include "BPW_NGX_classes.hpp"
#include "BPW_NGX_parameters.hpp"


namespace SDK
{

// Function BPW_NGX.BPW_NGX_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UBPW_NGX_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_NGX_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPW_NGX.BPW_NGX_C.CustomEvent_1
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SelectedItem                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// ESelectInfo                             SelectionType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPW_NGX_C::CustomEvent_1(const class FString& SelectedItem, ESelectInfo SelectionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_NGX_C", "CustomEvent_1");

	Params::BPW_NGX_C_CustomEvent_1 Parms{};

	Parms.SelectedItem = std::move(SelectedItem);
	Parms.SelectionType = SelectionType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPW_NGX.BPW_NGX_C.DLSS-FG Event
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SelectedItem                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// ESelectInfo                             SelectionType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPW_NGX_C::DLSSMinusFG_Event(const class FString& SelectedItem, ESelectInfo SelectionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_NGX_C", "DLSS-FG Event");

	Params::BPW_NGX_C_DLSSMinusFG_Event Parms{};

	Parms.SelectedItem = std::move(SelectedItem);
	Parms.SelectionType = SelectionType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPW_NGX.BPW_NGX_C.DLSS-RR_Event
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsChecked                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPW_NGX_C::DLSSMinusRR_Event(bool bIsChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_NGX_C", "DLSS-RR_Event");

	Params::BPW_NGX_C_DLSSMinusRR_Event Parms{};

	Parms.bIsChecked = bIsChecked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPW_NGX.BPW_NGX_C.ExecuteUbergraph_BPW_NGX
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPW_NGX_C::ExecuteUbergraph_BPW_NGX(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_NGX_C", "ExecuteUbergraph_BPW_NGX");

	Params::BPW_NGX_C_ExecuteUbergraph_BPW_NGX Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPW_NGX.BPW_NGX_C.FSRupscaler
// (Public, BlueprintCallable, BlueprintEvent)

void UBPW_NGX_C::FSRupscaler()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_NGX_C", "FSRupscaler");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPW_NGX.BPW_NGX_C.IsDLSS-FG-Enabled
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Enabled                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPW_NGX_C::IsDLSSMinusFGMinusEnabled(bool* Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_NGX_C", "IsDLSS-FG-Enabled");

	Params::BPW_NGX_C_IsDLSSMinusFGMinusEnabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Enabled != nullptr)
		*Enabled = Parms.Enabled;
}


// Function BPW_NGX.BPW_NGX_C.LoadSave
// (Public, BlueprintCallable, BlueprintEvent)

void UBPW_NGX_C::LoadSave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_NGX_C", "LoadSave");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPW_NGX.BPW_NGX_C.OnDLSS-FGEnabled__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPW_NGX_C::OnDLSSMinusFGEnabled__DelegateSignature(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_NGX_C", "OnDLSS-FGEnabled__DelegateSignature");

	Params::BPW_NGX_C_OnDLSSMinusFGEnabled__DelegateSignature Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPW_NGX.BPW_NGX_C.OnReflexSet
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SelectedItem                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// ESelectInfo                             SelectionType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPW_NGX_C::OnReflexSet(const class FString& SelectedItem, ESelectInfo SelectionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_NGX_C", "OnReflexSet");

	Params::BPW_NGX_C_OnReflexSet Parms{};

	Parms.SelectedItem = std::move(SelectedItem);
	Parms.SelectionType = SelectionType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPW_NGX.BPW_NGX_C.OnSelectionChanged_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SelectedItem                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// ESelectInfo                             SelectionType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPW_NGX_C::OnSelectionChanged_Event_0(const class FString& SelectedItem, ESelectInfo SelectionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_NGX_C", "OnSelectionChanged_Event_0");

	Params::BPW_NGX_C_OnSelectionChanged_Event_0 Parms{};

	Parms.SelectedItem = std::move(SelectedItem);
	Parms.SelectionType = SelectionType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPW_NGX.BPW_NGX_C.OnSelectionChanged_Event_1
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SelectedItem                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// ESelectInfo                             SelectionType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPW_NGX_C::OnSelectionChanged_Event_1(const class FString& SelectedItem, ESelectInfo SelectionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_NGX_C", "OnSelectionChanged_Event_1");

	Params::BPW_NGX_C_OnSelectionChanged_Event_1 Parms{};

	Parms.SelectedItem = std::move(SelectedItem);
	Parms.SelectionType = SelectionType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPW_NGX.BPW_NGX_C.OnSelectionChanged_Event_3
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SelectedItem                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// ESelectInfo                             SelectionType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPW_NGX_C::OnSelectionChanged_Event_3(const class FString& SelectedItem, ESelectInfo SelectionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_NGX_C", "OnSelectionChanged_Event_3");

	Params::BPW_NGX_C_OnSelectionChanged_Event_3 Parms{};

	Parms.SelectedItem = std::move(SelectedItem);
	Parms.SelectionType = SelectionType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPW_NGX.BPW_NGX_C.OnValueChanged_Event_3
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPW_NGX_C::OnValueChanged_Event_3(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_NGX_C", "OnValueChanged_Event_3");

	Params::BPW_NGX_C_OnValueChanged_Event_3 Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPW_NGX.BPW_NGX_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPW_NGX_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_NGX_C", "PreConstruct");

	Params::BPW_NGX_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPW_NGX.BPW_NGX_C.ReflexModeToStr
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EUStreamlineReflexMode                  Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

const class FString UBPW_NGX_C::ReflexModeToStr(EUStreamlineReflexMode Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_NGX_C", "ReflexModeToStr");

	Params::BPW_NGX_C_ReflexModeToStr Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPW_NGX.BPW_NGX_C.ReloadFGSettings
// (Public, BlueprintCallable, BlueprintEvent)

void UBPW_NGX_C::ReloadFGSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_NGX_C", "ReloadFGSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPW_NGX.BPW_NGX_C.ReloadReflexSettings
// (Public, BlueprintCallable, BlueprintEvent)

void UBPW_NGX_C::ReloadReflexSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_NGX_C", "ReloadReflexSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPW_NGX.BPW_NGX_C.SetAntiAliasingCVar
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BuiltInAAModes                        AAMode                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPW_NGX_C::SetAntiAliasingCVar(E_BuiltInAAModes AAMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_NGX_C", "SetAntiAliasingCVar");

	Params::BPW_NGX_C_SetAntiAliasingCVar Parms{};

	Parms.AAMode = AAMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPW_NGX.BPW_NGX_C.SetNVidiaImageScaling
// (Public, BlueprintCallable, BlueprintEvent)

void UBPW_NGX_C::SetNVidiaImageScaling()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_NGX_C", "SetNVidiaImageScaling");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPW_NGX.BPW_NGX_C.SetTSR
// (Public, BlueprintCallable, BlueprintEvent)

void UBPW_NGX_C::SetTSR()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_NGX_C", "SetTSR");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPW_NGX.BPW_NGX_C.SetUpscaleBuiltIn
// (Public, BlueprintCallable, BlueprintEvent)

void UBPW_NGX_C::SetUpscaleBuiltIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_NGX_C", "SetUpscaleBuiltIn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPW_NGX.BPW_NGX_C.SetUpscaleDLSS
// (Public, BlueprintCallable, BlueprintEvent)

void UBPW_NGX_C::SetUpscaleDLSS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_NGX_C", "SetUpscaleDLSS");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPW_NGX.BPW_NGX_C.SwapUpscaler
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DLSS                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   FSR3                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPW_NGX_C::SwapUpscaler(int32 DLSS, int32 FSR3)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_NGX_C", "SwapUpscaler");

	Params::BPW_NGX_C_SwapUpscaler Parms{};

	Parms.DLSS = DLSS;
	Parms.FSR3 = FSR3;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPW_NGX.BPW_NGX_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPW_NGX_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_NGX_C", "Tick");

	Params::BPW_NGX_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPW_NGX.BPW_NGX_C.UpdateDLSSDevStats
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBPW_NGX_C::UpdateDLSSDevStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_NGX_C", "UpdateDLSSDevStats");

	UObject::ProcessEvent(Func, nullptr);
}

}

