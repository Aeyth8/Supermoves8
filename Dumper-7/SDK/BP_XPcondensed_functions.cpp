#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_XPcondensed

#include "Basic.hpp"

#include "BP_XPcondensed_classes.hpp"
#include "BP_XPcondensed_parameters.hpp"


namespace SDK
{

// Function BP_XPcondensed.BP_XPcondensed_C.ExecuteUbergraph_BP_XPcondensed
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_XPcondensed_C::ExecuteUbergraph_BP_XPcondensed(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_XPcondensed_C", "ExecuteUbergraph_BP_XPcondensed");

	Params::BP_XPcondensed_C_ExecuteUbergraph_BP_XPcondensed Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_XPcondensed.BP_XPcondensed_C.SetData
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   BaseXP_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Multiplier_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TotalXP_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_XPcondensed_C::SetData(int32 BaseXP_0, int32 Multiplier_0, int32 TotalXP_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_XPcondensed_C", "SetData");

	Params::BP_XPcondensed_C_SetData Parms{};

	Parms.BaseXP_0 = BaseXP_0;
	Parms.Multiplier_0 = Multiplier_0;
	Parms.TotalXP_0 = TotalXP_0;

	UObject::ProcessEvent(Func, &Parms);
}

}

