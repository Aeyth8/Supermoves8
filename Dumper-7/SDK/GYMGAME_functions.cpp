#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GYMGAME

#include "Basic.hpp"

#include "GYMGAME_classes.hpp"
#include "GYMGAME_parameters.hpp"


namespace SDK
{

// DelegateFunction GYMGAME.CameraPreflow.GymCameraPreflowEnded__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void ACameraPreflow::GymCameraPreflowEnded__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraPreflow", "GymCameraPreflowEnded__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.CameraPreflow.StartPreraceSequence
// (Event, Public, BlueprintEvent)

void ACameraPreflow::StartPreraceSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraPreflow", "StartPreraceSequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.EditorGizmo.EnableAxis
// (Event, Public, BlueprintEvent)
// Parameters:
// ERotationAxis                           RotationAxis                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AEditorGizmo::EnableAxis(ERotationAxis RotationAxis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorGizmo", "EnableAxis");

	Params::EditorGizmo_EnableAxis Parms{};

	Parms.RotationAxis = RotationAxis;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymSplinePlacer.ClearSplineAssets
// (Native, Public, BlueprintCallable)

void AGymSplinePlacer::ClearSplineAssets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSplinePlacer", "ClearSplineAssets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSplinePlacer.UpdateSplineAssets
// (Native, Public, BlueprintCallable)

void AGymSplinePlacer::UpdateSplineAssets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSplinePlacer", "UpdateSplineAssets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.ExtendableBackgroundCell.CheckStartClaimed
// (Final, Native, Private)

void AExtendableBackgroundCell::CheckStartClaimed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExtendableBackgroundCell", "CheckStartClaimed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.ExtendableBackgroundCell.OnClaimedChanged
// (Final, Native, Private)

void AExtendableBackgroundCell::OnClaimedChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExtendableBackgroundCell", "OnClaimedChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGlobalActionControl.GetActionsFromPage
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   Page                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class UGymMetaAction*>     ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

const TArray<class UGymMetaAction*> UGymGlobalActionControl::GetActionsFromPage(int32 Page)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGlobalActionControl", "GetActionsFromPage");

	Params::GymGlobalActionControl_GetActionsFromPage Parms{};

	Parms.Page = Page;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGlobalActionControl.GetAllActions
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const TArray<class UGymMetaAction*>     ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

const TArray<class UGymMetaAction*> UGymGlobalActionControl::GetAllActions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGlobalActionControl", "GetAllActions");

	Params::GymGlobalActionControl_GetAllActions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGlobalActionControl.GetPageData
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   Page                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGymActionContainer              OutActionData                                          (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGlobalActionControl::GetPageData(int32 Page, struct FGymActionContainer* OutActionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGlobalActionControl", "GetPageData");

	Params::GymGlobalActionControl_GetPageData Parms{};

	Parms.Page = Page;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutActionData != nullptr)
		*OutActionData = std::move(Parms.OutActionData);

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGlobalActionControl.GetPageNum
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymGlobalActionControl::GetPageNum()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGlobalActionControl", "GetPageNum");

	Params::GymGlobalActionControl_GetPageNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymAchievements.DEBUG_ResetAchievements
// (Final, Native, Public, BlueprintCallable)

void UGymAchievements::DEBUG_ResetAchievements()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymAchievements", "DEBUG_ResetAchievements");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymAchievements.SetAchievementWithEnum
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGymAchievement                         Achievement                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymAchievements::SetAchievementWithEnum(EGymAchievement Achievement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymAchievements", "SetAchievementWithEnum");

	Params::GymAchievements_SetAchievementWithEnum Parms{};

	Parms.Achievement = Achievement;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymAchievements.SetAchievementWithString
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AchievementID                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymAchievements::SetAchievementWithString(const class FString& AchievementID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymAchievements", "SetAchievementWithString");

	Params::GymAchievements_SetAchievementWithString Parms{};

	Parms.AchievementID = std::move(AchievementID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymActionInputWidget.SetInput
// (Event, Public, BlueprintEvent)
// Parameters:
// class FName                             Input                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymActionInputWidget::SetInput(class FName Input)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymActionInputWidget", "SetInput");

	Params::GymActionInputWidget_SetInput Parms{};

	Parms.Input = Input;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGlobalTickerEventControl.Client_AddCustomMessage
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGymGuiTickerMessageWidget>Message                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETickerPosition                         Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGlobalTickerEventControl::Client_AddCustomMessage(TSubclassOf<class UGymGuiTickerMessageWidget> Message, ETickerPosition Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGlobalTickerEventControl", "Client_AddCustomMessage");

	Params::GymGlobalTickerEventControl_Client_AddCustomMessage Parms{};

	Parms.Message = Message;
	Parms.Position = Position;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGlobalTickerEventControl.Client_AddMessage
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// struct FTickerSettingsStruct            Settings                                               (Parm, NativeAccessSpecifierPublic)

void UGymGlobalTickerEventControl::Client_AddMessage(const struct FTickerSettingsStruct& Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGlobalTickerEventControl", "Client_AddMessage");

	Params::GymGlobalTickerEventControl_Client_AddMessage Parms{};

	Parms.Settings = std::move(Settings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGlobalTickerEventControl.Client_RemoveMessage
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// class FName                             MessageId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGlobalTickerEventControl::Client_RemoveMessage(class FName MessageId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGlobalTickerEventControl", "Client_RemoveMessage");

	Params::GymGlobalTickerEventControl_Client_RemoveMessage Parms{};

	Parms.MessageId = MessageId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMetaAction.CanPerform
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymMetaAction::CanPerform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMetaAction", "CanPerform");

	Params::GymMetaAction_CanPerform Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymMetaAction.GetActionName
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UGymMetaAction::GetActionName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMetaAction", "GetActionName");

	Params::GymMetaAction_GetActionName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymMetaAction.PerformAction
// (Native, Public, BlueprintCallable)

void UGymMetaAction::PerformAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMetaAction", "PerformAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGlobalChatControl.Client_ReceiveMessage
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// class FString                           PlayerName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGlobalChatControl::Client_ReceiveMessage(const class FString& PlayerName, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGlobalChatControl", "Client_ReceiveMessage");

	Params::GymGlobalChatControl_Client_ReceiveMessage Parms{};

	Parms.PlayerName = std::move(PlayerName);
	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGlobalChatControl.Server_SendMessage
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// class FString                           PlayerName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGlobalChatControl::Server_SendMessage(const class FString& PlayerName, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGlobalChatControl", "Server_SendMessage");

	Params::GymGlobalChatControl_Server_SendMessage Parms{};

	Parms.PlayerName = std::move(PlayerName);
	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymAIController.FinishParticipant
// (Final, Native, Public)

void AGymAIController::FinishParticipant()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymAIController", "FinishParticipant");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymAnimationControl.GetHandsHidden
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymAnimationControl::GetHandsHidden()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymAnimationControl", "GetHandsHidden");

	Params::GymAnimationControl_GetHandsHidden Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymAnimationControl.SetFirstPersonBody
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Force                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymAnimationControl::SetFirstPersonBody(bool Force)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymAnimationControl", "SetFirstPersonBody");

	Params::GymAnimationControl_SetFirstPersonBody Parms{};

	Parms.Force = Force;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymAnimationControl.SetFPHideAllArms
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymAnimationControl::SetFPHideAllArms(bool State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymAnimationControl", "SetFPHideAllArms");

	Params::GymAnimationControl_SetFPHideAllArms Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymAnimationControl.SetFPHideLegs
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymAnimationControl::SetFPHideLegs(bool State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymAnimationControl", "SetFPHideLegs");

	Params::GymAnimationControl_SetFPHideLegs Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymAnimationControl.SetFPHideTorso
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymAnimationControl::SetFPHideTorso(bool State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymAnimationControl", "SetFPHideTorso");

	Params::GymAnimationControl_SetFPHideTorso Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymAnimationControl.SetInvisible
// (Final, Native, Public, BlueprintCallable)

void UGymAnimationControl::SetInvisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymAnimationControl", "SetInvisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymAnimationControl.SetOverlayMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymAnimationControl::SetOverlayMaterial(class UMaterialInterface* Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymAnimationControl", "SetOverlayMaterial");

	Params::GymAnimationControl_SetOverlayMaterial Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymAnimationControl.SetThirdPersonBody
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Force                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymAnimationControl::SetThirdPersonBody(bool Force)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymAnimationControl", "SetThirdPersonBody");

	Params::GymAnimationControl_SetThirdPersonBody Parms{};

	Parms.Force = Force;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymAnimationControl.GetUtilAnimator
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymUtilityAnimator*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymUtilityAnimator* UGymAnimationControl::GetUtilAnimator() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymAnimationControl", "GetUtilAnimator");

	Params::GymAnimationControl_GetUtilAnimator Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiMetaWidget.BPClose
// (Native, Event, Protected, BlueprintEvent)

void UGymGuiMetaWidget::BPClose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiMetaWidget", "BPClose");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiMetaWidget.BPHighlightWidget
// (Event, Public, BlueprintEvent)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiMetaWidget::BPHighlightWidget(class UWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiMetaWidget", "BPHighlightWidget");

	Params::GymGuiMetaWidget_BPHighlightWidget Parms{};

	Parms.Widget = Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiMetaWidget.BPOpen
// (Native, Event, Protected, BlueprintEvent)

void UGymGuiMetaWidget::BPOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiMetaWidget", "BPOpen");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiMetaWidget.Close
// (Final, Native, Public, BlueprintCallable)

void UGymGuiMetaWidget::Close()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiMetaWidget", "Close");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiMetaWidget.DoesAnotherWidgetHavePriority
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGuiMetaWidget::DoesAnotherWidgetHavePriority()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiMetaWidget", "DoesAnotherWidgetHavePriority");

	Params::GymGuiMetaWidget_DoesAnotherWidgetHavePriority Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiMetaWidget.FakeClickHighlightedTextFieldGamepad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGuiMetaWidget::FakeClickHighlightedTextFieldGamepad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiMetaWidget", "FakeClickHighlightedTextFieldGamepad");

	Params::GymGuiMetaWidget_FakeClickHighlightedTextFieldGamepad Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiMetaWidget.GamepadUIInteract
// (Final, Native, Public, BlueprintCallable)

void UGymGuiMetaWidget::GamepadUIInteract()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiMetaWidget", "GamepadUIInteract");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiMetaWidget.GamepadUINavigate
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EUINavDirection                         Direction                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UWidget*>                  Widgets                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGuiMetaWidget::GamepadUINavigate(const EUINavDirection Direction, const TArray<class UWidget*>& Widgets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiMetaWidget", "GamepadUINavigate");

	Params::GymGuiMetaWidget_GamepadUINavigate Parms{};

	Parms.Direction = Direction;
	Parms.Widgets = std::move(Widgets);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiMetaWidget.GetInputPriority
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymGuiMetaWidget::GetInputPriority()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiMetaWidget", "GetInputPriority");

	Params::GymGuiMetaWidget_GetInputPriority Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiMetaWidget.HighlightWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUIHoverRequirement                     HoverRequirement                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiMetaWidget::HighlightWidget(class UWidget* Widget, EUIHoverRequirement HoverRequirement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiMetaWidget", "HighlightWidget");

	Params::GymGuiMetaWidget_HighlightWidget Parms{};

	Parms.Widget = Widget;
	Parms.HoverRequirement = HoverRequirement;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiMetaWidget.IsOpenVisibleAndHasPriority
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGuiMetaWidget::IsOpenVisibleAndHasPriority()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiMetaWidget", "IsOpenVisibleAndHasPriority");

	Params::GymGuiMetaWidget_IsOpenVisibleAndHasPriority Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiMetaWidget.IsWidgetVisible
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGuiMetaWidget::IsWidgetVisible(class UWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiMetaWidget", "IsWidgetVisible");

	Params::GymGuiMetaWidget_IsWidgetVisible Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiMetaWidget.Open
// (Final, Native, Public, BlueprintCallable)

void UGymGuiMetaWidget::Open()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiMetaWidget", "Open");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiMetaWidget.SetInputPriority
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewPriority                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiMetaWidget::SetInputPriority(int32 NewPriority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiMetaWidget", "SetInputPriority");

	Params::GymGuiMetaWidget_SetInputPriority Parms{};

	Parms.NewPriority = NewPriority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiMetaWidget.SimulateGamepadUINavigate
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EUINavDirection                         Direction                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UWidget*>                  Widgets                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UWidget*                          NextWidget                                             (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiMetaWidget::SimulateGamepadUINavigate(const EUINavDirection Direction, const TArray<class UWidget*>& Widgets, class UWidget** NextWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiMetaWidget", "SimulateGamepadUINavigate");

	Params::GymGuiMetaWidget_SimulateGamepadUINavigate Parms{};

	Parms.Direction = Direction;
	Parms.Widgets = std::move(Widgets);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NextWidget != nullptr)
		*NextWidget = Parms.NextWidget;
}


// Function GYMGAME.GymGuiMetaWidget.IsOpen
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGuiMetaWidget::IsOpen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiMetaWidget", "IsOpen");

	Params::GymGuiMetaWidget_IsOpen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymAutoKillzone.Clear
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void AGymAutoKillzone::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymAutoKillzone", "Clear");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymAutoKillzone.GenerateKillzone
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void AGymAutoKillzone::GenerateKillzone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymAutoKillzone", "GenerateKillzone");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymBaseGameMode.GetRuleInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGymRules*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymRules* AGymBaseGameMode::GetRuleInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymBaseGameMode", "GetRuleInstance");

	Params::GymBaseGameMode_GetRuleInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymBaseGameMode.IsCurrentlyInCareer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGymBaseGameMode::IsCurrentlyInCareer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymBaseGameMode", "IsCurrentlyInCareer");

	Params::GymBaseGameMode_IsCurrentlyInCareer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymBaseGameMode.PauseGymGame
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Pauser                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymBaseGameMode::PauseGymGame(class UObject* Pauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymBaseGameMode", "PauseGymGame");

	Params::GymBaseGameMode_PauseGymGame Parms{};

	Parms.Pauser = Pauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymBaseGameMode.UnPauseGymGame
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Pauser                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymBaseGameMode::UnPauseGymGame(class UObject* Pauser, bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymBaseGameMode", "UnPauseGymGame");

	Params::GymBaseGameMode_UnPauseGymGame Parms{};

	Parms.Pauser = Pauser;
	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymBaseGameMode.SendRaceStartAnalytics
// (Final, Native, Protected, Const)
// Parameters:
// struct FRuleStartInfo                   Info                                                   (Parm, NativeAccessSpecifierPublic)

void AGymBaseGameMode::SendRaceStartAnalytics(const struct FRuleStartInfo& Info) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymBaseGameMode", "SendRaceStartAnalytics");

	Params::GymBaseGameMode_SendRaceStartAnalytics Parms{};

	Parms.Info = std::move(Info);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRules.CalculateTournamentScoreForStanding
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Standing                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymRules::CalculateTournamentScoreForStanding(int32 Standing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRules", "CalculateTournamentScoreForStanding");

	Params::GymRules_CalculateTournamentScoreForStanding Parms{};

	Parms.Standing = Standing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymRules.GetGameModeId
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGymRules::GetGameModeId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRules", "GetGameModeId");

	Params::GymRules_GetGameModeId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction GYMGAME.GymRules.RaceFinishedDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UGymRules::RaceFinishedDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRules", "RaceFinishedDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiGlobalMetaWidget.OnWindowFocusChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bHasFocus                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiGlobalMetaWidget::OnWindowFocusChanged(bool bHasFocus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiGlobalMetaWidget", "OnWindowFocusChanged");

	Params::GymGuiGlobalMetaWidget_OnWindowFocusChanged Parms{};

	Parms.bHasFocus = bHasFocus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiChooseLevelWidget.OnBackButtonPressed
// (Final, Native, Private)

void UGymGuiChooseLevelWidget::OnBackButtonPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiChooseLevelWidget", "OnBackButtonPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiChooseLevelWidget.OnSelectButtonPressed
// (Final, Native, Private)

void UGymGuiChooseLevelWidget::OnSelectButtonPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiChooseLevelWidget", "OnSelectButtonPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiChooseLevelWidget.OnTabCustom
// (Final, Native, Private)

void UGymGuiChooseLevelWidget::OnTabCustom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiChooseLevelWidget", "OnTabCustom");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiChooseLevelWidget.OnTabDefault
// (Final, Native, Private)

void UGymGuiChooseLevelWidget::OnTabDefault()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiChooseLevelWidget", "OnTabDefault");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCareerRules.BP_SetupEndCutscene
// (Event, Public, BlueprintEvent)
// Parameters:
// class ALevelSequenceActor*              SequenceActor                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCareerRules::BP_SetupEndCutscene(class ALevelSequenceActor* SequenceActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCareerRules", "BP_SetupEndCutscene");

	Params::GymCareerRules_BP_SetupEndCutscene Parms{};

	Parms.SequenceActor = SequenceActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymCareerRules.BP_SetupStartCutscene
// (Event, Public, BlueprintEvent)
// Parameters:
// class ALevelSequenceActor*              SequenceActor                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCareerRules::BP_SetupStartCutscene(class ALevelSequenceActor* SequenceActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCareerRules", "BP_SetupStartCutscene");

	Params::GymCareerRules_BP_SetupStartCutscene Parms{};

	Parms.SequenceActor = SequenceActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymCareerRules.EndSequenceFinished
// (Native, Public)

void UGymCareerRules::EndSequenceFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCareerRules", "EndSequenceFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCareerRules.OnSkipEndSequence
// (Native, Public)

void UGymCareerRules::OnSkipEndSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCareerRules", "OnSkipEndSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCareerRules.OnSkipStartSequence
// (Native, Public)

void UGymCareerRules::OnSkipStartSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCareerRules", "OnSkipStartSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCareerRules.SpawnActorOfClass
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// TSubclassOf<class AActor>               ActorClass                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UGymCareerRules::SpawnActorOfClass(TSubclassOf<class AActor> ActorClass, const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCareerRules", "SpawnActorOfClass");

	Params::GymCareerRules_SpawnActorOfClass Parms{};

	Parms.ActorClass = ActorClass;
	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCareerRules.StartEndSequence
// (Final, Native, Public, BlueprintCallable)

void UGymCareerRules::StartEndSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCareerRules", "StartEndSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCareerRules.StartSequenceFinished
// (Native, Public)

void UGymCareerRules::StartSequenceFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCareerRules", "StartSequenceFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCareerRules.GetCareerName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGymCareerRules::GetCareerName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCareerRules", "GetCareerName");

	Params::GymCareerRules_GetCareerName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymBasicsRules.GoalReached
// (Final, Native, Public)
// Parameters:
// class AActor*                           Goal                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGymCharacter*                    PlayerCharacter                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymBasicsRules::GoalReached(class AActor* Goal, class AGymCharacter* PlayerCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymBasicsRules", "GoalReached");

	Params::GymBasicsRules_GoalReached Parms{};

	Parms.Goal = Goal;
	Parms.PlayerCharacter = PlayerCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction GYMGAME.GymGuiAssetPropertyEditorWidget.OnEditingStopped__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UGymGuiAssetPropertyEditorWidget::OnEditingStopped__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiAssetPropertyEditorWidget", "OnEditingStopped__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiAssetPropertyEditorWidget.OnHovered
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UGymGuiAssetPropertyEditorWidget::OnHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiAssetPropertyEditorWidget", "OnHovered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiAssetPropertyEditorWidget.OnPropertyUpdated
// (Event, Public, BlueprintEvent)

void UGymGuiAssetPropertyEditorWidget::OnPropertyUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiAssetPropertyEditorWidget", "OnPropertyUpdated");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction GYMGAME.GymGuiAssetPropertyEditorWidget.OnPropertyValueChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// struct FGymPropertyValues               PropertyValue                                          (Parm, NativeAccessSpecifierPublic)

void UGymGuiAssetPropertyEditorWidget::OnPropertyValueChanged__DelegateSignature(const struct FGymPropertyValues& PropertyValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiAssetPropertyEditorWidget", "OnPropertyValueChanged__DelegateSignature");

	Params::GymGuiAssetPropertyEditorWidget_OnPropertyValueChanged__DelegateSignature Parms{};

	Parms.PropertyValue = std::move(PropertyValue);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiAssetPropertyEditorWidget.OnSelect
// (Event, Public, BlueprintEvent)

void UGymGuiAssetPropertyEditorWidget::OnSelect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiAssetPropertyEditorWidget", "OnSelect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiAssetPropertyEditorWidget.OnUnHovered
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UGymGuiAssetPropertyEditorWidget::OnUnHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiAssetPropertyEditorWidget", "OnUnHovered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiAssetPropertyEditorWidget.OnUnSelect
// (Event, Public, BlueprintEvent)

void UGymGuiAssetPropertyEditorWidget::OnUnSelect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiAssetPropertyEditorWidget", "OnUnSelect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiAssetPropertyEditorWidget.Select
// (Final, Native, Public, BlueprintCallable)

void UGymGuiAssetPropertyEditorWidget::Select()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiAssetPropertyEditorWidget", "Select");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiAssetPropertyEditorWidget.SelectNextSetting
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UGymGuiAssetPropertyEditorWidget::SelectNextSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiAssetPropertyEditorWidget", "SelectNextSetting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiAssetPropertyEditorWidget.SelectPrevSetting
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UGymGuiAssetPropertyEditorWidget::SelectPrevSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiAssetPropertyEditorWidget", "SelectPrevSetting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiAssetPropertyEditorWidget.Unselect
// (Final, Native, Public, BlueprintCallable)

void UGymGuiAssetPropertyEditorWidget::Unselect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiAssetPropertyEditorWidget", "Unselect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiAssetPropertyEditorWidget.UpdateProperty
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGymProperty                     Property                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGymGuiAssetPropertyEditorWidget::UpdateProperty(const struct FGymProperty& Property)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiAssetPropertyEditorWidget", "UpdateProperty");

	Params::GymGuiAssetPropertyEditorWidget_UpdateProperty Parms{};

	Parms.Property = std::move(Property);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMetaRuleMusicState.Client_OnTriggerAudio
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// class FName                             TriggerName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymMetaRuleMusicState::Client_OnTriggerAudio(class FName TriggerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMetaRuleMusicState", "Client_OnTriggerAudio");

	Params::GymMetaRuleMusicState_Client_OnTriggerAudio Parms{};

	Parms.TriggerName = TriggerName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMetaRuleMusicState.Client_OnTriggerStingerAudio
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// class FName                             TriggerName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymMetaRuleMusicState::Client_OnTriggerStingerAudio(class FName TriggerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMetaRuleMusicState", "Client_OnTriggerStingerAudio");

	Params::GymMetaRuleMusicState_Client_OnTriggerStingerAudio Parms{};

	Parms.TriggerName = TriggerName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymObjective.BPRestart
// (Event, Protected, BlueprintEvent)

void UGymObjective::BPRestart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjective", "BPRestart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymObjective.Client_SetCurrentProgression
// (Net, NetReliable, Native, Event, Protected, NetClient)
// Parameters:
// float                                   Progression                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymObjective::Client_SetCurrentProgression(float Progression)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjective", "Client_SetCurrentProgression");

	Params::GymObjective_Client_SetCurrentProgression Parms{};

	Parms.Progression = Progression;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymObjective.Client_SetMaxProgression
// (Net, NetReliable, Native, Event, Protected, NetClient)
// Parameters:
// float                                   MaxProgress                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymObjective::Client_SetMaxProgression(float MaxProgress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjective", "Client_SetMaxProgression");

	Params::GymObjective_Client_SetMaxProgression Parms{};

	Parms.MaxProgress = MaxProgress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymObjective.Client_SetObjectiveState
// (Net, NetReliable, Native, Event, Protected, NetClient)
// Parameters:
// EObjectiveState                         State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymObjective::Client_SetObjectiveState(EObjectiveState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjective", "Client_SetObjectiveState");

	Params::GymObjective_Client_SetObjectiveState Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymObjective.IsObjectiveStarted
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymObjective::IsObjectiveStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjective", "IsObjectiveStarted");

	Params::GymObjective_IsObjectiveStarted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymObjective.SetFailed
// (Native, Public, BlueprintCallable)

void UGymObjective::SetFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjective", "SetFailed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymObjective.SetObjectiveState
// (Native, Public, BlueprintCallable)
// Parameters:
// EObjectiveState                         State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNotifyMaster                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymObjective::SetObjectiveState(EObjectiveState State, bool bForce, bool bNotifyMaster)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjective", "SetObjectiveState");

	Params::GymObjective_SetObjectiveState Parms{};

	Parms.State = State;
	Parms.bForce = bForce;
	Parms.bNotifyMaster = bNotifyMaster;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymObjective.GetCurrentProgression
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGymObjective::GetCurrentProgression() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjective", "GetCurrentProgression");

	Params::GymObjective_GetCurrentProgression Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymObjective.GetDescriptionText
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

const class FText UGymObjective::GetDescriptionText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjective", "GetDescriptionText");

	Params::GymObjective_GetDescriptionText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymObjective.GetMaxProgression
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGymObjective::GetMaxProgression() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjective", "GetMaxProgression");

	Params::GymObjective_GetMaxProgression Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymObjective.GetProgressionText
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

const class FText UGymObjective::GetProgressionText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjective", "GetProgressionText");

	Params::GymObjective_GetProgressionText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymObjective.GetProgressionTextAreaFillOverride
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGymObjective::GetProgressionTextAreaFillOverride() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjective", "GetProgressionTextAreaFillOverride");

	Params::GymObjective_GetProgressionTextAreaFillOverride Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymObjective.GetState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EObjectiveState                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EObjectiveState UGymObjective::GetState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjective", "GetState");

	Params::GymObjective_GetState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymObjective.IsCompleted
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymObjective::IsCompleted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjective", "IsCompleted");

	Params::GymObjective_IsCompleted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymObjective.IsFailed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymObjective::IsFailed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjective", "IsFailed");

	Params::GymObjective_IsFailed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymObjective.IsInProgress
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymObjective::IsInProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjective", "IsInProgress");

	Params::GymObjective_IsInProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiCanvasPartyOverlayWidget.OnDisconnectButtonPressed
// (Final, Native, Protected, BlueprintCallable, Const)

void UGymGuiCanvasPartyOverlayWidget::OnDisconnectButtonPressed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiCanvasPartyOverlayWidget", "OnDisconnectButtonPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiCanvasPartyOverlayWidget.OnEndMatchButtonPressed
// (Final, Native, Protected, BlueprintCallable, Const)

void UGymGuiCanvasPartyOverlayWidget::OnEndMatchButtonPressed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiCanvasPartyOverlayWidget", "OnEndMatchButtonPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiCanvasPartyOverlayWidget.OnQuitButtonPressed
// (Final, Native, Protected, BlueprintCallable, Const)

void UGymGuiCanvasPartyOverlayWidget::OnQuitButtonPressed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiCanvasPartyOverlayWidget", "OnQuitButtonPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiCanvasPartyOverlayWidget.OnRespawnButtonPressed
// (Final, Native, Protected, BlueprintCallable, Const)

void UGymGuiCanvasPartyOverlayWidget::OnRespawnButtonPressed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiCanvasPartyOverlayWidget", "OnRespawnButtonPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiCanvasPartyOverlayWidget.ShouldShowEndMatch
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESlateVisibility                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESlateVisibility UGymGuiCanvasPartyOverlayWidget::ShouldShowEndMatch() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiCanvasPartyOverlayWidget", "ShouldShowEndMatch");

	Params::GymGuiCanvasPartyOverlayWidget_ShouldShowEndMatch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymRuleReplicatedData.AddVote
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class AGymPlayerState*                  Player                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymRuleReplicatedData::AddVote(const class AGymPlayerState* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "AddVote");

	Params::GymRuleReplicatedData_AddVote Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleReplicatedData.GetIsQuickplay
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymRuleReplicatedData::GetIsQuickplay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "GetIsQuickplay");

	Params::GymRuleReplicatedData_GetIsQuickplay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymRuleReplicatedData.GetRaceTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGymRuleReplicatedData::GetRaceTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "GetRaceTime");

	Params::GymRuleReplicatedData_GetRaceTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymRuleReplicatedData.RemoveVote
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class AGymPlayerState*                  Player                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymRuleReplicatedData::RemoveVote(const class AGymPlayerState* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "RemoveVote");

	Params::GymRuleReplicatedData_RemoveVote Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleReplicatedData.ResetVotes
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void UGymRuleReplicatedData::ResetVotes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "ResetVotes");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleReplicatedData.SetCurrentQualified
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   Qualified                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymRuleReplicatedData::SetCurrentQualified(int32 Qualified)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "SetCurrentQualified");

	Params::GymRuleReplicatedData_SetCurrentQualified Parms{};

	Parms.Qualified = Qualified;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleReplicatedData.SetIsQuickplay
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// bool                                    IsQuickplay                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymRuleReplicatedData::SetIsQuickplay(bool IsQuickplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "SetIsQuickplay");

	Params::GymRuleReplicatedData_SetIsQuickplay Parms{};

	Parms.IsQuickplay = IsQuickplay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleReplicatedData.SetMaxQualified
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   Qualified                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymRuleReplicatedData::SetMaxQualified(int32 Qualified)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "SetMaxQualified");

	Params::GymRuleReplicatedData_SetMaxQualified Parms{};

	Parms.Qualified = Qualified;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleReplicatedData.SetParticipantsRunning
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   NewParticipantsRunning                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymRuleReplicatedData::SetParticipantsRunning(int32 NewParticipantsRunning)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "SetParticipantsRunning");

	Params::GymRuleReplicatedData_SetParticipantsRunning Parms{};

	Parms.NewParticipantsRunning = NewParticipantsRunning;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleReplicatedData.SetQuickplayCountdownMaxTime
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymRuleReplicatedData::SetQuickplayCountdownMaxTime(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "SetQuickplayCountdownMaxTime");

	Params::GymRuleReplicatedData_SetQuickplayCountdownMaxTime Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleReplicatedData.SetQuickplayCountdownStartTime
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymRuleReplicatedData::SetQuickplayCountdownStartTime(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "SetQuickplayCountdownStartTime");

	Params::GymRuleReplicatedData_SetQuickplayCountdownStartTime Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleReplicatedData.SetRaceMaxTime
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// float                                   NewMaxTime                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymRuleReplicatedData::SetRaceMaxTime(float NewMaxTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "SetRaceMaxTime");

	Params::GymRuleReplicatedData_SetRaceMaxTime Parms{};

	Parms.NewMaxTime = NewMaxTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleReplicatedData.SetRaceStartTime
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// float                                   NewStartTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymRuleReplicatedData::SetRaceStartTime(float NewStartTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "SetRaceStartTime");

	Params::GymRuleReplicatedData_SetRaceStartTime Parms{};

	Parms.NewStartTime = NewStartTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleReplicatedData.SetRuleState
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// EGymRulesState                          State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymRuleReplicatedData::SetRuleState(EGymRulesState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "SetRuleState");

	Params::GymRuleReplicatedData_SetRuleState Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleReplicatedData.SetTotalParticipants
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   NewTotalParticipants                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymRuleReplicatedData::SetTotalParticipants(int32 NewTotalParticipants)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "SetTotalParticipants");

	Params::GymRuleReplicatedData_SetTotalParticipants Parms{};

	Parms.NewTotalParticipants = NewTotalParticipants;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleReplicatedData.SetVoteStartTime
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymRuleReplicatedData::SetVoteStartTime(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "SetVoteStartTime");

	Params::GymRuleReplicatedData_SetVoteStartTime Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleReplicatedData.SetVoteState
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// EVoteState                              NewVoteState                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymRuleReplicatedData::SetVoteState(EVoteState NewVoteState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "SetVoteState");

	Params::GymRuleReplicatedData_SetVoteState Parms{};

	Parms.NewVoteState = NewVoteState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleReplicatedData.SetVoteTimer
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// float                                   Timer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymRuleReplicatedData::SetVoteTimer(float Timer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "SetVoteTimer");

	Params::GymRuleReplicatedData_SetVoteTimer Parms{};

	Parms.Timer = Timer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleReplicatedData.UpdateVotes
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   NewMinVotes                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewMaxVotes                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewCurrentVotes                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymRuleReplicatedData::UpdateVotes(int32 NewMinVotes, int32 NewMaxVotes, int32 NewCurrentVotes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "UpdateVotes");

	Params::GymRuleReplicatedData_UpdateVotes Parms{};

	Parms.NewMinVotes = NewMinVotes;
	Parms.NewMaxVotes = NewMaxVotes;
	Parms.NewCurrentVotes = NewCurrentVotes;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleReplicatedData.GetCheckpointCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymRuleReplicatedData::GetCheckpointCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "GetCheckpointCount");

	Params::GymRuleReplicatedData_GetCheckpointCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymRuleReplicatedData.GetCurrentQualified
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymRuleReplicatedData::GetCurrentQualified() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "GetCurrentQualified");

	Params::GymRuleReplicatedData_GetCurrentQualified Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymRuleReplicatedData.GetCurrentVotes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymRuleReplicatedData::GetCurrentVotes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "GetCurrentVotes");

	Params::GymRuleReplicatedData_GetCurrentVotes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymRuleReplicatedData.GetMaxQualified
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymRuleReplicatedData::GetMaxQualified() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "GetMaxQualified");

	Params::GymRuleReplicatedData_GetMaxQualified Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymRuleReplicatedData.GetMaxVotes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymRuleReplicatedData::GetMaxVotes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "GetMaxVotes");

	Params::GymRuleReplicatedData_GetMaxVotes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymRuleReplicatedData.GetMinVotes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymRuleReplicatedData::GetMinVotes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "GetMinVotes");

	Params::GymRuleReplicatedData_GetMinVotes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymRuleReplicatedData.GetParticipantsRunning
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymRuleReplicatedData::GetParticipantsRunning() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "GetParticipantsRunning");

	Params::GymRuleReplicatedData_GetParticipantsRunning Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymRuleReplicatedData.GetQuickplayCountdownMaxTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGymRuleReplicatedData::GetQuickplayCountdownMaxTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "GetQuickplayCountdownMaxTime");

	Params::GymRuleReplicatedData_GetQuickplayCountdownMaxTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymRuleReplicatedData.GetQuickplayCountdownStartTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGymRuleReplicatedData::GetQuickplayCountdownStartTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "GetQuickplayCountdownStartTime");

	Params::GymRuleReplicatedData_GetQuickplayCountdownStartTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymRuleReplicatedData.GetRaceMaxTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGymRuleReplicatedData::GetRaceMaxTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "GetRaceMaxTime");

	Params::GymRuleReplicatedData_GetRaceMaxTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymRuleReplicatedData.GetRaceStartTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGymRuleReplicatedData::GetRaceStartTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "GetRaceStartTime");

	Params::GymRuleReplicatedData_GetRaceStartTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymRuleReplicatedData.GetRuleState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGymRulesState                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGymRulesState UGymRuleReplicatedData::GetRuleState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "GetRuleState");

	Params::GymRuleReplicatedData_GetRuleState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymRuleReplicatedData.GetTimeLeft
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGymRuleReplicatedData::GetTimeLeft() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "GetTimeLeft");

	Params::GymRuleReplicatedData_GetTimeLeft Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymRuleReplicatedData.GetTotalParticipants
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymRuleReplicatedData::GetTotalParticipants() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "GetTotalParticipants");

	Params::GymRuleReplicatedData_GetTotalParticipants Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymRuleReplicatedData.GetVoteStartTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGymRuleReplicatedData::GetVoteStartTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "GetVoteStartTime");

	Params::GymRuleReplicatedData_GetVoteStartTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymRuleReplicatedData.GetVoteState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVoteState                              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EVoteState UGymRuleReplicatedData::GetVoteState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "GetVoteState");

	Params::GymRuleReplicatedData_GetVoteState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymRuleReplicatedData.GetVoteTimer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGymRuleReplicatedData::GetVoteTimer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "GetVoteTimer");

	Params::GymRuleReplicatedData_GetVoteTimer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymRuleReplicatedData.HasVoted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGymPlayerState*                  Player                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymRuleReplicatedData::HasVoted(const class AGymPlayerState* Player) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleReplicatedData", "HasVoted");

	Params::GymRuleReplicatedData_HasVoted Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymBombModeReplicatedData.SetBombNum
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   BombNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymBombModeReplicatedData::SetBombNum(int32 BombNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymBombModeReplicatedData", "SetBombNum");

	Params::GymBombModeReplicatedData_SetBombNum Parms{};

	Parms.BombNum = BombNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymBombModeReplicatedData.SetBombTicking
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// bool                                    BombTicking                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymBombModeReplicatedData::SetBombTicking(bool BombTicking)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymBombModeReplicatedData", "SetBombTicking");

	Params::GymBombModeReplicatedData_SetBombTicking Parms{};

	Parms.BombTicking = BombTicking;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymBombModeReplicatedData.SetBombTimer
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// float                                   Timer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymBombModeReplicatedData::SetBombTimer(float Timer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymBombModeReplicatedData", "SetBombTimer");

	Params::GymBombModeReplicatedData_SetBombTimer Parms{};

	Parms.Timer = Timer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymBombModeReplicatedData.SetMaxRounds
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   Rounds                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymBombModeReplicatedData::SetMaxRounds(int32 Rounds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymBombModeReplicatedData", "SetMaxRounds");

	Params::GymBombModeReplicatedData_SetMaxRounds Parms{};

	Parms.Rounds = Rounds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymBombModeReplicatedData.SetRoundNum
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   Rounds                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymBombModeReplicatedData::SetRoundNum(int32 Rounds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymBombModeReplicatedData", "SetRoundNum");

	Params::GymBombModeReplicatedData_SetRoundNum Parms{};

	Parms.Rounds = Rounds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymBombModeReplicatedData.SetRoundStartTime
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymBombModeReplicatedData::SetRoundStartTime(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymBombModeReplicatedData", "SetRoundStartTime");

	Params::GymBombModeReplicatedData_SetRoundStartTime Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymBombModeReplicatedData.GetBombNum
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymBombModeReplicatedData::GetBombNum() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymBombModeReplicatedData", "GetBombNum");

	Params::GymBombModeReplicatedData_GetBombNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymBombModeReplicatedData.GetBombTicking
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymBombModeReplicatedData::GetBombTicking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymBombModeReplicatedData", "GetBombTicking");

	Params::GymBombModeReplicatedData_GetBombTicking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymBombModeReplicatedData.GetBombTimer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGymBombModeReplicatedData::GetBombTimer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymBombModeReplicatedData", "GetBombTimer");

	Params::GymBombModeReplicatedData_GetBombTimer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymBombModeReplicatedData.GetMaxRounds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymBombModeReplicatedData::GetMaxRounds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymBombModeReplicatedData", "GetMaxRounds");

	Params::GymBombModeReplicatedData_GetMaxRounds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymBombModeReplicatedData.GetRoundNum
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymBombModeReplicatedData::GetRoundNum() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymBombModeReplicatedData", "GetRoundNum");

	Params::GymBombModeReplicatedData_GetRoundNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymBombModeReplicatedData.GetRoundStartTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGymBombModeReplicatedData::GetRoundStartTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymBombModeReplicatedData", "GetRoundStartTime");

	Params::GymBombModeReplicatedData_GetRoundStartTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction GYMGAME.GymGuiConfirmWidget.OnConfirmReacted__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Result                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiConfirmWidget::OnConfirmReacted__DelegateSignature(bool Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiConfirmWidget", "OnConfirmReacted__DelegateSignature");

	Params::GymGuiConfirmWidget_OnConfirmReacted__DelegateSignature Parms{};

	Parms.Result = Result;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiConfirmWidget.ShowConfirm
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Message                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             AcceptMessage                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             DeclineMessage                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGuiConfirmWidget::ShowConfirm(const class FText& Message, const class FText& AcceptMessage, const class FText& DeclineMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiConfirmWidget", "ShowConfirm");

	Params::GymGuiConfirmWidget_ShowConfirm Parms{};

	Parms.Message = std::move(Message);
	Parms.AcceptMessage = std::move(AcceptMessage);
	Parms.DeclineMessage = std::move(DeclineMessage);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiConfirmWidget.IsConfirmOpen
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGuiConfirmWidget::IsConfirmOpen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiConfirmWidget", "IsConfirmOpen");

	Params::GymGuiConfirmWidget_IsConfirmOpen Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GYMGAME.GymBPUtils.CopyTextToClipboard
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymBPUtils::CopyTextToClipboard(const class FString& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymBPUtils", "CopyTextToClipboard");

	Params::GymBPUtils_CopyTextToClipboard Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymBPUtils.FilterLevelName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             InLevelName                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             OutLevelName                                           (Parm, OutParm, NativeAccessSpecifierPublic)

void UGymBPUtils::FilterLevelName(const class FText& InLevelName, class FText* OutLevelName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymBPUtils", "FilterLevelName");

	Params::GymBPUtils_FilterLevelName Parms{};

	Parms.InLevelName = std::move(InLevelName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLevelName != nullptr)
		*OutLevelName = std::move(Parms.OutLevelName);
}


// Function GYMGAME.GymBPUtils.FilterText
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           InText                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutText                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymBPUtils::FilterText(const class FString& InText, class FString* OutText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymBPUtils", "FilterText");

	Params::GymBPUtils_FilterText Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutText != nullptr)
		*OutText = std::move(Parms.OutText);
}


// Function GYMGAME.GymBPUtils.FocusAndSetAsHovered
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymBPUtils::FocusAndSetAsHovered(class UWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymBPUtils", "FocusAndSetAsHovered");

	Params::GymBPUtils_FocusAndSetAsHovered Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymBPUtils.GetCurrentFocusedWidget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UGymBPUtils::GetCurrentFocusedWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymBPUtils", "GetCurrentFocusedWidget");

	Params::GymBPUtils_GetCurrentFocusedWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymBPUtils.GetFocusCause
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFocusEvent                      InFocusEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// EFocusCause                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFocusCause UGymBPUtils::GetFocusCause(const struct FFocusEvent& InFocusEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymBPUtils", "GetFocusCause");

	Params::GymBPUtils_GetFocusCause Parms{};

	Parms.InFocusEvent = std::move(InFocusEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymBPUtils.IsDevBuild
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymBPUtils::IsDevBuild()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymBPUtils", "IsDevBuild");

	Params::GymBPUtils_IsDevBuild Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymBPUtils.IsShippingBuild
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymBPUtils::IsShippingBuild()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymBPUtils", "IsShippingBuild");

	Params::GymBPUtils_IsShippingBuild Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymBPUtils.ResolutionStringToIntPoint
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FString                           ResolutionString                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPoint                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntPoint UGymBPUtils::ResolutionStringToIntPoint(const class FString& ResolutionString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymBPUtils", "ResolutionStringToIntPoint");

	Params::GymBPUtils_ResolutionStringToIntPoint Parms{};

	Parms.ResolutionString = std::move(ResolutionString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymBPUtils.RunningInPIE
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymBPUtils::RunningInPIE()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymBPUtils", "RunningInPIE");

	Params::GymBPUtils_RunningInPIE Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCameraControl.PlayerSelectedModeIsFP
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymCameraControl::PlayerSelectedModeIsFP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCameraControl", "PlayerSelectedModeIsFP");

	Params::GymCameraControl_PlayerSelectedModeIsFP Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiCreateMenuWidget.CreateLevel
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGuiCreateMenuWidget::CreateLevel(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiCreateMenuWidget", "CreateLevel");

	Params::GymGuiCreateMenuWidget_CreateLevel Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiCreateMenuWidget.CreateLevelWithBaseMap
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BaseMapIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGuiCreateMenuWidget::CreateLevelWithBaseMap(const class FString& Name_0, int32 BaseMapIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiCreateMenuWidget", "CreateLevelWithBaseMap");

	Params::GymGuiCreateMenuWidget_CreateLevelWithBaseMap Parms{};

	Parms.Name_0 = std::move(Name_0);
	Parms.BaseMapIndex = BaseMapIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiCreateMenuWidget.OnServerCreated
// (Final, Native, Protected)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ConnectString                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiCreateMenuWidget::OnServerCreated(bool Success, const class FString& ConnectString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiCreateMenuWidget", "OnServerCreated");

	Params::GymGuiCreateMenuWidget_OnServerCreated Parms{};

	Parms.Success = Success;
	Parms.ConnectString = std::move(ConnectString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiCreateMenuWidget.SelectKit
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FString                           KitId                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiCreateMenuWidget::SelectKit(const class FString& KitId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiCreateMenuWidget", "SelectKit");

	Params::GymGuiCreateMenuWidget_SelectKit Parms{};

	Parms.KitId = std::move(KitId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiMainMenuWidget.SetTabActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   CanvasIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiMainMenuWidget::SetTabActive(int32 CanvasIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiMainMenuWidget", "SetTabActive");

	Params::GymGuiMainMenuWidget_SetTabActive Parms{};

	Parms.CanvasIndex = CanvasIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiEditorWidget.ContextualConfirm
// (Event, Public, BlueprintEvent)

void UGymGuiEditorWidget::ContextualConfirm()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiEditorWidget", "ContextualConfirm");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiEditorWidget.ContextualDecline
// (Event, Public, BlueprintEvent)

void UGymGuiEditorWidget::ContextualDecline()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiEditorWidget", "ContextualDecline");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiEditorWidget.ContextualDown
// (Event, Public, BlueprintEvent)

void UGymGuiEditorWidget::ContextualDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiEditorWidget", "ContextualDown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiEditorWidget.ContextualLeft
// (Event, Public, BlueprintEvent)

void UGymGuiEditorWidget::ContextualLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiEditorWidget", "ContextualLeft");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiEditorWidget.ContextualRight
// (Event, Public, BlueprintEvent)

void UGymGuiEditorWidget::ContextualRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiEditorWidget", "ContextualRight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiEditorWidget.ContextualUp
// (Event, Public, BlueprintEvent)

void UGymGuiEditorWidget::ContextualUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiEditorWidget", "ContextualUp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiEditorWidget.EditAssetProperty
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class AGymStaticLevelAsset*             Asset                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             AssetName                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGymGuiEditorWidget::EditAssetProperty(class AGymStaticLevelAsset* Asset, const class FText& AssetName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiEditorWidget", "EditAssetProperty");

	Params::GymGuiEditorWidget_EditAssetProperty Parms{};

	Parms.Asset = Asset;
	Parms.AssetName = std::move(AssetName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiEditorWidget.GetThumbnail
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGymLevelAssetVariant            Variant                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* UGymGuiEditorWidget::GetThumbnail(const struct FGymLevelAssetVariant& Variant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiEditorWidget", "GetThumbnail");

	Params::GymGuiEditorWidget_GetThumbnail Parms{};

	Parms.Variant = std::move(Variant);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiEditorWidget.IsMovingAsset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGuiEditorWidget::IsMovingAsset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiEditorWidget", "IsMovingAsset");

	Params::GymGuiEditorWidget_IsMovingAsset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiEditorWidget.LevelKitChanged
// (Event, Public, BlueprintEvent)

void UGymGuiEditorWidget::LevelKitChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiEditorWidget", "LevelKitChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiEditorWidget.OnEditAssetPropertyVariantChanged
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class AGymStaticLevelAsset*             Asset                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             AssetName                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGymGuiEditorWidget::OnEditAssetPropertyVariantChanged(class AGymStaticLevelAsset* Asset, const class FText& AssetName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiEditorWidget", "OnEditAssetPropertyVariantChanged");

	Params::GymGuiEditorWidget_OnEditAssetPropertyVariantChanged Parms{};

	Parms.Asset = Asset;
	Parms.AssetName = std::move(AssetName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiEditorWidget.OnMovingAssetChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bIsMovingAsset                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiEditorWidget::OnMovingAssetChanged(bool bIsMovingAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiEditorWidget", "OnMovingAssetChanged");

	Params::GymGuiEditorWidget_OnMovingAssetChanged Parms{};

	Parms.bIsMovingAsset = bIsMovingAsset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiEditorWidget.OnPropertiesChangedForAsset
// (Event, Public, BlueprintEvent)
// Parameters:
// class AGymStaticLevelAsset*             Asset                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiEditorWidget::OnPropertiesChangedForAsset(class AGymStaticLevelAsset* Asset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiEditorWidget", "OnPropertiesChangedForAsset");

	Params::GymGuiEditorWidget_OnPropertiesChangedForAsset Parms{};

	Parms.Asset = Asset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiEditorWidget.OpenCategoryAndVariant
// (Event, Public, BlueprintEvent)
// Parameters:
// EGymEditorCategory                      Category                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGymAssetVariantId               VariantId                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiEditorWidget::OpenCategoryAndVariant(EGymEditorCategory Category, const struct FGymAssetVariantId& VariantId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiEditorWidget", "OpenCategoryAndVariant");

	Params::GymGuiEditorWidget_OpenCategoryAndVariant Parms{};

	Parms.Category = Category;
	Parms.VariantId = std::move(VariantId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiEditorWidget.SelectVariant
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGymAssetVariantId               VariantId                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiEditorWidget::SelectVariant(const struct FGymAssetVariantId& VariantId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiEditorWidget", "SelectVariant");

	Params::GymGuiEditorWidget_SelectVariant Parms{};

	Parms.VariantId = std::move(VariantId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiEditorWidget.SetOption
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// struct FEditorGuiOption                 Option                                                 (Parm, NativeAccessSpecifierPublic)

void UGymGuiEditorWidget::SetOption(const struct FEditorGuiOption& Option)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiEditorWidget", "SetOption");

	Params::GymGuiEditorWidget_SetOption Parms{};

	Parms.Option = std::move(Option);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiEditorWidget.SetTool
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UGymToolSetting*                  Tool                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiEditorWidget::SetTool(class UGymToolSetting* Tool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiEditorWidget", "SetTool");

	Params::GymGuiEditorWidget_SetTool Parms{};

	Parms.Tool = Tool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiEditorWidget.UnsetTool
// (Final, Native, Protected, BlueprintCallable)

void UGymGuiEditorWidget::UnsetTool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiEditorWidget", "UnsetTool");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiEditorWidget.GetCategoryAssetEntries
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGymEditorCategory                      Category                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UGymLevelAssetData*>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UGymLevelAssetData*> UGymGuiEditorWidget::GetCategoryAssetEntries(EGymEditorCategory Category) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiEditorWidget", "GetCategoryAssetEntries");

	Params::GymGuiEditorWidget_GetCategoryAssetEntries Parms{};

	Parms.Category = Category;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiEditorWidget.IsEditingAssetProperty
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGuiEditorWidget::IsEditingAssetProperty() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiEditorWidget", "IsEditingAssetProperty");

	Params::GymGuiEditorWidget_IsEditingAssetProperty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCareerFirstRules.GoalReached
// (Final, Native, Private)
// Parameters:
// class AActor*                           Goal                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGymCharacter*                    PlayerCharacter                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCareerFirstRules::GoalReached(class AActor* Goal, class AGymCharacter* PlayerCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCareerFirstRules", "GoalReached");

	Params::GymCareerFirstRules_GoalReached Parms{};

	Parms.Goal = Goal;
	Parms.PlayerCharacter = PlayerCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCareerRaveRules.BlowUpFuses
// (Final, Native, Public, BlueprintCallable)

void UGymCareerRaveRules::BlowUpFuses()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCareerRaveRules", "BlowUpFuses");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCareerRaveRules.FirstTaskEndCutsceneFinished
// (Final, Native, Private)

void UGymCareerRaveRules::FirstTaskEndCutsceneFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCareerRaveRules", "FirstTaskEndCutsceneFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCareerRaveRules.OnIceCreamLocationCollided
// (Final, Native, Private)
// Parameters:
// class AGymLocationObjectiveActor*       Location                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCareerRaveRules::OnIceCreamLocationCollided(class AGymLocationObjectiveActor* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCareerRaveRules", "OnIceCreamLocationCollided");

	Params::GymCareerRaveRules_OnIceCreamLocationCollided Parms{};

	Parms.Location = Location;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCareerRaveRules.ResetGrindObjectives
// (Final, Native, Private)

void UGymCareerRaveRules::ResetGrindObjectives()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCareerRaveRules", "ResetGrindObjectives");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCareerReplicatedData.Multi_SetCompletedtasks
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// TArray<class FName>                     Tasks                                                  (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGymCareerReplicatedData::Multi_SetCompletedtasks(const TArray<class FName>& Tasks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCareerReplicatedData", "Multi_SetCompletedtasks");

	Params::GymCareerReplicatedData_Multi_SetCompletedtasks Parms{};

	Parms.Tasks = std::move(Tasks);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCareerReplicatedData.Multi_SetCurrentTask
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class UGymQuest*                        Task                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCareerReplicatedData::Multi_SetCurrentTask(class UGymQuest* Task)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCareerReplicatedData", "Multi_SetCurrentTask");

	Params::GymCareerReplicatedData_Multi_SetCurrentTask Parms{};

	Parms.Task = Task;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCareerReplicatedData.Multi_SetMaxTasks
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// int32                                   Tasks                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCareerReplicatedData::Multi_SetMaxTasks(int32 Tasks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCareerReplicatedData", "Multi_SetMaxTasks");

	Params::GymCareerReplicatedData_Multi_SetMaxTasks Parms{};

	Parms.Tasks = Tasks;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCareerReplicatedData.Multi_SetOverrideMusic
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// bool                                    bOverride                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCareerReplicatedData::Multi_SetOverrideMusic(bool bOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCareerReplicatedData", "Multi_SetOverrideMusic");

	Params::GymCareerReplicatedData_Multi_SetOverrideMusic Parms{};

	Parms.bOverride = bOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCareerReplicatedData.Multi_SetOverrideSegment
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// int32                                   Segment                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCareerReplicatedData::Multi_SetOverrideSegment(int32 Segment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCareerReplicatedData", "Multi_SetOverrideSegment");

	Params::GymCareerReplicatedData_Multi_SetOverrideSegment Parms{};

	Parms.Segment = Segment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymStaticLevelAsset.AssetPropertiesChanged
// (Final, Native, Protected)

void AGymStaticLevelAsset::AssetPropertiesChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymStaticLevelAsset", "AssetPropertiesChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymStaticLevelAsset.BP_AssetPropertyChanged
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGymProperty                     Property                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AGymStaticLevelAsset::BP_AssetPropertyChanged(const struct FGymProperty& Property)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymStaticLevelAsset", "BP_AssetPropertyChanged");

	Params::GymStaticLevelAsset_BP_AssetPropertyChanged Parms{};

	Parms.Property = std::move(Property);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymStaticLevelAsset.GetBounds
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FBox                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FBox AGymStaticLevelAsset::GetBounds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymStaticLevelAsset", "GetBounds");

	Params::GymStaticLevelAsset_GetBounds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymStaticLevelAsset.GetGridBounds
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   GridSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBox                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FBox AGymStaticLevelAsset::GetGridBounds(int32 GridSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymStaticLevelAsset", "GetGridBounds");

	Params::GymStaticLevelAsset_GetGridBounds Parms{};

	Parms.GridSize = GridSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymStaticLevelAsset.GetProperties
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const TArray<struct FGymProperty>       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FGymProperty> AGymStaticLevelAsset::GetProperties()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymStaticLevelAsset", "GetProperties");

	Params::GymStaticLevelAsset_GetProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymStaticLevelAsset.GetProperty
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             PropertyId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGymProperty               ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGymProperty AGymStaticLevelAsset::GetProperty(class FName PropertyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymStaticLevelAsset", "GetProperty");

	Params::GymStaticLevelAsset_GetProperty Parms{};

	Parms.PropertyId = PropertyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymStaticLevelAsset.OnEditorOpen
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bOpen                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymStaticLevelAsset::OnEditorOpen(bool bOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymStaticLevelAsset", "OnEditorOpen");

	Params::GymStaticLevelAsset_OnEditorOpen Parms{};

	Parms.bOpen = bOpen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymStaticLevelAsset.GetRecordId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGymStaticLevelAsset::GetRecordId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymStaticLevelAsset", "GetRecordId");

	Params::GymStaticLevelAsset_GetRecordId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymStaticLevelAsset.HasRecordId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGymStaticLevelAsset::HasRecordId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymStaticLevelAsset", "HasRecordId");

	Params::GymStaticLevelAsset_HasRecordId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymLootActor.SetVisibility
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bVisibility                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymLootActor::SetVisibility(bool bVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymLootActor", "SetVisibility");

	Params::GymLootActor_SetVisibility Parms{};

	Parms.bVisibility = bVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCareerSkateRules.EndPoliceEvent
// (Event, Protected, BlueprintEvent)

void UGymCareerSkateRules::EndPoliceEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCareerSkateRules", "EndPoliceEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymCareerSkateRules.StartPoliceEvent
// (Event, Protected, BlueprintEvent)

void UGymCareerSkateRules::StartPoliceEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCareerSkateRules", "StartPoliceEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiPodiumNameplateWidget.BP_Hide
// (Event, Protected, BlueprintEvent)

void UGymGuiPodiumNameplateWidget::BP_Hide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPodiumNameplateWidget", "BP_Hide");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiPodiumNameplateWidget.BP_SetPlayerScore
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGymPodiumScoreData              Score                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGymGuiPodiumNameplateWidget::BP_SetPlayerScore(const struct FGymPodiumScoreData& Score)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPodiumNameplateWidget", "BP_SetPlayerScore");

	Params::GymGuiPodiumNameplateWidget_BP_SetPlayerScore Parms{};

	Parms.Score = std::move(Score);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymLootRules.OnLootCollected
// (Final, Native, Public)
// Parameters:
// class AGymLootActor*                    LootActor                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymLootRules::OnLootCollected(class AGymLootActor* LootActor, class AController* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymLootRules", "OnLootCollected");

	Params::GymLootRules_OnLootCollected Parms{};

	Parms.LootActor = LootActor;
	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCharacter.EnableBotTick
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymCharacter::EnableBotTick(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "EnableBotTick");

	Params::GymCharacter_EnableBotTick Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCharacter.ForceSetPlayerLocationAndRotation
// (Net, NetReliable, Native, Event, NetMulticast, Public, HasDefaults)
// Parameters:
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AGymCharacter::ForceSetPlayerLocationAndRotation(const struct FVector& Location, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "ForceSetPlayerLocationAndRotation");

	Params::GymCharacter_ForceSetPlayerLocationAndRotation Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCharacter.ForceStateSyncEventRPC
// (Net, NetReliable, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// double                                  Timestamp                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EventInSeconds                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Loc                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    FireOnServer                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    FireOnClient                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ClientIgnoreEventIfLate                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymCharacter::ForceStateSyncEventRPC(double Timestamp, float EventInSeconds, const struct FVector& Loc, bool FireOnServer, bool FireOnClient, bool ClientIgnoreEventIfLate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "ForceStateSyncEventRPC");

	Params::GymCharacter_ForceStateSyncEventRPC Parms{};

	Parms.Timestamp = Timestamp;
	Parms.EventInSeconds = EventInSeconds;
	Parms.Loc = std::move(Loc);
	Parms.FireOnServer = FireOnServer;
	Parms.FireOnClient = FireOnClient;
	Parms.ClientIgnoreEventIfLate = ClientIgnoreEventIfLate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCharacter.Multi_EndRagdoll
// (Net, NetReliable, Native, Event, NetMulticast, Public, BlueprintCallable)

void AGymCharacter::Multi_EndRagdoll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "Multi_EndRagdoll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCharacter.Multi_ImportAndPlayRecord
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymCharacter::Multi_ImportAndPlayRecord(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "Multi_ImportAndPlayRecord");

	Params::GymCharacter_Multi_ImportAndPlayRecord Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCharacter.Multi_Ragdoll
// (Net, NetReliable, Native, Event, NetMulticast, Public, BlueprintCallable)
// Parameters:
// bool                                    bGetUpWhenPossible                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymCharacter::Multi_Ragdoll(bool bGetUpWhenPossible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "Multi_Ragdoll");

	Params::GymCharacter_Multi_Ragdoll Parms{};

	Parms.bGetUpWhenPossible = bGetUpWhenPossible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCharacter.Multi_Ragdoll_AddForce
// (Net, NetReliable, Native, Event, NetMulticast, Public, HasDefaults)
// Parameters:
// struct FVector                          Impulse                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymCharacter::Multi_Ragdoll_AddForce(const struct FVector& Impulse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "Multi_Ragdoll_AddForce");

	Params::GymCharacter_Multi_Ragdoll_AddForce Parms{};

	Parms.Impulse = std::move(Impulse);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCharacter.OnAnimationDebugModeReset
// (Event, Public, BlueprintEvent)

void AGymCharacter::OnAnimationDebugModeReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "OnAnimationDebugModeReset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymCharacter.OnRep_PossessedBy
// (Final, Native, Private)

void AGymCharacter::OnRep_PossessedBy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "OnRep_PossessedBy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCharacter.OnRepInitialLocation
// (Final, Native, Private)

void AGymCharacter::OnRepInitialLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "OnRepInitialLocation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCharacter.OnRepInitialRotation
// (Final, Native, Private)

void AGymCharacter::OnRepInitialRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "OnRepInitialRotation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCharacter.RespawnPlayerToStartRPC
// (Net, NetReliable, Native, Event, Public, NetServer)

void AGymCharacter::RespawnPlayerToStartRPC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "RespawnPlayerToStartRPC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCharacter.Server_ImportAndPlayRecord
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymCharacter::Server_ImportAndPlayRecord(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "Server_ImportAndPlayRecord");

	Params::GymCharacter_Server_ImportAndPlayRecord Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCharacter.SetControlTickEnabled
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymCharacter::SetControlTickEnabled(bool bEnabled, const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "SetControlTickEnabled");

	Params::GymCharacter_SetControlTickEnabled Parms{};

	Parms.bEnabled = bEnabled;
	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCharacter.SetEditMode_Server
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymCharacter::SetEditMode_Server(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "SetEditMode_Server");

	Params::GymCharacter_SetEditMode_Server Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCharacter.ToggleInputRecord
// (Final, Native, Public, BlueprintCallable)

void AGymCharacter::ToggleInputRecord()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "ToggleInputRecord");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCharacter.UpdateManualServerWorldTimeDeltaRPC
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// double                                  ServerWorldTime                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymCharacter::UpdateManualServerWorldTimeDeltaRPC(double ServerWorldTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "UpdateManualServerWorldTimeDeltaRPC");

	Params::GymCharacter_UpdateManualServerWorldTimeDeltaRPC Parms{};

	Parms.ServerWorldTime = ServerWorldTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCharacter.GetAnimationControl
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymAnimationControl*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymAnimationControl* AGymCharacter::GetAnimationControl() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "GetAnimationControl");

	Params::GymCharacter_GetAnimationControl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCharacter.GetCameraControl
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymCameraControl*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymCameraControl* AGymCharacter::GetCameraControl() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "GetCameraControl");

	Params::GymCharacter_GetCameraControl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCharacter.GetCustomizationControl
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymCustomizationControl*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymCustomizationControl* AGymCharacter::GetCustomizationControl() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "GetCustomizationControl");

	Params::GymCharacter_GetCustomizationControl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCharacter.GetDialogueControl
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymDialogueControl*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymDialogueControl* AGymCharacter::GetDialogueControl() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "GetDialogueControl");

	Params::GymCharacter_GetDialogueControl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCharacter.GetEditorControl
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymEditorControl*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymEditorControl* AGymCharacter::GetEditorControl() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "GetEditorControl");

	Params::GymCharacter_GetEditorControl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCharacter.GetGymController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGymPlayerController*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGymPlayerController* AGymCharacter::GetGymController() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "GetGymController");

	Params::GymCharacter_GetGymController Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCharacter.GetGymPlayerState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGymPlayerState*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGymPlayerState* AGymCharacter::GetGymPlayerState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "GetGymPlayerState");

	Params::GymCharacter_GetGymPlayerState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCharacter.GetInputControl
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymInputControl*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymInputControl* AGymCharacter::GetInputControl() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "GetInputControl");

	Params::GymCharacter_GetInputControl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCharacter.GetRuleControl
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymRuleControl*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymRuleControl* AGymCharacter::GetRuleControl() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "GetRuleControl");

	Params::GymCharacter_GetRuleControl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCharacter.RenderAssetThumbnails
// (Final, Exec, Native, Public, Const)
// Parameters:
// class FString                           Arg1                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymCharacter::RenderAssetThumbnails(const class FString& Arg1) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "RenderAssetThumbnails");

	Params::GymCharacter_RenderAssetThumbnails Parms{};

	Parms.Arg1 = std::move(Arg1);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCharacter.RenderCustomizationPreviews
// (Final, Exec, Native, Public, Const)
// Parameters:
// class FString                           Arg1                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Arg2                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymCharacter::RenderCustomizationPreviews(const class FString& Arg1, const class FString& Arg2) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "RenderCustomizationPreviews");

	Params::GymCharacter_RenderCustomizationPreviews Parms{};

	Parms.Arg1 = std::move(Arg1);
	Parms.Arg2 = std::move(Arg2);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCharacter.RenderCustomizationThumbnails
// (Final, Exec, Native, Public, Const)
// Parameters:
// class FString                           Arg1                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Arg2                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymCharacter::RenderCustomizationThumbnails(const class FString& Arg1, const class FString& Arg2) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "RenderCustomizationThumbnails");

	Params::GymCharacter_RenderCustomizationThumbnails Parms{};

	Parms.Arg1 = std::move(Arg1);
	Parms.Arg2 = std::move(Arg2);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCharacter.ReplaceAssetThumbnails
// (Final, Exec, Native, Public, Const)
// Parameters:
// class FString                           Arg1                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymCharacter::ReplaceAssetThumbnails(const class FString& Arg1) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "ReplaceAssetThumbnails");

	Params::GymCharacter_ReplaceAssetThumbnails Parms{};

	Parms.Arg1 = std::move(Arg1);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCharacter.ReplaceCustomizationPreviews
// (Final, Exec, Native, Public, Const)
// Parameters:
// class FString                           Arg1                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymCharacter::ReplaceCustomizationPreviews(const class FString& Arg1) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "ReplaceCustomizationPreviews");

	Params::GymCharacter_ReplaceCustomizationPreviews Parms{};

	Parms.Arg1 = std::move(Arg1);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCharacter.ReplaceCustomizationThumbnails
// (Final, Exec, Native, Public, Const)
// Parameters:
// class FString                           Arg1                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymCharacter::ReplaceCustomizationThumbnails(const class FString& Arg1) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "ReplaceCustomizationThumbnails");

	Params::GymCharacter_ReplaceCustomizationThumbnails Parms{};

	Parms.Arg1 = std::move(Arg1);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCharacter.RepNotify_UpdateVaultCount
// (Final, Native, Public, Const)

void AGymCharacter::RepNotify_UpdateVaultCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "RepNotify_UpdateVaultCount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCharacter.WaitingForRespawn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGymCharacter::WaitingForRespawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacter", "WaitingForRespawn");

	Params::GymCharacter_WaitingForRespawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCharacterAnimInstance.OnAnimationNotify
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCharacterAnimInstance::OnAnimationNotify(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacterAnimInstance", "OnAnimationNotify");

	Params::GymCharacterAnimInstance_OnAnimationNotify Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiPlaylistWidget.GetPlaylistName
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGymGuiPlaylistWidget::GetPlaylistName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPlaylistWidget", "GetPlaylistName");

	Params::GymGuiPlaylistWidget_GetPlaylistName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiPlaylistWidget.LoadNextLevel
// (Final, Native, Public, BlueprintCallable)

void UGymGuiPlaylistWidget::LoadNextLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPlaylistWidget", "LoadNextLevel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiPlaylistWidget.OpenScoreboard
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bIsValidLevel                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiPlaylistWidget::OpenScoreboard(bool bIsValidLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPlaylistWidget", "OpenScoreboard");

	Params::GymGuiPlaylistWidget_OpenScoreboard Parms{};

	Parms.bIsValidLevel = bIsValidLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiPlaylistWidget.OrderByLastLevelTotalScore
// (Final, Native, Protected, BlueprintCallable)

void UGymGuiPlaylistWidget::OrderByLastLevelTotalScore()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPlaylistWidget", "OrderByLastLevelTotalScore");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiPlaylistWidget.OrderByThisLevelStanding
// (Final, Native, Protected, BlueprintCallable)

void UGymGuiPlaylistWidget::OrderByThisLevelStanding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPlaylistWidget", "OrderByThisLevelStanding");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiPlaylistWidget.OrderByTotalScore
// (Final, Native, Protected, BlueprintCallable)

void UGymGuiPlaylistWidget::OrderByTotalScore()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPlaylistWidget", "OrderByTotalScore");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiPlaylistWidget.Restart
// (Final, Native, Public, BlueprintCallable)

void UGymGuiPlaylistWidget::Restart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPlaylistWidget", "Restart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiPlaylistWidget.ReturnToMainMenu
// (Final, Native, Public, BlueprintCallable)

void UGymGuiPlaylistWidget::ReturnToMainMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPlaylistWidget", "ReturnToMainMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiPlaylistWidget.GetLevelCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymGuiPlaylistWidget::GetLevelCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPlaylistWidget", "GetLevelCount");

	Params::GymGuiPlaylistWidget_GetLevelCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiPlaylistWidget.IsLocalAndFinal
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGuiPlaylistWidget::IsLocalAndFinal() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPlaylistWidget", "IsLocalAndFinal");

	Params::GymGuiPlaylistWidget_IsLocalAndFinal Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiPlaylistWidget.IsLocalPlaylist
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGuiPlaylistWidget::IsLocalPlaylist() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPlaylistWidget", "IsLocalPlaylist");

	Params::GymGuiPlaylistWidget_IsLocalPlaylist Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiPlaylistWidget.IsSingleCareerLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGuiPlaylistWidget::IsSingleCareerLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPlaylistWidget", "IsSingleCareerLevel");

	Params::GymGuiPlaylistWidget_IsSingleCareerLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiRuleStateWidget.OnEliminated
// (Event, Public, BlueprintEvent)
// Parameters:
// EEliminationReason                      EliminationReason                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiRuleStateWidget::OnEliminated(const EEliminationReason EliminationReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRuleStateWidget", "OnEliminated");

	Params::GymGuiRuleStateWidget_OnEliminated Parms{};

	Parms.EliminationReason = EliminationReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiRuleStateWidget.OnFinished
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bIsRoyale                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiRuleStateWidget::OnFinished(bool bIsRoyale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRuleStateWidget", "OnFinished");

	Params::GymGuiRuleStateWidget_OnFinished Parms{};

	Parms.bIsRoyale = bIsRoyale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiRuleStateWidget.ParticipantReachedCheckpoint
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiRuleStateWidget::ParticipantReachedCheckpoint(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRuleStateWidget", "ParticipantReachedCheckpoint");

	Params::GymGuiRuleStateWidget_ParticipantReachedCheckpoint Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiRuleStateWidget.GetBasicParticipantData
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymParticipantRepData*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymParticipantRepData* UGymGuiRuleStateWidget::GetBasicParticipantData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRuleStateWidget", "GetBasicParticipantData");

	Params::GymGuiRuleStateWidget_GetBasicParticipantData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiRuleStateWidget.GetBasicRuleData
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymRuleReplicatedData*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymRuleReplicatedData* UGymGuiRuleStateWidget::GetBasicRuleData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRuleStateWidget", "GetBasicRuleData");

	Params::GymGuiRuleStateWidget_GetBasicRuleData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCharacterCustomizationWidget.IsAssetOwned
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGymInventory                    Inventory                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UGymCustomizationAsset*           Asset                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymCharacterCustomizationWidget::IsAssetOwned(const struct FGymInventory& Inventory, const class UGymCustomizationAsset* Asset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymCharacterCustomizationWidget", "IsAssetOwned");

	Params::GymCharacterCustomizationWidget_IsAssetOwned Parms{};

	Parms.Inventory = std::move(Inventory);
	Parms.Asset = Asset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCharacterCustomizationWidget.GetOptions
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             CharacterSlot                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FGymCharacterCustomizationGUIOption>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FGymCharacterCustomizationGUIOption> UGymCharacterCustomizationWidget::GetOptions(class FName CharacterSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacterCustomizationWidget", "GetOptions");

	Params::GymCharacterCustomizationWidget_GetOptions Parms{};

	Parms.CharacterSlot = CharacterSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCharacterCustomizationWidget.OnAssetListUpdated
// (Native, Event, Public, BlueprintEvent)

void UGymCharacterCustomizationWidget::OnAssetListUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacterCustomizationWidget", "OnAssetListUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCharacterCustomizationWidget.RandomizeCharacter
// (Final, Native, Public, BlueprintCallable)

void UGymCharacterCustomizationWidget::RandomizeCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacterCustomizationWidget", "RandomizeCharacter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCharacterCustomizationWidget.ApplyCustomizationAttribute
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// struct FGymCharacterCustomizationGUIOptionOption                                                 (Parm, NativeAccessSpecifierPublic)

void UGymCharacterCustomizationWidget::ApplyCustomizationAttribute(const struct FGymCharacterCustomizationGUIOption& Option) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacterCustomizationWidget", "ApplyCustomizationAttribute");

	Params::GymCharacterCustomizationWidget_ApplyCustomizationAttribute Parms{};

	Parms.Option = std::move(Option);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCharacterCustomizationWidget.GetCurrentOptionForSlot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             CharacterSlot                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGymCharacterCustomizationGUIOptionReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGymCharacterCustomizationGUIOption UGymCharacterCustomizationWidget::GetCurrentOptionForSlot(class FName CharacterSlot) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacterCustomizationWidget", "GetCurrentOptionForSlot");

	Params::GymCharacterCustomizationWidget_GetCurrentOptionForSlot Parms{};

	Parms.CharacterSlot = CharacterSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCharacterCustomizationWidget.GetSlots
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FGymCharacterCustomizationGUIOption>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGymCharacterCustomizationGUIOption> UGymCharacterCustomizationWidget::GetSlots() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacterCustomizationWidget", "GetSlots");

	Params::GymCharacterCustomizationWidget_GetSlots Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCharacterCustomizationWidget.IsEverySlotInUse
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymCharacterCustomizationWidget::IsEverySlotInUse() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacterCustomizationWidget", "IsEverySlotInUse");

	Params::GymCharacterCustomizationWidget_IsEverySlotInUse Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCharacterCustomizationWidget.ResetCharacter
// (Final, Native, Public, BlueprintCallable, Const)

void UGymCharacterCustomizationWidget::ResetCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCharacterCustomizationWidget", "ResetCharacter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiPreflowWidget.SetupWidget
// (Event, Public, BlueprintEvent)

void UGymGuiPreflowWidget::SetupWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPreflowWidget", "SetupWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymChasedPlayerMarker.SetOnCooldown
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymChasedPlayerMarker::SetOnCooldown(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymChasedPlayerMarker", "SetOnCooldown");

	Params::GymChasedPlayerMarker_SetOnCooldown Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiPhotoModeWidget.BPCloseGallery
// (Event, Protected, BlueprintEvent)

void UGymGuiPhotoModeWidget::BPCloseGallery()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPhotoModeWidget", "BPCloseGallery");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiPhotoModeWidget.BPOpenGallery
// (Event, Protected, BlueprintEvent)

void UGymGuiPhotoModeWidget::BPOpenGallery()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPhotoModeWidget", "BPOpenGallery");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiPhotoModeWidget.CloseGallery
// (Final, Native, Protected, BlueprintCallable)

void UGymGuiPhotoModeWidget::CloseGallery()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPhotoModeWidget", "CloseGallery");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiPhotoModeWidget.ClosePhotoMode
// (Final, Native, Protected, BlueprintCallable)

void UGymGuiPhotoModeWidget::ClosePhotoMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPhotoModeWidget", "ClosePhotoMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiPhotoModeWidget.GetLocalPhotosPaths
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   MaxPhotoCount                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UGymGuiPhotoModeWidget::GetLocalPhotosPaths(int32 MaxPhotoCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPhotoModeWidget", "GetLocalPhotosPaths");

	Params::GymGuiPhotoModeWidget_GetLocalPhotosPaths Parms{};

	Parms.MaxPhotoCount = MaxPhotoCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiPhotoModeWidget.GetUniquePhotoFileNames
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           FullSizeFileName                                       (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ThumbnailFileName                                      (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Overwrite                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiPhotoModeWidget::GetUniquePhotoFileNames(class FString* FullSizeFileName, class FString* ThumbnailFileName, bool Overwrite)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPhotoModeWidget", "GetUniquePhotoFileNames");

	Params::GymGuiPhotoModeWidget_GetUniquePhotoFileNames Parms{};

	Parms.Overwrite = Overwrite;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FullSizeFileName != nullptr)
		*FullSizeFileName = std::move(Parms.FullSizeFileName);

	if (ThumbnailFileName != nullptr)
		*ThumbnailFileName = std::move(Parms.ThumbnailFileName);
}


// Function GYMGAME.GymGuiPhotoModeWidget.IsMapOwner
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGuiPhotoModeWidget::IsMapOwner()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPhotoModeWidget", "IsMapOwner");

	Params::GymGuiPhotoModeWidget_IsMapOwner Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiPhotoModeWidget.IsPhotoFromThisLevel
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FString                           PhotoFilePath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGuiPhotoModeWidget::IsPhotoFromThisLevel(const class FString& PhotoFilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPhotoModeWidget", "IsPhotoFromThisLevel");

	Params::GymGuiPhotoModeWidget_IsPhotoFromThisLevel Parms{};

	Parms.PhotoFilePath = std::move(PhotoFilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiPhotoModeWidget.NotifyThumbnailUpdated
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FString                           LocalFilePath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiPhotoModeWidget::NotifyThumbnailUpdated(const class FString& LocalFilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPhotoModeWidget", "NotifyThumbnailUpdated");

	Params::GymGuiPhotoModeWidget_NotifyThumbnailUpdated Parms{};

	Parms.LocalFilePath = std::move(LocalFilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiPhotoModeWidget.OpenGallery
// (Final, Native, Protected, BlueprintCallable)

void UGymGuiPhotoModeWidget::OpenGallery()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPhotoModeWidget", "OpenGallery");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiPhotoModeWidget.SetPhotoAsThumbnail
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FString                           PhotoFilePath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGuiPhotoModeWidget::SetPhotoAsThumbnail(const class FString& PhotoFilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPhotoModeWidget", "SetPhotoAsThumbnail");

	Params::GymGuiPhotoModeWidget_SetPhotoAsThumbnail Parms{};

	Parms.PhotoFilePath = std::move(PhotoFilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiPhotoModeWidget.TakeScreenshot
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPoint                        Dimensions                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiPhotoModeWidget::TakeScreenshot(const class FString& FilePath, const struct FIntPoint& Dimensions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPhotoModeWidget", "TakeScreenshot");

	Params::GymGuiPhotoModeWidget_TakeScreenshot Parms{};

	Parms.FilePath = std::move(FilePath);
	Parms.Dimensions = std::move(Dimensions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiPhotoModeWidget.ToggleGallery
// (Final, Native, Protected, BlueprintCallable)

void UGymGuiPhotoModeWidget::ToggleGallery()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPhotoModeWidget", "ToggleGallery");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiREScoreboardWidget.NotifyRaceRestartIn
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiREScoreboardWidget::NotifyRaceRestartIn(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiREScoreboardWidget", "NotifyRaceRestartIn");

	Params::GymGuiREScoreboardWidget_NotifyRaceRestartIn Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiREScoreboardWidget.OnCloseButtonPressed
// (Final, Native, Public)

void UGymGuiREScoreboardWidget::OnCloseButtonPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiREScoreboardWidget", "OnCloseButtonPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCheckpointPiece.BP_IndexChanged
// (Event, Protected, BlueprintEvent)

void AGymCheckpointPiece::BP_IndexChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCheckpointPiece", "BP_IndexChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymCheckpointPiece.OnActorOverlap
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGymCheckpointPiece::OnActorOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCheckpointPiece", "OnActorOverlap");

	Params::GymCheckpointPiece_OnActorOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCheckpointPiece.OnCheckpointIndexChanged
// (Native, Public)

void AGymCheckpointPiece::OnCheckpointIndexChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCheckpointPiece", "OnCheckpointIndexChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCheckpointBanner.OnRep_Width
// (Final, Native, Protected)

void AGymCheckpointBanner::OnRep_Width()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCheckpointBanner", "OnRep_Width");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCheckpointBanner.SetPlaceables
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// TArray<class AGymSplinePlaceable*>      SplinePlaceables                                       (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AGymCheckpointBanner::SetPlaceables(const TArray<class AGymSplinePlaceable*>& SplinePlaceables)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCheckpointBanner", "SetPlaceables");

	Params::GymCheckpointBanner_SetPlaceables Parms{};

	Parms.SplinePlaceables = std::move(SplinePlaceables);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCheckpointBanner.SetWidth
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// float                                   NewWidth                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymCheckpointBanner::SetWidth(float NewWidth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCheckpointBanner", "SetWidth");

	Params::GymCheckpointBanner_SetWidth Parms{};

	Parms.NewWidth = NewWidth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiRuleStateWidgetTide.GetParticipantData
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGymParticipantRepDataSprint*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymParticipantRepDataSprint* UGymGuiRuleStateWidgetTide::GetParticipantData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRuleStateWidgetTide", "GetParticipantData");

	Params::GymGuiRuleStateWidgetTide_GetParticipantData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiRuleStateWidgetTide.GetRuleData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymRuleReplicatedData*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymRuleReplicatedData* UGymGuiRuleStateWidgetTide::GetRuleData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRuleStateWidgetTide", "GetRuleData");

	Params::GymGuiRuleStateWidgetTide_GetRuleData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCheckpointManager.GetCheckpointCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymCheckpointManager::GetCheckpointCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCheckpointManager", "GetCheckpointCount");

	Params::GymCheckpointManager_GetCheckpointCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCheckpointManager.GetHighestCheckpointIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymCheckpointManager::GetHighestCheckpointIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCheckpointManager", "GetHighestCheckpointIndex");

	Params::GymCheckpointManager_GetHighestCheckpointIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiRuleStateWidgetBombMode.GetBombTimer
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGymGuiRuleStateWidgetBombMode::GetBombTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRuleStateWidgetBombMode", "GetBombTimer");

	Params::GymGuiRuleStateWidgetBombMode_GetBombTimer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiRuleStateWidgetBombMode.GetIsBombTicking
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGuiRuleStateWidgetBombMode::GetIsBombTicking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRuleStateWidgetBombMode", "GetIsBombTicking");

	Params::GymGuiRuleStateWidgetBombMode_GetIsBombTicking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiRuleStateWidgetBombMode.GetRoundStartTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGymGuiRuleStateWidgetBombMode::GetRoundStartTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRuleStateWidgetBombMode", "GetRoundStartTime");

	Params::GymGuiRuleStateWidgetBombMode_GetRoundStartTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiRuleStateWidgetBombMode.GetRuleData
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGymBombModeReplicatedData*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymBombModeReplicatedData* UGymGuiRuleStateWidgetBombMode::GetRuleData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRuleStateWidgetBombMode", "GetRuleData");

	Params::GymGuiRuleStateWidgetBombMode_GetRuleData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiRuleStateWidgetBombMode.OnBombAssigned
// (Event, Public, BlueprintEvent)

void UGymGuiRuleStateWidgetBombMode::OnBombAssigned()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRuleStateWidgetBombMode", "OnBombAssigned");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiRuleStateWidgetBombMode.OnBombNotAssigned
// (Event, Public, BlueprintEvent)

void UGymGuiRuleStateWidgetBombMode::OnBombNotAssigned()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRuleStateWidgetBombMode", "OnBombNotAssigned");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiRuleStateWidgetBombMode.OnPlayerTagged
// (Event, Public, BlueprintEvent)
// Parameters:
// class AGymPlayerState*                  OtherPlayer                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Cooldown                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiRuleStateWidgetBombMode::OnPlayerTagged(class AGymPlayerState* OtherPlayer, float Cooldown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRuleStateWidgetBombMode", "OnPlayerTagged");

	Params::GymGuiRuleStateWidgetBombMode_OnPlayerTagged Parms{};

	Parms.OtherPlayer = OtherPlayer;
	Parms.Cooldown = Cooldown;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiRuleStateWidgetBombMode.OnTaggedByPlayer
// (Event, Public, BlueprintEvent)
// Parameters:
// class AGymPlayerState*                  OtherPlayer                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiRuleStateWidgetBombMode::OnTaggedByPlayer(class AGymPlayerState* OtherPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRuleStateWidgetBombMode", "OnTaggedByPlayer");

	Params::GymGuiRuleStateWidgetBombMode_OnTaggedByPlayer Parms{};

	Parms.OtherPlayer = OtherPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymCheckpointObjective.OnCheckpointReached
// (Final, Native, Private)
// Parameters:
// class AGymCheckpointPiece*              CheckpointActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCheckpointObjective::OnCheckpointReached(class AGymCheckpointPiece* CheckpointActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCheckpointObjective", "OnCheckpointReached");

	Params::GymCheckpointObjective_OnCheckpointReached Parms{};

	Parms.CheckpointActor = CheckpointActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiRadialWidget.AddSelectionWidget
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UGymGuiRadialSelectionWidget*     SelectionWidget                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiRadialWidget::AddSelectionWidget(class UGymGuiRadialSelectionWidget* SelectionWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRadialWidget", "AddSelectionWidget");

	Params::GymGuiRadialWidget_AddSelectionWidget Parms{};

	Parms.SelectionWidget = SelectionWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiRadialWidget.BP_OpenPage
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   Page                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiRadialWidget::BP_OpenPage(int32 Page)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRadialWidget", "BP_OpenPage");

	Params::GymGuiRadialWidget_BP_OpenPage Parms{};

	Parms.Page = Page;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiRadialWidget.GetSelectionWidgets
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   Page                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UGymGuiRadialSelectionWidget*>ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UGymGuiRadialSelectionWidget*> UGymGuiRadialWidget::GetSelectionWidgets(int32 Page)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRadialWidget", "GetSelectionWidgets");

	Params::GymGuiRadialWidget_GetSelectionWidgets Parms{};

	Parms.Page = Page;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSplinePlaceable.GetSplinePointOffset
// (Native, Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AGymSplinePlaceable::GetSplinePointOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSplinePlaceable", "GetSplinePointOffset");

	Params::GymSplinePlaceable_GetSplinePointOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSplinePlaceable.SetVisible
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    State                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymSplinePlaceable::SetVisible(const bool State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSplinePlaceable", "SetVisible");

	Params::GymSplinePlaceable_SetVisible Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymFinishlinePlaceable.BP_SetIsEndPoint
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bEndPoint                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymFinishlinePlaceable::BP_SetIsEndPoint(bool bEndPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymFinishlinePlaceable", "BP_SetIsEndPoint");

	Params::GymFinishlinePlaceable_BP_SetIsEndPoint Parms{};

	Parms.bEndPoint = bEndPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiRuleStateWidgetObstacle.GetParticipantData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymParticipantRepDataObby*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymParticipantRepDataObby* UGymGuiRuleStateWidgetObstacle::GetParticipantData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRuleStateWidgetObstacle", "GetParticipantData");

	Params::GymGuiRuleStateWidgetObstacle_GetParticipantData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiRuleStateWidgetObstacle.GetRuleData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymOCReplicatedData*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymOCReplicatedData* UGymGuiRuleStateWidgetObstacle::GetRuleData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRuleStateWidgetObstacle", "GetRuleData");

	Params::GymGuiRuleStateWidgetObstacle_GetRuleData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCheckpointSpawn.GetIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGymCheckpointSpawn::GetIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCheckpointSpawn", "GetIndex");

	Params::GymCheckpointSpawn_GetIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiSpectatorRuleMetaWidget.OnEliminated
// (Event, Public, BlueprintEvent)
// Parameters:
// EEliminationReason                      EliminationReason                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiSpectatorRuleMetaWidget::OnEliminated(const EEliminationReason EliminationReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiSpectatorRuleMetaWidget", "OnEliminated");

	Params::GymGuiSpectatorRuleMetaWidget_OnEliminated Parms{};

	Parms.EliminationReason = EliminationReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiSpectatorRuleMetaWidget.ParticipantReachedCheckpoint
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiSpectatorRuleMetaWidget::ParticipantReachedCheckpoint(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiSpectatorRuleMetaWidget", "ParticipantReachedCheckpoint");

	Params::GymGuiSpectatorRuleMetaWidget_ParticipantReachedCheckpoint Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiSpectatorRuleWidgetLoot.OnLootCollected
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   Collected                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LootLeft                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiSpectatorRuleWidgetLoot::OnLootCollected(int32 Collected, int32 LootLeft)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiSpectatorRuleWidgetLoot", "OnLootCollected");

	Params::GymGuiSpectatorRuleWidgetLoot_OnLootCollected Parms{};

	Parms.Collected = Collected;
	Parms.LootLeft = LootLeft;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiSpectatorRuleWidgetLoot.GetParticipantData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymParticipantRepDataLoot*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymParticipantRepDataLoot* UGymGuiSpectatorRuleWidgetLoot::GetParticipantData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiSpectatorRuleWidgetLoot", "GetParticipantData");

	Params::GymGuiSpectatorRuleWidgetLoot_GetParticipantData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiSpectatorRuleWidgetLoot.GetRuleData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymLootReplicatedData*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymLootReplicatedData* UGymGuiSpectatorRuleWidgetLoot::GetRuleData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiSpectatorRuleWidgetLoot", "GetRuleData");

	Params::GymGuiSpectatorRuleWidgetLoot_GetRuleData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiScoreboardWidget.OnPostUpdateScoreboard
// (Event, Public, BlueprintEvent)

void UGymGuiScoreboardWidget::OnPostUpdateScoreboard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiScoreboardWidget", "OnPostUpdateScoreboard");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiScoreboardWidget.OnPreUpdateScoreboard
// (Event, Public, BlueprintEvent)

void UGymGuiScoreboardWidget::OnPreUpdateScoreboard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiScoreboardWidget", "OnPreUpdateScoreboard");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymRuleModifier.GetDisplayText
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText AGymRuleModifier::GetDisplayText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleModifier", "GetDisplayText");

	Params::GymRuleModifier_GetDisplayText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiRuleStateWidgetCircuit.GetRuleData
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGymCircuitReplicatedData*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymCircuitReplicatedData* UGymGuiRuleStateWidgetCircuit::GetRuleData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRuleStateWidgetCircuit", "GetRuleData");

	Params::GymGuiRuleStateWidgetCircuit_GetRuleData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiRuleStateWidgetCircuit.GetParticipantData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymParticipantRepDataCircuit*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymParticipantRepDataCircuit* UGymGuiRuleStateWidgetCircuit::GetParticipantData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRuleStateWidgetCircuit", "GetParticipantData");

	Params::GymGuiRuleStateWidgetCircuit_GetParticipantData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCircuitReplicatedData.SetLapNum
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   Laps                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCircuitReplicatedData::SetLapNum(int32 Laps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCircuitReplicatedData", "SetLapNum");

	Params::GymCircuitReplicatedData_SetLapNum Parms{};

	Parms.Laps = Laps;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCircuitReplicatedData.GetLapNum
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymCircuitReplicatedData::GetLapNum() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCircuitReplicatedData", "GetLapNum");

	Params::GymCircuitReplicatedData_GetLapNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCircuitRules.GoalReached
// (Final, Native, Private)
// Parameters:
// class AActor*                           GoalPiece                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGymCharacter*                    PlayerCharacter                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCircuitRules::GoalReached(class AActor* GoalPiece, class AGymCharacter* PlayerCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCircuitRules", "GoalReached");

	Params::GymCircuitRules_GoalReached Parms{};

	Parms.GoalPiece = GoalPiece;
	Parms.PlayerCharacter = PlayerCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiVideoPlayer.BP_Play
// (Final, Native, Public, BlueprintCallable)

void UGymGuiVideoPlayer::BP_Play()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiVideoPlayer", "BP_Play");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiVideoPlayer.BP_SetLooping
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bShouldLoopPlayback                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiVideoPlayer::BP_SetLooping(bool bShouldLoopPlayback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiVideoPlayer", "BP_SetLooping");

	Params::GymGuiVideoPlayer_BP_SetLooping Parms{};

	Parms.bShouldLoopPlayback = bShouldLoopPlayback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiVideoPlayer.BP_SetVideo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMediaSource*                     MediaSource                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiVideoPlayer::BP_SetVideo(class UMediaSource* MediaSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiVideoPlayer", "BP_SetVideo");

	Params::GymGuiVideoPlayer_BP_SetVideo Parms{};

	Parms.MediaSource = MediaSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiVideoPlayer.BP_Stop
// (Final, Native, Public, BlueprintCallable)

void UGymGuiVideoPlayer::BP_Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiVideoPlayer", "BP_Stop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.AcceptTOS_Client
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           TOSVersion                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::AcceptTOS_Client(const class FString& TOSVersion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "AcceptTOS_Client");

	Params::GymCloudApi_AcceptTOS_Client Parms{};

	Parms.TOSVersion = std::move(TOSVersion);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.AddToPlaylist_Client
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlaylistId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           MapId                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::AddToPlaylist_Client(const class FString& PlaylistId, const class FString& MapId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "AddToPlaylist_Client");

	Params::GymCloudApi_AddToPlaylist_Client Parms{};

	Parms.PlaylistId = std::move(PlaylistId);
	Parms.MapId = std::move(MapId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.AdminSession
// (Final, Native, Public, BlueprintCallable)

void UGymCloudApi::AdminSession()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "AdminSession");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.ClaimChallenge_Client
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ChallengeId                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::ClaimChallenge_Client(const class FString& ChallengeId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "ClaimChallenge_Client");

	Params::GymCloudApi_ClaimChallenge_Client Parms{};

	Parms.ChallengeId = std::move(ChallengeId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.ClaimCheatXP_Client
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Amount                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::ClaimCheatXP_Client(const int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "ClaimCheatXP_Client");

	Params::GymCloudApi_ClaimCheatXP_Client Parms{};

	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction GYMGAME.GymCloudApi.ClientLoggedInAndReady__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UGymCloudApi::ClientLoggedInAndReady__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "ClientLoggedInAndReady__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymCloudApi.CreatePlaylist_Client
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlaylistName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Type                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::CreatePlaylist_Client(const class FString& PlaylistName, const class FString& Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "CreatePlaylist_Client");

	Params::GymCloudApi_CreatePlaylist_Client Parms{};

	Parms.PlaylistName = std::move(PlaylistName);
	Parms.Type = std::move(Type);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.DeletePlaylist_Client
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlaylistId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::DeletePlaylist_Client(const class FString& PlaylistId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "DeletePlaylist_Client");

	Params::GymCloudApi_DeletePlaylist_Client Parms{};

	Parms.PlaylistId = std::move(PlaylistId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.DownvoteMap_Client
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           MapId                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Remove                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::DownvoteMap_Client(const class FString& MapId, bool Remove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "DownvoteMap_Client");

	Params::GymCloudApi_DownvoteMap_Client Parms{};

	Parms.MapId = std::move(MapId);
	Parms.Remove = Remove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.FavouriteMap_Client
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           MapId                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Remove                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::FavouriteMap_Client(const class FString& MapId, bool Remove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "FavouriteMap_Client");

	Params::GymCloudApi_FavouriteMap_Client Parms{};

	Parms.MapId = std::move(MapId);
	Parms.Remove = Remove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.FeatureMap_Client
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           MapId                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Remove                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::FeatureMap_Client(const class FString& MapId, bool Remove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "FeatureMap_Client");

	Params::GymCloudApi_FeatureMap_Client Parms{};

	Parms.MapId = std::move(MapId);
	Parms.Remove = Remove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.GetCurrentChallenges_Client
// (Final, Native, Public, BlueprintCallable)

void UGymCloudApi::GetCurrentChallenges_Client()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "GetCurrentChallenges_Client");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.GetCurrentSeason_Client
// (Final, Native, Public, BlueprintCallable)

void UGymCloudApi::GetCurrentSeason_Client()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "GetCurrentSeason_Client");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.GetDailyPlaylists_Client
// (Final, Native, Public, BlueprintCallable)

void UGymCloudApi::GetDailyPlaylists_Client()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "GetDailyPlaylists_Client");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.GetFavouritedMaps_Client
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Page                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::GetFavouritedMaps_Client(int32 Page)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "GetFavouritedMaps_Client");

	Params::GymCloudApi_GetFavouritedMaps_Client Parms{};

	Parms.Page = Page;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.GetFeaturedMaps_Client
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Page                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::GetFeaturedMaps_Client(int32 Page)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "GetFeaturedMaps_Client");

	Params::GymCloudApi_GetFeaturedMaps_Client Parms{};

	Parms.Page = Page;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.GetInventory
// (Final, Native, Public, BlueprintCallable)

void UGymCloudApi::GetInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "GetInventory");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.GetLeaderboard_Client
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           MapId                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MapVersion                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::GetLeaderboard_Client(const class FString& MapId, const int32 MapVersion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "GetLeaderboard_Client");

	Params::GymCloudApi_GetLeaderboard_Client Parms{};

	Parms.MapId = std::move(MapId);
	Parms.MapVersion = MapVersion;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.GetMapDetails_Client
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           MapId                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsLobby                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::GetMapDetails_Client(const class FString& MapId, bool bIsLobby)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "GetMapDetails_Client");

	Params::GymCloudApi_GetMapDetails_Client Parms{};

	Parms.MapId = std::move(MapId);
	Parms.bIsLobby = bIsLobby;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.GetMaps_Client
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGymMapSearchFilters             Filters                                                (ConstParm, Parm, NativeAccessSpecifierPublic)
// int32                                   Page                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::GetMaps_Client(const struct FGymMapSearchFilters& Filters, int32 Page)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "GetMaps_Client");

	Params::GymCloudApi_GetMaps_Client Parms{};

	Parms.Filters = std::move(Filters);
	Parms.Page = Page;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.GetOwnMaps_Client
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Page                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::GetOwnMaps_Client(int32 Page)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "GetOwnMaps_Client");

	Params::GymCloudApi_GetOwnMaps_Client Parms{};

	Parms.Page = Page;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.GetOwnPlaylists_Client
// (Final, Native, Public, BlueprintCallable)

void UGymCloudApi::GetOwnPlaylists_Client()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "GetOwnPlaylists_Client");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.GetPhotos_Client
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Page                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::GetPhotos_Client(int32 Count, int32 Page)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "GetPhotos_Client");

	Params::GymCloudApi_GetPhotos_Client Parms{};

	Parms.Count = Count;
	Parms.Page = Page;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.GetPhotosFiltered_Client
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FPhotoSearchFilters              Filters                                                (Parm, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Page                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::GetPhotosFiltered_Client(const struct FPhotoSearchFilters& Filters, int32 Count, int32 Page)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "GetPhotosFiltered_Client");

	Params::GymCloudApi_GetPhotosFiltered_Client Parms{};

	Parms.Filters = std::move(Filters);
	Parms.Count = Count;
	Parms.Page = Page;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.GetPlaylistDetails_Client
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlaylistId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::GetPlaylistDetails_Client(const class FString& PlaylistId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "GetPlaylistDetails_Client");

	Params::GymCloudApi_GetPlaylistDetails_Client Parms{};

	Parms.PlaylistId = std::move(PlaylistId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.GetPlaylists_Client
// (Final, Native, Public, BlueprintCallable)

void UGymCloudApi::GetPlaylists_Client()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "GetPlaylists_Client");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.GetRandomPlaylist_Client
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlayListType                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Length                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::GetRandomPlaylist_Client(const class FString& PlayListType, const int32 Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "GetRandomPlaylist_Client");

	Params::GymCloudApi_GetRandomPlaylist_Client Parms{};

	Parms.PlayListType = std::move(PlayListType);
	Parms.Length = Length;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.GetUnclaimedRewards_Client
// (Final, Native, Public, BlueprintCallable)

void UGymCloudApi::GetUnclaimedRewards_Client()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "GetUnclaimedRewards_Client");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction GYMGAME.GymCloudApi.GymServerJoinRequestComplete__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           JoinUrl                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::GymServerJoinRequestComplete__DelegateSignature(bool Success, const class FString& JoinUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "GymServerJoinRequestComplete__DelegateSignature");

	Params::GymCloudApi_GymServerJoinRequestComplete__DelegateSignature Parms{};

	Parms.Success = Success;
	Parms.JoinUrl = std::move(JoinUrl);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GYMGAME.GymCloudApi.LoginComplete__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::LoginComplete__DelegateSignature(bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "LoginComplete__DelegateSignature");

	Params::GymCloudApi_LoginComplete__DelegateSignature Parms{};

	Parms.Success = Success;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GYMGAME.GymCloudApi.LogoutComplete__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UGymCloudApi::LogoutComplete__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "LogoutComplete__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction GYMGAME.GymCloudApi.MapSearchComplete__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::MapSearchComplete__DelegateSignature(bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "MapSearchComplete__DelegateSignature");

	Params::GymCloudApi_MapSearchComplete__DelegateSignature Parms{};

	Parms.Success = Success;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GYMGAME.GymCloudApi.OnChallengeRequestComplete__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGymCHallengeResponse            Challenges                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGymCloudApi::OnChallengeRequestComplete__DelegateSignature(bool Success, const struct FGymCHallengeResponse& Challenges)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "OnChallengeRequestComplete__DelegateSignature");

	Params::GymCloudApi_OnChallengeRequestComplete__DelegateSignature Parms{};

	Parms.Success = Success;
	Parms.Challenges = std::move(Challenges);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GYMGAME.GymCloudApi.OnCheatXPGranted__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::OnCheatXPGranted__DelegateSignature(bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "OnCheatXPGranted__DelegateSignature");

	Params::GymCloudApi_OnCheatXPGranted__DelegateSignature Parms{};

	Parms.Success = Success;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GYMGAME.GymCloudApi.OnCloudError__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class FText                             Message                                                (Parm, NativeAccessSpecifierPublic)

void UGymCloudApi::OnCloudError__DelegateSignature(const class FText& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "OnCloudError__DelegateSignature");

	Params::GymCloudApi_OnCloudError__DelegateSignature Parms{};

	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GYMGAME.GymCloudApi.OnCreateGymServer__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ConnectString                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::OnCreateGymServer__DelegateSignature(bool Success, const class FString& ConnectString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "OnCreateGymServer__DelegateSignature");

	Params::GymCloudApi_OnCreateGymServer__DelegateSignature Parms{};

	Parms.Success = Success;
	Parms.ConnectString = std::move(ConnectString);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GYMGAME.GymCloudApi.OnDailyPlaylistsReceived__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGymDailyPlaylist>        Playlists                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGymCloudApi::OnDailyPlaylistsReceived__DelegateSignature(bool Success, const TArray<struct FGymDailyPlaylist>& Playlists)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "OnDailyPlaylistsReceived__DelegateSignature");

	Params::GymCloudApi_OnDailyPlaylistsReceived__DelegateSignature Parms{};

	Parms.Success = Success;
	Parms.Playlists = std::move(Playlists);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GYMGAME.GymCloudApi.OnInventoryRequestComplete__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::OnInventoryRequestComplete__DelegateSignature(bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "OnInventoryRequestComplete__DelegateSignature");

	Params::GymCloudApi_OnInventoryRequestComplete__DelegateSignature Parms{};

	Parms.Success = Success;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GYMGAME.GymCloudApi.OnLeaderboardReceived__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGymLeaderboard                  Leaderboard                                            (Parm, NativeAccessSpecifierPublic)

void UGymCloudApi::OnLeaderboardReceived__DelegateSignature(bool Success, const struct FGymLeaderboard& Leaderboard)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "OnLeaderboardReceived__DelegateSignature");

	Params::GymCloudApi_OnLeaderboardReceived__DelegateSignature Parms{};

	Parms.Success = Success;
	Parms.Leaderboard = std::move(Leaderboard);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GYMGAME.GymCloudApi.OnMapDetailsReceived__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGymMapDetailsResult             Details                                                (Parm, NativeAccessSpecifierPublic)

void UGymCloudApi::OnMapDetailsReceived__DelegateSignature(bool Success, const struct FGymMapDetailsResult& Details)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "OnMapDetailsReceived__DelegateSignature");

	Params::GymCloudApi_OnMapDetailsReceived__DelegateSignature Parms{};

	Parms.Success = Success;
	Parms.Details = std::move(Details);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GYMGAME.GymCloudApi.OnMapPublished__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::OnMapPublished__DelegateSignature(bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "OnMapPublished__DelegateSignature");

	Params::GymCloudApi_OnMapPublished__DelegateSignature Parms{};

	Parms.Success = Success;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GYMGAME.GymCloudApi.OnMapRenameComplete__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::OnMapRenameComplete__DelegateSignature(bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "OnMapRenameComplete__DelegateSignature");

	Params::GymCloudApi_OnMapRenameComplete__DelegateSignature Parms{};

	Parms.Success = Success;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GYMGAME.GymCloudApi.OnMapReported__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::OnMapReported__DelegateSignature(bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "OnMapReported__DelegateSignature");

	Params::GymCloudApi_OnMapReported__DelegateSignature Parms{};

	Parms.Success = Success;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GYMGAME.GymCloudApi.OnMapVoteComplete__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::OnMapVoteComplete__DelegateSignature(bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "OnMapVoteComplete__DelegateSignature");

	Params::GymCloudApi_OnMapVoteComplete__DelegateSignature Parms{};

	Parms.Success = Success;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GYMGAME.GymCloudApi.OnPlaylistDetailsReceived__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGymPlaylistDetailsResult        Details                                                (Parm, NativeAccessSpecifierPublic)

void UGymCloudApi::OnPlaylistDetailsReceived__DelegateSignature(bool Success, const struct FGymPlaylistDetailsResult& Details)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "OnPlaylistDetailsReceived__DelegateSignature");

	Params::GymCloudApi_OnPlaylistDetailsReceived__DelegateSignature Parms{};

	Parms.Success = Success;
	Parms.Details = std::move(Details);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GYMGAME.GymCloudApi.OnRandomPlaylistReceived__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PlaylistId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::OnRandomPlaylistReceived__DelegateSignature(bool Success, const class FString& PlaylistId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "OnRandomPlaylistReceived__DelegateSignature");

	Params::GymCloudApi_OnRandomPlaylistReceived__DelegateSignature Parms{};

	Parms.Success = Success;
	Parms.PlaylistId = std::move(PlaylistId);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GYMGAME.GymCloudApi.OnSeasonRequestComplete__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::OnSeasonRequestComplete__DelegateSignature(bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "OnSeasonRequestComplete__DelegateSignature");

	Params::GymCloudApi_OnSeasonRequestComplete__DelegateSignature Parms{};

	Parms.Success = Success;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GYMGAME.GymCloudApi.OnServerDetailsReceived__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::OnServerDetailsReceived__DelegateSignature(bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "OnServerDetailsReceived__DelegateSignature");

	Params::GymCloudApi_OnServerDetailsReceived__DelegateSignature Parms{};

	Parms.Success = Success;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GYMGAME.GymCloudApi.OnTOSAccepted__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::OnTOSAccepted__DelegateSignature(bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "OnTOSAccepted__DelegateSignature");

	Params::GymCloudApi_OnTOSAccepted__DelegateSignature Parms{};

	Parms.Success = Success;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GYMGAME.GymCloudApi.OnUnclaimedRequestComplete__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGymUnclaimedRewardResponse      Response                                               (Parm, NativeAccessSpecifierPublic)

void UGymCloudApi::OnUnclaimedRequestComplete__DelegateSignature(bool Success, const struct FGymUnclaimedRewardResponse& Response)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "OnUnclaimedRequestComplete__DelegateSignature");

	Params::GymCloudApi_OnUnclaimedRequestComplete__DelegateSignature Parms{};

	Parms.Success = Success;
	Parms.Response = std::move(Response);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GYMGAME.GymCloudApi.PhotoSearchComplete__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::PhotoSearchComplete__DelegateSignature(bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "PhotoSearchComplete__DelegateSignature");

	Params::GymCloudApi_PhotoSearchComplete__DelegateSignature Parms{};

	Parms.Success = Success;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GYMGAME.GymCloudApi.PhotoUploadComplete__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::PhotoUploadComplete__DelegateSignature(bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "PhotoUploadComplete__DelegateSignature");

	Params::GymCloudApi_PhotoUploadComplete__DelegateSignature Parms{};

	Parms.Success = Success;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GYMGAME.GymCloudApi.PlaylistAddComplete__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::PlaylistAddComplete__DelegateSignature(bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "PlaylistAddComplete__DelegateSignature");

	Params::GymCloudApi_PlaylistAddComplete__DelegateSignature Parms{};

	Parms.Success = Success;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GYMGAME.GymCloudApi.PlaylistCreateComplete__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ID                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::PlaylistCreateComplete__DelegateSignature(bool Success, const class FString& ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "PlaylistCreateComplete__DelegateSignature");

	Params::GymCloudApi_PlaylistCreateComplete__DelegateSignature Parms{};

	Parms.Success = Success;
	Parms.ID = std::move(ID);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GYMGAME.GymCloudApi.PlaylistDeleteComplete__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::PlaylistDeleteComplete__DelegateSignature(bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "PlaylistDeleteComplete__DelegateSignature");

	Params::GymCloudApi_PlaylistDeleteComplete__DelegateSignature Parms{};

	Parms.Success = Success;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GYMGAME.GymCloudApi.PlaylistRemovalComplete__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::PlaylistRemovalComplete__DelegateSignature(bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "PlaylistRemovalComplete__DelegateSignature");

	Params::GymCloudApi_PlaylistRemovalComplete__DelegateSignature Parms{};

	Parms.Success = Success;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GYMGAME.GymCloudApi.PlaylistSearchComplete__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::PlaylistSearchComplete__DelegateSignature(bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "PlaylistSearchComplete__DelegateSignature");

	Params::GymCloudApi_PlaylistSearchComplete__DelegateSignature Parms{};

	Parms.Success = Success;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymCloudApi.PublishMap_Client
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           MapId                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::PublishMap_Client(const class FString& MapId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "PublishMap_Client");

	Params::GymCloudApi_PublishMap_Client Parms{};

	Parms.MapId = std::move(MapId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction GYMGAME.GymCloudApi.RegionSelected__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UGymCloudApi::RegionSelected__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "RegionSelected__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymCloudApi.RemoveFromPlaylist_Client
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlaylistId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::RemoveFromPlaylist_Client(const class FString& PlaylistId, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "RemoveFromPlaylist_Client");

	Params::GymCloudApi_RemoveFromPlaylist_Client Parms{};

	Parms.PlaylistId = std::move(PlaylistId);
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.RenameMap_Client
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           MapId                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::RenameMap_Client(const class FString& MapId, const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "RenameMap_Client");

	Params::GymCloudApi_RenameMap_Client Parms{};

	Parms.MapId = std::move(MapId);
	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.ReportMap_Client
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           MapId                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Description                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::ReportMap_Client(const class FString& MapId, const class FString& Description)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "ReportMap_Client");

	Params::GymCloudApi_ReportMap_Client Parms{};

	Parms.MapId = std::move(MapId);
	Parms.Description = std::move(Description);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.RequestDeleteMap_Client
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           MapId                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::RequestDeleteMap_Client(const class FString& MapId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "RequestDeleteMap_Client");

	Params::GymCloudApi_RequestDeleteMap_Client Parms{};

	Parms.MapId = std::move(MapId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction GYMGAME.GymCloudApi.ServerListUpdated__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::ServerListUpdated__DelegateSignature(bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "ServerListUpdated__DelegateSignature");

	Params::GymCloudApi_ServerListUpdated__DelegateSignature Parms{};

	Parms.Success = Success;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymCloudApi.SetCloudName_Client
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::SetCloudName_Client(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "SetCloudName_Client");

	Params::GymCloudApi_SetCloudName_Client Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.SteamLogin
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Ticket                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SteamName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::SteamLogin(const class FString& Ticket, const class FString& SteamName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "SteamLogin");

	Params::GymCloudApi_SteamLogin Parms{};

	Parms.Ticket = std::move(Ticket);
	Parms.SteamName = std::move(SteamName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.TestLogin
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ID                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::TestLogin(const class FString& ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "TestLogin");

	Params::GymCloudApi_TestLogin Parms{};

	Parms.ID = std::move(ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.UnpublishMap_Client
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           MapId                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::UnpublishMap_Client(const class FString& MapId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "UnpublishMap_Client");

	Params::GymCloudApi_UnpublishMap_Client Parms{};

	Parms.MapId = std::move(MapId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.UploadPhotoWithMeta_Client
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PhotoPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPhotoMetaData                   Meta                                                   (ConstParm, Parm, NativeAccessSpecifierPublic)

void UGymCloudApi::UploadPhotoWithMeta_Client(const class FString& PhotoPath, const struct FPhotoMetaData& Meta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "UploadPhotoWithMeta_Client");

	Params::GymCloudApi_UploadPhotoWithMeta_Client Parms{};

	Parms.PhotoPath = std::move(PhotoPath);
	Parms.Meta = std::move(Meta);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.UpvoteMap_Client
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           MapId                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Remove                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCloudApi::UpvoteMap_Client(const class FString& MapId, bool Remove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "UpvoteMap_Client");

	Params::GymCloudApi_UpvoteMap_Client Parms{};

	Parms.MapId = std::move(MapId);
	Parms.Remove = Remove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCloudApi.GetBaseUrl
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGymCloudApi::GetBaseUrl() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "GetBaseUrl");

	Params::GymCloudApi_GetBaseUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCloudApi.GetJoinToken
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGymCloudApi::GetJoinToken() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "GetJoinToken");

	Params::GymCloudApi_GetJoinToken Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCloudApi.GetServerInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGymServerInfo                   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGymServerInfo UGymCloudApi::GetServerInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "GetServerInfo");

	Params::GymCloudApi_GetServerInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCloudApi.GetServerVersion
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGymCloudApi::GetServerVersion() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "GetServerVersion");

	Params::GymCloudApi_GetServerVersion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCloudApi.HasClientAcceptedTos
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymCloudApi::HasClientAcceptedTos() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "HasClientAcceptedTos");

	Params::GymCloudApi_HasClientAcceptedTos Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCloudApi.IsClientAdmin
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymCloudApi::IsClientAdmin() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "IsClientAdmin");

	Params::GymCloudApi_IsClientAdmin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCloudApi.IsClientLoggedIn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymCloudApi::IsClientLoggedIn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "IsClientLoggedIn");

	Params::GymCloudApi_IsClientLoggedIn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCloudApi.IsLobbyOwner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymCloudApi::IsLobbyOwner() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCloudApi", "IsLobbyOwner");

	Params::GymCloudApi_IsLobbyOwner Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCollectibleObjective.BPLootCollected
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AGymLootActor*                    Loot                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCollectibleObjective::BPLootCollected(class AGymLootActor* Loot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCollectibleObjective", "BPLootCollected");

	Params::GymCollectibleObjective_BPLootCollected Parms{};

	Parms.Loot = Loot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymCollectibleObjective.Client_SetLootVisible
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// class AGymLootActor*                    LootActor                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVisibility                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCollectibleObjective::Client_SetLootVisible(class AGymLootActor* LootActor, bool bVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCollectibleObjective", "Client_SetLootVisible");

	Params::GymCollectibleObjective_Client_SetLootVisible Parms{};

	Parms.LootActor = LootActor;
	Parms.bVisibility = bVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCollectibleObjective.OnCollected
// (Final, Native, Private)
// Parameters:
// class AGymLootActor*                    Loot                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCollectibleObjective::OnCollected(class AGymLootActor* Loot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCollectibleObjective", "OnCollected");

	Params::GymCollectibleObjective_OnCollected Parms{};

	Parms.Loot = Loot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCollectibleObjective.GetLootCollectedText
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UGymCollectibleObjective::GetLootCollectedText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCollectibleObjective", "GetLootCollectedText");

	Params::GymCollectibleObjective_GetLootCollectedText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGlobalModifierAsset.OnActivateBP
// (Native, Event, Public, BlueprintEvent)

void AGymGlobalModifierAsset::OnActivateBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGlobalModifierAsset", "OnActivateBP");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGlobalModifierAsset.OnDeactivateBP
// (Native, Event, Public, BlueprintEvent)

void AGymGlobalModifierAsset::OnDeactivateBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGlobalModifierAsset", "OnDeactivateBP");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiTickerMessageWidget.GetTexture
// (Event, Public, BlueprintEvent)
// Parameters:
// class FString                           IconTextureId                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UGymGuiTickerMessageWidget::GetTexture(const class FString& IconTextureId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiTickerMessageWidget", "GetTexture");

	Params::GymGuiTickerMessageWidget_GetTexture Parms{};

	Parms.IconTextureId = std::move(IconTextureId);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiTickerMessageWidget.TickerPopout
// (Event, Public, BlueprintEvent)

void UGymGuiTickerMessageWidget::TickerPopout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiTickerMessageWidget", "TickerPopout");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiTickerMessageWidget.TickerPopup
// (Event, Public, BlueprintEvent)

void UGymGuiTickerMessageWidget::TickerPopup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiTickerMessageWidget", "TickerPopup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymInteractableInterface.CanInteractThroughWall
// (Native, Public)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IGymInteractableInterface::CanInteractThroughWall()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymInteractableInterface", "CanInteractThroughWall");

	Params::GymInteractableInterface_CanInteractThroughWall Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymInteractableInterface.CanInteractWith
// (Native, Public)
// Parameters:
// class AGymCharacter*                    Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              Component                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IGymInteractableInterface::CanInteractWith(class AGymCharacter* Character, class UPrimitiveComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymInteractableInterface", "CanInteractWith");

	Params::GymInteractableInterface_CanInteractWith Parms{};

	Parms.Character = Character;
	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymInteractableInterface.DisableInteract
// (Native, Public)
// Parameters:
// class AGymCharacter*                    Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              Component                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGymInteractableInterface::DisableInteract(class AGymCharacter* Character, class UPrimitiveComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymInteractableInterface", "DisableInteract");

	Params::GymInteractableInterface_DisableInteract Parms{};

	Parms.Character = Character;
	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymInteractableInterface.EnableInteract
// (Native, Public)
// Parameters:
// class AGymCharacter*                    Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              Component                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGymInteractableInterface::EnableInteract(class AGymCharacter* Character, class UPrimitiveComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymInteractableInterface", "EnableInteract");

	Params::GymInteractableInterface_EnableInteract Parms{};

	Parms.Character = Character;
	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymInteractableInterface.EndInteract
// (Native, Public)
// Parameters:
// class AGymCharacter*                    Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              Component                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGymInteractableInterface::EndInteract(class AGymCharacter* Character, class UPrimitiveComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymInteractableInterface", "EndInteract");

	Params::GymInteractableInterface_EndInteract Parms{};

	Parms.Character = Character;
	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymInteractableInterface.GetInteractionType
// (Native, Public)
// Parameters:
// class UPrimitiveComponent*              Component                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInteractionType                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EInteractionType IGymInteractableInterface::GetInteractionType(class UPrimitiveComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymInteractableInterface", "GetInteractionType");

	Params::GymInteractableInterface_GetInteractionType Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymInteractableInterface.GetLineDistance
// (Native, Public)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IGymInteractableInterface::GetLineDistance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymInteractableInterface", "GetLineDistance");

	Params::GymInteractableInterface_GetLineDistance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymInteractableInterface.GetSphereDistance
// (Native, Public)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IGymInteractableInterface::GetSphereDistance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymInteractableInterface", "GetSphereDistance");

	Params::GymInteractableInterface_GetSphereDistance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymInteractableInterface.Interact
// (Native, Public)
// Parameters:
// class AGymCharacter*                    Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              Component                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGymInteractableInterface::Interact(class AGymCharacter* Character, class UPrimitiveComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymInteractableInterface", "Interact");

	Params::GymInteractableInterface_Interact Parms{};

	Parms.Character = Character;
	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymInteractableInterface.IsForEditMode
// (Native, Public)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IGymInteractableInterface::IsForEditMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymInteractableInterface", "IsForEditMode");

	Params::GymInteractableInterface_IsForEditMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymInteractableInterface.ShouldAutoInteract
// (Native, Public)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IGymInteractableInterface::ShouldAutoInteract()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymInteractableInterface", "ShouldAutoInteract");

	Params::GymInteractableInterface_ShouldAutoInteract Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymInteractableInterface.SupportsLineTrace
// (Native, Public)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IGymInteractableInterface::SupportsLineTrace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymInteractableInterface", "SupportsLineTrace");

	Params::GymInteractableInterface_SupportsLineTrace Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymInteractableInterface.SupportsSphereTrace
// (Native, Public)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IGymInteractableInterface::SupportsSphereTrace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymInteractableInterface", "SupportsSphereTrace");

	Params::GymInteractableInterface_SupportsSphereTrace Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymInputRecorder.EndRecording
// (Final, Exec, Native, Public)

void UGymInputRecorder::EndRecording()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymInputRecorder", "EndRecording");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymInputRecorder.ExportInputRecord
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForce                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymInputRecorder::ExportInputRecord(const class FString& Filename, const bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymInputRecorder", "ExportInputRecord");

	Params::GymInputRecorder_ExportInputRecord Parms{};

	Parms.Filename = std::move(Filename);
	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymInputRecorder.ImportAndPlayRecord
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymInputRecorder::ImportAndPlayRecord(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymInputRecorder", "ImportAndPlayRecord");

	Params::GymInputRecorder_ImportAndPlayRecord Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymInputRecorder.ImportInputRecord
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymInputRecorder::ImportInputRecord(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymInputRecorder", "ImportInputRecord");

	Params::GymInputRecorder_ImportInputRecord Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymInputRecorder.SetAutoRecordOn
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    AutoRecord                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StartLocation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           RecordFileName                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymInputRecorder::SetAutoRecordOn(bool AutoRecord, int32 StartLocation, const class FString& RecordFileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymInputRecorder", "SetAutoRecordOn");

	Params::GymInputRecorder_SetAutoRecordOn Parms{};

	Parms.AutoRecord = AutoRecord;
	Parms.StartLocation = StartLocation;
	Parms.RecordFileName = std::move(RecordFileName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymInputRecorder.StartRecording
// (Final, Exec, Native, Public)

void UGymInputRecorder::StartRecording()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymInputRecorder", "StartRecording");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymInputRecorder.GetIsRecording
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymInputRecorder::GetIsRecording() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymInputRecorder", "GetIsRecording");

	Params::GymInputRecorder_GetIsRecording Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymInputRecorder.GetRecordTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGymInputRecorder::GetRecordTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymInputRecorder", "GetRecordTime");

	Params::GymInputRecorder_GetRecordTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCrowd.BlueprintEditorTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymCrowd::BlueprintEditorTick(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCrowd", "BlueprintEditorTick");

	Params::GymCrowd_BlueprintEditorTick Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymCrowd.OnInitializeCrowd
// (Event, Public, BlueprintEvent)

void AGymCrowd::OnInitializeCrowd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCrowd", "OnInitializeCrowd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymCrowd.SetCrowdState
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           State                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymCrowd::SetCrowdState(const class FString& State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCrowd", "SetCrowdState");

	Params::GymCrowd_SetCrowdState Parms{};

	Parms.State = std::move(State);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymCrowd.IsInPlayMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGymCrowd::IsInPlayMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCrowd", "IsInPlayMode");

	Params::GymCrowd_IsInPlayMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCustomizationControl.DEBUGUnlockAll
// (Final, Native, Static, Public, BlueprintCallable)

void UGymCustomizationControl::DEBUGUnlockAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymCustomizationControl", "DEBUGUnlockAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCustomizationControl.GetLoadedAssets
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class UGymCustomizationAsset*>   Assets                                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymCustomizationControl::GetLoadedAssets(TArray<class UGymCustomizationAsset*>* Assets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymCustomizationControl", "GetLoadedAssets");

	Params::GymCustomizationControl_GetLoadedAssets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Assets != nullptr)
		*Assets = std::move(Parms.Assets);

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCustomizationControl.GetCurrentSKMeshes
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class USkeletalMeshComponent*>   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class USkeletalMeshComponent*> UGymCustomizationControl::GetCurrentSKMeshes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCustomizationControl", "GetCurrentSKMeshes");

	Params::GymCustomizationControl_GetCurrentSKMeshes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCustomizationControl.Multi_SpawnSpray
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private, HasDefaults)
// Parameters:
// struct FVector                          Location                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// TSubclassOf<class AGymStaticLevelAsset> AssetClass                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCustomizationControl::Multi_SpawnSpray(const struct FVector& Location, const struct FRotator& Rotation, TSubclassOf<class AGymStaticLevelAsset> AssetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCustomizationControl", "Multi_SpawnSpray");

	Params::GymCustomizationControl_Multi_SpawnSpray Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.AssetClass = AssetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCustomizationControl.OnCustomizationChanged
// (Final, Native, Private)

void UGymCustomizationControl::OnCustomizationChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCustomizationControl", "OnCustomizationChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCustomizationControl.SendAttribute
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// struct FGymCustomizationAttribute       Attribute                                              (ConstParm, Parm, NativeAccessSpecifierPublic)

void UGymCustomizationControl::SendAttribute(const struct FGymCustomizationAttribute& Attribute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCustomizationControl", "SendAttribute");

	Params::GymCustomizationControl_SendAttribute Parms{};

	Parms.Attribute = std::move(Attribute);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCustomizationControl.SendCustomization
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// struct FGymCharacterCustomization       NewCustomization                                       (ConstParm, Parm, NativeAccessSpecifierPublic)

void UGymCustomizationControl::SendCustomization(const struct FGymCharacterCustomization& NewCustomization)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCustomizationControl", "SendCustomization");

	Params::GymCustomizationControl_SendCustomization Parms{};

	Parms.NewCustomization = std::move(NewCustomization);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCustomizationControl.Server_SelectSpray
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// class FName                             SprayID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCustomizationControl::Server_SelectSpray(class FName SprayID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCustomizationControl", "Server_SelectSpray");

	Params::GymCustomizationControl_Server_SelectSpray Parms{};

	Parms.SprayID = SprayID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCustomizationControl.Server_SelectTaunt
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// class FName                             TauntID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCustomizationControl::Server_SelectTaunt(class FName TauntID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCustomizationControl", "Server_SelectTaunt");

	Params::GymCustomizationControl_Server_SelectTaunt Parms{};

	Parms.TauntID = TauntID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCustomizationControl.SetTauntID
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class FName                             TauntID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCustomizationControl::SetTauntID(class FName TauntID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCustomizationControl", "SetTauntID");

	Params::GymCustomizationControl_SetTauntID Parms{};

	Parms.TauntID = TauntID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCustomizationControl.GetSelectedSprays
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UGymCustomizationControl::GetSelectedSprays() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCustomizationControl", "GetSelectedSprays");

	Params::GymCustomizationControl_GetSelectedSprays Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCustomizationControl.GetSelectedTaunts
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UGymCustomizationControl::GetSelectedTaunts() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCustomizationControl", "GetSelectedTaunts");

	Params::GymCustomizationControl_GetSelectedTaunts Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymCustomizationControl.SaveCustomizationToFile
// (Final, Exec, Native, Public, Const)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymCustomizationControl::SaveCustomizationToFile(const class FString& Filename, bool bForce) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCustomizationControl", "SaveCustomizationToFile");

	Params::GymCustomizationControl_SaveCustomizationToFile Parms{};

	Parms.Filename = std::move(Filename);
	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCustomizationMannequin.BeginPlay
// (Native, Public)

void AGymCustomizationMannequin::BeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCustomizationMannequin", "BeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCustomizationMannequin.PartyMannequinJoined
// (Final, Native, Private)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGymPlayerPartyInfo              PlayerInfo                                             (Parm, NativeAccessSpecifierPublic)

void AGymCustomizationMannequin::PartyMannequinJoined(int32 Index_0, const struct FGymPlayerPartyInfo& PlayerInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCustomizationMannequin", "PartyMannequinJoined");

	Params::GymCustomizationMannequin_PartyMannequinJoined Parms{};

	Parms.Index_0 = Index_0;
	Parms.PlayerInfo = std::move(PlayerInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCustomizationMannequin.PartyMannequinLeft
// (Final, Native, Private)
// Parameters:
// int32                                   PartyIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymCustomizationMannequin::PartyMannequinLeft(int32 PartyIndex, const class FString& PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymCustomizationMannequin", "PartyMannequinLeft");

	Params::GymCustomizationMannequin_PartyMannequinLeft Parms{};

	Parms.PartyIndex = PartyIndex;
	Parms.PlayerId = std::move(PlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymCustomizationUtils.GetVariants
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           AssetId                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGymCharacterCustomizationGUIOption>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGymCharacterCustomizationGUIOption> UGymCustomizationUtils::GetVariants(const class FString& AssetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymCustomizationUtils", "GetVariants");

	Params::GymCustomizationUtils_GetVariants Parms{};

	Parms.AssetId = std::move(AssetId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymDevWordLists.GetAdjective
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGymDevWordLists::GetAdjective()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymDevWordLists", "GetAdjective");

	Params::GymDevWordLists_GetAdjective Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymDevWordLists.GetAnimal
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGymDevWordLists::GetAnimal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymDevWordLists", "GetAnimal");

	Params::GymDevWordLists_GetAnimal Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymDevWordLists.GetNoun
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGymDevWordLists::GetNoun()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymDevWordLists", "GetNoun");

	Params::GymDevWordLists_GetNoun Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymDialogueControl.Client_BeginDialogue
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// class AGymNPC*                          ConversationParticipant                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymDialogueControl::Client_BeginDialogue(class AGymNPC* ConversationParticipant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymDialogueControl", "Client_BeginDialogue");

	Params::GymDialogueControl_Client_BeginDialogue Parms{};

	Parms.ConversationParticipant = ConversationParticipant;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymDialogueControl.Client_EndDialogue
// (Final, Net, NetReliable, Native, Event, Private, NetClient)

void UGymDialogueControl::Client_EndDialogue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymDialogueControl", "Client_EndDialogue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymDialogueControl.EndDialogue
// (Final, Native, Public, BlueprintCallable)

void UGymDialogueControl::EndDialogue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymDialogueControl", "EndDialogue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymDialogueControl.QueryNPCObjectiveMarkerVisibilityComplete
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AAIController*                    TestController                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGymNPC*                          NPC                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bActorVisibility                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymDialogueControl::QueryNPCObjectiveMarkerVisibilityComplete(class AAIController* TestController, class AGymNPC* NPC, bool bActorVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymDialogueControl", "QueryNPCObjectiveMarkerVisibilityComplete");

	Params::GymDialogueControl_QueryNPCObjectiveMarkerVisibilityComplete Parms{};

	Parms.TestController = TestController;
	Parms.NPC = NPC;
	Parms.bActorVisibility = bActorVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymDialogueControl.Server_EndDialogue
// (Net, NetReliable, Native, Event, Public, NetServer)

void UGymDialogueControl::Server_EndDialogue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymDialogueControl", "Server_EndDialogue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymDialogueControl.SetNPCSpeech
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             NPCText                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGymDialogueControl::SetNPCSpeech(const class FText& NPCText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymDialogueControl", "SetNPCSpeech");

	Params::GymDialogueControl_SetNPCSpeech Parms{};

	Parms.NPCText = std::move(NPCText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymDialogueControl.SetPlayerAnswers
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FGymAnswer>               Answers                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGymDialogueControl::SetPlayerAnswers(const TArray<struct FGymAnswer>& Answers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymDialogueControl", "SetPlayerAnswers");

	Params::GymDialogueControl_SetPlayerAnswers Parms{};

	Parms.Answers = std::move(Answers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymDialogueControl.StartRules
// (Final, Native, Public, BlueprintCallable)

void UGymDialogueControl::StartRules()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymDialogueControl", "StartRules");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymDialogueTree.AddTask
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGymQuest>            TaskType                                               (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSetActive                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymDialogueTree::AddTask(TSubclassOf<class UGymQuest> TaskType, bool bSetActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymDialogueTree", "AddTask");

	Params::GymDialogueTree_AddTask Parms{};

	Parms.TaskType = TaskType;
	Parms.bSetActive = bSetActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymDialogueTree.BPAllTasksComplete
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     TaskIDs                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EGymDTBranch                            Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymDialogueTree::BPAllTasksComplete(const TArray<class FName>& TaskIDs, EGymDTBranch* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymDialogueTree", "BPAllTasksComplete");

	Params::GymDialogueTree_BPAllTasksComplete Parms{};

	Parms.TaskIDs = std::move(TaskIDs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function GYMGAME.GymDialogueTree.BPAnyTaskFailed
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     TaskIDs                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EGymDTBranch                            Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymDialogueTree::BPAnyTaskFailed(const TArray<class FName>& TaskIDs, EGymDTBranch* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymDialogueTree", "BPAnyTaskFailed");

	Params::GymDialogueTree_BPAnyTaskFailed Parms{};

	Parms.TaskIDs = std::move(TaskIDs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function GYMGAME.GymDialogueTree.BPHasTask
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             TaskID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGymDTBranch                            Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymDialogueTree::BPHasTask(class FName TaskID, EGymDTBranch* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymDialogueTree", "BPHasTask");

	Params::GymDialogueTree_BPHasTask Parms{};

	Parms.TaskID = TaskID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function GYMGAME.GymDialogueTree.BPIsActiveTaskInProgress
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// EGymDTBranch                            Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymDialogueTree::BPIsActiveTaskInProgress(EGymDTBranch* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymDialogueTree", "BPIsActiveTaskInProgress");

	Params::GymDialogueTree_BPIsActiveTaskInProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function GYMGAME.GymDialogueTree.BPIsObjectiveCompleted
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             TaskID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGymDTBranch                            Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymDialogueTree::BPIsObjectiveCompleted(class FName TaskID, EGymDTBranch* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymDialogueTree", "BPIsObjectiveCompleted");

	Params::GymDialogueTree_BPIsObjectiveCompleted Parms{};

	Parms.TaskID = TaskID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function GYMGAME.GymDialogueTree.BPIsTaskCompleted
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             TaskID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGymDTBranch                            Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymDialogueTree::BPIsTaskCompleted(class FName TaskID, EGymDTBranch* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymDialogueTree", "BPIsTaskCompleted");

	Params::GymDialogueTree_BPIsTaskCompleted Parms{};

	Parms.TaskID = TaskID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function GYMGAME.GymDialogueTree.BPIsTaskFailed
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             TaskID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGymDTBranch                            Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymDialogueTree::BPIsTaskFailed(class FName TaskID, EGymDTBranch* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymDialogueTree", "BPIsTaskFailed");

	Params::GymDialogueTree_BPIsTaskFailed Parms{};

	Parms.TaskID = TaskID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function GYMGAME.GymDialogueTree.BPIsTaskInProgress
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             TaskID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGymDTBranch                            Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymDialogueTree::BPIsTaskInProgress(class FName TaskID, EGymDTBranch* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymDialogueTree", "BPIsTaskInProgress");

	Params::GymDialogueTree_BPIsTaskInProgress Parms{};

	Parms.TaskID = TaskID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function GYMGAME.GymDialogueTree.BPSwitchOnTaskState
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             TaskID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGymDTTaskStatus                        Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymDialogueTree::BPSwitchOnTaskState(class FName TaskID, EGymDTTaskStatus* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymDialogueTree", "BPSwitchOnTaskState");

	Params::GymDialogueTree_BPSwitchOnTaskState Parms{};

	Parms.TaskID = TaskID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function GYMGAME.GymDialogueTree.EndDialogue
// (Final, Native, Public, BlueprintCallable)

void UGymDialogueTree::EndDialogue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymDialogueTree", "EndDialogue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymDialogueTree.GetNPC
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGymNPC*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGymNPC* UGymDialogueTree::GetNPC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymDialogueTree", "GetNPC");

	Params::GymDialogueTree_GetNPC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymDialogueTree.GetObjectiveControl
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGymObjectiveControl*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymObjectiveControl* UGymDialogueTree::GetObjectiveControl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymDialogueTree", "GetObjectiveControl");

	Params::GymDialogueTree_GetObjectiveControl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymDialogueTree.IsOtherObjectiveInProgress
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FName>                     ExcludeTasks                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymDialogueTree::IsOtherObjectiveInProgress(const TArray<class FName>& ExcludeTasks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymDialogueTree", "IsOtherObjectiveInProgress");

	Params::GymDialogueTree_IsOtherObjectiveInProgress Parms{};

	Parms.ExcludeTasks = std::move(ExcludeTasks);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymDialogueTree.PlayerAnswered
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   AnswerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymDialogueTree::PlayerAnswered(int32 AnswerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymDialogueTree", "PlayerAnswered");

	Params::GymDialogueTree_PlayerAnswered Parms{};

	Parms.AnswerIndex = AnswerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymDialogueTree.RestartTask
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             TaskID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymDialogueTree::RestartTask(class FName TaskID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymDialogueTree", "RestartTask");

	Params::GymDialogueTree_RestartTask Parms{};

	Parms.TaskID = TaskID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymDialogueTree.SetAnswerVisibility
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymDialogueTree::SetAnswerVisibility(bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymDialogueTree", "SetAnswerVisibility");

	Params::GymDialogueTree_SetAnswerVisibility Parms{};

	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymDialogueTree.StartDialogue
// (Event, Public, BlueprintEvent)

void UGymDialogueTree::StartDialogue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymDialogueTree", "StartDialogue");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymLocationCriterionActor.GetLocationCriteria
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ObjectiveID                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AGymLocationCriterionActor*>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AGymLocationCriterionActor*> AGymLocationCriterionActor::GetLocationCriteria(class UObject* WorldContext, const class FString& ObjectiveID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymLocationCriterionActor", "GetLocationCriteria");

	Params::GymLocationCriterionActor_GetLocationCriteria Parms{};

	Parms.WorldContext = WorldContext;
	Parms.ObjectiveID = std::move(ObjectiveID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymDialogueTreeAsyncAction.NPCSpeechNode
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGymDialogueTree*                 DialogueTree                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             NPCText                                                (ConstParm, Parm, NativeAccessSpecifierPublic)
// TArray<struct FGymAnswer>               Answers                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           Emotion                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGymDialogueTreeAsyncAction*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymDialogueTreeAsyncAction* UGymDialogueTreeAsyncAction::NPCSpeechNode(class UGymDialogueTree* DialogueTree, const class FText& NPCText, const TArray<struct FGymAnswer>& Answers, const class FString& Emotion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymDialogueTreeAsyncAction", "NPCSpeechNode");

	Params::GymDialogueTreeAsyncAction_NPCSpeechNode Parms{};

	Parms.DialogueTree = DialogueTree;
	Parms.NPCText = std::move(NPCText);
	Parms.Answers = std::move(Answers);
	Parms.Emotion = std::move(Emotion);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymEditorBoundsFeature.Action
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// struct FGymWallLocator                  Locator                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// EGymBoundsPushMode                      Mode                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymEditorBoundsFeature::Action(const struct FGymWallLocator& Locator, const EGymBoundsPushMode Mode, const int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorBoundsFeature", "Action");

	Params::GymEditorBoundsFeature_Action Parms{};

	Parms.Locator = std::move(Locator);
	Parms.Mode = Mode;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorBoundsFeature.IssueAction
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// struct FGymWallLocator                  Locator                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// EGymBoundsPushMode                      Mode                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymEditorBoundsFeature::IssueAction(const struct FGymWallLocator& Locator, const EGymBoundsPushMode Mode, const int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorBoundsFeature", "IssueAction");

	Params::GymEditorBoundsFeature_IssueAction Parms{};

	Parms.Locator = std::move(Locator);
	Parms.Mode = Mode;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.AssetRemoved
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private, HasDefaults)
// Parameters:
// struct FGymAssetVariantId               AssetId                                                (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymEditorControl::AssetRemoved(const struct FGymAssetVariantId& AssetId, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "AssetRemoved");

	Params::GymEditorControl_AssetRemoved Parms{};

	Parms.AssetId = std::move(AssetId);
	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.Build
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private, HasDefaults)
// Parameters:
// struct FGymAssetVariantId               AssetId                                                (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RecordId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotator                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class AGymStaticLevelAsset*             Parent                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGymMapAssetLink>         Links                                                  (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FUndoParams                      UndoParams                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UGymEditorControl::Build(const struct FGymAssetVariantId& AssetId, int32 RecordId, const struct FVector& Location, const struct FRotator& Rotator, class AGymStaticLevelAsset* Parent, const TArray<struct FGymMapAssetLink>& Links, const struct FUndoParams& UndoParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "Build");

	Params::GymEditorControl_Build Parms{};

	Parms.AssetId = std::move(AssetId);
	Parms.RecordId = RecordId;
	Parms.Location = std::move(Location);
	Parms.Rotator = std::move(Rotator);
	Parms.Parent = Parent;
	Parms.Links = std::move(Links);
	Parms.UndoParams = std::move(UndoParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.CancelSelectAsset_Server
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// int32                                   AssetRecordId                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymEditorControl::CancelSelectAsset_Server(int32 AssetRecordId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "CancelSelectAsset_Server");

	Params::GymEditorControl_CancelSelectAsset_Server Parms{};

	Parms.AssetRecordId = AssetRecordId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.ClearSelectedAssetSpawn_Server
// (Final, Net, NetReliable, Native, Event, Private, NetServer)

void UGymEditorControl::ClearSelectedAssetSpawn_Server()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "ClearSelectedAssetSpawn_Server");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.Client_ClearGhostAssetRotation
// (Final, Net, NetReliable, Native, Event, Private, NetClient)

void UGymEditorControl::Client_ClearGhostAssetRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "Client_ClearGhostAssetRotation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.Client_ClearSplinePreview
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// class AGymSplinePlacer*                 Spline                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymEditorControl::Client_ClearSplinePreview(class AGymSplinePlacer* Spline)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "Client_ClearSplinePreview");

	Params::GymEditorControl_Client_ClearSplinePreview Parms{};

	Parms.Spline = Spline;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.Client_ShowPlacementResponse
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// struct FRuleAdvanceResponse             Response                                               (Parm, NativeAccessSpecifierPublic)

void UGymEditorControl::Client_ShowPlacementResponse(const struct FRuleAdvanceResponse& Response)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "Client_ShowPlacementResponse");

	Params::GymEditorControl_Client_ShowPlacementResponse Parms{};

	Parms.Response = std::move(Response);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.CopyPropertiesToAsset
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// int32                                   FromRecordId                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ToRecordId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymEditorControl::CopyPropertiesToAsset(int32 FromRecordId, int32 ToRecordId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "CopyPropertiesToAsset");

	Params::GymEditorControl_CopyPropertiesToAsset Parms{};

	Parms.FromRecordId = FromRecordId;
	Parms.ToRecordId = ToRecordId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.CopyPropertiesToAssetResponse
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// bool                                    bSuccess                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RecordId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymEditorControl::CopyPropertiesToAssetResponse(bool bSuccess, int32 RecordId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "CopyPropertiesToAssetResponse");

	Params::GymEditorControl_CopyPropertiesToAssetResponse Parms{};

	Parms.bSuccess = bSuccess;
	Parms.RecordId = RecordId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.DebugExport
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// class FString                           File                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymEditorControl::DebugExport(const class FString& File)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "DebugExport");

	Params::GymEditorControl_DebugExport Parms{};

	Parms.File = std::move(File);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.DebugExportToFile
// (Final, Exec, Native, Private)
// Parameters:
// class FString                           File                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymEditorControl::DebugExportToFile(const class FString& File, bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "DebugExportToFile");

	Params::GymEditorControl_DebugExportToFile Parms{};

	Parms.File = std::move(File);
	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.DebugImport
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// class FString                           File                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymEditorControl::DebugImport(const class FString& File)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "DebugImport");

	Params::GymEditorControl_DebugImport Parms{};

	Parms.File = std::move(File);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.DebugImportFromFile
// (Final, Exec, Native, Private)
// Parameters:
// class FString                           File                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymEditorControl::DebugImportFromFile(const class FString& File)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "DebugImportFromFile");

	Params::GymEditorControl_DebugImportFromFile Parms{};

	Parms.File = std::move(File);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.DebugPrepopulateMap
// (Final, Exec, Native, Private)
// Parameters:
// class FString                           GameMode                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymEditorControl::DebugPrepopulateMap(const class FString& GameMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "DebugPrepopulateMap");

	Params::GymEditorControl_DebugPrepopulateMap Parms{};

	Parms.GameMode = std::move(GameMode);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.EndSelectedAssetMove_Client
// (Final, Net, NetReliable, Native, Event, Private, HasDefaults, NetClient)
// Parameters:
// int32                                   AssetRecordId                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotator                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGymEditorControl::EndSelectedAssetMove_Client(int32 AssetRecordId, const struct FVector& Location, const struct FRotator& Rotator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "EndSelectedAssetMove_Client");

	Params::GymEditorControl_EndSelectedAssetMove_Client Parms{};

	Parms.AssetRecordId = AssetRecordId;
	Parms.Location = std::move(Location);
	Parms.Rotator = std::move(Rotator);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.EndSelectedAssetMove_Server
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// int32                                   AssetRecordId                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymEditorControl::EndSelectedAssetMove_Server(int32 AssetRecordId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "EndSelectedAssetMove_Server");

	Params::GymEditorControl_EndSelectedAssetMove_Server Parms{};

	Parms.AssetRecordId = AssetRecordId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.GetShowDevAssets
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymEditorControl::GetShowDevAssets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "GetShowDevAssets");

	Params::GymEditorControl_GetShowDevAssets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymEditorControl.GetTraceHitAsset
// (Final, Native, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGymStaticLevelAsset*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGymStaticLevelAsset* UGymEditorControl::GetTraceHitAsset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "GetTraceHitAsset");

	Params::GymEditorControl_GetTraceHitAsset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymEditorControl.IssueBuild
// (Final, Net, NetReliable, Native, Event, Private, NetServer, HasDefaults)
// Parameters:
// struct FGymAssetVariantId               AssetId                                                (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotator                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class AGymStaticLevelAsset*             Parent                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGymMapAssetLink>         Links                                                  (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FUndoParams                      UndoParams                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bSkipPlacementCheck                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymEditorControl::IssueBuild(const struct FGymAssetVariantId& AssetId, const struct FVector& Location, const struct FRotator& Rotator, class AGymStaticLevelAsset* Parent, const TArray<struct FGymMapAssetLink>& Links, const struct FUndoParams& UndoParams, bool bSkipPlacementCheck)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "IssueBuild");

	Params::GymEditorControl_IssueBuild Parms{};

	Parms.AssetId = std::move(AssetId);
	Parms.Location = std::move(Location);
	Parms.Rotator = std::move(Rotator);
	Parms.Parent = Parent;
	Parms.Links = std::move(Links);
	Parms.UndoParams = std::move(UndoParams);
	Parms.bSkipPlacementCheck = bSkipPlacementCheck;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.IssueBuildWithAssetRecordId
// (Final, Net, NetReliable, Native, Event, Private, NetServer, HasDefaults)
// Parameters:
// struct FGymAssetVariantId               AssetId                                                (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RecordId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotator                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ParentAssetRecordId                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBox                             Bounds                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGymMapAssetLink>         Links                                                  (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FUndoParams                      UndoParams                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UGymEditorControl::IssueBuildWithAssetRecordId(const struct FGymAssetVariantId& AssetId, int32 RecordId, const struct FVector& Location, const struct FRotator& Rotator, int32 ParentAssetRecordId, const struct FBox& Bounds, const struct FVector& Scale, const TArray<struct FGymMapAssetLink>& Links, const struct FUndoParams& UndoParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "IssueBuildWithAssetRecordId");

	Params::GymEditorControl_IssueBuildWithAssetRecordId Parms{};

	Parms.AssetId = std::move(AssetId);
	Parms.RecordId = RecordId;
	Parms.Location = std::move(Location);
	Parms.Rotator = std::move(Rotator);
	Parms.ParentAssetRecordId = ParentAssetRecordId;
	Parms.Bounds = std::move(Bounds);
	Parms.Scale = std::move(Scale);
	Parms.Links = std::move(Links);
	Parms.UndoParams = std::move(UndoParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.IssueMove_Client
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private, HasDefaults)
// Parameters:
// class AGymStaticLevelAsset*             Asset                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotator                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGymEditorControl::IssueMove_Client(class AGymStaticLevelAsset* Asset, const struct FVector& Location, const struct FRotator& Rotator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "IssueMove_Client");

	Params::GymEditorControl_IssueMove_Client Parms{};

	Parms.Asset = Asset;
	Parms.Location = std::move(Location);
	Parms.Rotator = std::move(Rotator);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.IssueMove_Server
// (Final, Net, NetReliable, Native, Event, Private, NetServer, HasDefaults)
// Parameters:
// int32                                   AssetRecordId                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotator                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FUndoParams                      UndoParams                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UGymEditorControl::IssueMove_Server(int32 AssetRecordId, const struct FVector& Location, const struct FRotator& Rotator, const struct FUndoParams& UndoParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "IssueMove_Server");

	Params::GymEditorControl_IssueMove_Server Parms{};

	Parms.AssetRecordId = AssetRecordId;
	Parms.Location = std::move(Location);
	Parms.Rotator = std::move(Rotator);
	Parms.UndoParams = std::move(UndoParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.IssueMultiBuild
// (Final, Net, NetReliable, Native, Event, Private, NetServer, HasDefaults)
// Parameters:
// struct FGymAssetVariantId               AssetId                                                (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotator                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FMultiBuildParams                Params_0                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class AGymStaticLevelAsset*             Parent                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUndoParams                      UndoParams                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UGymEditorControl::IssueMultiBuild(const struct FGymAssetVariantId& AssetId, const struct FVector& Location, const struct FRotator& Rotator, const struct FMultiBuildParams& Params_0, class AGymStaticLevelAsset* Parent, const struct FUndoParams& UndoParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "IssueMultiBuild");

	Params::GymEditorControl_IssueMultiBuild Parms{};

	Parms.AssetId = std::move(AssetId);
	Parms.Location = std::move(Location);
	Parms.Rotator = std::move(Rotator);
	Parms.Params_0 = std::move(Params_0);
	Parms.Parent = Parent;
	Parms.UndoParams = std::move(UndoParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.IssueRemove
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// class AGymStaticLevelAsset*             Asset                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUndoParams                      UndoParams                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UGymEditorControl::IssueRemove(class AGymStaticLevelAsset* Asset, const struct FUndoParams& UndoParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "IssueRemove");

	Params::GymEditorControl_IssueRemove Parms{};

	Parms.Asset = Asset;
	Parms.UndoParams = std::move(UndoParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.IssueRemoveWithAssetRecordId
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// int32                                   AssetRecordId                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUndoParams                      UndoParams                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UGymEditorControl::IssueRemoveWithAssetRecordId(int32 AssetRecordId, const struct FUndoParams& UndoParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "IssueRemoveWithAssetRecordId");

	Params::GymEditorControl_IssueRemoveWithAssetRecordId Parms{};

	Parms.AssetRecordId = AssetRecordId;
	Parms.UndoParams = std::move(UndoParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.OnAssetSpawnChanged
// (Final, Native, Private)

void UGymEditorControl::OnAssetSpawnChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "OnAssetSpawnChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.PrepopulateFinishline
// (Final, Net, NetReliable, Native, Event, Private, NetServer, HasDefaults)
// Parameters:
// struct FVector                          StartLocation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          EndLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymEditorControl::PrepopulateFinishline(const struct FVector& StartLocation, const struct FVector& EndLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "PrepopulateFinishline");

	Params::GymEditorControl_PrepopulateFinishline Parms{};

	Parms.StartLocation = std::move(StartLocation);
	Parms.EndLocation = std::move(EndLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.RecreateVariant
// (Final, Net, NetReliable, Native, Event, Private, NetServer, BlueprintCallable)
// Parameters:
// int32                                   OldAssetRecordId                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGymAssetVariantId               NewVariantId                                           (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymEditorControl::RecreateVariant(int32 OldAssetRecordId, const struct FGymAssetVariantId& NewVariantId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "RecreateVariant");

	Params::GymEditorControl_RecreateVariant Parms{};

	Parms.OldAssetRecordId = OldAssetRecordId;
	Parms.NewVariantId = std::move(NewVariantId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.RecreateVariantResponse
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// bool                                    bSuccess                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewAssetRecordId                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymEditorControl::RecreateVariantResponse(const bool bSuccess, const int32 NewAssetRecordId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "RecreateVariantResponse");

	Params::GymEditorControl_RecreateVariantResponse Parms{};

	Parms.bSuccess = bSuccess;
	Parms.NewAssetRecordId = NewAssetRecordId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.Redo
// (Final, Net, NetReliable, Native, Event, Private, NetServer)

void UGymEditorControl::Redo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "Redo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.SelectAsset_Client
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// struct FGymAssetVariantId               AssetVariantId                                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymEditorControl::SelectAsset_Client(const struct FGymAssetVariantId& AssetVariantId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "SelectAsset_Client");

	Params::GymEditorControl_SelectAsset_Client Parms{};

	Parms.AssetVariantId = std::move(AssetVariantId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.SelectAsset_Server
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// class AGymStaticLevelAsset*             Asset                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymEditorControl::SelectAsset_Server(class AGymStaticLevelAsset* Asset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "SelectAsset_Server");

	Params::GymEditorControl_SelectAsset_Server Parms{};

	Parms.Asset = Asset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.SelectCopyOfAsset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGymStaticLevelAsset*             Asset                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymEditorControl::SelectCopyOfAsset(class AGymStaticLevelAsset* Asset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "SelectCopyOfAsset");

	Params::GymEditorControl_SelectCopyOfAsset Parms{};

	Parms.Asset = Asset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.Server_EditAssetProperty
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// class AGymStaticLevelAsset*             Asset                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGymPropertyValues               PropertyVal                                            (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void UGymEditorControl::Server_EditAssetProperty(class AGymStaticLevelAsset* Asset, const struct FGymPropertyValues& PropertyVal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "Server_EditAssetProperty");

	Params::GymEditorControl_Server_EditAssetProperty Parms{};

	Parms.Asset = Asset;
	Parms.PropertyVal = std::move(PropertyVal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.SetFloatModifier
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class FName                             ModifierID                                             (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymEditorControl::SetFloatModifier(const class FName& ModifierID, const float& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "SetFloatModifier");

	Params::GymEditorControl_SetFloatModifier Parms{};

	Parms.ModifierID = ModifierID;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.SetIntModifier
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class FName                             ModifierID                                             (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymEditorControl::SetIntModifier(const class FName& ModifierID, const int32& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "SetIntModifier");

	Params::GymEditorControl_SetIntModifier Parms{};

	Parms.ModifierID = ModifierID;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.SetMusic
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class FName                             Music                                                  (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymEditorControl::SetMusic(const class FName& Music)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "SetMusic");

	Params::GymEditorControl_SetMusic Parms{};

	Parms.Music = Music;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.SetPropertiesToCopyFrom
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// int32                                   RecordId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymEditorControl::SetPropertiesToCopyFrom(int32 RecordId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "SetPropertiesToCopyFrom");

	Params::GymEditorControl_SetPropertiesToCopyFrom Parms{};

	Parms.RecordId = RecordId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.SetRule
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class FName                             RuleId                                                 (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymEditorControl::SetRule(const class FName& RuleId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "SetRule");

	Params::GymEditorControl_SetRule Parms{};

	Parms.RuleId = RuleId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.SetSelectedAssetSpawn_Server
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// struct FGymAssetVariantId               AssetId                                                (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymEditorControl::SetSelectedAssetSpawn_Server(const struct FGymAssetVariantId& AssetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "SetSelectedAssetSpawn_Server");

	Params::GymEditorControl_SetSelectedAssetSpawn_Server Parms{};

	Parms.AssetId = std::move(AssetId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.SetSelectedAssetSpawnTransformServer
// (Final, Net, Native, Event, Private, NetServer, HasDefaults)
// Parameters:
// struct FVector_NetQuantize10            Location                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotator                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGymEditorControl::SetSelectedAssetSpawnTransformServer(const struct FVector_NetQuantize10& Location, const struct FRotator& Rotator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "SetSelectedAssetSpawnTransformServer");

	Params::GymEditorControl_SetSelectedAssetSpawnTransformServer Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotator = std::move(Rotator);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.SetStringModifier
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class FName                             ModifierID                                             (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymEditorControl::SetStringModifier(const class FName& ModifierID, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "SetStringModifier");

	Params::GymEditorControl_SetStringModifier Parms{};

	Parms.ModifierID = ModifierID;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.TryInitPrepopulated
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// class FString                           GameMode                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymEditorControl::TryInitPrepopulated(const class FString& GameMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "TryInitPrepopulated");

	Params::GymEditorControl_TryInitPrepopulated Parms{};

	Parms.GameMode = std::move(GameMode);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.Undo
// (Final, Net, NetReliable, Native, Event, Private, NetServer)

void UGymEditorControl::Undo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "Undo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.GetEditingAllowed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymEditorControl::GetEditingAllowed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "GetEditingAllowed");

	Params::GymEditorControl_GetEditingAllowed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymEditorControl.SetPhysicsPreviewDuration
// (Net, NetReliable, Native, Event, Public, NetServer, Const)
// Parameters:
// float                                   Duration                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InfinitePhysicsPreview                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymEditorControl::SetPhysicsPreviewDuration(const float Duration, const bool InfinitePhysicsPreview) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "SetPhysicsPreviewDuration");

	Params::GymEditorControl_SetPhysicsPreviewDuration Parms{};

	Parms.Duration = Duration;
	Parms.InfinitePhysicsPreview = InfinitePhysicsPreview;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.SetTime
// (Net, NetReliable, Native, Event, Public, NetServer, Const)
// Parameters:
// float                                   NewTime                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymEditorControl::SetTime(const float NewTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "SetTime");

	Params::GymEditorControl_SetTime Parms{};

	Parms.NewTime = NewTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorControl.SetWeather
// (Net, NetReliable, Native, Event, Public, NetServer, Const)
// Parameters:
// class FName                             NewWeather                                             (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymEditorControl::SetWeather(const class FName& NewWeather) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorControl", "SetWeather");

	Params::GymEditorControl_SetWeather Parms{};

	Parms.NewWeather = NewWeather;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorWallStyleFeature.Action
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class AGymStaticLevelAsset*             WallPiece                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymEditorWallStyleFeature::Action(const class AGymStaticLevelAsset* WallPiece, const int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorWallStyleFeature", "Action");

	Params::GymEditorWallStyleFeature_Action Parms{};

	Parms.WallPiece = WallPiece;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymEditorWallStyleFeature.IssueAction
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// class AGymStaticLevelAsset*             WallPiece                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymEditorWallStyleFeature::IssueAction(const class AGymStaticLevelAsset* WallPiece, const int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymEditorWallStyleFeature", "IssueAction");

	Params::GymEditorWallStyleFeature_IssueAction Parms{};

	Parms.WallPiece = WallPiece;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymFadeWidget.Fade
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FadeInTime                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FadedTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FadeOutTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Layer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymFadeWidget::Fade(float FadeInTime, float FadedTime, float FadeOutTime, int32 Layer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymFadeWidget", "Fade");

	Params::GymFadeWidget_Fade Parms{};

	Parms.FadeInTime = FadeInTime;
	Parms.FadedTime = FadedTime;
	Parms.FadeOutTime = FadeOutTime;
	Parms.Layer = Layer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymFinishlineBanner.OnBeginOverlap
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGymFinishlineBanner::OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymFinishlineBanner", "OnBeginOverlap");

	Params::GymFinishlineBanner_OnBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymFinishlineBanner.OnRep_Width
// (Final, Native, Protected)

void AGymFinishlineBanner::OnRep_Width()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymFinishlineBanner", "OnRep_Width");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymFinishlineBanner.SetWidth
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// float                                   NewWidth                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymFinishlineBanner::SetWidth(float NewWidth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymFinishlineBanner", "SetWidth");

	Params::GymFinishlineBanner_SetWidth Parms{};

	Parms.NewWidth = NewWidth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymFragileFloor.Multi_Break
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)

void AGymFragileFloor::Multi_Break()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymFragileFloor", "Multi_Break");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymFragileFloor.Multi_EndPhysics
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)

void AGymFragileFloor::Multi_EndPhysics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymFragileFloor", "Multi_EndPhysics");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymFragileFloor.Multi_Recover
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)

void AGymFragileFloor::Multi_Recover()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymFragileFloor", "Multi_Recover");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymFragileFloor.Multi_StartBreaking
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// double                                  ServerTimestamp                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymFragileFloor::Multi_StartBreaking(double ServerTimestamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymFragileFloor", "Multi_StartBreaking");

	Params::GymFragileFloor_Multi_StartBreaking Parms{};

	Parms.ServerTimestamp = ServerTimestamp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymFragileFloor.Multi_StartPhysics
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)

void AGymFragileFloor::Multi_StartPhysics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymFragileFloor", "Multi_StartPhysics");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymFragileFloor.OnBreakBP
// (Event, Protected, BlueprintEvent)

void AGymFragileFloor::OnBreakBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymFragileFloor", "OnBreakBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymFragileFloor.OnInitialCrackingStartedBP
// (Event, Protected, BlueprintEvent)

void AGymFragileFloor::OnInitialCrackingStartedBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymFragileFloor", "OnInitialCrackingStartedBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymFragileFloor.OnRecoverBP
// (Event, Protected, BlueprintEvent)

void AGymFragileFloor::OnRecoverBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymFragileFloor", "OnRecoverBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymFragileFloor.OnResetBP
// (Event, Protected, BlueprintEvent)

void AGymFragileFloor::OnResetBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymFragileFloor", "OnResetBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymFragileFloor.UpdateVisualsBP
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   TotalCrackingRatio                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymFragileFloor::UpdateVisualsBP(float TotalCrackingRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymFragileFloor", "UpdateVisualsBP");

	Params::GymFragileFloor_UpdateVisualsBP Parms{};

	Parms.TotalCrackingRatio = TotalCrackingRatio;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymFragileFloor.GetBrokenRatio
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   OptionalHP                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGymFragileFloor::GetBrokenRatio(int32 OptionalHP) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymFragileFloor", "GetBrokenRatio");

	Params::GymFragileFloor_GetBrokenRatio Parms{};

	Parms.OptionalHP = OptionalHP;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymFragileFloor.GetCrackingRatio
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGymFragileFloor::GetCrackingRatio() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymFragileFloor", "GetCrackingRatio");

	Params::GymFragileFloor_GetCrackingRatio Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymFragileFloor.GetRecoverRatio
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGymFragileFloor::GetRecoverRatio() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymFragileFloor", "GetRecoverRatio");

	Params::GymFragileFloor_GetRecoverRatio Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGameInstance.BeginLoadingScreen
// (Final, Native, Private)
// Parameters:
// class FString                           MapName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGameInstance::BeginLoadingScreen(const class FString& MapName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameInstance", "BeginLoadingScreen");

	Params::GymGameInstance_BeginLoadingScreen Parms{};

	Parms.MapName = std::move(MapName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGameInstance.CreateLoadingScreen
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   HideIn                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGameInstance::CreateLoadingScreen(const float HideIn, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameInstance", "CreateLoadingScreen");

	Params::GymGameInstance_CreateLoadingScreen Parms{};

	Parms.HideIn = HideIn;
	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGameInstance.DestroyLoadingScreen
// (Final, Native, Public, BlueprintCallable)

void UGymGameInstance::DestroyLoadingScreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameInstance", "DestroyLoadingScreen");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGameInstance.Disconnect
// (Final, Native, Public, BlueprintCallable)

void UGymGameInstance::Disconnect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameInstance", "Disconnect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGameInstance.EndLoadingScreen
// (Final, Native, Private)
// Parameters:
// class UWorld*                           InLoadedWorld                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGameInstance::EndLoadingScreen(class UWorld* InLoadedWorld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameInstance", "EndLoadingScreen");

	Params::GymGameInstance_EndLoadingScreen Parms{};

	Parms.InLoadedWorld = InLoadedWorld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGameInstance.FindAndJoinHub
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class FString                           URL                                                    (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGameInstance::FindAndJoinHub(const class FString& URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameInstance", "FindAndJoinHub");

	Params::GymGameInstance_FindAndJoinHub Parms{};

	Parms.URL = std::move(URL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGameInstance.GetNewLoadingScreenTip
// (Event, Public, BlueprintEvent)

void UGymGameInstance::GetNewLoadingScreenTip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameInstance", "GetNewLoadingScreenTip");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGameInstance.InitialLoadingComplete_Server_BP
// (Native, Event, Public, BlueprintEvent)

void UGymGameInstance::InitialLoadingComplete_Server_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameInstance", "InitialLoadingComplete_Server_BP");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGameInstance.JoinHub
// (Final, Net, NetReliable, Native, Event, Private, NetServer)

void UGymGameInstance::JoinHub()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameInstance", "JoinHub");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGameInstance.LoadMainMenu
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UGymGameInstance::LoadMainMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameInstance", "LoadMainMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGameInstance.OnGSDKHealthCheck
// (Final, Native, Protected)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGameInstance::OnGSDKHealthCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameInstance", "OnGSDKHealthCheck");

	Params::GymGameInstance_OnGSDKHealthCheck Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGameInstance.OnGSDKReadyForPlayers
// (Final, Native, Protected)

void UGymGameInstance::OnGSDKReadyForPlayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameInstance", "OnGSDKReadyForPlayers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGameInstance.OnGSDKServerActive
// (Final, Native, Protected)

void UGymGameInstance::OnGSDKServerActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameInstance", "OnGSDKServerActive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGameInstance.OnGSDKShutdown
// (Final, Native, Protected)

void UGymGameInstance::OnGSDKShutdown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameInstance", "OnGSDKShutdown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGameInstance.RestartCareerPlaylist
// (Final, Native, Public, BlueprintCallable)

void UGymGameInstance::RestartCareerPlaylist()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameInstance", "RestartCareerPlaylist");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGameInstance.SessionCookieReceived
// (Native, Event, Protected, BlueprintEvent)

void UGymGameInstance::SessionCookieReceived()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameInstance", "SessionCookieReceived");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGameInstance.SetLevelFileName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGameInstance::SetLevelFileName(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameInstance", "SetLevelFileName");

	Params::GymGameInstance_SetLevelFileName Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGameInstance.SetLoadingScreenData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGymLoadingScreenOptions         Options                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGymGameInstance::SetLoadingScreenData(const struct FGymLoadingScreenOptions& Options)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameInstance", "SetLoadingScreenData");

	Params::GymGameInstance_SetLoadingScreenData Parms{};

	Parms.Options = std::move(Options);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGameInstance.SetLobbyMapDetails
// (Final, Native, Public)
// Parameters:
// bool                                    bSuccess                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGymMapDetailsResult             Result                                                 (Parm, NativeAccessSpecifierPublic)

void UGymGameInstance::SetLobbyMapDetails(bool bSuccess, const struct FGymMapDetailsResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameInstance", "SetLobbyMapDetails");

	Params::GymGameInstance_SetLobbyMapDetails Parms{};

	Parms.bSuccess = bSuccess;
	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGameInstance.SetPlaylist
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGymPlaylistDetailsResult        Details                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGymGameInstance::SetPlaylist(const struct FGymPlaylistDetailsResult& Details)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameInstance", "SetPlaylist");

	Params::GymGameInstance_SetPlaylist Parms{};

	Parms.Details = std::move(Details);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGameInstance.StartCareerPlaylist
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FGymCareerPlaylistMapInfo>PlaylistMaps                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           PlaylistName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGymAISelectionData>      NPCs                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGymGameInstance::StartCareerPlaylist(const TArray<struct FGymCareerPlaylistMapInfo>& PlaylistMaps, const class FString& PlaylistName, const TArray<struct FGymAISelectionData>& NPCs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameInstance", "StartCareerPlaylist");

	Params::GymGameInstance_StartCareerPlaylist Parms{};

	Parms.PlaylistMaps = std::move(PlaylistMaps);
	Parms.PlaylistName = std::move(PlaylistName);
	Parms.NPCs = std::move(NPCs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGameInstance.GetCurrentMapInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FCustomLevelFileInfo             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FCustomLevelFileInfo UGymGameInstance::GetCurrentMapInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameInstance", "GetCurrentMapInfo");

	Params::GymGameInstance_GetCurrentMapInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGameInstance.GetRequestedServerId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGymGameInstance::GetRequestedServerId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameInstance", "GetRequestedServerId");

	Params::GymGameInstance_GetRequestedServerId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGameInstance.IsServerReadyToStart
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGameInstance::IsServerReadyToStart() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameInstance", "IsServerReadyToStart");

	Params::GymGameInstance_IsServerReadyToStart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGameInstance.ShutdownServer
// (Final, Native, Public, BlueprintCallable, Const)

void UGymGameInstance::ShutdownServer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameInstance", "ShutdownServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGameState.BeginPlay
// (Native, Public)

void AGymGameState::BeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameState", "BeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGameState.Multi_SetScoreboard
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// TArray<struct FGymScoreboardEntry>      Scoreboard                                             (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AGymGameState::Multi_SetScoreboard(const TArray<struct FGymScoreboardEntry>& Scoreboard)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameState", "Multi_SetScoreboard");

	Params::GymGameState_Multi_SetScoreboard Parms{};

	Parms.Scoreboard = std::move(Scoreboard);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction GYMGAME.GymGameState.OnLevelInfoUpdated__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// struct FCustomLevelFileInfo             LevelInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AGymGameState::OnLevelInfoUpdated__DelegateSignature(const struct FCustomLevelFileInfo& LevelInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameState", "OnLevelInfoUpdated__DelegateSignature");

	Params::GymGameState_OnLevelInfoUpdated__DelegateSignature Parms{};

	Parms.LevelInfo = std::move(LevelInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGameState.OnMapDetailsReceived
// (Final, Native, Private)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGymMapDetailsResult             Details                                                (Parm, NativeAccessSpecifierPublic)

void AGymGameState::OnMapDetailsReceived(bool Success, const struct FGymMapDetailsResult& Details)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameState", "OnMapDetailsReceived");

	Params::GymGameState_OnMapDetailsReceived Parms{};

	Parms.Success = Success;
	Parms.Details = std::move(Details);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGameState.OnRep_LevelInfo
// (Final, Native, Public)

void AGymGameState::OnRep_LevelInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameState", "OnRep_LevelInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGameState.OnRep_ScoreBoardData
// (Final, Native, Public)

void AGymGameState::OnRep_ScoreBoardData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameState", "OnRep_ScoreBoardData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGameState.OnRep_ServerInfo
// (Final, Native, Public)

void AGymGameState::OnRep_ServerInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameState", "OnRep_ServerInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGameState.OnRep_VoteStateChanged
// (Final, Native, Public)

void AGymGameState::OnRep_VoteStateChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameState", "OnRep_VoteStateChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction GYMGAME.GymGameState.OnServerInfoChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// struct FGymServerInfo                   ServerInfo_0                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AGymGameState::OnServerInfoChanged__DelegateSignature(const struct FGymServerInfo& ServerInfo_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameState", "OnServerInfoChanged__DelegateSignature");

	Params::GymGameState_OnServerInfoChanged__DelegateSignature Parms{};

	Parms.ServerInfo_0 = std::move(ServerInfo_0);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GYMGAME.GymGameState.OnVoteStateChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// EVoteState                              VoteState_0                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymGameState::OnVoteStateChanged__DelegateSignature(EVoteState VoteState_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameState", "OnVoteStateChanged__DelegateSignature");

	Params::GymGameState_OnVoteStateChanged__DelegateSignature Parms{};

	Parms.VoteState_0 = VoteState_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGameState.GetBasicRuleData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymRuleReplicatedData*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymRuleReplicatedData* AGymGameState::GetBasicRuleData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameState", "GetBasicRuleData");

	Params::GymGameState_GetBasicRuleData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGameState.IsPlayMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGymGameState::IsPlayMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameState", "IsPlayMode");

	Params::GymGameState_IsPlayMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGameState.IsSandboxMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGymGameState::IsSandboxMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameState", "IsSandboxMode");

	Params::GymGameState_IsSandboxMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGameState.MapEditingAllowed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGymGameState::MapEditingAllowed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGameState", "MapEditingAllowed");

	Params::GymGameState_MapEditingAllowed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGlobalAudioControl.Client_PlayAmbientAudio
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class FName                             TriggerName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRulesRunningOnly                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGlobalAudioControl::Client_PlayAmbientAudio(class FName TriggerName, bool bRulesRunningOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGlobalAudioControl", "Client_PlayAmbientAudio");

	Params::GymGlobalAudioControl_Client_PlayAmbientAudio Parms{};

	Parms.TriggerName = TriggerName;
	Parms.bRulesRunningOnly = bRulesRunningOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGlobalAudioControl.Client_PlayStingerAudio
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class FName                             TriggerName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGlobalAudioControl::Client_PlayStingerAudio(class FName TriggerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGlobalAudioControl", "Client_PlayStingerAudio");

	Params::GymGlobalAudioControl_Client_PlayStingerAudio Parms{};

	Parms.TriggerName = TriggerName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGlobalWidgetControl.GetDistanceToPreviousFocusedWidget
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGeometry                        Geometry                                               (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGymGlobalWidgetControl::GetDistanceToPreviousFocusedWidget(const struct FGeometry& Geometry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGlobalWidgetControl", "GetDistanceToPreviousFocusedWidget");

	Params::GymGlobalWidgetControl_GetDistanceToPreviousFocusedWidget Parms{};

	Parms.Geometry = std::move(Geometry);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGlobalWidgetControl.IsMenuOpen
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGlobalWidgetControl::IsMenuOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGlobalWidgetControl", "IsMenuOpen");

	Params::GymGlobalWidgetControl_IsMenuOpen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGlobalWidgetControl.IsSettingsOpen
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGlobalWidgetControl::IsSettingsOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGlobalWidgetControl", "IsSettingsOpen");

	Params::GymGlobalWidgetControl_IsSettingsOpen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGlobalWidgetControl.OnGameOverlayActivityChanged
// (Final, Native, Private)
// Parameters:
// bool                                    bIsOverlayActive                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGlobalWidgetControl::OnGameOverlayActivityChanged(bool bIsOverlayActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGlobalWidgetControl", "OnGameOverlayActivityChanged");

	Params::GymGlobalWidgetControl_OnGameOverlayActivityChanged Parms{};

	Parms.bIsOverlayActive = bIsOverlayActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGlobalWidgetControl.OnGamepadConnectionChanged
// (Final, Native, Private)
// Parameters:
// EInputDeviceConnectionState             NewConnectionState                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPlatformUserId                  PlatformUserId                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInputDeviceId                   InputDeviceId                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGlobalWidgetControl::OnGamepadConnectionChanged(EInputDeviceConnectionState NewConnectionState, const struct FPlatformUserId& PlatformUserId, const struct FInputDeviceId& InputDeviceId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGlobalWidgetControl", "OnGamepadConnectionChanged");

	Params::GymGlobalWidgetControl_OnGamepadConnectionChanged Parms{};

	Parms.NewConnectionState = NewConnectionState;
	Parms.PlatformUserId = std::move(PlatformUserId);
	Parms.InputDeviceId = std::move(InputDeviceId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGlobalWidgetControl.OnWindowFocusChanged
// (Final, Native, Private)
// Parameters:
// bool                                    bIsFocused                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGlobalWidgetControl::OnWindowFocusChanged(bool bIsFocused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGlobalWidgetControl", "OnWindowFocusChanged");

	Params::GymGlobalWidgetControl_OnWindowFocusChanged Parms{};

	Parms.bIsFocused = bIsFocused;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGlobalWidgetControl.SetUIMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    UIMode                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGymGuiMetaWidget*                WidgetResponsible                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPreventMoving                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPreventLooking                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGlobalWidgetControl::SetUIMode(const bool UIMode, class UGymGuiMetaWidget* WidgetResponsible, const bool bPreventMoving, const bool bPreventLooking)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGlobalWidgetControl", "SetUIMode");

	Params::GymGlobalWidgetControl_SetUIMode Parms{};

	Parms.UIMode = UIMode;
	Parms.WidgetResponsible = WidgetResponsible;
	Parms.bPreventMoving = bPreventMoving;
	Parms.bPreventLooking = bPreventLooking;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGlobalWidgetControl.UpdateCommonInputTable
// (Final, Native, Public, BlueprintCallable)

void UGymGlobalWidgetControl::UpdateCommonInputTable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGlobalWidgetControl", "UpdateCommonInputTable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGlobalWidgetControl.GetActionWheel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymGuiRadialWidget*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymGuiRadialWidget* UGymGlobalWidgetControl::GetActionWheel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGlobalWidgetControl", "GetActionWheel");

	Params::GymGlobalWidgetControl_GetActionWheel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGlobalWidgetControl.GetChatWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymGuiGlobalChatWidget*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymGuiGlobalChatWidget* UGymGlobalWidgetControl::GetChatWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGlobalWidgetControl", "GetChatWidget");

	Params::GymGlobalWidgetControl_GetChatWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGlobalWidgetControl.GetFadeWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymFadeWidget*                   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymFadeWidget* UGymGlobalWidgetControl::GetFadeWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGlobalWidgetControl", "GetFadeWidget");

	Params::GymGlobalWidgetControl_GetFadeWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGlobalWidgetControl.GetHideAllWidgets
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGlobalWidgetControl::GetHideAllWidgets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGlobalWidgetControl", "GetHideAllWidgets");

	Params::GymGlobalWidgetControl_GetHideAllWidgets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGlobalWidgetControl.GetInfoPopup
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymGuiGlobalMetaWidget*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymGuiGlobalMetaWidget* UGymGlobalWidgetControl::GetInfoPopup() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGlobalWidgetControl", "GetInfoPopup");

	Params::GymGlobalWidgetControl_GetInfoPopup Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGlobalWidgetControl.GetMainMenu
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymGuiMainMenuWidget*            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymGuiMainMenuWidget* UGymGlobalWidgetControl::GetMainMenu() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGlobalWidgetControl", "GetMainMenu");

	Params::GymGlobalWidgetControl_GetMainMenu Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGlobalWidgetControl.GetPauseMenu
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymGuiPauseMenu*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymGuiPauseMenu* UGymGlobalWidgetControl::GetPauseMenu() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGlobalWidgetControl", "GetPauseMenu");

	Params::GymGlobalWidgetControl_GetPauseMenu Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGlobalWidgetControl.IsPopupOrConfirmOpen
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGlobalWidgetControl::IsPopupOrConfirmOpen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGlobalWidgetControl", "IsPopupOrConfirmOpen");

	Params::GymGlobalWidgetControl_IsPopupOrConfirmOpen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGlobalWidgetControl.OpenPlaylistScoreboard
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGymPlayerScoreboard             Scoreboard                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EGymPlaylistType                        PlayListType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsFinal                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsValidLevel                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGlobalWidgetControl::OpenPlaylistScoreboard(const struct FGymPlayerScoreboard& Scoreboard, EGymPlaylistType PlayListType, bool IsFinal, bool bIsValidLevel) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGlobalWidgetControl", "OpenPlaylistScoreboard");

	Params::GymGlobalWidgetControl_OpenPlaylistScoreboard Parms{};

	Parms.Scoreboard = std::move(Scoreboard);
	Parms.PlayListType = PlayListType;
	Parms.IsFinal = IsFinal;
	Parms.bIsValidLevel = bIsValidLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGoalPiece.OnBeginOverlap
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGymGoalPiece::OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGoalPiece", "OnBeginOverlap");

	Params::GymGoalPiece_OnBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiCanvasLobbyListWidget.OnBackButtonPressed
// (Final, Native, Private)

void UGymGuiCanvasLobbyListWidget::OnBackButtonPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiCanvasLobbyListWidget", "OnBackButtonPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiCanvasLobbyListWidget.OnCreateBackButtonPressed
// (Final, Native, Private)

void UGymGuiCanvasLobbyListWidget::OnCreateBackButtonPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiCanvasLobbyListWidget", "OnCreateBackButtonPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiChooseLevelSlot.OnLevelSlotButtonPressed
// (Final, Native, Private)

void UGymGuiChooseLevelSlot::OnLevelSlotButtonPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiChooseLevelSlot", "OnLevelSlotButtonPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiControl.Client_AddQuestMessage
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class FText                             Text                                                   (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bGoodMessage                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiControl::Client_AddQuestMessage(const class FText& Text, bool bGoodMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiControl", "Client_AddQuestMessage");

	Params::GymGuiControl_Client_AddQuestMessage Parms{};

	Parms.Text = std::move(Text);
	Parms.bGoodMessage = bGoodMessage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiControl.SetUIMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    UIMode                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGymGuiMetaWidget*                WidgetResponsible                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPreventMovement                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPreventLooking                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiControl::SetUIMode(const bool UIMode, class UGymGuiMetaWidget* WidgetResponsible, const bool bPreventMovement, const bool bPreventLooking)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiControl", "SetUIMode");

	Params::GymGuiControl_SetUIMode Parms{};

	Parms.UIMode = UIMode;
	Parms.WidgetResponsible = WidgetResponsible;
	Parms.bPreventMovement = bPreventMovement;
	Parms.bPreventLooking = bPreventLooking;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiCreateLevelWidget.CreateLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGuiCreateLevelWidget::CreateLevel(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiCreateLevelWidget", "CreateLevel");

	Params::GymGuiCreateLevelWidget_CreateLevel Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiCursorWidget.BPOnSupermoveReadyChanged
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// int32                                   IsReady                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiCursorWidget::BPOnSupermoveReadyChanged(const int32& IsReady)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiCursorWidget", "BPOnSupermoveReadyChanged");

	Params::GymGuiCursorWidget_BPOnSupermoveReadyChanged Parms{};

	Parms.IsReady = IsReady;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiCursorWidget.UpdateSupermoveStamina
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   Stamina                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiCursorWidget::UpdateSupermoveStamina(float Stamina)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiCursorWidget", "UpdateSupermoveStamina");

	Params::GymGuiCursorWidget_UpdateSupermoveStamina Parms{};

	Parms.Stamina = Stamina;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiDialogueWidget.BPSetNPCName
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             NPCName                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiDialogueWidget::BPSetNPCName(const class FName& NPCName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiDialogueWidget", "BPSetNPCName");

	Params::GymGuiDialogueWidget_BPSetNPCName Parms{};

	Parms.NPCName = NPCName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiDialogueWidget.BPSetNPCSpeech
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             NPCSPeech                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGymGuiDialogueWidget::BPSetNPCSpeech(const class FText& NPCSPeech)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiDialogueWidget", "BPSetNPCSpeech");

	Params::GymGuiDialogueWidget_BPSetNPCSpeech Parms{};

	Parms.NPCSPeech = std::move(NPCSPeech);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiDialogueWidget.BPSetPlayerAnswers
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<struct FGymAnswer>               PlayerAnswers                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGymGuiDialogueWidget::BPSetPlayerAnswers(const TArray<struct FGymAnswer>& PlayerAnswers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiDialogueWidget", "BPSetPlayerAnswers");

	Params::GymGuiDialogueWidget_BPSetPlayerAnswers Parms{};

	Parms.PlayerAnswers = std::move(PlayerAnswers);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiDialogueWidget.CloseDialogue
// (Final, Native, Protected, BlueprintCallable)

void UGymGuiDialogueWidget::CloseDialogue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiDialogueWidget", "CloseDialogue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiDialogueWidget.PlayerAnswered
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiDialogueWidget::PlayerAnswered(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiDialogueWidget", "PlayerAnswered");

	Params::GymGuiDialogueWidget_PlayerAnswered Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiDialogueWidget.SetAnswerVisible
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiDialogueWidget::SetAnswerVisible(bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiDialogueWidget", "SetAnswerVisible");

	Params::GymGuiDialogueWidget_SetAnswerVisible Parms{};

	Parms.bVisible = bVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiGenericButton.Clicked
// (Final, Native, Private)

void UGymGuiGenericButton::Clicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiGenericButton", "Clicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiGenericButton.FocusAndHover
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bFocusToButtonObject                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiGenericButton::FocusAndHover(bool bFocusToButtonObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiGenericButton", "FocusAndHover");

	Params::GymGuiGenericButton_FocusAndHover Parms{};

	Parms.bFocusToButtonObject = bFocusToButtonObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiGenericTab.AddButton
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGymGuiGenericTabButton*          Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiGenericTab::AddButton(class UGymGuiGenericTabButton* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiGenericTab", "AddButton");

	Params::GymGuiGenericTab_AddButton Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiGenericTab.Clear
// (Final, Native, Public, BlueprintCallable)

void UGymGuiGenericTab::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiGenericTab", "Clear");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiGenericTab.ClickCurrentButton
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bForceClick                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiGenericTab::ClickCurrentButton(bool bForceClick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiGenericTab", "ClickCurrentButton");

	Params::GymGuiGenericTab_ClickCurrentButton Parms{};

	Parms.bForceClick = bForceClick;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiGenericTab.GetAllButtons
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UGymGuiGenericTabButton*>  AllButtons                                             (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGymGuiGenericTab::GetAllButtons(TArray<class UGymGuiGenericTabButton*>* AllButtons)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiGenericTab", "GetAllButtons");

	Params::GymGuiGenericTab_GetAllButtons Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AllButtons != nullptr)
		*AllButtons = std::move(Parms.AllButtons);
}


// Function GYMGAME.GymGuiGenericTab.GetCurrentButton
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGymGuiGenericTabButton*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymGuiGenericTabButton* UGymGuiGenericTab::GetCurrentButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiGenericTab", "GetCurrentButton");

	Params::GymGuiGenericTab_GetCurrentButton Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiGenericTab.InitializeTab
// (Final, Native, Public, BlueprintCallable)

void UGymGuiGenericTab::InitializeTab()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiGenericTab", "InitializeTab");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction GYMGAME.GymGuiGenericTab.OnTabButtonSelected__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiGenericTab::OnTabButtonSelected__DelegateSignature(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiGenericTab", "OnTabButtonSelected__DelegateSignature");

	Params::GymGuiGenericTab_OnTabButtonSelected__DelegateSignature Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiGenericTab.PreInitializeTab
// (Final, Native, Public, BlueprintCallable)

void UGymGuiGenericTab::PreInitializeTab()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiGenericTab", "PreInitializeTab");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiGenericTab.SetTabActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiGenericTab::SetTabActive(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiGenericTab", "SetTabActive");

	Params::GymGuiGenericTab_SetTabActive Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiGenericTab.SetTabVisuallySelected
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHover                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiGenericTab::SetTabVisuallySelected(int32 Index_0, bool bHover)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiGenericTab", "SetTabVisuallySelected");

	Params::GymGuiGenericTab_SetTabVisuallySelected Parms{};

	Parms.Index_0 = Index_0;
	Parms.bHover = bHover;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiGenericTabButton.Select
// (Event, Public, BlueprintEvent)

void UGymGuiGenericTabButton::Select()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiGenericTabButton", "Select");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiGenericTabButton.TabButtonSelected
// (Final, Native, Private)

void UGymGuiGenericTabButton::TabButtonSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiGenericTabButton", "TabButtonSelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiGenericTabButton.Unselect
// (Event, Public, BlueprintEvent)

void UGymGuiGenericTabButton::Unselect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiGenericTabButton", "Unselect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiGlobalChatWidget.ReceiveMessage
// (Event, Public, BlueprintEvent)
// Parameters:
// class FString                           PlayerName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiGlobalChatWidget::ReceiveMessage(const class FString& PlayerName, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiGlobalChatWidget", "ReceiveMessage");

	Params::GymGuiGlobalChatWidget_ReceiveMessage Parms{};

	Parms.PlayerName = std::move(PlayerName);
	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiGlobalChatWidget.SendMessage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlayerName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiGlobalChatWidget::SendMessage(const class FString& PlayerName, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiGlobalChatWidget", "SendMessage");

	Params::GymGuiGlobalChatWidget_SendMessage Parms{};

	Parms.PlayerName = std::move(PlayerName);
	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiMasterMenuWidget.CreateTabButton
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             ButtonTitle                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   TabIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGymGuiMainMenuWidget*            MainPanel                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Hidden                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiMasterMenuWidget::CreateTabButton(const class FText& ButtonTitle, int32 TabIndex, class UGymGuiMainMenuWidget* MainPanel, bool Hidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiMasterMenuWidget", "CreateTabButton");

	Params::GymGuiMasterMenuWidget_CreateTabButton Parms{};

	Parms.ButtonTitle = std::move(ButtonTitle);
	Parms.TabIndex = TabIndex;
	Parms.MainPanel = MainPanel;
	Parms.Hidden = Hidden;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiMasterMenuWidget.OnSettingsButtonPressed
// (Final, Native, Public)

void UGymGuiMasterMenuWidget::OnSettingsButtonPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiMasterMenuWidget", "OnSettingsButtonPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiMasterMenuWidget.SetNotificationCount
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TabIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiMasterMenuWidget::SetNotificationCount(int32 TabIndex, int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiMasterMenuWidget", "SetNotificationCount");

	Params::GymGuiMasterMenuWidget_SetNotificationCount Parms{};

	Parms.TabIndex = TabIndex;
	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiMasterRuleStateWidget.AddRuleStateWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UGymGuiRuleStateWidget*           Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiMasterRuleStateWidget::AddRuleStateWidget(class UGymGuiRuleStateWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiMasterRuleStateWidget", "AddRuleStateWidget");

	Params::GymGuiMasterRuleStateWidget_AddRuleStateWidget Parms{};

	Parms.Widget = Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiMasterRuleStateWidget.OnTapeCollected
// (Event, Public, BlueprintEvent)

void UGymGuiMasterRuleStateWidget::OnTapeCollected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiMasterRuleStateWidget", "OnTapeCollected");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiMasterRuleStateWidget.ParticipantReachedCheckpoint
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiMasterRuleStateWidget::ParticipantReachedCheckpoint(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiMasterRuleStateWidget", "ParticipantReachedCheckpoint");

	Params::GymGuiMasterRuleStateWidget_ParticipantReachedCheckpoint Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiMasterRuleStateWidget.ShowRuleInfoText
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGymGuiMasterRuleStateWidget::ShowRuleInfoText(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiMasterRuleStateWidget", "ShowRuleInfoText");

	Params::GymGuiMasterRuleStateWidget_ShowRuleInfoText Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiPauseMenu.BP_OnThumbnailUpdated
// (Event, Public, BlueprintEvent)
// Parameters:
// class FString                           LocalFilePath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiPauseMenu::BP_OnThumbnailUpdated(const class FString& LocalFilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPauseMenu", "BP_OnThumbnailUpdated");

	Params::GymGuiPauseMenu_BP_OnThumbnailUpdated Parms{};

	Parms.LocalFilePath = std::move(LocalFilePath);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiPauseMenu.GetCurrentMapData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FCustomLevelFileInfo             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FCustomLevelFileInfo UGymGuiPauseMenu::GetCurrentMapData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPauseMenu", "GetCurrentMapData");

	Params::GymGuiPauseMenu_GetCurrentMapData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiPauseMenu.GetPlaylistName
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGymGuiPauseMenu::GetPlaylistName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPauseMenu", "GetPlaylistName");

	Params::GymGuiPauseMenu_GetPlaylistName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiPauseMenu.IsLobbyOwner
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGuiPauseMenu::IsLobbyOwner()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPauseMenu", "IsLobbyOwner");

	Params::GymGuiPauseMenu_IsLobbyOwner Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiPauseMenu.IsValidLevel
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FCustomLevelFileInfo             LevelInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGuiPauseMenu::IsValidLevel(const struct FCustomLevelFileInfo& LevelInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPauseMenu", "IsValidLevel");

	Params::GymGuiPauseMenu_IsValidLevel Parms{};

	Parms.LevelInfo = std::move(LevelInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiPauseMenu.LeaveServerPressed
// (Final, Native, Public, BlueprintCallable)

void UGymGuiPauseMenu::LeaveServerPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPauseMenu", "LeaveServerPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiPauseMenu.OnControllerDisconnected
// (Event, Public, BlueprintEvent)

void UGymGuiPauseMenu::OnControllerDisconnected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPauseMenu", "OnControllerDisconnected");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiPauseMenu.OnMapSaved
// (Event, Public, BlueprintEvent)

void UGymGuiPauseMenu::OnMapSaved()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPauseMenu", "OnMapSaved");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiPauseMenu.OpenDirectlyToLevelSettings
// (Final, Native, Public, BlueprintCallable)

void UGymGuiPauseMenu::OpenDirectlyToLevelSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPauseMenu", "OpenDirectlyToLevelSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiPauseMenu.OpenLevelSettingsMenu
// (Event, Public, BlueprintEvent)

void UGymGuiPauseMenu::OpenLevelSettingsMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPauseMenu", "OpenLevelSettingsMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiPauseMenu.RestartCareerPressed
// (Final, Native, Public, BlueprintCallable)

void UGymGuiPauseMenu::RestartCareerPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPauseMenu", "RestartCareerPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiPauseMenu.SettingsMenuPressed
// (Final, Native, Public, BlueprintCallable)

void UGymGuiPauseMenu::SettingsMenuPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPauseMenu", "SettingsMenuPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiPauseMenu.TryOpenThumbnailMode
// (Final, Native, Public, BlueprintCallable)

void UGymGuiPauseMenu::TryOpenThumbnailMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPauseMenu", "TryOpenThumbnailMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiPauseMenu.TryStartPlay
// (Final, Native, Public, BlueprintCallable)

void UGymGuiPauseMenu::TryStartPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPauseMenu", "TryStartPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiPauseMenu.UpdateLevelInfo
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCustomLevelFileInfo             LevelInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGymGuiPauseMenu::UpdateLevelInfo(const struct FCustomLevelFileInfo& LevelInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPauseMenu", "UpdateLevelInfo");

	Params::GymGuiPauseMenu_UpdateLevelInfo Parms{};

	Parms.LevelInfo = std::move(LevelInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiPauseMenu.UpdateServerInfo
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGymServerInfo                   ServerInfo                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGymGuiPauseMenu::UpdateServerInfo(const struct FGymServerInfo& ServerInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPauseMenu", "UpdateServerInfo");

	Params::GymGuiPauseMenu_UpdateServerInfo Parms{};

	Parms.ServerInfo = std::move(ServerInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiPauseMenu.IsCareer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGuiPauseMenu::IsCareer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPauseMenu", "IsCareer");

	Params::GymGuiPauseMenu_IsCareer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiPauseMenu.IsCareerRace
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGuiPauseMenu::IsCareerRace() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPauseMenu", "IsCareerRace");

	Params::GymGuiPauseMenu_IsCareerRace Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiPauseMenu.IsGoalMap
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGuiPauseMenu::IsGoalMap() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPauseMenu", "IsGoalMap");

	Params::GymGuiPauseMenu_IsGoalMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiPauseMenu.IsMapOwner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGuiPauseMenu::IsMapOwner() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPauseMenu", "IsMapOwner");

	Params::GymGuiPauseMenu_IsMapOwner Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiPauseMenu.IsQuickplay
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGuiPauseMenu::IsQuickplay() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPauseMenu", "IsQuickplay");

	Params::GymGuiPauseMenu_IsQuickplay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiPlayerIdentityNameplate.BP_UpdatePlayerIdentityInfo
// (Event, Public, BlueprintEvent)
// Parameters:
// class AGymCharacter*                    OtherPlayer                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiPlayerIdentityNameplate::BP_UpdatePlayerIdentityInfo(class AGymCharacter* OtherPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPlayerIdentityNameplate", "BP_UpdatePlayerIdentityInfo");

	Params::GymGuiPlayerIdentityNameplate_BP_UpdatePlayerIdentityInfo Parms{};

	Parms.OtherPlayer = OtherPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiPlayMenuWidget.LeaveGymPressed
// (Final, Native, Public, BlueprintCallable)

void UGymGuiPlayMenuWidget::LeaveGymPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPlayMenuWidget", "LeaveGymPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiPlayMenuWidget.OnAllLevelsButtonPressed
// (Final, Native, Public)

void UGymGuiPlayMenuWidget::OnAllLevelsButtonPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPlayMenuWidget", "OnAllLevelsButtonPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiPlayMenuWidget.OnJoinLobbyButtonPressed
// (Final, Native, Public, BlueprintCallable)

void UGymGuiPlayMenuWidget::OnJoinLobbyButtonPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPlayMenuWidget", "OnJoinLobbyButtonPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiPlayMenuWidget.OnMakeYourOwnButtonPressed
// (Final, Native, Public)

void UGymGuiPlayMenuWidget::OnMakeYourOwnButtonPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPlayMenuWidget", "OnMakeYourOwnButtonPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiPlayMenuWidget.IsInHostedGame
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGuiPlayMenuWidget::IsInHostedGame() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPlayMenuWidget", "IsInHostedGame");

	Params::GymGuiPlayMenuWidget_IsInHostedGame Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiPlayMenuWidget.ShouldShowMapOwnerOptions
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGuiPlayMenuWidget::ShouldShowMapOwnerOptions() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiPlayMenuWidget", "ShouldShowMapOwnerOptions");

	Params::GymGuiPlayMenuWidget_ShouldShowMapOwnerOptions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiRadialSelectionWidget.Highlight
// (Event, Public, BlueprintEvent)

void UGymGuiRadialSelectionWidget::Highlight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRadialSelectionWidget", "Highlight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiRadialSelectionWidget.UnHighlight
// (Event, Public, BlueprintEvent)

void UGymGuiRadialSelectionWidget::UnHighlight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRadialSelectionWidget", "UnHighlight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiRewardNotificationWidget.ShowRewards
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<struct FGymRewardNotification>   RewardNotifications                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGymGuiRewardNotificationWidget::ShowRewards(const TArray<struct FGymRewardNotification>& RewardNotifications)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRewardNotificationWidget", "ShowRewards");

	Params::GymGuiRewardNotificationWidget_ShowRewards Parms{};

	Parms.RewardNotifications = std::move(RewardNotifications);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiRuleStateWidgetBasics.OnPressedStartTutorial
// (Final, Native, Protected, BlueprintCallable)

void UGymGuiRuleStateWidgetBasics::OnPressedStartTutorial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRuleStateWidgetBasics", "OnPressedStartTutorial");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiRuleStateWidgetCareer.OnPressedStartTutorial
// (Final, Native, Protected, BlueprintCallable)

void UGymGuiRuleStateWidgetCareer::OnPressedStartTutorial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRuleStateWidgetCareer", "OnPressedStartTutorial");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiRuleStateWidgetCareer.OnTapeCollected
// (Event, Public, BlueprintEvent)

void UGymGuiRuleStateWidgetCareer::OnTapeCollected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRuleStateWidgetCareer", "OnTapeCollected");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiRuleStateWidgetCareer.ShowBombUI
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bShow                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiRuleStateWidgetCareer::ShowBombUI(bool bShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRuleStateWidgetCareer", "ShowBombUI");

	Params::GymGuiRuleStateWidgetCareer_ShowBombUI Parms{};

	Parms.bShow = bShow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiRuleStateWidgetCareer.ShowSpray
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bShow                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiRuleStateWidgetCareer::ShowSpray(bool bShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRuleStateWidgetCareer", "ShowSpray");

	Params::GymGuiRuleStateWidgetCareer_ShowSpray Parms{};

	Parms.bShow = bShow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiRuleStateWidgetLoot.OnLootCollected
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   Collected                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LootLeft                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiRuleStateWidgetLoot::OnLootCollected(int32 Collected, int32 LootLeft)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRuleStateWidgetLoot", "OnLootCollected");

	Params::GymGuiRuleStateWidgetLoot_OnLootCollected Parms{};

	Parms.Collected = Collected;
	Parms.LootLeft = LootLeft;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiRuleStateWidgetLoot.GetParticipantData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymParticipantRepDataLoot*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymParticipantRepDataLoot* UGymGuiRuleStateWidgetLoot::GetParticipantData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRuleStateWidgetLoot", "GetParticipantData");

	Params::GymGuiRuleStateWidgetLoot_GetParticipantData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiRuleStateWidgetLoot.GetRuleData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymLootReplicatedData*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymLootReplicatedData* UGymGuiRuleStateWidgetLoot::GetRuleData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRuleStateWidgetLoot", "GetRuleData");

	Params::GymGuiRuleStateWidgetLoot_GetRuleData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiRuleStateWidgetSprint.GetParticipantData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymParticipantRepDataSprint*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymParticipantRepDataSprint* UGymGuiRuleStateWidgetSprint::GetParticipantData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRuleStateWidgetSprint", "GetParticipantData");

	Params::GymGuiRuleStateWidgetSprint_GetParticipantData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiRuleStateWidgetSprint.GetRuleData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymRuleReplicatedData*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymRuleReplicatedData* UGymGuiRuleStateWidgetSprint::GetRuleData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiRuleStateWidgetSprint", "GetRuleData");

	Params::GymGuiRuleStateWidgetSprint_GetRuleData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiScoreboardEntryWidget.SetInfo
// (Event, Public, BlueprintEvent)
// Parameters:
// class AGymPlayerState*                  Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiScoreboardEntryWidget::SetInfo(class AGymPlayerState* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiScoreboardEntryWidget", "SetInfo");

	Params::GymGuiScoreboardEntryWidget_SetInfo Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiSettingsWidget.BPFocusToDefaultWidget
// (Event, Public, BlueprintEvent)

void UGymGuiSettingsWidget::BPFocusToDefaultWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiSettingsWidget", "BPFocusToDefaultWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiSettingsWidget.BPOpenNextCategory
// (Event, Public, BlueprintEvent)

void UGymGuiSettingsWidget::BPOpenNextCategory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiSettingsWidget", "BPOpenNextCategory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiSettingsWidget.BPOpenPrevCategory
// (Event, Public, BlueprintEvent)

void UGymGuiSettingsWidget::BPOpenPrevCategory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiSettingsWidget", "BPOpenPrevCategory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymGuiSettingsWidget.BPSetScrollBoxAutoScroll
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiSettingsWidget::BPSetScrollBoxAutoScroll(const bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiSettingsWidget", "BPSetScrollBoxAutoScroll");

	Params::GymGuiSettingsWidget_BPSetScrollBoxAutoScroll Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiSettingsWidget.OnBackButtonClicked
// (Final, Native, Public)

void UGymGuiSettingsWidget::OnBackButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiSettingsWidget", "OnBackButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiSettingsWidget.IsCareer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGuiSettingsWidget::IsCareer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiSettingsWidget", "IsCareer");

	Params::GymGuiSettingsWidget_IsCareer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiSettingsWidget.IsCareerRace
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGuiSettingsWidget::IsCareerRace() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiSettingsWidget", "IsCareerRace");

	Params::GymGuiSettingsWidget_IsCareerRace Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiSettingsWidget.IsGoalMap
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGuiSettingsWidget::IsGoalMap() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiSettingsWidget", "IsGoalMap");

	Params::GymGuiSettingsWidget_IsGoalMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiSpectatorRuleWidgetBomb.GetBombTimer
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGymGuiSpectatorRuleWidgetBomb::GetBombTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiSpectatorRuleWidgetBomb", "GetBombTimer");

	Params::GymGuiSpectatorRuleWidgetBomb_GetBombTimer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiSpectatorRuleWidgetBomb.GetIsBombTicking
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymGuiSpectatorRuleWidgetBomb::GetIsBombTicking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiSpectatorRuleWidgetBomb", "GetIsBombTicking");

	Params::GymGuiSpectatorRuleWidgetBomb_GetIsBombTicking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiSpectatorRuleWidgetBomb.GetRoundStartTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGymGuiSpectatorRuleWidgetBomb::GetRoundStartTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiSpectatorRuleWidgetBomb", "GetRoundStartTime");

	Params::GymGuiSpectatorRuleWidgetBomb_GetRoundStartTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiSpectatorRuleWidgetBomb.GetRuleData
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGymBombModeReplicatedData*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymBombModeReplicatedData* UGymGuiSpectatorRuleWidgetBomb::GetRuleData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiSpectatorRuleWidgetBomb", "GetRuleData");

	Params::GymGuiSpectatorRuleWidgetBomb_GetRuleData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiSpectatorRuleWidgetBomb.GetParticipantData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymParticipantRepDataBomb*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymParticipantRepDataBomb* UGymGuiSpectatorRuleWidgetBomb::GetParticipantData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiSpectatorRuleWidgetBomb", "GetParticipantData");

	Params::GymGuiSpectatorRuleWidgetBomb_GetParticipantData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiSpectatorRuleWidgetCircuit.GetRuleData
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGymCircuitReplicatedData*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymCircuitReplicatedData* UGymGuiSpectatorRuleWidgetCircuit::GetRuleData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiSpectatorRuleWidgetCircuit", "GetRuleData");

	Params::GymGuiSpectatorRuleWidgetCircuit_GetRuleData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiSpectatorRuleWidgetCircuit.GetParticipantData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymParticipantRepDataCircuit*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymParticipantRepDataCircuit* UGymGuiSpectatorRuleWidgetCircuit::GetParticipantData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiSpectatorRuleWidgetCircuit", "GetParticipantData");

	Params::GymGuiSpectatorRuleWidgetCircuit_GetParticipantData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiSpectatorRuleWidgetObstacle.OnLocationsSaved
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   LocationsSaved                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiSpectatorRuleWidgetObstacle::OnLocationsSaved(int32 LocationsSaved)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiSpectatorRuleWidgetObstacle", "OnLocationsSaved");

	Params::GymGuiSpectatorRuleWidgetObstacle_OnLocationsSaved Parms{};

	Parms.LocationsSaved = LocationsSaved;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymGuiSpectatorRuleWidgetObstacle.GetParticipantData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymParticipantRepDataObby*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymParticipantRepDataObby* UGymGuiSpectatorRuleWidgetObstacle::GetParticipantData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiSpectatorRuleWidgetObstacle", "GetParticipantData");

	Params::GymGuiSpectatorRuleWidgetObstacle_GetParticipantData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiSpectatorRuleWidgetObstacle.GetRuleData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymOCReplicatedData*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymOCReplicatedData* UGymGuiSpectatorRuleWidgetObstacle::GetRuleData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiSpectatorRuleWidgetObstacle", "GetRuleData");

	Params::GymGuiSpectatorRuleWidgetObstacle_GetRuleData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiSpectatorRuleWidgetSprint.GetParticipantData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymParticipantRepData*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymParticipantRepData* UGymGuiSpectatorRuleWidgetSprint::GetParticipantData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiSpectatorRuleWidgetSprint", "GetParticipantData");

	Params::GymGuiSpectatorRuleWidgetSprint_GetParticipantData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiSpectatorRuleWidgetSprint.GetRuleData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymRuleReplicatedData*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymRuleReplicatedData* UGymGuiSpectatorRuleWidgetSprint::GetRuleData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiSpectatorRuleWidgetSprint", "GetRuleData");

	Params::GymGuiSpectatorRuleWidgetSprint_GetRuleData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiSpectatorRuleWidgetTide.GetParticipantData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymParticipantRepData*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymParticipantRepData* UGymGuiSpectatorRuleWidgetTide::GetParticipantData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiSpectatorRuleWidgetTide", "GetParticipantData");

	Params::GymGuiSpectatorRuleWidgetTide_GetParticipantData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiSpectatorRuleWidgetTide.GetRuleData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymRuleReplicatedData*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymRuleReplicatedData* UGymGuiSpectatorRuleWidgetTide::GetRuleData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiSpectatorRuleWidgetTide", "GetRuleData");

	Params::GymGuiSpectatorRuleWidgetTide_GetRuleData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymGuiTickerMetaWidget.AddCustomMessage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGymGuiTickerMessageWidget>TickerWidget                                           (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETickerPosition                         Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiTickerMetaWidget::AddCustomMessage(TSubclassOf<class UGymGuiTickerMessageWidget> TickerWidget, ETickerPosition Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiTickerMetaWidget", "AddCustomMessage");

	Params::GymGuiTickerMetaWidget_AddCustomMessage Parms{};

	Parms.TickerWidget = TickerWidget;
	Parms.Position = Position;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiTickerMetaWidget.AddMessage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FTickerSettingsStruct            Settings                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGymGuiTickerMetaWidget::AddMessage(const struct FTickerSettingsStruct& Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiTickerMetaWidget", "AddMessage");

	Params::GymGuiTickerMetaWidget_AddMessage Parms{};

	Parms.Settings = std::move(Settings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymGuiTickerMetaWidget.RemoveMessage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             MessageId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymGuiTickerMetaWidget::RemoveMessage(class FName MessageId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymGuiTickerMetaWidget", "RemoveMessage");

	Params::GymGuiTickerMetaWidget_RemoveMessage Parms{};

	Parms.MessageId = MessageId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymInputControl.GetInputRecorder
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGymInputRecorder*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymInputRecorder* UGymInputControl::GetInputRecorder()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymInputControl", "GetInputRecorder");

	Params::GymInputControl_GetInputRecorder Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymInteractionControl.Client_EndInteract
// (Final, Net, NetReliable, Native, Event, Private, NetClient)

void UGymInteractionControl::Client_EndInteract()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymInteractionControl", "Client_EndInteract");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymInteractionControl.Client_Interact
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// class AActor*                           ActorToInteract                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              ComponentToInteract                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymInteractionControl::Client_Interact(class AActor* ActorToInteract, class UPrimitiveComponent* ComponentToInteract)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymInteractionControl", "Client_Interact");

	Params::GymInteractionControl_Client_Interact Parms{};

	Parms.ActorToInteract = ActorToInteract;
	Parms.ComponentToInteract = ComponentToInteract;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymInteractionControl.EndInteract
// (Final, Native, Public, BlueprintCallable)

void UGymInteractionControl::EndInteract()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymInteractionControl", "EndInteract");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymInteractionControl.OnOverlapBegin
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGymInteractionControl::OnOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymInteractionControl", "OnOverlapBegin");

	Params::GymInteractionControl_OnOverlapBegin Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymInteractionControl.OnOverlapEnd
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComp                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymInteractionControl::OnOverlapEnd(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymInteractionControl", "OnOverlapEnd");

	Params::GymInteractionControl_OnOverlapEnd Parms{};

	Parms.OverlappedComp = OverlappedComp;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymInteractionControl.Server_EndInteract
// (Final, Net, NetReliable, Native, Event, Private, NetServer)

void UGymInteractionControl::Server_EndInteract()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymInteractionControl", "Server_EndInteract");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymInteractionControl.Server_Interact
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// class AActor*                           ActorToInteract                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              ComponentToInteract                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymInteractionControl::Server_Interact(class AActor* ActorToInteract, class UPrimitiveComponent* ComponentToInteract)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymInteractionControl", "Server_Interact");

	Params::GymInteractionControl_Server_Interact Parms{};

	Parms.ActorToInteract = ActorToInteract;
	Parms.ComponentToInteract = ComponentToInteract;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymLoadingScreen.GetLastUsedTextureUri
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGymLoadingScreen::GetLastUsedTextureUri()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymLoadingScreen", "GetLastUsedTextureUri");

	Params::GymLoadingScreen_GetLastUsedTextureUri Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymLoadingScreen.GetLastUsedTimestamp
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UGymLoadingScreen::GetLastUsedTimestamp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymLoadingScreen", "GetLastUsedTimestamp");

	Params::GymLoadingScreen_GetLastUsedTimestamp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymLoadingScreen.SetLastUsedTextureUri
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           TextureUri                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymLoadingScreen::SetLastUsedTextureUri(const class FString& TextureUri)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymLoadingScreen", "SetLastUsedTextureUri");

	Params::GymLoadingScreen_SetLastUsedTextureUri Parms{};

	Parms.TextureUri = std::move(TextureUri);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymLocationCriterionVisual.OnFailTask
// (Event, Public, BlueprintEvent)

void AGymLocationCriterionVisual::OnFailTask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymLocationCriterionVisual", "OnFailTask");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymLocationCriterionVisual.OnFinishTask
// (Event, Public, BlueprintEvent)

void AGymLocationCriterionVisual::OnFinishTask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymLocationCriterionVisual", "OnFinishTask");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymLocationCriterionVisual.OnLocationReached
// (Event, Public, BlueprintEvent)

void AGymLocationCriterionVisual::OnLocationReached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymLocationCriterionVisual", "OnLocationReached");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymLocationCriterionVisual.OnRestartTask
// (Event, Public, BlueprintEvent)

void AGymLocationCriterionVisual::OnRestartTask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymLocationCriterionVisual", "OnRestartTask");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymLocationCriterionVisual.OnStartTask
// (Event, Public, BlueprintEvent)

void AGymLocationCriterionVisual::OnStartTask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymLocationCriterionVisual", "OnStartTask");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymLocationObjectiveActor.OnCollided
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymLocationObjectiveActor::OnCollided(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymLocationObjectiveActor", "OnCollided");

	Params::GymLocationObjectiveActor_OnCollided Parms{};

	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction GYMGAME.GymLocationObjectiveActor.OnCollided__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AGymLocationObjectiveActor*       LocationActor                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymLocationObjectiveActor::OnCollided__DelegateSignature(class AGymLocationObjectiveActor* LocationActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymLocationObjectiveActor", "OnCollided__DelegateSignature");

	Params::GymLocationObjectiveActor_OnCollided__DelegateSignature Parms{};

	Parms.LocationActor = LocationActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymLootReplicatedData.SetMaxLootNum
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   Loot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymLootReplicatedData::SetMaxLootNum(int32 Loot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymLootReplicatedData", "SetMaxLootNum");

	Params::GymLootReplicatedData_SetMaxLootNum Parms{};

	Parms.Loot = Loot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMap.GetBaseMapIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGymMap::GetBaseMapIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMap", "GetBaseMapIndex");

	Params::GymMap_GetBaseMapIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymMap.GetLevelKit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGymLevelKit                     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGymLevelKit AGymMap::GetLevelKit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMap", "GetLevelKit");

	Params::GymMap_GetLevelKit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymMap.GetMusic
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGymMap::GetMusic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMap", "GetMusic");

	Params::GymMap_GetMusic Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymMap.GetRule
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGymMap::GetRule()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMap", "GetRule");

	Params::GymMap_GetRule Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymMap.GetRuleModifierControl
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGymMapRuleModifierControl*       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymMapRuleModifierControl* AGymMap::GetRuleModifierControl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMap", "GetRuleModifierControl");

	Params::GymMap_GetRuleModifierControl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymMap.GetTime
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGymMap::GetTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMap", "GetTime");

	Params::GymMap_GetTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymMap.GetWeather
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGymMap::GetWeather()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMap", "GetWeather");

	Params::GymMap_GetWeather Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymMap.GetWeatherName
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGymMap::GetWeatherName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMap", "GetWeatherName");

	Params::GymMap_GetWeatherName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymMap.HideAsset_Multicast
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   AssetRecordId                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsHidden                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymMap::HideAsset_Multicast(int32 AssetRecordId, bool IsHidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMap", "HideAsset_Multicast");

	Params::GymMap_HideAsset_Multicast Parms{};

	Parms.AssetRecordId = AssetRecordId;
	Parms.IsHidden = IsHidden;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMap.LoadMap_Editor
// (Final, Native, Public)

void AGymMap::LoadMap_Editor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMap", "LoadMap_Editor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMap.MarkAllChangesSaved_Multicast
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void AGymMap::MarkAllChangesSaved_Multicast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMap", "MarkAllChangesSaved_Multicast");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction GYMGAME.GymMap.OnMapLoaded__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void AGymMap::OnMapLoaded__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMap", "OnMapLoaded__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymMap.OnRulesChanged_Multicast
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void AGymMap::OnRulesChanged_Multicast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMap", "OnRulesChanged_Multicast");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMap.OnSetMusic
// (Final, Native, Protected)

void AGymMap::OnSetMusic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMap", "OnSetMusic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMap.OnSetTime
// (Native, Event, Protected, BlueprintEvent)

void AGymMap::OnSetTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMap", "OnSetTime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMap.OnSetTimeImmediate
// (Native, Event, Protected, BlueprintEvent)

void AGymMap::OnSetTimeImmediate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMap", "OnSetTimeImmediate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMap.OnSetWeather
// (Native, Event, Protected, BlueprintEvent)

void AGymMap::OnSetWeather()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMap", "OnSetWeather");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMap.SetMusic
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             NewMusic                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymMap::SetMusic(class FName NewMusic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMap", "SetMusic");

	Params::GymMap_SetMusic Parms{};

	Parms.NewMusic = NewMusic;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMap.SetPreviewPhysics
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// float                                   PreviewDuration                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InfinitePhysPreview                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymMap::SetPreviewPhysics(float PreviewDuration, bool InfinitePhysPreview)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMap", "SetPreviewPhysics");

	Params::GymMap_SetPreviewPhysics Parms{};

	Parms.PreviewDuration = PreviewDuration;
	Parms.InfinitePhysPreview = InfinitePhysPreview;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMap.SetRule
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             NewRule                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSwapRules                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymMap::SetRule(class FName NewRule, bool bSwapRules)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMap", "SetRule");

	Params::GymMap_SetRule Parms{};

	Parms.NewRule = NewRule;
	Parms.bSwapRules = bSwapRules;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMap.SetTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bImmediate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymMap::SetTime(float NewTime, bool bImmediate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMap", "SetTime");

	Params::GymMap_SetTime Parms{};

	Parms.NewTime = NewTime;
	Parms.bImmediate = bImmediate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMap.SetVolumetric
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bVolumetric                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymMap::SetVolumetric(bool bVolumetric)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMap", "SetVolumetric");

	Params::GymMap_SetVolumetric Parms{};

	Parms.bVolumetric = bVolumetric;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymMap.SetWeather
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             NewWeather                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymMap::SetWeather(class FName NewWeather)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMap", "SetWeather");

	Params::GymMap_SetWeather Parms{};

	Parms.NewWeather = NewWeather;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMap.GetEditingAllowed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGymPlayerController*             ForPlayer                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGymMap::GetEditingAllowed(class AGymPlayerController* ForPlayer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMap", "GetEditingAllowed");

	Params::GymMap_GetEditingAllowed Parms{};

	Parms.ForPlayer = ForPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymMap.GetLoadStatus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGymMapLoadStatus                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGymMapLoadStatus AGymMap::GetLoadStatus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMap", "GetLoadStatus");

	Params::GymMap_GetLoadStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymMap.HasBeenEdited
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGymMap::HasBeenEdited() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMap", "HasBeenEdited");

	Params::GymMap_HasBeenEdited Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymMap.LastEditTimestamp
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double AGymMap::LastEditTimestamp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMap", "LastEditTimestamp");

	Params::GymMap_LastEditTimestamp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymWirePlaceable.SetRotation
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// struct FRotator                         Rotation                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AGymWirePlaceable::SetRotation(const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymWirePlaceable", "SetRotation");

	Params::GymWirePlaceable_SetRotation Parms{};

	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymMapBuilderControl.RemoveStaticAsset
// (Net, NetReliable, Native, Event, NetMulticast, Public, Const)
// Parameters:
// class AGymStaticLevelAsset*             Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymMapBuilderControl::RemoveStaticAsset(class AGymStaticLevelAsset* Actor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMapBuilderControl", "RemoveStaticAsset");

	Params::GymMapBuilderControl_RemoveStaticAsset Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMapLobbyRules.OnMapDetailsReceived
// (Final, Native, Public)
// Parameters:
// bool                                    bSuccess                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGymMapDetailsResult             Result                                                 (Parm, NativeAccessSpecifierPublic)

void UGymMapLobbyRules::OnMapDetailsReceived(bool bSuccess, const struct FGymMapDetailsResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMapLobbyRules", "OnMapDetailsReceived");

	Params::GymMapLobbyRules_OnMapDetailsReceived Parms{};

	Parms.bSuccess = bSuccess;
	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMapRuleModifierControl.GetFloatModifier
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ModifierID                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymMapRuleModifierControl::GetFloatModifier(const class FName& ModifierID, float* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMapRuleModifierControl", "GetFloatModifier");

	Params::GymMapRuleModifierControl_GetFloatModifier Parms{};

	Parms.ModifierID = ModifierID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Value != nullptr)
		*Value = Parms.Value;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymMapRuleModifierControl.GetIntModifier
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ModifierID                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymMapRuleModifierControl::GetIntModifier(const class FName& ModifierID, int32* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMapRuleModifierControl", "GetIntModifier");

	Params::GymMapRuleModifierControl_GetIntModifier Parms{};

	Parms.ModifierID = ModifierID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Value != nullptr)
		*Value = Parms.Value;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymMapRuleModifierControl.GetStringModifier
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ModifierID                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Value                                                  (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymMapRuleModifierControl::GetStringModifier(const class FName& ModifierID, class FString* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMapRuleModifierControl", "GetStringModifier");

	Params::GymMapRuleModifierControl_GetStringModifier Parms{};

	Parms.ModifierID = ModifierID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Value != nullptr)
		*Value = std::move(Parms.Value);

	return Parms.ReturnValue;
}


// Function GYMGAME.GymMapUtils.DownloadAndOpenMap
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGymMapVersionLocator            MapId                                                  (Parm, NativeAccessSpecifierPublic)
// bool                                    Travel                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bKeepPlaylist                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SessionMode                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExtraData                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymMapUtils::DownloadAndOpenMap(const struct FGymMapVersionLocator& MapId, const bool Travel, const bool bKeepPlaylist, const class FString& SessionMode, const class FString& ExtraData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMapUtils", "DownloadAndOpenMap");

	Params::GymMapUtils_DownloadAndOpenMap Parms{};

	Parms.MapId = std::move(MapId);
	Parms.Travel = Travel;
	Parms.bKeepPlaylist = bKeepPlaylist;
	Parms.SessionMode = std::move(SessionMode);
	Parms.ExtraData = std::move(ExtraData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMapUtils.DownloadAndOpenPlaylist
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlaylistId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymMapUtils::DownloadAndOpenPlaylist(const class FString& PlaylistId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMapUtils", "DownloadAndOpenPlaylist");

	Params::GymMapUtils_DownloadAndOpenPlaylist Parms{};

	Parms.PlaylistId = std::move(PlaylistId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMapUtils.InitializeLobbyMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGymMapVersionLocator            Locator                                                (Parm, NativeAccessSpecifierPublic)
// class FString                           KitId                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymMapUtils::InitializeLobbyMode(const struct FGymMapVersionLocator& Locator, const class FString& KitId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMapUtils", "InitializeLobbyMode");

	Params::GymMapUtils_InitializeLobbyMode Parms{};

	Parms.Locator = std::move(Locator);
	Parms.KitId = std::move(KitId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMapUtils.LoadPackagedMap
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           MapName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bKeepPlaylist                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymMapUtils::LoadPackagedMap(const class FString& MapName, const bool bKeepPlaylist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMapUtils", "LoadPackagedMap");

	Params::GymMapUtils_LoadPackagedMap Parms{};

	Parms.MapName = std::move(MapName);
	Parms.bKeepPlaylist = bKeepPlaylist;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction GYMGAME.GymMapUtils.MapRemixComplete__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           MapId                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymMapUtils::MapRemixComplete__DelegateSignature(bool Success, const class FString& MapId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMapUtils", "MapRemixComplete__DelegateSignature");

	Params::GymMapUtils_MapRemixComplete__DelegateSignature Parms{};

	Parms.Success = Success;
	Parms.MapId = std::move(MapId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymMapUtils.PlaylistLoaded
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGymPlaylistDetailsResult        Details                                                (Parm, NativeAccessSpecifierPublic)

void UGymMapUtils::PlaylistLoaded(bool Success, const struct FGymPlaylistDetailsResult& Details)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMapUtils", "PlaylistLoaded");

	Params::GymMapUtils_PlaylistLoaded Parms{};

	Parms.Success = Success;
	Parms.Details = std::move(Details);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMapUtils.RemixMap
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Map                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymMapUtils::RemixMap(const class FString& Map)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMapUtils", "RemixMap");

	Params::GymMapUtils_RemixMap Parms{};

	Parms.Map = std::move(Map);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMapUtils.ServerTravel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Map                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymMapUtils::ServerTravel(const class FString& Map)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMapUtils", "ServerTravel");

	Params::GymMapUtils_ServerTravel Parms{};

	Parms.Map = std::move(Map);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMapUtils.IsUploadInProgress
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymMapUtils::IsUploadInProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMapUtils", "IsUploadInProgress");

	Params::GymMapUtils_IsUploadInProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.LevelMenuWidget.AddListItem
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FCustomLevelFileInfo             Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FCustomLevelFileInfo       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

const struct FCustomLevelFileInfo ULevelMenuWidget::AddListItem(const struct FCustomLevelFileInfo& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelMenuWidget", "AddListItem");

	Params::LevelMenuWidget_AddListItem Parms{};

	Parms.Item = std::move(Item);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GYMGAME.LevelMenuWidget.FindLocalLevels
// (Final, Native, Public, BlueprintCallable)

void ULevelMenuWidget::FindLocalLevels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelMenuWidget", "FindLocalLevels");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMetaBoulder.ClientActivatePlayerRagdoll
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// class AGymCharacter*                    Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymMetaBoulder::ClientActivatePlayerRagdoll(class AGymCharacter* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMetaBoulder", "ClientActivatePlayerRagdoll");

	Params::GymMetaBoulder_ClientActivatePlayerRagdoll Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMetaBoulder.EndPreviewPhysics
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void AGymMetaBoulder::EndPreviewPhysics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMetaBoulder", "EndPreviewPhysics");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMetaBoulder.Freeze
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void AGymMetaBoulder::Freeze()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMetaBoulder", "Freeze");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMetaBoulder.Multi_ImpactSound
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class AGymCharacter*                    Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymMetaBoulder::Multi_ImpactSound(class AGymCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMetaBoulder", "Multi_ImpactSound");

	Params::GymMetaBoulder_Multi_ImpactSound Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMetaBoulder.OnMeshComponentHit
// (Final, Native, Protected, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGymMetaBoulder::OnMeshComponentHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMetaBoulder", "OnMeshComponentHit");

	Params::GymMetaBoulder_OnMeshComponentHit Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMetaBoulder.OnMeshComponentOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComp                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGymMetaBoulder::OnMeshComponentOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMetaBoulder", "OnMeshComponentOverlap");

	Params::GymMetaBoulder_OnMeshComponentOverlap Parms{};

	Parms.OverlappedComp = OverlappedComp;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMetaBoulder.OnRep_ServerVelocity
// (Final, Native, Protected)

void AGymMetaBoulder::OnRep_ServerVelocity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMetaBoulder", "OnRep_ServerVelocity");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMetaBoulder.Reset
// (Net, NetReliable, Native, Event, Public, NetServer)

void AGymMetaBoulder::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMetaBoulder", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMetaBoulder.StartPreviewPhysics
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void AGymMetaBoulder::StartPreviewPhysics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMetaBoulder", "StartPreviewPhysics");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMetaBoulder.UnFreeze
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// bool                                    GhostVisible                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymMetaBoulder::UnFreeze(bool GhostVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMetaBoulder", "UnFreeze");

	Params::GymMetaBoulder_UnFreeze Parms{};

	Parms.GhostVisible = GhostVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMetaBoulderSpawner.Freeze
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)

void AGymMetaBoulderSpawner::Freeze()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMetaBoulderSpawner", "Freeze");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMetaBoulderSpawner.Multi_OnBoulderSpawned
// (Net, NetReliable, Native, Event, NetMulticast, Protected)

void AGymMetaBoulderSpawner::Multi_OnBoulderSpawned()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMetaBoulderSpawner", "Multi_OnBoulderSpawned");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMetaBoulderSpawner.OnShoot
// (Event, Protected, BlueprintEvent)

void AGymMetaBoulderSpawner::OnShoot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMetaBoulderSpawner", "OnShoot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymMetaBoulderSpawner.SpawnBoulder
// (Net, NetReliable, Native, Event, Public, NetServer)

void AGymMetaBoulderSpawner::SpawnBoulder()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMetaBoulderSpawner", "SpawnBoulder");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMetaBoulderSpawner.UnFreeze
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)

void AGymMetaBoulderSpawner::UnFreeze()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMetaBoulderSpawner", "UnFreeze");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMetagameUtils.ClaimReward
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGymUnclaimedReward              Reward                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGymMetagameUtils::ClaimReward(const struct FGymUnclaimedReward& Reward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMetagameUtils", "ClaimReward");

	Params::GymMetagameUtils_ClaimReward Parms{};

	Parms.Reward = std::move(Reward);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMetagameUtils.EquipItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ItemId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymMetagameUtils::EquipItem(const class FString& ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMetagameUtils", "EquipItem");

	Params::GymMetagameUtils_EquipItem Parms{};

	Parms.ItemId = std::move(ItemId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMetagameUtils.GetAssetDisplayName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UGymMetagameUtils::GetAssetDisplayName(const class FString& AssetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMetagameUtils", "GetAssetDisplayName");

	Params::GymMetagameUtils_GetAssetDisplayName Parms{};

	Parms.AssetId = std::move(AssetId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymMetagameUtils.GetAssetPreview
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UTexture*                   ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UTexture* UGymMetagameUtils::GetAssetPreview(const class FString& AssetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMetagameUtils", "GetAssetPreview");

	Params::GymMetagameUtils_GetAssetPreview Parms{};

	Parms.AssetId = std::move(AssetId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymMetagameUtils.GetAssetSeasonTags
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FText>               ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

const TArray<class FText> UGymMetagameUtils::GetAssetSeasonTags(const class FString& AssetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMetagameUtils", "GetAssetSeasonTags");

	Params::GymMetagameUtils_GetAssetSeasonTags Parms{};

	Parms.AssetId = std::move(AssetId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymMetagameUtils.GetAssetThumbnail
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UTexture*                   ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UTexture* UGymMetagameUtils::GetAssetThumbnail(const class FString& AssetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMetagameUtils", "GetAssetThumbnail");

	Params::GymMetagameUtils_GetAssetThumbnail Parms{};

	Parms.AssetId = std::move(AssetId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymMetagameUtils.IsRewardClaimed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           RewardId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymMetagameUtils::IsRewardClaimed(const class FString& RewardId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMetagameUtils", "IsRewardClaimed");

	Params::GymMetagameUtils_IsRewardClaimed Parms{};

	Parms.RewardId = std::move(RewardId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction GYMGAME.GymMetagameUtils.OnRewardClaimed__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           RewardId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymMetagameUtils::OnRewardClaimed__DelegateSignature(bool Success, const class FString& RewardId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMetagameUtils", "OnRewardClaimed__DelegateSignature");

	Params::GymMetagameUtils_OnRewardClaimed__DelegateSignature Parms{};

	Parms.Success = Success;
	Parms.RewardId = std::move(RewardId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymMetagameUtils.OnRewardClaimed_Internal
// (Final, Native, Private)
// Parameters:
// bool                                    bSuccess                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           RewardId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymMetagameUtils::OnRewardClaimed_Internal(bool bSuccess, const class FString& RewardId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMetagameUtils", "OnRewardClaimed_Internal");

	Params::GymMetagameUtils_OnRewardClaimed_Internal Parms{};

	Parms.bSuccess = bSuccess;
	Parms.RewardId = std::move(RewardId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMovementControl.Client_BlockLooking
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// class UObject*                          Reason                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymMovementControl::Client_BlockLooking(class UObject* Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMovementControl", "Client_BlockLooking");

	Params::GymMovementControl_Client_BlockLooking Parms{};

	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymMovementControl.Client_UnblockLooking
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// class UObject*                          Reason                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymMovementControl::Client_UnblockLooking(class UObject* Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymMovementControl", "Client_UnblockLooking");

	Params::GymMovementControl_Client_UnblockLooking Parms{};

	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymNetInterface.ConnectServer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ConnectionString                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymNetInterface::ConnectServer(const class FString& ConnectionString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymNetInterface", "ConnectServer");

	Params::GymNetInterface_ConnectServer Parms{};

	Parms.ConnectionString = std::move(ConnectionString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymNetInterface.CreateAndJoinServer_Playlist
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ServerName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PlaylistId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymNetInterface::CreateAndJoinServer_Playlist(const class FString& ServerName, const class FString& PlaylistId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymNetInterface", "CreateAndJoinServer_Playlist");

	Params::GymNetInterface_CreateAndJoinServer_Playlist Parms{};

	Parms.ServerName = std::move(ServerName);
	Parms.PlaylistId = std::move(PlaylistId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymNetInterface.DisconnectFromServer
// (Final, Native, Public, BlueprintCallable)

void UGymNetInterface::DisconnectFromServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymNetInterface", "DisconnectFromServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymNetInterface.OnServerCreated
// (Final, Native, Public)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ConnectString                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymNetInterface::OnServerCreated(bool Success, const class FString& ConnectString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymNetInterface", "OnServerCreated");

	Params::GymNetInterface_OnServerCreated Parms{};

	Parms.Success = Success;
	Parms.ConnectString = std::move(ConnectString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymNPC.Hide3DMessage
// (Native, Event, Public, BlueprintEvent)

void AGymNPC::Hide3DMessage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymNPC", "Hide3DMessage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymNPC.Multi_SetVisible
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymNPC::Multi_SetVisible(bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymNPC", "Multi_SetVisible");

	Params::GymNPC_Multi_SetVisible Parms{};

	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymNPC.Show3DMessage
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             Message                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ForTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymNPC::Show3DMessage(const class FText& Message, float ForTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymNPC", "Show3DMessage");

	Params::GymNPC_Show3DMessage Parms{};

	Parms.Message = std::move(Message);
	Parms.ForTime = ForTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymNPC.GetViewPitch
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGymNPC::GetViewPitch() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymNPC", "GetViewPitch");

	Params::GymNPC_GetViewPitch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymNPCAnimInstance.EndDialogue
// (Event, Public, BlueprintEvent)

void UGymNPCAnimInstance::EndDialogue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymNPCAnimInstance", "EndDialogue");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymNPCAnimInstance.StartDialogue
// (Event, Public, BlueprintEvent)

void UGymNPCAnimInstance::StartDialogue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymNPCAnimInstance", "StartDialogue");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymWallThemeProvider.ClampIndex
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// uint8                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGymWallDirection                       Direction                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UGymWallThemeProvider::ClampIndex(uint8 Index_0, const EGymWallDirection Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymWallThemeProvider", "ClampIndex");

	Params::GymWallThemeProvider_ClampIndex Parms{};

	Parms.Index_0 = Index_0;
	Parms.Direction = Direction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymWallThemeProvider.GetIndex
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGymWallDirection                       Direction                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymWallThemeProvider::GetIndex(const class FName Name_0, const EGymWallDirection Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymWallThemeProvider", "GetIndex");

	Params::GymWallThemeProvider_GetIndex Parms{};

	Parms.Name_0 = Name_0;
	Parms.Direction = Direction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymWallThemeProvider.GetPiece
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// struct FIntVector                       Location                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGymWallDirection                       Direction                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGymShape                        Shape                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGymWallThemeVariant             ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FGymWallThemeVariant UGymWallThemeProvider::GetPiece(const struct FIntVector& Location, const EGymWallDirection Direction, const struct FGymShape& Shape)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymWallThemeProvider", "GetPiece");

	Params::GymWallThemeProvider_GetPiece Parms{};

	Parms.Location = std::move(Location);
	Parms.Direction = Direction;
	Parms.Shape = std::move(Shape);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymWallThemeProvider.GetPieceByIndex
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// uint8                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGymWallDirection                       Direction                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGymWallThemeVariant             ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FGymWallThemeVariant UGymWallThemeProvider::GetPieceByIndex(uint8 Index_0, const EGymWallDirection Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymWallThemeProvider", "GetPieceByIndex");

	Params::GymWallThemeProvider_GetPieceByIndex Parms{};

	Parms.Index_0 = Index_0;
	Parms.Direction = Direction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymObjectiveControl.AddQuest
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGymQuest>            QuestClass                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSetActive                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGymNPC*                          QuestGiver                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymObjectiveControl::AddQuest(TSubclassOf<class UGymQuest> QuestClass, bool bSetActive, class AGymNPC* QuestGiver)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjectiveControl", "AddQuest");

	Params::GymObjectiveControl_AddQuest Parms{};

	Parms.QuestClass = QuestClass;
	Parms.bSetActive = bSetActive;
	Parms.QuestGiver = QuestGiver;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymObjectiveControl.AddTask
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           TaskName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymObjectiveControl::AddTask(const class FString& TaskName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjectiveControl", "AddTask");

	Params::GymObjectiveControl_AddTask Parms{};

	Parms.TaskName = std::move(TaskName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymObjectiveControl.BeginQuestMusic
// (Final, Native, Public, BlueprintCallable)

void UGymObjectiveControl::BeginQuestMusic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjectiveControl", "BeginQuestMusic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymObjectiveControl.Client_AddCompletedQuest
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// class FName                             Quest                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymObjectiveControl::Client_AddCompletedQuest(class FName Quest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjectiveControl", "Client_AddCompletedQuest");

	Params::GymObjectiveControl_Client_AddCompletedQuest Parms{};

	Parms.Quest = Quest;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymObjectiveControl.Client_SetMovementFrozen
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// bool                                    bFreeze                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymObjectiveControl::Client_SetMovementFrozen(bool bFreeze)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjectiveControl", "Client_SetMovementFrozen");

	Params::GymObjectiveControl_Client_SetMovementFrozen Parms{};

	Parms.bFreeze = bFreeze;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymObjectiveControl.DebugCompleteCareer
// (Final, Exec, Native, Public)

void UGymObjectiveControl::DebugCompleteCareer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjectiveControl", "DebugCompleteCareer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymObjectiveControl.NotifyTutorialLoad
// (Final, Net, NetReliable, Native, Event, Private, NetServer)

void UGymObjectiveControl::NotifyTutorialLoad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjectiveControl", "NotifyTutorialLoad");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymObjectiveControl.PlayObjectiveSound
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class FString                           TriggerName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymObjectiveControl::PlayObjectiveSound(const class FString& TriggerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjectiveControl", "PlayObjectiveSound");

	Params::GymObjectiveControl_PlayObjectiveSound Parms{};

	Parms.TriggerName = std::move(TriggerName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymObjectiveControl.RemoveQuest
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// class FName                             QuestID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymObjectiveControl::RemoveQuest(class FName QuestID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjectiveControl", "RemoveQuest");

	Params::GymObjectiveControl_RemoveQuest Parms{};

	Parms.QuestID = QuestID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymObjectiveControl.ResetCareerLevel
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           LevelName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymObjectiveControl::ResetCareerLevel(const class FString& LevelName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjectiveControl", "ResetCareerLevel");

	Params::GymObjectiveControl_ResetCareerLevel Parms{};

	Parms.LevelName = std::move(LevelName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymObjectiveControl.ResetPrestiges
// (Final, Exec, Native, Public)

void UGymObjectiveControl::ResetPrestiges()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjectiveControl", "ResetPrestiges");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymObjectiveControl.ResetTask
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           TaskName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymObjectiveControl::ResetTask(const class FString& TaskName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjectiveControl", "ResetTask");

	Params::GymObjectiveControl_ResetTask Parms{};

	Parms.TaskName = std::move(TaskName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymObjectiveControl.RestartQuest
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// class FName                             QuestID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymObjectiveControl::RestartQuest(class FName QuestID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjectiveControl", "RestartQuest");

	Params::GymObjectiveControl_RestartQuest Parms{};

	Parms.QuestID = QuestID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymObjectiveControl.SaveCareerProgress
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// class FString                           CareerName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymObjectiveControl::SaveCareerProgress(const class FString& CareerName, class FName TaskID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjectiveControl", "SaveCareerProgress");

	Params::GymObjectiveControl_SaveCareerProgress Parms{};

	Parms.CareerName = std::move(CareerName);
	Parms.TaskID = TaskID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymObjectiveControl.SaveCareerTournament
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// class FString                           TournamentName                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Placement                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymObjectiveControl::SaveCareerTournament(const class FString& TournamentName, int32 Placement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjectiveControl", "SaveCareerTournament");

	Params::GymObjectiveControl_SaveCareerTournament Parms{};

	Parms.TournamentName = std::move(TournamentName);
	Parms.Placement = Placement;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymObjectiveControl.Server_AddCompletedQuest
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// class FName                             Quest                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymObjectiveControl::Server_AddCompletedQuest(class FName Quest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjectiveControl", "Server_AddCompletedQuest");

	Params::GymObjectiveControl_Server_AddCompletedQuest Parms{};

	Parms.Quest = Quest;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymObjectiveControl.SetQuestActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             QuestID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymObjectiveControl::SetQuestActive(class FName QuestID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjectiveControl", "SetQuestActive");

	Params::GymObjectiveControl_SetQuestActive Parms{};

	Parms.QuestID = QuestID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymObjectiveControl.GetActiveQuest
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymQuest*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymQuest* UGymObjectiveControl::GetActiveQuest() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjectiveControl", "GetActiveQuest");

	Params::GymObjectiveControl_GetActiveQuest Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymObjectiveControl.GetAllQuests
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class UGymQuest*>          ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class UGymQuest*> UGymObjectiveControl::GetAllQuests() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjectiveControl", "GetAllQuests");

	Params::GymObjectiveControl_GetAllQuests Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymObjectiveControl.GetCompletedQuests
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class FName>               ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class FName> UGymObjectiveControl::GetCompletedQuests() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjectiveControl", "GetCompletedQuests");

	Params::GymObjectiveControl_GetCompletedQuests Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymObjectiveControl.GetQuest
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             QuestID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGymQuest*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymQuest* UGymObjectiveControl::GetQuest(class FName QuestID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjectiveControl", "GetQuest");

	Params::GymObjectiveControl_GetQuest Parms{};

	Parms.QuestID = QuestID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymObjectiveControl.GetQuestState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             QuestID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EQuestState                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EQuestState UGymObjectiveControl::GetQuestState(class FName QuestID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjectiveControl", "GetQuestState");

	Params::GymObjectiveControl_GetQuestState Parms{};

	Parms.QuestID = QuestID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymObjectiveControl.HasQuest
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             QuestID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymObjectiveControl::HasQuest(class FName QuestID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjectiveControl", "HasQuest");

	Params::GymObjectiveControl_HasQuest Parms{};

	Parms.QuestID = QuestID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymObjectiveControl.IsQuestActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             QuestID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymObjectiveControl::IsQuestActive(class FName QuestID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjectiveControl", "IsQuestActive");

	Params::GymObjectiveControl_IsQuestActive Parms{};

	Parms.QuestID = QuestID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymObjectiveControl.IsQuestCompleted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             QuestID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymObjectiveControl::IsQuestCompleted(class FName QuestID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjectiveControl", "IsQuestCompleted");

	Params::GymObjectiveControl_IsQuestCompleted Parms{};

	Parms.QuestID = QuestID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymObjectiveControl.IsQuestFailed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             QuestID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymObjectiveControl::IsQuestFailed(class FName QuestID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjectiveControl", "IsQuestFailed");

	Params::GymObjectiveControl_IsQuestFailed Parms{};

	Parms.QuestID = QuestID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymObjectiveControl.IsQuestInProgress
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             QuestID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymObjectiveControl::IsQuestInProgress(class FName QuestID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObjectiveControl", "IsQuestInProgress");

	Params::GymObjectiveControl_IsQuestInProgress Parms{};

	Parms.QuestID = QuestID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymObstacleCourseRules.GoalReached
// (Final, Native, Private)
// Parameters:
// class AActor*                           Goal                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGymCharacter*                    PlayerCharacter                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymObstacleCourseRules::GoalReached(class AActor* Goal, class AGymCharacter* PlayerCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymObstacleCourseRules", "GoalReached");

	Params::GymObstacleCourseRules_GoalReached Parms{};

	Parms.Goal = Goal;
	Parms.PlayerCharacter = PlayerCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymOCReplicatedData.SetMaxFlags
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   Flags_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymOCReplicatedData::SetMaxFlags(int32 Flags_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymOCReplicatedData", "SetMaxFlags");

	Params::GymOCReplicatedData_SetMaxFlags Parms{};

	Parms.Flags_0 = Flags_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymOCReplicatedData.SetUnlimitedFlags
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// bool                                    Unlimited                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymOCReplicatedData::SetUnlimitedFlags(bool Unlimited)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymOCReplicatedData", "SetUnlimitedFlags");

	Params::GymOCReplicatedData_SetUnlimitedFlags Parms{};

	Parms.Unlimited = Unlimited;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymOCReplicatedData.GetMaxFlags
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymOCReplicatedData::GetMaxFlags() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymOCReplicatedData", "GetMaxFlags");

	Params::GymOCReplicatedData_GetMaxFlags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymOCReplicatedData.IsUnlimitedFlags
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymOCReplicatedData::IsUnlimitedFlags() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymOCReplicatedData", "IsUnlimitedFlags");

	Params::GymOCReplicatedData_IsUnlimitedFlags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymParticipantRepData.LastCheckpointVisitedTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGymParticipantRepData::LastCheckpointVisitedTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymParticipantRepData", "LastCheckpointVisitedTime");

	Params::GymParticipantRepData_LastCheckpointVisitedTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymParticipantRepData.SetPlayerRuleState
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// EPlayerRuleState                        RuleState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymParticipantRepData::SetPlayerRuleState(EPlayerRuleState RuleState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymParticipantRepData", "SetPlayerRuleState");

	Params::GymParticipantRepData_SetPlayerRuleState Parms{};

	Parms.RuleState = RuleState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymParticipantRepData.CheckpointsVisited
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymParticipantRepData::CheckpointsVisited() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymParticipantRepData", "CheckpointsVisited");

	Params::GymParticipantRepData_CheckpointsVisited Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymParticipantRepData.GetPlayerRuleState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EPlayerRuleState                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EPlayerRuleState UGymParticipantRepData::GetPlayerRuleState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymParticipantRepData", "GetPlayerRuleState");

	Params::GymParticipantRepData_GetPlayerRuleState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymParticipantRepDataBomb.SetIsTagged
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// bool                                    IsTagged                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymParticipantRepDataBomb::SetIsTagged(bool IsTagged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymParticipantRepDataBomb", "SetIsTagged");

	Params::GymParticipantRepDataBomb_SetIsTagged Parms{};

	Parms.IsTagged = IsTagged;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymParticipantRepDataBomb.SetRoundEliminated
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   RoundEliminated                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymParticipantRepDataBomb::SetRoundEliminated(int32 RoundEliminated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymParticipantRepDataBomb", "SetRoundEliminated");

	Params::GymParticipantRepDataBomb_SetRoundEliminated Parms{};

	Parms.RoundEliminated = RoundEliminated;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymParticipantRepDataBomb.GetIsTagged
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymParticipantRepDataBomb::GetIsTagged() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymParticipantRepDataBomb", "GetIsTagged");

	Params::GymParticipantRepDataBomb_GetIsTagged Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymParticipantRepDataBomb.GetRoundEliminated
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymParticipantRepDataBomb::GetRoundEliminated() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymParticipantRepDataBomb", "GetRoundEliminated");

	Params::GymParticipantRepDataBomb_GetRoundEliminated Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymParticipantRepDataCircuit.SetLapsCompleted
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   Laps                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymParticipantRepDataCircuit::SetLapsCompleted(int32 Laps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymParticipantRepDataCircuit", "SetLapsCompleted");

	Params::GymParticipantRepDataCircuit_SetLapsCompleted Parms{};

	Parms.Laps = Laps;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymParticipantRepDataCircuit.GetLapsCompleted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymParticipantRepDataCircuit::GetLapsCompleted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymParticipantRepDataCircuit", "GetLapsCompleted");

	Params::GymParticipantRepDataCircuit_GetLapsCompleted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymParticipantRepDataLoot.GetLastTimeLootCollected
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGymParticipantRepDataLoot::GetLastTimeLootCollected() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymParticipantRepDataLoot", "GetLastTimeLootCollected");

	Params::GymParticipantRepDataLoot_GetLastTimeLootCollected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymParticipantRepDataLoot.GetLootCollected
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymParticipantRepDataLoot::GetLootCollected() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymParticipantRepDataLoot", "GetLootCollected");

	Params::GymParticipantRepDataLoot_GetLootCollected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymParticipantRepDataLoot.GetLootLeft
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymParticipantRepDataLoot::GetLootLeft() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymParticipantRepDataLoot", "GetLootLeft");

	Params::GymParticipantRepDataLoot_GetLootLeft Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymParticipantRepDataLoot.HasCollectedAll
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymParticipantRepDataLoot::HasCollectedAll() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymParticipantRepDataLoot", "HasCollectedAll");

	Params::GymParticipantRepDataLoot_HasCollectedAll Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymParticipantRepDataLoot.HasCollectingStarted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymParticipantRepDataLoot::HasCollectingStarted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymParticipantRepDataLoot", "HasCollectingStarted");

	Params::GymParticipantRepDataLoot_HasCollectingStarted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymParticipantRepDataObby.SetFlagsUsed
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   NewFlagsUsed                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymParticipantRepDataObby::SetFlagsUsed(int32 NewFlagsUsed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymParticipantRepDataObby", "SetFlagsUsed");

	Params::GymParticipantRepDataObby_SetFlagsUsed Parms{};

	Parms.NewFlagsUsed = NewFlagsUsed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymParticipantRepDataObby.GetFlagsUsed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymParticipantRepDataObby::GetFlagsUsed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymParticipantRepDataObby", "GetFlagsUsed");

	Params::GymParticipantRepDataObby_GetFlagsUsed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymPhotoModeControl.ClientEnterPhotoMode
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)

void UGymPhotoModeControl::ClientEnterPhotoMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPhotoModeControl", "ClientEnterPhotoMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPhotoModeControl.ClientExitPhotoMode
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private, HasDefaults)
// Parameters:
// struct FVector                          PlayerLocation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         PlayerRotation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         ControlRotation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGymPhotoModeControl::ClientExitPhotoMode(const struct FVector& PlayerLocation, const struct FRotator& PlayerRotation, const struct FRotator& ControlRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPhotoModeControl", "ClientExitPhotoMode");

	Params::GymPhotoModeControl_ClientExitPhotoMode Parms{};

	Parms.PlayerLocation = std::move(PlayerLocation);
	Parms.PlayerRotation = std::move(PlayerRotation);
	Parms.ControlRotation = std::move(ControlRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPhotoModeControl.EnterPhotoMode
// (Final, Net, NetReliable, Native, Event, Private, NetServer, HasDefaults)
// Parameters:
// struct FRotator                         PlayerCameraRotation                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGymPhotoModeControl::EnterPhotoMode(const struct FRotator& PlayerCameraRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPhotoModeControl", "EnterPhotoMode");

	Params::GymPhotoModeControl_EnterPhotoMode Parms{};

	Parms.PlayerCameraRotation = std::move(PlayerCameraRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPhotoModeControl.ExitPhotoMode
// (Final, Net, NetReliable, Native, Event, Private, NetServer)

void UGymPhotoModeControl::ExitPhotoMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPhotoModeControl", "ExitPhotoMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.RegionOptionFactory.RegionStringToText
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// class FString                           String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText URegionOptionFactory::RegionStringToText(const class FString& String) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RegionOptionFactory", "RegionStringToText");

	Params::RegionOptionFactory_RegionStringToText Parms{};

	Parms.String = std::move(String);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymPhysicsControl.OnPlayerHit
// (Final, Native, Private, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComp                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGymPhysicsControl::OnPlayerHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPhysicsControl", "OnPlayerHit");

	Params::GymPhysicsControl_OnPlayerHit Parms{};

	Parms.HitComp = HitComp;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPhysicsControl.OnPlayerOverlapBegin
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComponent                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGymPhysicsControl::OnPlayerOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPhysicsControl", "OnPlayerOverlapBegin");

	Params::GymPhysicsControl_OnPlayerOverlapBegin Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComponent = OtherComponent;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPhysicsControl.OnPlayerOverlapEnd
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComponent                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymPhysicsControl::OnPlayerOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPhysicsControl", "OnPlayerOverlapEnd");

	Params::GymPhysicsControl_OnPlayerOverlapEnd Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComponent = OtherComponent;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerCheckpointControl.Client_HideAllButFirst
// (Final, Net, NetReliable, Native, Event, Private, NetClient)

void UGymPlayerCheckpointControl::Client_HideAllButFirst()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerCheckpointControl", "Client_HideAllButFirst");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerCheckpointControl.Client_PlayerReachedCheckpoint
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// class AGymCheckpointPiece*              Checkpoint                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymPlayerCheckpointControl::Client_PlayerReachedCheckpoint(class AGymCheckpointPiece* Checkpoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerCheckpointControl", "Client_PlayerReachedCheckpoint");

	Params::GymPlayerCheckpointControl_Client_PlayerReachedCheckpoint Parms{};

	Parms.Checkpoint = Checkpoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerCheckpointControl.GetCheckpointNum
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymPlayerCheckpointControl::GetCheckpointNum()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerCheckpointControl", "GetCheckpointNum");

	Params::GymPlayerCheckpointControl_GetCheckpointNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymPlayerCheckpointControl.GetCheckpointsVisited
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymPlayerCheckpointControl::GetCheckpointsVisited()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerCheckpointControl", "GetCheckpointsVisited");

	Params::GymPlayerCheckpointControl_GetCheckpointsVisited Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymPlayerCheckpointControl.LastCheckpointVisitedTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGymPlayerCheckpointControl::LastCheckpointVisitedTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerCheckpointControl", "LastCheckpointVisitedTime");

	Params::GymPlayerCheckpointControl_LastCheckpointVisitedTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymPlayerCheckpointControl.Multi_ConfirmCheckpointReached
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class AGymCheckpointPiece*              Checkpoint                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymPlayerCheckpointControl::Multi_ConfirmCheckpointReached(class AGymCheckpointPiece* Checkpoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerCheckpointControl", "Multi_ConfirmCheckpointReached");

	Params::GymPlayerCheckpointControl_Multi_ConfirmCheckpointReached Parms{};

	Parms.Checkpoint = Checkpoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerCheckpointControl.Multi_ConfirmGoalReached
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class AActor*                           Goal                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymPlayerCheckpointControl::Multi_ConfirmGoalReached(class AActor* Goal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerCheckpointControl", "Multi_ConfirmGoalReached");

	Params::GymPlayerCheckpointControl_Multi_ConfirmGoalReached Parms{};

	Parms.Goal = Goal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerCheckpointControl.ResetCheckpointIndex
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)

void UGymPlayerCheckpointControl::ResetCheckpointIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerCheckpointControl", "ResetCheckpointIndex");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerCheckpointControl.SetStarted
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// bool                                    bStarted                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymPlayerCheckpointControl::SetStarted(bool bStarted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerCheckpointControl", "SetStarted");

	Params::GymPlayerCheckpointControl_SetStarted Parms{};

	Parms.bStarted = bStarted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.EditorIsOpen
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGymPlayerController::EditorIsOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymPlayerController", "EditorIsOpen");

	Params::GymPlayerController_EditorIsOpen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymPlayerController.IsDebugCareerUnlocked
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGymPlayerController::IsDebugCareerUnlocked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymPlayerController", "IsDebugCareerUnlocked");

	Params::GymPlayerController_IsDebugCareerUnlocked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymPlayerController.ClearUI
// (Net, NetReliable, Native, Event, Public, NetClient)

void AGymPlayerController::ClearUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "ClearUI");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.Client_BeginLoadingScreen
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// float                                   CloseInTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::Client_BeginLoadingScreen(float CloseInTime, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "Client_BeginLoadingScreen");

	Params::GymPlayerController_Client_BeginLoadingScreen Parms{};

	Parms.CloseInTime = CloseInTime;
	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.Client_EndLoadingScreen
// (Net, NetReliable, Native, Event, Public, NetClient)

void AGymPlayerController::Client_EndLoadingScreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "Client_EndLoadingScreen");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.Client_FadeInOut
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// float                                   FadeInTime                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FadeTime                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FadeOutTime                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Layer                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::Client_FadeInOut(const float FadeInTime, const float FadeTime, const float FadeOutTime, const int32 Layer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "Client_FadeInOut");

	Params::GymPlayerController_Client_FadeInOut Parms{};

	Parms.FadeInTime = FadeInTime;
	Parms.FadeTime = FadeTime;
	Parms.FadeOutTime = FadeOutTime;
	Parms.Layer = Layer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.Client_KillZoneFadeInOut
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// float                                   FadeInTime                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FadeTime                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FadeOutTime                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Layer                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::Client_KillZoneFadeInOut(const float FadeInTime, const float FadeTime, const float FadeOutTime, const int32 Layer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "Client_KillZoneFadeInOut");

	Params::GymPlayerController_Client_KillZoneFadeInOut Parms{};

	Parms.FadeInTime = FadeInTime;
	Parms.FadeTime = FadeTime;
	Parms.FadeOutTime = FadeOutTime;
	Parms.Layer = Layer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.Client_LootPickedUp
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class AGymLootActor*                    Loot                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::Client_LootPickedUp(class AGymLootActor* Loot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "Client_LootPickedUp");

	Params::GymPlayerController_Client_LootPickedUp Parms{};

	Parms.Loot = Loot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.Client_SetLootVisibility
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class AGymLootActor*                    Loot                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVisiblity                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::Client_SetLootVisibility(class AGymLootActor* Loot, bool bVisiblity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "Client_SetLootVisibility");

	Params::GymPlayerController_Client_SetLootVisibility Parms{};

	Parms.Loot = Loot;
	Parms.bVisiblity = bVisiblity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.DebugCreatePlaylist
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           Type                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::DebugCreatePlaylist(const class FString& Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "DebugCreatePlaylist");

	Params::GymPlayerController_DebugCreatePlaylist Parms{};

	Parms.Type = std::move(Type);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.DebugForceStartRules
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   StartIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::DebugForceStartRules(int32 StartIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "DebugForceStartRules");

	Params::GymPlayerController_DebugForceStartRules Parms{};

	Parms.StartIndex = StartIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.DebugInitializeLobby
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           MapId                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::DebugInitializeLobby(const class FString& MapId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "DebugInitializeLobby");

	Params::GymPlayerController_DebugInitializeLobby Parms{};

	Parms.MapId = std::move(MapId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.DebugStartPlaylist
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsFinal                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOnlyThisPlayer                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::DebugStartPlaylist(bool bIsFinal, bool bOnlyThisPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "DebugStartPlaylist");

	Params::GymPlayerController_DebugStartPlaylist Parms{};

	Parms.bIsFinal = bIsFinal;
	Parms.bOnlyThisPlayer = bOnlyThisPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.DebugStartRoyale
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsFinal                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOnlyThisPlayer                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::DebugStartRoyale(bool bIsFinal, bool bOnlyThisPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "DebugStartRoyale");

	Params::GymPlayerController_DebugStartRoyale Parms{};

	Parms.bIsFinal = bIsFinal;
	Parms.bOnlyThisPlayer = bOnlyThisPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.DebugStartTournament
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsFinal                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOnlyThisPlayer                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::DebugStartTournament(bool bIsFinal, bool bOnlyThisPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "DebugStartTournament");

	Params::GymPlayerController_DebugStartTournament Parms{};

	Parms.bIsFinal = bIsFinal;
	Parms.bOnlyThisPlayer = bOnlyThisPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.DebugSwapStartMode
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           Mode                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::DebugSwapStartMode(const class FString& Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "DebugSwapStartMode");

	Params::GymPlayerController_DebugSwapStartMode Parms{};

	Parms.Mode = std::move(Mode);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.DebugUnlockAllCareer
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bUnlock                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::DebugUnlockAllCareer(bool bUnlock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "DebugUnlockAllCareer");

	Params::GymPlayerController_DebugUnlockAllCareer Parms{};

	Parms.bUnlock = bUnlock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.EmptyThumbnailGeneratorCache
// (Final, Exec, Native, Public)

void AGymPlayerController::EmptyThumbnailGeneratorCache()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "EmptyThumbnailGeneratorCache");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.EndPreflowClient
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   CameraBlendTime                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::EndPreflowClient(const float CameraBlendTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "EndPreflowClient");

	Params::GymPlayerController_EndPreflowClient Parms{};

	Parms.CameraBlendTime = CameraBlendTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.ExitPhotoMode
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class AGymPhotoModePawn*                PhotoModePawn                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGymCharacter*                    GymCharacter                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::ExitPhotoMode(class AGymPhotoModePawn* PhotoModePawn, class AGymCharacter* GymCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "ExitPhotoMode");

	Params::GymPlayerController_ExitPhotoMode Parms{};

	Parms.PhotoModePawn = PhotoModePawn;
	Parms.GymCharacter = GymCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.ForceStartRules
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// int32                                   StartIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::ForceStartRules(int32 StartIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "ForceStartRules");

	Params::GymPlayerController_ForceStartRules Parms{};

	Parms.StartIndex = StartIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.GetIsInCutscene
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGymPlayerController::GetIsInCutscene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "GetIsInCutscene");

	Params::GymPlayerController_GetIsInCutscene Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymPlayerController.GetPreflowState
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EPreflowState                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EPreflowState AGymPlayerController::GetPreflowState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "GetPreflowState");

	Params::GymPlayerController_GetPreflowState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymPlayerController.IsLocalPlayerUsingGamepad
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGymPlayerController::IsLocalPlayerUsingGamepad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "IsLocalPlayerUsingGamepad");

	Params::GymPlayerController_IsLocalPlayerUsingGamepad Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymPlayerController.LoadMapCompleted_Client
// (Final, Native, Public)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::LoadMapCompleted_Client(bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "LoadMapCompleted_Client");

	Params::GymPlayerController_LoadMapCompleted_Client Parms{};

	Parms.Success = Success;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.LoadMapCompleted_NotifyServer
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::LoadMapCompleted_NotifyServer(bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "LoadMapCompleted_NotifyServer");

	Params::GymPlayerController_LoadMapCompleted_NotifyServer Parms{};

	Parms.Success = Success;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.LoadMapForClient
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class FString                           Uri                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::LoadMapForClient(const class FString& Uri)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "LoadMapForClient");

	Params::GymPlayerController_LoadMapForClient Parms{};

	Parms.Uri = std::move(Uri);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.Multi_SetDevMode
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// bool                                    bMode                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::Multi_SetDevMode(bool bMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "Multi_SetDevMode");

	Params::GymPlayerController_Multi_SetDevMode Parms{};

	Parms.bMode = bMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.NotifyClientPlayerConnected
// (Net, NetReliable, Native, Event, Public, NetClient)

void AGymPlayerController::NotifyClientPlayerConnected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "NotifyClientPlayerConnected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.NotifyClientPlayerDisconnected
// (Net, NetReliable, Native, Event, Public, NetClient)

void AGymPlayerController::NotifyClientPlayerDisconnected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "NotifyClientPlayerDisconnected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.NotifyPlayerConnected
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class FString                           WithName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::NotifyPlayerConnected(const class FString& WithName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "NotifyPlayerConnected");

	Params::GymPlayerController_NotifyPlayerConnected Parms{};

	Parms.WithName = std::move(WithName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.NotifyPlayerDisconnected
// (Net, NetReliable, Native, Event, Public, NetServer)

void AGymPlayerController::NotifyPlayerDisconnected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "NotifyPlayerDisconnected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.NotifyServerPlayerReady
// (Net, NetReliable, Native, Event, Public, NetServer)

void AGymPlayerController::NotifyServerPlayerReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "NotifyServerPlayerReady");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction GYMGAME.GymPlayerController.OnCutsceneStateChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    bIsInCutscene                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::OnCutsceneStateChanged__DelegateSignature(bool bIsInCutscene)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "OnCutsceneStateChanged__DelegateSignature");

	Params::GymPlayerController_OnCutsceneStateChanged__DelegateSignature Parms{};

	Parms.bIsInCutscene = bIsInCutscene;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GYMGAME.GymPlayerController.OnGenericError__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::OnGenericError__DelegateSignature(const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "OnGenericError__DelegateSignature");

	Params::GymPlayerController_OnGenericError__DelegateSignature Parms{};

	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GYMGAME.GymPlayerController.OnGenericInfo__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::OnGenericInfo__DelegateSignature(const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "OnGenericInfo__DelegateSignature");

	Params::GymPlayerController_OnGenericInfo__DelegateSignature Parms{};

	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymPlayerController.OnStateChanged
// (Final, Native, Private)

void AGymPlayerController::OnStateChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "OnStateChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.PauseMenuMusic
// (Event, Public, BlueprintEvent)

void AGymPlayerController::PauseMenuMusic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "PauseMenuMusic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymPlayerController.PlayMenuMusic
// (Event, Public, BlueprintEvent)

void AGymPlayerController::PlayMenuMusic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "PlayMenuMusic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymPlayerController.PrepareNextLoadingScreen
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FGymLoadingScreenOptions         Options                                                (Parm, NativeAccessSpecifierPublic)

void AGymPlayerController::PrepareNextLoadingScreen(const struct FGymLoadingScreenOptions& Options)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "PrepareNextLoadingScreen");

	Params::GymPlayerController_PrepareNextLoadingScreen Parms{};

	Parms.Options = std::move(Options);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.ReportGenericInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::ReportGenericInfo(const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "ReportGenericInfo");

	Params::GymPlayerController_ReportGenericInfo Parms{};

	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.ReportMapUploadSuccess
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::ReportMapUploadSuccess(bool Success, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "ReportMapUploadSuccess");

	Params::GymPlayerController_ReportMapUploadSuccess Parms{};

	Parms.Success = Success;
	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.RequestEndMatch
// (Net, NetReliable, Native, Event, Public, NetServer)

void AGymPlayerController::RequestEndMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "RequestEndMatch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.RequestMapUpload
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)

void AGymPlayerController::RequestMapUpload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "RequestMapUpload");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.RequestRaceRestart
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)

void AGymPlayerController::RequestRaceRestart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "RequestRaceRestart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.Respawn
// (Net, NetReliable, Native, Event, Public, NetServer)

void AGymPlayerController::Respawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "Respawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.RespawnDelayed
// (Net, NetReliable, Native, Event, Public, NetServer)

void AGymPlayerController::RespawnDelayed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "RespawnDelayed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.Server_CancelRequestSkip
// (Net, NetReliable, Native, Event, Public, NetServer)

void AGymPlayerController::Server_CancelRequestSkip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "Server_CancelRequestSkip");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.Server_DebugCreatePlaylist
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class FString                           Type                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::Server_DebugCreatePlaylist(const class FString& Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "Server_DebugCreatePlaylist");

	Params::GymPlayerController_Server_DebugCreatePlaylist Parms{};

	Parms.Type = std::move(Type);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.Server_DebugInitializeLobby
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class FString                           MapId                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::Server_DebugInitializeLobby(const class FString& MapId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "Server_DebugInitializeLobby");

	Params::GymPlayerController_Server_DebugInitializeLobby Parms{};

	Parms.MapId = std::move(MapId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.Server_DebugSwapStartMode
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class FString                           Mode                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::Server_DebugSwapStartMode(const class FString& Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "Server_DebugSwapStartMode");

	Params::GymPlayerController_Server_DebugSwapStartMode Parms{};

	Parms.Mode = std::move(Mode);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.Server_DespawnMarker
// (Net, NetReliable, Native, Event, Public, NetServer)

void AGymPlayerController::Server_DespawnMarker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "Server_DespawnMarker");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.Server_RequestedSkip
// (Net, NetReliable, Native, Event, Public, NetServer)

void AGymPlayerController::Server_RequestedSkip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "Server_RequestedSkip");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.Server_SetDevMode
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// bool                                    bMode                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::Server_SetDevMode(bool bMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "Server_SetDevMode");

	Params::GymPlayerController_Server_SetDevMode Parms{};

	Parms.bMode = bMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.Server_SpawnMarker
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults)
// Parameters:
// struct FVector                          Location                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::Server_SpawnMarker(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "Server_SpawnMarker");

	Params::GymPlayerController_Server_SpawnMarker Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.SetDevMode
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bMode                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::SetDevMode(bool bMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "SetDevMode");

	Params::GymPlayerController_SetDevMode Parms{};

	Parms.bMode = bMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.SetGameViewTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ViewTarget                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::SetGameViewTarget(class AActor* ViewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "SetGameViewTarget");

	Params::GymPlayerController_SetGameViewTarget Parms{};

	Parms.ViewTarget = ViewTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.SetGameViewTargetWithBlend
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ViewTarget                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EViewTargetBlendFunction                BlendFunc                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendExp                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLockOutgoing                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::SetGameViewTargetWithBlend(class AActor* ViewTarget, const float BlendTime, const EViewTargetBlendFunction BlendFunc, const float BlendExp, bool bLockOutgoing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "SetGameViewTargetWithBlend");

	Params::GymPlayerController_SetGameViewTargetWithBlend Parms{};

	Parms.ViewTarget = ViewTarget;
	Parms.BlendTime = BlendTime;
	Parms.BlendFunc = BlendFunc;
	Parms.BlendExp = BlendExp;
	Parms.bLockOutgoing = bLockOutgoing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.SetGymIdWithoutToken
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// class FString                           GymId                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::SetGymIdWithoutToken(const class FString& GymId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "SetGymIdWithoutToken");

	Params::GymPlayerController_SetGymIdWithoutToken Parms{};

	Parms.GymId = std::move(GymId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.SetPlayerName
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::SetPlayerName(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "SetPlayerName");

	Params::GymPlayerController_SetPlayerName Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.SetPlaylistTravelTime
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// float                                   Time                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::SetPlaylistTravelTime(const float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "SetPlaylistTravelTime");

	Params::GymPlayerController_SetPlaylistTravelTime Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.SetupPlaylist
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class FString                           Type                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsFinal                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOnlyThisPlayer                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::SetupPlaylist(const class FString& Type, bool bIsFinal, bool bOnlyThisPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "SetupPlaylist");

	Params::GymPlayerController_SetupPlaylist Parms{};

	Parms.Type = std::move(Type);
	Parms.bIsFinal = bIsFinal;
	Parms.bOnlyThisPlayer = bOnlyThisPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.ShowPlaylistStandings
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FGymPlayerScoreboard             Scoreboard                                             (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// EGymPlaylistType                        PlayListType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsFinal                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsValidLevel                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerController::ShowPlaylistStandings(const struct FGymPlayerScoreboard& Scoreboard, EGymPlaylistType PlayListType, bool IsFinal, bool bIsValidLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "ShowPlaylistStandings");

	Params::GymPlayerController_ShowPlaylistStandings Parms{};

	Parms.Scoreboard = std::move(Scoreboard);
	Parms.PlayListType = PlayListType;
	Parms.IsFinal = IsFinal;
	Parms.bIsValidLevel = bIsValidLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.ShowStandings
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// TArray<struct FGymScoreboardEntry>      Data                                                   (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AGymPlayerController::ShowStandings(const TArray<struct FGymScoreboardEntry>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "ShowStandings");

	Params::GymPlayerController_ShowStandings Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.StartPostflowClient
// (Final, Native, Public, BlueprintCallable)

void AGymPlayerController::StartPostflowClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "StartPostflowClient");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.StartPreflowClient
// (Final, Native, Public, BlueprintCallable)

void AGymPlayerController::StartPreflowClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "StartPreflowClient");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.StartPreRaceSequenceClient
// (Final, Native, Public, BlueprintCallable)

void AGymPlayerController::StartPreRaceSequenceClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "StartPreRaceSequenceClient");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.UpdateLevelInfo
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FCustomLevelFileInfo             LevelInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AGymPlayerController::UpdateLevelInfo(const struct FCustomLevelFileInfo& LevelInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "UpdateLevelInfo");

	Params::GymPlayerController_UpdateLevelInfo Parms{};

	Parms.LevelInfo = std::move(LevelInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerController.CanStartMatchInPlayMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGymPlayerController::CanStartMatchInPlayMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "CanStartMatchInPlayMode");

	Params::GymPlayerController_CanStartMatchInPlayMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymPlayerController.GetCurrentRuleState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGymRuleParticipantState                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGymRuleParticipantState AGymPlayerController::GetCurrentRuleState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "GetCurrentRuleState");

	Params::GymPlayerController_GetCurrentRuleState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymPlayerController.GetGameViewTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* AGymPlayerController::GetGameViewTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "GetGameViewTarget");

	Params::GymPlayerController_GetGameViewTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymPlayerController.GetGymCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGymCharacter*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGymCharacter* AGymPlayerController::GetGymCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "GetGymCharacter");

	Params::GymPlayerController_GetGymCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymPlayerController.GetGymPhotoModePawn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGymPhotoModePawn*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGymPhotoModePawn* AGymPlayerController::GetGymPhotoModePawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "GetGymPhotoModePawn");

	Params::GymPlayerController_GetGymPhotoModePawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymPlayerController.GetGymSpectatorPawn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGymSpectatorPawn*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGymSpectatorPawn* AGymPlayerController::GetGymSpectatorPawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "GetGymSpectatorPawn");

	Params::GymPlayerController_GetGymSpectatorPawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymPlayerController.GetTickerControl
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymGlobalTickerEventControl*     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymGlobalTickerEventControl* AGymPlayerController::GetTickerControl() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "GetTickerControl");

	Params::GymPlayerController_GetTickerControl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymPlayerController.GetWidgetControl
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGymGlobalWidgetControl*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymGlobalWidgetControl* AGymPlayerController::GetWidgetControl() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "GetWidgetControl");

	Params::GymPlayerController_GetWidgetControl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymPlayerController.IsEditorOpen
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGymPlayerController::IsEditorOpen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "IsEditorOpen");

	Params::GymPlayerController_IsEditorOpen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymPlayerController.IsInPhotoMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGymPlayerController::IsInPhotoMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "IsInPhotoMode");

	Params::GymPlayerController_IsInPhotoMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymPlayerController.IsSpectating
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGymPlayerController::IsSpectating() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "IsSpectating");

	Params::GymPlayerController_IsSpectating Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymPlayerController.ParticipantFinishedClient
// (Final, Net, NetReliable, Native, Event, Private, NetClient, Const)
// Parameters:
// struct FGymRuleParticipant              Participant                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AGymPlayerController::ParticipantFinishedClient(const struct FGymRuleParticipant& Participant) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerController", "ParticipantFinishedClient");

	Params::GymPlayerController_ParticipantFinishedClient Parms{};

	Parms.Participant = std::move(Participant);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerLootControl.Multi_ConfirmOtherPlayerCollected
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class AGymLootActor*                    LootActor                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymPlayerLootControl::Multi_ConfirmOtherPlayerCollected(class AGymLootActor* LootActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerLootControl", "Multi_ConfirmOtherPlayerCollected");

	Params::GymPlayerLootControl_Multi_ConfirmOtherPlayerCollected Parms{};

	Parms.LootActor = LootActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerLootControl.Multi_LootCollected
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class AGymLootActor*                    LootActor                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymPlayerLootControl::Multi_LootCollected(class AGymLootActor* LootActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerLootControl", "Multi_LootCollected");

	Params::GymPlayerLootControl_Multi_LootCollected Parms{};

	Parms.LootActor = LootActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerLootControl.Multi_SetStarted
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// bool                                    Started                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymPlayerLootControl::Multi_SetStarted(bool Started)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerLootControl", "Multi_SetStarted");

	Params::GymPlayerLootControl_Multi_SetStarted Parms{};

	Parms.Started = Started;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerState.Client_SetFinishedRank
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// int32                                   Rank                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerState::Client_SetFinishedRank(int32 Rank)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerState", "Client_SetFinishedRank");

	Params::GymPlayerState_Client_SetFinishedRank Parms{};

	Parms.Rank = Rank;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerState.DebugSetOverrideOwner
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bOwner                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerState::DebugSetOverrideOwner(bool bOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerState", "DebugSetOverrideOwner");

	Params::GymPlayerState_DebugSetOverrideOwner Parms{};

	Parms.bOwner = bOwner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerState.GetEditAllowed
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGymPlayerState::GetEditAllowed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerState", "GetEditAllowed");

	Params::GymPlayerState_GetEditAllowed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymPlayerState.KickPlayer
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// class AGymPlayerState*                  PlayerToKick                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerState::KickPlayer(const class AGymPlayerState* PlayerToKick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerState", "KickPlayer");

	Params::GymPlayerState_KickPlayer Parms{};

	Parms.PlayerToKick = PlayerToKick;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerState.KickPlayerReply
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// bool                                    bSuccess                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerState::KickPlayerReply(bool bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerState", "KickPlayerReply");

	Params::GymPlayerState_KickPlayerReply Parms{};

	Parms.bSuccess = bSuccess;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerState.NotifyClientVoteChanged
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// bool                                    bDidVote                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerState::NotifyClientVoteChanged(bool bDidVote)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerState", "NotifyClientVoteChanged");

	Params::GymPlayerState_NotifyClientVoteChanged Parms{};

	Parms.bDidVote = bDidVote;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerState.NotifyClientVoteEnded
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// EVoteState                              VoteResult                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDidVote                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerState::NotifyClientVoteEnded(EVoteState VoteResult, bool bDidVote)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerState", "NotifyClientVoteEnded");

	Params::GymPlayerState_NotifyClientVoteEnded Parms{};

	Parms.VoteResult = VoteResult;
	Parms.bDidVote = bDidVote;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerState.NotifyClientVoteStarted
// (Net, NetReliable, Native, Event, Public, NetClient)

void AGymPlayerState::NotifyClientVoteStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerState", "NotifyClientVoteStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction GYMGAME.GymPlayerState.OnEditingAllowed__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    bAllowed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerState::OnEditingAllowed__DelegateSignature(bool bAllowed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerState", "OnEditingAllowed__DelegateSignature");

	Params::GymPlayerState_OnEditingAllowed__DelegateSignature Parms{};

	Parms.bAllowed = bAllowed;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GYMGAME.GymPlayerState.OnHasVotedChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    bDidVote                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerState::OnHasVotedChanged__DelegateSignature(bool bDidVote)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerState", "OnHasVotedChanged__DelegateSignature");

	Params::GymPlayerState_OnHasVotedChanged__DelegateSignature Parms{};

	Parms.bDidVote = bDidVote;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymPlayerState.OnRep_EditingAllowed
// (Final, Native, Protected)

void AGymPlayerState::OnRep_EditingAllowed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerState", "OnRep_EditingAllowed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction GYMGAME.GymPlayerState.OnVoteEnded__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// EVoteState                              VoteResult                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDidVote                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerState::OnVoteEnded__DelegateSignature(EVoteState VoteResult, bool bDidVote)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerState", "OnVoteEnded__DelegateSignature");

	Params::GymPlayerState_OnVoteEnded__DelegateSignature Parms{};

	Parms.VoteResult = VoteResult;
	Parms.bDidVote = bDidVote;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GYMGAME.GymPlayerState.OnVoteStarted__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void AGymPlayerState::OnVoteStarted__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerState", "OnVoteStarted__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymPlayerState.SendCustomization
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// struct FGymCharacterCustomization       NewCustomization                                       (ConstParm, Parm, NativeAccessSpecifierPublic)

void AGymPlayerState::SendCustomization(const struct FGymCharacterCustomization& NewCustomization)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerState", "SendCustomization");

	Params::GymPlayerState_SendCustomization Parms{};

	Parms.NewCustomization = std::move(NewCustomization);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerState.Server_SwapName
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerState::Server_SwapName(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerState", "Server_SwapName");

	Params::GymPlayerState_Server_SwapName Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerState.SetEditAllowed
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// class AGymPlayerState*                  State                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerState::SetEditAllowed(class AGymPlayerState* State, bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerState", "SetEditAllowed");

	Params::GymPlayerState_SetEditAllowed Parms{};

	Parms.State = State;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerState.SwapName
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPlayerState::SwapName(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerState", "SwapName");

	Params::GymPlayerState_SwapName Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlayerState.GetGymCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGymCharacter*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGymCharacter* AGymPlayerState::GetGymCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerState", "GetGymCharacter");

	Params::GymPlayerState_GetGymCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymPlayerState.GetGymPlayerController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGymPlayerController*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGymPlayerController* AGymPlayerState::GetGymPlayerController() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerState", "GetGymPlayerController");

	Params::GymPlayerState_GetGymPlayerController Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymPlayerState.GetGymSpectatorPawn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGymSpectatorPawn*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGymSpectatorPawn* AGymPlayerState::GetGymSpectatorPawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerState", "GetGymSpectatorPawn");

	Params::GymPlayerState_GetGymSpectatorPawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymPlayerState.GetPlayerAvatar
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* AGymPlayerState::GetPlayerAvatar() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerState", "GetPlayerAvatar");

	Params::GymPlayerState_GetPlayerAvatar Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymPlayerState.IsMapOwner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGymPlayerState::IsMapOwner() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerState", "IsMapOwner");

	Params::GymPlayerState_IsMapOwner Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymPlayerState.IsOwner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGymPlayerState::IsOwner() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlayerState", "IsOwner");

	Params::GymPlayerState_IsOwner Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymPlaylist.OrderScoreByCurrentStanding
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FGymPlaylistScoreboardEntry>OutScoreboard                                          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGymPlaylist::OrderScoreByCurrentStanding(TArray<struct FGymPlaylistScoreboardEntry>* OutScoreboard)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymPlaylist", "OrderScoreByCurrentStanding");

	Params::GymPlaylist_OrderScoreByCurrentStanding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutScoreboard != nullptr)
		*OutScoreboard = std::move(Parms.OutScoreboard);
}


// Function GYMGAME.GymPlaylist.OrderScoreByTotalScore
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FGymPlaylistScoreboardEntry>OutScoreboard                                          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGymPlaylist::OrderScoreByTotalScore(TArray<struct FGymPlaylistScoreboardEntry>* OutScoreboard)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymPlaylist", "OrderScoreByTotalScore");

	Params::GymPlaylist_OrderScoreByTotalScore Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutScoreboard != nullptr)
		*OutScoreboard = std::move(Parms.OutScoreboard);
}


// Function GYMGAME.GymPlaylist.OrderScoreByTotalStanding
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FGymPlaylistScoreboardEntry>OutScoreboard                                          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGymPlaylist::OrderScoreByTotalStanding(TArray<struct FGymPlaylistScoreboardEntry>* OutScoreboard)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymPlaylist", "OrderScoreByTotalStanding");

	Params::GymPlaylist_OrderScoreByTotalStanding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutScoreboard != nullptr)
		*OutScoreboard = std::move(Parms.OutScoreboard);
}


// Function GYMGAME.GymPlaylist.LoadNextMap
// (Final, Native, Public, BlueprintCallable)

void UGymPlaylist::LoadNextMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlaylist", "LoadNextMap");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPlaylist.GetCurrentMapIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymPlaylist::GetCurrentMapIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlaylist", "GetCurrentMapIndex");

	Params::GymPlaylist_GetCurrentMapIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymPlaylist.GetCurrentMapInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGymPlaylistMapInfo              ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGymPlaylistMapInfo UGymPlaylist::GetCurrentMapInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlaylist", "GetCurrentMapInfo");

	Params::GymPlaylist_GetCurrentMapInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymPlaylist.GetMapCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymPlaylist::GetMapCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlaylist", "GetMapCount");

	Params::GymPlaylist_GetMapCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymPlaylist.IsFinalMap
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymPlaylist::IsFinalMap() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlaylist", "IsFinalMap");

	Params::GymPlaylist_IsFinalMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymPlaylist.IsLocal
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymPlaylist::IsLocal() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlaylist", "IsLocal");

	Params::GymPlaylist_IsLocal Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymPlaylist.IsStarted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymPlaylist::IsStarted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPlaylist", "IsStarted");

	Params::GymPlaylist_IsStarted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymRoyaleCutsceneManager.Multi_BeginCutscene
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)

void AGymRoyaleCutsceneManager::Multi_BeginCutscene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRoyaleCutsceneManager", "Multi_BeginCutscene");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRoyaleCutsceneManager.Multi_EndCutscene
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)

void AGymRoyaleCutsceneManager::Multi_EndCutscene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRoyaleCutsceneManager", "Multi_EndCutscene");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRoyaleCutsceneManager.Multi_TransitionBeginCutscene
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)

void AGymRoyaleCutsceneManager::Multi_TransitionBeginCutscene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRoyaleCutsceneManager", "Multi_TransitionBeginCutscene");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction GYMGAME.GymRoyaleCutsceneManager.OnCutsceneBegin__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void AGymRoyaleCutsceneManager::OnCutsceneBegin__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRoyaleCutsceneManager", "OnCutsceneBegin__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymPostPodiumCutscene.Multi_HideWidgets
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)

void AGymPostPodiumCutscene::Multi_HideWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPostPodiumCutscene", "Multi_HideWidgets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymPostPodiumCutscene.Multi_SpawnOwnPlayer
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// TArray<struct FGymPlaylistScoreboardEntry>Scoreboard                                             (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bIsFinal                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsTournament                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsTrueFinal                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymPostPodiumCutscene::Multi_SpawnOwnPlayer(const TArray<struct FGymPlaylistScoreboardEntry>& Scoreboard, bool bIsFinal, bool bIsTournament, bool bIsTrueFinal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymPostPodiumCutscene", "Multi_SpawnOwnPlayer");

	Params::GymPostPodiumCutscene_Multi_SpawnOwnPlayer Parms{};

	Parms.Scoreboard = std::move(Scoreboard);
	Parms.bIsFinal = bIsFinal;
	Parms.bIsTournament = bIsTournament;
	Parms.bIsTrueFinal = bIsTrueFinal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymQuest.GetAllObjectives
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class UGymObjective*>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UGymObjective*> UGymQuest::GetAllObjectives()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymQuest", "GetAllObjectives");

	Params::GymQuest_GetAllObjectives Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymQuest.GetObjective
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ObjectiveID                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGymObjective*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymObjective* UGymQuest::GetObjective(class FName ObjectiveID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymQuest", "GetObjective");

	Params::GymQuest_GetObjective Parms{};

	Parms.ObjectiveID = ObjectiveID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymQuest.GetTimeLeft
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGymQuest::GetTimeLeft() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymQuest", "GetTimeLeft");

	Params::GymQuest_GetTimeLeft Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymQuest.IsCompleted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymQuest::IsCompleted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymQuest", "IsCompleted");

	Params::GymQuest_IsCompleted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymQuest.IsFailed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymQuest::IsFailed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymQuest", "IsFailed");

	Params::GymQuest_IsFailed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymQuest.IsInProgress
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymQuest::IsInProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymQuest", "IsInProgress");

	Params::GymQuest_IsInProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymQuest.IsTimedQuest
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymQuest::IsTimedQuest() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymQuest", "IsTimedQuest");

	Params::GymQuest_IsTimedQuest Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymQuestWidget.ShowMessage
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             Message                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bGoodMessage                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymQuestWidget::ShowMessage(const class FText& Message, bool bGoodMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymQuestWidget", "ShowMessage");

	Params::GymQuestWidget_ShowMessage Parms{};

	Parms.Message = std::move(Message);
	Parms.bGoodMessage = bGoodMessage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymQuestWidget.IsShowingMessage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymQuestWidget::IsShowingMessage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymQuestWidget", "IsShowingMessage");

	Params::GymQuestWidget_IsShowingMessage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymRespawnAction.Server_PerformAction
// (Final, Net, NetReliable, Native, Event, Private, NetServer)

void UGymRespawnAction::Server_PerformAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRespawnAction", "Server_PerformAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRoyaleEliminationCutscene.Multi_DebugPlaySequence
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)

void AGymRoyaleEliminationCutscene::Multi_DebugPlaySequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRoyaleEliminationCutscene", "Multi_DebugPlaySequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRoyaleEliminationCutscene.Multi_EndSequence
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)

void AGymRoyaleEliminationCutscene::Multi_EndSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRoyaleEliminationCutscene", "Multi_EndSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRoyaleEliminationCutscene.Multi_PlaySequence
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// TArray<struct FGymPlaylistScoreboardEntry>Scoreboard                                             (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AGymRoyaleEliminationCutscene::Multi_PlaySequence(const TArray<struct FGymPlaylistScoreboardEntry>& Scoreboard)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRoyaleEliminationCutscene", "Multi_PlaySequence");

	Params::GymRoyaleEliminationCutscene_Multi_PlaySequence Parms{};

	Parms.Scoreboard = std::move(Scoreboard);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRoyalePodiumCutscene.Multi_EndPodiumState
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)

void AGymRoyalePodiumCutscene::Multi_EndPodiumState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRoyalePodiumCutscene", "Multi_EndPodiumState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRoyalePodiumCutscene.Multi_SetupPodiumWidget
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class FString                           SpawnID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGymPlaylistScoreboardEntry      Score                                                  (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bShowTournamentScore                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsFinal                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsTrueFinal                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymRoyalePodiumCutscene::Multi_SetupPodiumWidget(const class FString& SpawnID, const struct FGymPlaylistScoreboardEntry& Score, bool bShowTournamentScore, bool bIsFinal, bool bIsTrueFinal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRoyalePodiumCutscene", "Multi_SetupPodiumWidget");

	Params::GymRoyalePodiumCutscene_Multi_SetupPodiumWidget Parms{};

	Parms.SpawnID = std::move(SpawnID);
	Parms.Score = std::move(Score);
	Parms.bShowTournamentScore = bShowTournamentScore;
	Parms.bIsFinal = bIsFinal;
	Parms.bIsTrueFinal = bIsTrueFinal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRoyalePodiumCutscene.Multi_SpawnLosers
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// TArray<struct FGymPlaylistScoreboardEntry>PlaylistScore                                          (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AGymRoyalePodiumCutscene::Multi_SpawnLosers(const TArray<struct FGymPlaylistScoreboardEntry>& PlaylistScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRoyalePodiumCutscene", "Multi_SpawnLosers");

	Params::GymRoyalePodiumCutscene_Multi_SpawnLosers Parms{};

	Parms.PlaylistScore = std::move(PlaylistScore);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleControl.AddVote
// (Net, NetReliable, Native, Event, Public, NetServer)

void UGymRuleControl::AddVote()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleControl", "AddVote");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleControl.CancelVote
// (Net, NetReliable, Native, Event, Public, NetServer)

void UGymRuleControl::CancelVote()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleControl", "CancelVote");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleControl.Client_AddMessage
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FRuleAdvanceResponse             Response                                               (Parm, NativeAccessSpecifierPublic)

void UGymRuleControl::Client_AddMessage(const struct FRuleAdvanceResponse& Response)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleControl", "Client_AddMessage");

	Params::GymRuleControl_Client_AddMessage Parms{};

	Parms.Response = std::move(Response);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleControl.Client_CheckpointVisited
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// int32                                   CheckpointVisited                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymRuleControl::Client_CheckpointVisited(int32 CheckpointVisited)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleControl", "Client_CheckpointVisited");

	Params::GymRuleControl_Client_CheckpointVisited Parms{};

	Parms.CheckpointVisited = CheckpointVisited;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleControl.Client_OnBombAssigned
// (Net, NetReliable, Native, Event, Public, NetClient)

void UGymRuleControl::Client_OnBombAssigned()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleControl", "Client_OnBombAssigned");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleControl.Client_OnBombNotAssigned
// (Net, NetReliable, Native, Event, Public, NetClient)

void UGymRuleControl::Client_OnBombNotAssigned()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleControl", "Client_OnBombNotAssigned");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleControl.Client_OnEliminated
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// EEliminationReason                      EliminationReason                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymRuleControl::Client_OnEliminated(const EEliminationReason EliminationReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleControl", "Client_OnEliminated");

	Params::GymRuleControl_Client_OnEliminated Parms{};

	Parms.EliminationReason = EliminationReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleControl.Client_OnFinished
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// bool                                    bIsRoyale                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymRuleControl::Client_OnFinished(const bool bIsRoyale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleControl", "Client_OnFinished");

	Params::GymRuleControl_Client_OnFinished Parms{};

	Parms.bIsRoyale = bIsRoyale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleControl.Client_OnPlayerTagged
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class AGymPlayerState*                  OtherPlayer                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Cooldown                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymRuleControl::Client_OnPlayerTagged(class AGymPlayerState* OtherPlayer, float Cooldown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleControl", "Client_OnPlayerTagged");

	Params::GymRuleControl_Client_OnPlayerTagged Parms{};

	Parms.OtherPlayer = OtherPlayer;
	Parms.Cooldown = Cooldown;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleControl.Client_OnTaggedByPlayer
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class AGymPlayerState*                  OtherPlayer                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymRuleControl::Client_OnTaggedByPlayer(class AGymPlayerState* OtherPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleControl", "Client_OnTaggedByPlayer");

	Params::GymRuleControl_Client_OnTaggedByPlayer Parms{};

	Parms.OtherPlayer = OtherPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleControl.Client_RespondResetRuleState
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// struct FRuleAdvanceResponse             Response                                               (Parm, NativeAccessSpecifierPublic)

void UGymRuleControl::Client_RespondResetRuleState(const struct FRuleAdvanceResponse& Response)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleControl", "Client_RespondResetRuleState");

	Params::GymRuleControl_Client_RespondResetRuleState Parms{};

	Parms.Response = std::move(Response);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleControl.Client_RespondRuleToAdvance
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FRuleAdvanceResponse             Response                                               (Parm, NativeAccessSpecifierPublic)

void UGymRuleControl::Client_RespondRuleToAdvance(const struct FRuleAdvanceResponse& Response)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleControl", "Client_RespondRuleToAdvance");

	Params::GymRuleControl_Client_RespondRuleToAdvance Parms{};

	Parms.Response = std::move(Response);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleControl.Client_SetFlagVisibility
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class AGymOCRespawnActor*               Flag                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVisibility                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymRuleControl::Client_SetFlagVisibility(class AGymOCRespawnActor* Flag, bool bVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleControl", "Client_SetFlagVisibility");

	Params::GymRuleControl_Client_SetFlagVisibility Parms{};

	Parms.Flag = Flag;
	Parms.bVisibility = bVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleControl.Client_SetLootCollected
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// int32                                   CollectedLoot                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LootLeft                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymRuleControl::Client_SetLootCollected(int32 CollectedLoot, int32 LootLeft)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleControl", "Client_SetLootCollected");

	Params::GymRuleControl_Client_SetLootCollected Parms{};

	Parms.CollectedLoot = CollectedLoot;
	Parms.LootLeft = LootLeft;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleControl.FinishVote
// (Net, NetReliable, Native, Event, Public, NetServer)

void UGymRuleControl::FinishVote()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleControl", "FinishVote");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleControl.GiveUp
// (Net, NetReliable, Native, Event, Public, NetServer)

void UGymRuleControl::GiveUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleControl", "GiveUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleControl.ProgressVote
// (Net, NetReliable, Native, Event, Public, NetServer)

void UGymRuleControl::ProgressVote()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleControl", "ProgressVote");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleControl.RemoveVote
// (Net, NetReliable, Native, Event, Public, NetServer)

void UGymRuleControl::RemoveVote()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleControl", "RemoveVote");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleControl.ResetRuleState
// (Net, NetReliable, Native, Event, Public, NetServer)

void UGymRuleControl::ResetRuleState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleControl", "ResetRuleState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleControl.Server_Respawn
// (Net, NetReliable, Native, Event, Public, NetServer)

void UGymRuleControl::Server_Respawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleControl", "Server_Respawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleControl.Server_SetCheckpoint
// (Net, NetReliable, Native, Event, Public, NetServer)

void UGymRuleControl::Server_SetCheckpoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleControl", "Server_SetCheckpoint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleControl.StartVote
// (Net, NetReliable, Native, Event, Public, NetServer)

void UGymRuleControl::StartVote()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleControl", "StartVote");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleControl.ToggleAddVote
// (Net, NetReliable, Native, Event, Public, NetServer)

void UGymRuleControl::ToggleAddVote()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleControl", "ToggleAddVote");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymRuleControl.CanStartVote
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymRuleControl::CanStartVote() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymRuleControl", "CanStartVote");

	Params::GymRuleControl_CanStartVote Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymRuleUtils.FormatTime
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   Time                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGymRuleUtils::FormatTime(const float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymRuleUtils", "FormatTime");

	Params::GymRuleUtils_FormatTime Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSaveGameTutorial.DoesSaveExist
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymSaveGameTutorial::DoesSaveExist()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymSaveGameTutorial", "DoesSaveExist");

	Params::GymSaveGameTutorial_DoesSaveExist Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSaveGameTutorial.GetSaveFile
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGymSaveGameTutorial*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGymSaveGameTutorial* UGymSaveGameTutorial::GetSaveFile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymSaveGameTutorial", "GetSaveFile");

	Params::GymSaveGameTutorial_GetSaveFile Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSaveGameTutorial.ClaimReward
// (Final, Native, Public, BlueprintCallable)

void UGymSaveGameTutorial::ClaimReward()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSaveGameTutorial", "ClaimReward");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSaveGameTutorial.DEBUG_SetAllLocalProgressToMissingOneStep
// (Final, Native, Public, BlueprintCallable)

void UGymSaveGameTutorial::DEBUG_SetAllLocalProgressToMissingOneStep()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSaveGameTutorial", "DEBUG_SetAllLocalProgressToMissingOneStep");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSaveGameTutorial.EnterNextPrestige
// (Final, Native, Public, BlueprintCallable)

void UGymSaveGameTutorial::EnterNextPrestige()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSaveGameTutorial", "EnterNextPrestige");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSaveGameTutorial.GetCompletedTaskArray
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           LevelName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UGymSaveGameTutorial::GetCompletedTaskArray(const class FString& LevelName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSaveGameTutorial", "GetCompletedTaskArray");

	Params::GymSaveGameTutorial_GetCompletedTaskArray Parms{};

	Parms.LevelName = std::move(LevelName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSaveGameTutorial.GetCompletedTasks
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           LevelName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymSaveGameTutorial::GetCompletedTasks(const class FString& LevelName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSaveGameTutorial", "GetCompletedTasks");

	Params::GymSaveGameTutorial_GetCompletedTasks Parms{};

	Parms.LevelName = std::move(LevelName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSaveGameTutorial.GetPlacementForTournament
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           TournamentId                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymSaveGameTutorial::GetPlacementForTournament(const class FString& TournamentId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSaveGameTutorial", "GetPlacementForTournament");

	Params::GymSaveGameTutorial_GetPlacementForTournament Parms{};

	Parms.TournamentId = std::move(TournamentId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSaveGameTutorial.GetScoreForTournament
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           TournamentId                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymSaveGameTutorial::GetScoreForTournament(const class FString& TournamentId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSaveGameTutorial", "GetScoreForTournament");

	Params::GymSaveGameTutorial_GetScoreForTournament Parms{};

	Parms.TournamentId = std::move(TournamentId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSaveGameTutorial.GetTapesCollected
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymSaveGameTutorial::GetTapesCollected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSaveGameTutorial", "GetTapesCollected");

	Params::GymSaveGameTutorial_GetTapesCollected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSaveGameTutorial.GetTotalCompletedTasks
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymSaveGameTutorial::GetTotalCompletedTasks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSaveGameTutorial", "GetTotalCompletedTasks");

	Params::GymSaveGameTutorial_GetTotalCompletedTasks Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSaveGameTutorial.HasCompletedLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           LevelName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxNum                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymSaveGameTutorial::HasCompletedLevel(const class FString& LevelName, int32 MaxNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSaveGameTutorial", "HasCompletedLevel");

	Params::GymSaveGameTutorial_HasCompletedLevel Parms{};

	Parms.LevelName = std::move(LevelName);
	Parms.MaxNum = MaxNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSaveGameTutorial.HasCompletedTask
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           LevelName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           TaskName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymSaveGameTutorial::HasCompletedTask(const class FString& LevelName, const class FString& TaskName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSaveGameTutorial", "HasCompletedTask");

	Params::GymSaveGameTutorial_HasCompletedTask Parms{};

	Parms.LevelName = std::move(LevelName);
	Parms.TaskName = std::move(TaskName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSaveGameTutorial.IsTopN
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           TournamentId                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Placement                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymSaveGameTutorial::IsTopN(const class FString& TournamentId, int32 Placement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSaveGameTutorial", "IsTopN");

	Params::GymSaveGameTutorial_IsTopN Parms{};

	Parms.TournamentId = std::move(TournamentId);
	Parms.Placement = Placement;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSaveGameTutorial.ResetLocalProgress
// (Final, Native, Public, BlueprintCallable)

void UGymSaveGameTutorial::ResetLocalProgress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSaveGameTutorial", "ResetLocalProgress");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSaveGameTutorial.SaveCareerLevelVisited
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           LevelName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymSaveGameTutorial::SaveCareerLevelVisited(const class FString& LevelName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSaveGameTutorial", "SaveCareerLevelVisited");

	Params::GymSaveGameTutorial_SaveCareerLevelVisited Parms{};

	Parms.LevelName = std::move(LevelName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSaveGameTutorial.SaveCareerProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           LevelName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             CompletedTask                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymSaveGameTutorial::SaveCareerProgress(const class FString& LevelName, class FName CompletedTask)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSaveGameTutorial", "SaveCareerProgress");

	Params::GymSaveGameTutorial_SaveCareerProgress Parms{};

	Parms.LevelName = std::move(LevelName);
	Parms.CompletedTask = CompletedTask;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSaveGameTutorial.SaveCareerTournament
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           TournamentId                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Placement                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymSaveGameTutorial::SaveCareerTournament(const class FString& TournamentId, int32 Placement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSaveGameTutorial", "SaveCareerTournament");

	Params::GymSaveGameTutorial_SaveCareerTournament Parms{};

	Parms.TournamentId = std::move(TournamentId);
	Parms.Placement = Placement;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSaveGameTutorial.SaveFile
// (Final, Native, Public, BlueprintCallable)

void UGymSaveGameTutorial::SaveFile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSaveGameTutorial", "SaveFile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSaveGameTutorial.GetCareerCompletionData
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bIsCompletedOut                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PercentageOut                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PrestigeLevelOut                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymSaveGameTutorial::GetCareerCompletionData(bool* bIsCompletedOut, float* PercentageOut, int32* PrestigeLevelOut) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSaveGameTutorial", "GetCareerCompletionData");

	Params::GymSaveGameTutorial_GetCareerCompletionData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bIsCompletedOut != nullptr)
		*bIsCompletedOut = Parms.bIsCompletedOut;

	if (PercentageOut != nullptr)
		*PercentageOut = Parms.PercentageOut;

	if (PrestigeLevelOut != nullptr)
		*PrestigeLevelOut = Parms.PrestigeLevelOut;
}


// Function GYMGAME.GymSaveGameTutorial.GetNumberOfTimesCompleted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymSaveGameTutorial::GetNumberOfTimesCompleted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSaveGameTutorial", "GetNumberOfTimesCompleted");

	Params::GymSaveGameTutorial_GetNumberOfTimesCompleted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSaveGameTutorial.GetRewardsClaimed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymSaveGameTutorial::GetRewardsClaimed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSaveGameTutorial", "GetRewardsClaimed");

	Params::GymSaveGameTutorial_GetRewardsClaimed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSaveGameTutorial.HasCollectedTape
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           LevelName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymSaveGameTutorial::HasCollectedTape(const class FString& LevelName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSaveGameTutorial", "HasCollectedTape");

	Params::GymSaveGameTutorial_HasCollectedTape Parms{};

	Parms.LevelName = std::move(LevelName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSecretTape.BPSetVisible
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymSecretTape::BPSetVisible(bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSecretTape", "BPSetVisible");

	Params::GymSecretTape_BPSetVisible Parms{};

	Parms.bVisible = bVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymServerAnalytics.StartSession
// (Final, Native, Public, BlueprintCallable)

void UGymServerAnalytics::StartSession()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymServerAnalytics", "StartSession");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymServerAnalytics.RaceStart
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class FString                           GameMode                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _Participants                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymServerAnalytics::RaceStart(const class FString& GameMode, const int32 _Participants) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymServerAnalytics", "RaceStart");

	Params::GymServerAnalytics_RaceStart Parms{};

	Parms.GameMode = std::move(GameMode);
	Parms._Participants = _Participants;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymServerAnalytics.SessionEnd
// (Final, Native, Public, BlueprintCallable, Const)

void UGymServerAnalytics::SessionEnd() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymServerAnalytics", "SessionEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymServerHeartbeat.Start
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Address                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Interval                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Hub                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymServerHeartbeat::Start(const class FString& Address, float Interval, bool Hub, const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymServerHeartbeat", "Start");

	Params::GymServerHeartbeat_Start Parms{};

	Parms.Address = std::move(Address);
	Parms.Interval = Interval;
	Parms.Hub = Hub;
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymServerHeartbeat.Stop
// (Final, Native, Public, BlueprintCallable)

void UGymServerHeartbeat::Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymServerHeartbeat", "Stop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSessionUtils.AddPlayer
// (Final, Native, Public, BlueprintCallable)

void UGymSessionUtils::AddPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSessionUtils", "AddPlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSessionUtils.CancelFindSession
// (Final, Native, Public, BlueprintCallable)

void UGymSessionUtils::CancelFindSession()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSessionUtils", "CancelFindSession");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSessionUtils.ConsumePendingInvite
// (Final, Native, Public, BlueprintCallable)

void UGymSessionUtils::ConsumePendingInvite()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSessionUtils", "ConsumePendingInvite");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSessionUtils.CreateSession
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NumPublicConnections                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsLANMatch                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsFeaturedPlaylist                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVisibility                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           MapName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SessionMode                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymSessionUtils::CreateSession(int32 NumPublicConnections, bool IsLANMatch, bool bIsFeaturedPlaylist, bool bVisibility, const class FString& MapName, const class FString& SessionMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSessionUtils", "CreateSession");

	Params::GymSessionUtils_CreateSession Parms{};

	Parms.NumPublicConnections = NumPublicConnections;
	Parms.IsLANMatch = IsLANMatch;
	Parms.bIsFeaturedPlaylist = bIsFeaturedPlaylist;
	Parms.bVisibility = bVisibility;
	Parms.MapName = std::move(MapName);
	Parms.SessionMode = std::move(SessionMode);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSessionUtils.EndSession
// (Final, Native, Public, BlueprintCallable)

void UGymSessionUtils::EndSession()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSessionUtils", "EndSession");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSessionUtils.FindSessionExec
// (Final, Exec, Native, Public)

void UGymSessionUtils::FindSessionExec()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSessionUtils", "FindSessionExec");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSessionUtils.FindSessions
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   MaxSearchResults                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsLANQuery                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGymSessionSearchFilters         Filters                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGymSessionUtils::FindSessions(int32 MaxSearchResults, bool IsLANQuery, const struct FGymSessionSearchFilters& Filters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSessionUtils", "FindSessions");

	Params::GymSessionUtils_FindSessions Parms{};

	Parms.MaxSearchResults = MaxSearchResults;
	Parms.IsLANQuery = IsLANQuery;
	Parms.Filters = std::move(Filters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSessionUtils.GetSessionKey
// (Final, Exec, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGymSessionUtils::GetSessionKey()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSessionUtils", "GetSessionKey");

	Params::GymSessionUtils_GetSessionKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSessionUtils.GetSessionMode
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           SessionMode                                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymSessionUtils::GetSessionMode(class FString* SessionMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSessionUtils", "GetSessionMode");

	Params::GymSessionUtils_GetSessionMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SessionMode != nullptr)
		*SessionMode = std::move(Parms.SessionMode);

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSessionUtils.GetSessionOwnerId
// (Final, Exec, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           OwnerId                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymSessionUtils::GetSessionOwnerId(class FString* OwnerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSessionUtils", "GetSessionOwnerId");

	Params::GymSessionUtils_GetSessionOwnerId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OwnerId != nullptr)
		*OwnerId = std::move(Parms.OwnerId);

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSessionUtils.GetSessionVisibility
// (Final, Exec, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymSessionUtils::GetSessionVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSessionUtils", "GetSessionVisibility");

	Params::GymSessionUtils_GetSessionVisibility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSessionUtils.GetUseSessionKey
// (Final, Exec, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymSessionUtils::GetUseSessionKey()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSessionUtils", "GetUseSessionKey");

	Params::GymSessionUtils_GetUseSessionKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSessionUtils.HasPendingInvite
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymSessionUtils::HasPendingInvite()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSessionUtils", "HasPendingInvite");

	Params::GymSessionUtils_HasPendingInvite Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSessionUtils.InvokeFriendUI
// (Final, Native, Public, BlueprintCallable)

void UGymSessionUtils::InvokeFriendUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSessionUtils", "InvokeFriendUI");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSessionUtils.IsPlayMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymSessionUtils::IsPlayMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSessionUtils", "IsPlayMode");

	Params::GymSessionUtils_IsPlayMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSessionUtils.IsSandboxMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymSessionUtils::IsSandboxMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSessionUtils", "IsSandboxMode");

	Params::GymSessionUtils_IsSandboxMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSessionUtils.JoinGameSession
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGymSessionSearchResult          SessionResult                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGymSessionUtils::JoinGameSession(const struct FGymSessionSearchResult& SessionResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSessionUtils", "JoinGameSession");

	Params::GymSessionUtils_JoinGameSession Parms{};

	Parms.SessionResult = std::move(SessionResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSessionUtils.RemovePlayer
// (Final, Native, Public, BlueprintCallable)

void UGymSessionUtils::RemovePlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSessionUtils", "RemovePlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSessionUtils.StartSession
// (Final, Native, Public, BlueprintCallable)

void UGymSessionUtils::StartSession()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSessionUtils", "StartSession");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSessionUtils.TryTravelToCurrentSession
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymSessionUtils::TryTravelToCurrentSession()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSessionUtils", "TryTravelToCurrentSession");

	Params::GymSessionUtils_TryTravelToCurrentSession Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSessionUtils.UpdateSessionMapName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           MapName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymSessionUtils::UpdateSessionMapName(const class FString& MapName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSessionUtils", "UpdateSessionMapName");

	Params::GymSessionUtils_UpdateSessionMapName Parms{};

	Parms.MapName = std::move(MapName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSessionUtils.UpdateUseSessionKey
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bUseKey                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymSessionUtils::UpdateUseSessionKey(bool bUseKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSessionUtils", "UpdateUseSessionKey");

	Params::GymSessionUtils_UpdateUseSessionKey Parms{};

	Parms.bUseKey = bUseKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSessionUtils.UpdateVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bVisibility                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymSessionUtils::UpdateVisibility(bool bVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSessionUtils", "UpdateVisibility");

	Params::GymSessionUtils_UpdateVisibility Parms{};

	Parms.bVisibility = bVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSettingsManager.GetCrowdDensity
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGymSettingsManager::GetCrowdDensity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymSettingsManager", "GetCrowdDensity");

	Params::GymSettingsManager_GetCrowdDensity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSettingsManager.GetGamepadForceFeedback
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymSettingsManager::GetGamepadForceFeedback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymSettingsManager", "GetGamepadForceFeedback");

	Params::GymSettingsManager_GetGamepadForceFeedback Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSettingsManager.GetGamepadX
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGymSettingsManager::GetGamepadX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymSettingsManager", "GetGamepadX");

	Params::GymSettingsManager_GetGamepadX Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSettingsManager.GetGamepadY
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGymSettingsManager::GetGamepadY()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymSettingsManager", "GetGamepadY");

	Params::GymSettingsManager_GetGamepadY Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSettingsManager.GetInvertedX
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymSettingsManager::GetInvertedX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymSettingsManager", "GetInvertedX");

	Params::GymSettingsManager_GetInvertedX Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSettingsManager.GetInvertedY
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymSettingsManager::GetInvertedY()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymSettingsManager", "GetInvertedY");

	Params::GymSettingsManager_GetInvertedY Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSettingsManager.GetMouseX
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGymSettingsManager::GetMouseX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymSettingsManager", "GetMouseX");

	Params::GymSettingsManager_GetMouseX Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSettingsManager.GetMouseY
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGymSettingsManager::GetMouseY()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymSettingsManager", "GetMouseY");

	Params::GymSettingsManager_GetMouseY Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSettingsManager.GetPlayerPerspective
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymSettingsManager::GetPlayerPerspective()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymSettingsManager", "GetPlayerPerspective");

	Params::GymSettingsManager_GetPlayerPerspective Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSettingsManager.GetShowCrosshair
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymSettingsManager::GetShowCrosshair()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymSettingsManager", "GetShowCrosshair");

	Params::GymSettingsManager_GetShowCrosshair Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSettingsManager.GetShowSupermoveIcons
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymSettingsManager::GetShowSupermoveIcons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymSettingsManager", "GetShowSupermoveIcons");

	Params::GymSettingsManager_GetShowSupermoveIcons Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSettingsManager.GetShowSupermoveMeter
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymSettingsManager::GetShowSupermoveMeter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymSettingsManager", "GetShowSupermoveMeter");

	Params::GymSettingsManager_GetShowSupermoveMeter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSettingsManager.GetSoftwareCursorScale
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGymSettingsManager::GetSoftwareCursorScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymSettingsManager", "GetSoftwareCursorScale");

	Params::GymSettingsManager_GetSoftwareCursorScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSettingsManager.GetTextChatEnabled
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymSettingsManager::GetTextChatEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymSettingsManager", "GetTextChatEnabled");

	Params::GymSettingsManager_GetTextChatEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSettingsManager.GetVolumetric
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymSettingsManager::GetVolumetric()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymSettingsManager", "GetVolumetric");

	Params::GymSettingsManager_GetVolumetric Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSpectatorControl.TryEnterSpectatorMode
// (Final, Net, NetReliable, Native, Event, Private, NetServer)

void UGymSpectatorControl::TryEnterSpectatorMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSpectatorControl", "TryEnterSpectatorMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSpectatorGuiControl.GetHideAllWidgets
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymSpectatorGuiControl::GetHideAllWidgets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSpectatorGuiControl", "GetHideAllWidgets");

	Params::GymSpectatorGuiControl_GetHideAllWidgets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSpectatorGuiMainWidget.SetReason
// (Event, Public, BlueprintEvent)
// Parameters:
// ESpectateReason                         ParticipantState                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymSpectatorGuiMainWidget::SetReason(ESpectateReason ParticipantState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSpectatorGuiMainWidget", "SetReason");

	Params::GymSpectatorGuiMainWidget_SetReason Parms{};

	Parms.ParticipantState = ParticipantState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymSpectatorPawn.Client_SetSpectateReason
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// ESpectateReason                         NewSpectateReason                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymSpectatorPawn::Client_SetSpectateReason(ESpectateReason NewSpectateReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSpectatorPawn", "Client_SetSpectateReason");

	Params::GymSpectatorPawn_Client_SetSpectateReason Parms{};

	Parms.NewSpectateReason = NewSpectateReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSpectatorPawn.GetGymController
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGymPlayerController*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGymPlayerController* AGymSpectatorPawn::GetGymController()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSpectatorPawn", "GetGymController");

	Params::GymSpectatorPawn_GetGymController Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSpectatorPawn.OnRep_IsPossessed
// (Final, Native, Protected)

void AGymSpectatorPawn::OnRep_IsPossessed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSpectatorPawn", "OnRep_IsPossessed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSpectatorPawn.TryExitSpectatorMode
// (Final, Net, NetReliable, Native, Event, Private, NetServer)

void AGymSpectatorPawn::TryExitSpectatorMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSpectatorPawn", "TryExitSpectatorMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSpectatorPawn.GetCurrentMovementMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESpectatorMovementMode                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESpectatorMovementMode AGymSpectatorPawn::GetCurrentMovementMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSpectatorPawn", "GetCurrentMovementMode");

	Params::GymSpectatorPawn_GetCurrentMovementMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSpectatorPawn.GetPlayerToFollow
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGymCharacter*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGymCharacter* AGymSpectatorPawn::GetPlayerToFollow() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSpectatorPawn", "GetPlayerToFollow");

	Params::GymSpectatorPawn_GetPlayerToFollow Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSpectatorPawn.GetPlayerToFollowIfNotFreeMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGymCharacter*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGymCharacter* AGymSpectatorPawn::GetPlayerToFollowIfNotFreeMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSpectatorPawn", "GetPlayerToFollowIfNotFreeMode");

	Params::GymSpectatorPawn_GetPlayerToFollowIfNotFreeMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSpinner.HandleCollision
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              Comp                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymSpinner::HandleCollision(class AActor* OtherActor, class UPrimitiveComponent* Comp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSpinner", "HandleCollision");

	Params::GymSpinner_HandleCollision Parms{};

	Parms.OtherActor = OtherActor;
	Parms.Comp = Comp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSpinner.HandleEndOverlap
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymSpinner::HandleEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSpinner", "HandleEndOverlap");

	Params::GymSpinner_HandleEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSpinner.HandleOverlap
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGymSpinner::HandleOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSpinner", "HandleOverlap");

	Params::GymSpinner_HandleOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSpinner.Multi_EndPhysics
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)

void AGymSpinner::Multi_EndPhysics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSpinner", "Multi_EndPhysics");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSpinner.Multi_ImpactSound
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class AGymCharacter*                    Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymSpinner::Multi_ImpactSound(class AGymCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSpinner", "Multi_ImpactSound");

	Params::GymSpinner_Multi_ImpactSound Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSpinner.Multi_StartPhysics
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)

void AGymSpinner::Multi_StartPhysics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSpinner", "Multi_StartPhysics");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSpinner.OnRep_Rotation
// (Final, Native, Protected)

void AGymSpinner::OnRep_Rotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSpinner", "OnRep_Rotation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSprayLocationActor.SetVisibility
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymSprayLocationActor::SetVisibility(bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSprayLocationActor", "SetVisibility");

	Params::GymSprayLocationActor_SetVisibility Parms{};

	Parms.bVisible = bVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymWallSystemUtils.DistanceToWall
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGymShape                        Shape                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Z                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGymWallDirection                       Direction                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGymWallSystemUtils::DistanceToWall(const struct FGymShape& Shape, const int32 X, const int32 Y, const int32 Z, const EGymWallDirection Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymWallSystemUtils", "DistanceToWall");

	Params::GymWallSystemUtils_DistanceToWall Parms{};

	Parms.Shape = std::move(Shape);
	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.Direction = Direction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymWallSystemUtils.IsOutside
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGymShape                        Shape                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Z                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymWallSystemUtils::IsOutside(const struct FGymShape& Shape, const int32 X, const int32 Y, const int32 Z)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymWallSystemUtils", "IsOutside");

	Params::GymWallSystemUtils_IsOutside Parms{};

	Parms.Shape = std::move(Shape);
	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymWallSystemUtils.IsValidLocation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGymShape                        Shape                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Z                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymWallSystemUtils::IsValidLocation(const struct FGymShape& Shape, const int32 X, const int32 Y, const int32 Z)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymWallSystemUtils", "IsValidLocation");

	Params::GymWallSystemUtils_IsValidLocation Parms{};

	Parms.Shape = std::move(Shape);
	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSprintRules.GoalReached
// (Final, Native, Private)
// Parameters:
// class AActor*                           Goal                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGymCharacter*                    PlayerCharacter                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymSprintRules::GoalReached(class AActor* Goal, class AGymCharacter* PlayerCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSprintRules", "GoalReached");

	Params::GymSprintRules_GoalReached Parms{};

	Parms.Goal = Goal;
	Parms.PlayerCharacter = PlayerCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymSteamBPUtils.AddPhotoToSteam
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymSteamBPUtils::AddPhotoToSteam(const class FString& FilePath, int32 Width, int32 Height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymSteamBPUtils", "AddPhotoToSteam");

	Params::GymSteamBPUtils_AddPhotoToSteam Parms{};

	Parms.FilePath = std::move(FilePath);
	Parms.Width = Width;
	Parms.Height = Height;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSteamBPUtils.DoesOwnAppOrDlc
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           AppId                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymSteamBPUtils::DoesOwnAppOrDlc(const class FString& AppId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymSteamBPUtils", "DoesOwnAppOrDlc");

	Params::GymSteamBPUtils_DoesOwnAppOrDlc Parms{};

	Parms.AppId = std::move(AppId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSteamBPUtils.GetSteamName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGymSteamBPUtils::GetSteamName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymSteamBPUtils", "GetSteamName");

	Params::GymSteamBPUtils_GetSteamName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSteamBPUtils.IsDemo
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGymSteamBPUtils::IsDemo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymSteamBPUtils", "IsDemo");

	Params::GymSteamBPUtils_IsDemo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymSteamSessionTicketRequest.Send
// (Final, Native, Public, BlueprintCallable)

void UGymSteamSessionTicketRequest::Send()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSteamSessionTicketRequest", "Send");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction GYMGAME.GymSteamSessionTicketRequest.SteamTicketReceived__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Ticket                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGymSteamSessionTicketRequest::SteamTicketReceived__DelegateSignature(bool Success, const class FString& Ticket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSteamSessionTicketRequest", "SteamTicketReceived__DelegateSignature");

	Params::GymSteamSessionTicketRequest_SteamTicketReceived__DelegateSignature Parms{};

	Parms.Success = Success;
	Parms.Ticket = std::move(Ticket);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.GymSteamSessionTicketRequest.Release
// (Final, Native, Public, BlueprintCallable, Const)

void UGymSteamSessionTicketRequest::Release() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymSteamSessionTicketRequest", "Release");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymTaggedPlayerMarker.Multi_Explode
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void AGymTaggedPlayerMarker::Multi_Explode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymTaggedPlayerMarker", "Multi_Explode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymTaggedPlayerMarker.SetActorToFollow
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class AGymCharacter*                    Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymTaggedPlayerMarker::SetActorToFollow(class AGymCharacter* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymTaggedPlayerMarker", "SetActorToFollow");

	Params::GymTaggedPlayerMarker_SetActorToFollow Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymTaggedPlayerMarker.SetBombTimer
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// float                                   BombTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymTaggedPlayerMarker::SetBombTimer(float BombTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymTaggedPlayerMarker", "SetBombTimer");

	Params::GymTaggedPlayerMarker_SetBombTimer Parms{};

	Parms.BombTime = BombTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymThumbnailCreator.GetThumbnailForActor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class AActor>               Actor                                                  (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* AGymThumbnailCreator::GetThumbnailForActor(TSubclassOf<class AActor> Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymThumbnailCreator", "GetThumbnailForActor");

	Params::GymThumbnailCreator_GetThumbnailForActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymThumbnailCreator.GetThumbnailForSkeletalMesh
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USkeletalMesh*                    Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CacheId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* AGymThumbnailCreator::GetThumbnailForSkeletalMesh(class USkeletalMesh* Mesh, const class FString& CacheId, class UMaterialInterface* Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GymThumbnailCreator", "GetThumbnailForSkeletalMesh");

	Params::GymThumbnailCreator_GetThumbnailForSkeletalMesh Parms{};

	Parms.Mesh = Mesh;
	Parms.CacheId = std::move(CacheId);
	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.GymTickerTriggerAsset.Multi_SetActive
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// bool                                    bActive                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymTickerTriggerAsset::Multi_SetActive(bool bActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymTickerTriggerAsset", "Multi_SetActive");

	Params::GymTickerTriggerAsset_Multi_SetActive Parms{};

	Parms.bActive = bActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymTide.Activate
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void AGymTide::Activate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymTide", "Activate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymTide.CleanUp
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void AGymTide::CleanUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymTide", "CleanUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymTide.Multi_SetSpeed
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// float                                   Speed                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymTide::Multi_SetSpeed(float Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymTide", "Multi_SetSpeed");

	Params::GymTide_Multi_SetSpeed Parms{};

	Parms.Speed = Speed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymTide.PreStart
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// float                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TideSpeed                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOverrideSpeed                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGymTide::PreStart(float Height, const float TideSpeed, bool bOverrideSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymTide", "PreStart");

	Params::GymTide_PreStart Parms{};

	Parms.Height = Height;
	Parms.TideSpeed = TideSpeed;
	Parms.bOverrideSpeed = bOverrideSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GYMGAME.GymTide.UpdateWaterLevel
// (Event, Protected, BlueprintEvent)

void AGymTide::UpdateWaterLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymTide", "UpdateWaterLevel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.GymUtilityAnimator.GetProps
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGymUtilityAnimatorProps   ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FGymUtilityAnimatorProps UGymUtilityAnimator::GetProps() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GymUtilityAnimator", "GetProps");

	Params::GymUtilityAnimator_GetProps Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GYMGAME.HighlightableElement.PlayButtonSound
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UHighlightableElement::PlayButtonSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HighlightableElement", "PlayButtonSound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GYMGAME.HighlightableElement.SetHighlight
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHighlightableElement::SetHighlight(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HighlightableElement", "SetHighlight");

	Params::HighlightableElement_SetHighlight Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GYMGAME.HighlightableElement.SetNotifications
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHighlightableElement::SetNotifications(int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HighlightableElement", "SetNotifications");

	Params::HighlightableElement_SetNotifications Parms{};

	Parms.Count = Count;

	UObject::ProcessEvent(Func, &Parms);
}

}

