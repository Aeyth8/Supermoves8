#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GYMGAME

#include "Basic.hpp"

#include "GYMGAME_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function GYMGAME.EditorGizmo.EnableAxis
// 0x0001 (0x0001 - 0x0000)
struct EditorGizmo_EnableAxis final
{
public:
	ERotationAxis                                 RotationAxis;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EditorGizmo_EnableAxis) == 0x000001, "Wrong alignment on EditorGizmo_EnableAxis");
static_assert(sizeof(EditorGizmo_EnableAxis) == 0x000001, "Wrong size on EditorGizmo_EnableAxis");
static_assert(offsetof(EditorGizmo_EnableAxis, RotationAxis) == 0x000000, "Member 'EditorGizmo_EnableAxis::RotationAxis' has a wrong offset!");

// Function GYMGAME.GymGlobalActionControl.GetActionsFromPage
// 0x0018 (0x0018 - 0x0000)
struct GymGlobalActionControl_GetActionsFromPage final
{
public:
	int32                                         Page;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGymMetaAction*>                 ReturnValue;                                       // 0x0008(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGlobalActionControl_GetActionsFromPage) == 0x000008, "Wrong alignment on GymGlobalActionControl_GetActionsFromPage");
static_assert(sizeof(GymGlobalActionControl_GetActionsFromPage) == 0x000018, "Wrong size on GymGlobalActionControl_GetActionsFromPage");
static_assert(offsetof(GymGlobalActionControl_GetActionsFromPage, Page) == 0x000000, "Member 'GymGlobalActionControl_GetActionsFromPage::Page' has a wrong offset!");
static_assert(offsetof(GymGlobalActionControl_GetActionsFromPage, ReturnValue) == 0x000008, "Member 'GymGlobalActionControl_GetActionsFromPage::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGlobalActionControl.GetAllActions
// 0x0010 (0x0010 - 0x0000)
struct GymGlobalActionControl_GetAllActions final
{
public:
	TArray<class UGymMetaAction*>                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGlobalActionControl_GetAllActions) == 0x000008, "Wrong alignment on GymGlobalActionControl_GetAllActions");
static_assert(sizeof(GymGlobalActionControl_GetAllActions) == 0x000010, "Wrong size on GymGlobalActionControl_GetAllActions");
static_assert(offsetof(GymGlobalActionControl_GetAllActions, ReturnValue) == 0x000000, "Member 'GymGlobalActionControl_GetAllActions::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGlobalActionControl.GetPageData
// 0x0040 (0x0040 - 0x0000)
struct GymGlobalActionControl_GetPageData final
{
public:
	int32                                         Page;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymActionContainer                    OutActionData;                                     // 0x0008(0x0030)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymGlobalActionControl_GetPageData) == 0x000008, "Wrong alignment on GymGlobalActionControl_GetPageData");
static_assert(sizeof(GymGlobalActionControl_GetPageData) == 0x000040, "Wrong size on GymGlobalActionControl_GetPageData");
static_assert(offsetof(GymGlobalActionControl_GetPageData, Page) == 0x000000, "Member 'GymGlobalActionControl_GetPageData::Page' has a wrong offset!");
static_assert(offsetof(GymGlobalActionControl_GetPageData, OutActionData) == 0x000008, "Member 'GymGlobalActionControl_GetPageData::OutActionData' has a wrong offset!");
static_assert(offsetof(GymGlobalActionControl_GetPageData, ReturnValue) == 0x000038, "Member 'GymGlobalActionControl_GetPageData::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGlobalActionControl.GetPageNum
// 0x0004 (0x0004 - 0x0000)
struct GymGlobalActionControl_GetPageNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGlobalActionControl_GetPageNum) == 0x000004, "Wrong alignment on GymGlobalActionControl_GetPageNum");
static_assert(sizeof(GymGlobalActionControl_GetPageNum) == 0x000004, "Wrong size on GymGlobalActionControl_GetPageNum");
static_assert(offsetof(GymGlobalActionControl_GetPageNum, ReturnValue) == 0x000000, "Member 'GymGlobalActionControl_GetPageNum::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymAchievements.SetAchievementWithEnum
// 0x0002 (0x0002 - 0x0000)
struct GymAchievements_SetAchievementWithEnum final
{
public:
	EGymAchievement                               Achievement;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymAchievements_SetAchievementWithEnum) == 0x000001, "Wrong alignment on GymAchievements_SetAchievementWithEnum");
static_assert(sizeof(GymAchievements_SetAchievementWithEnum) == 0x000002, "Wrong size on GymAchievements_SetAchievementWithEnum");
static_assert(offsetof(GymAchievements_SetAchievementWithEnum, Achievement) == 0x000000, "Member 'GymAchievements_SetAchievementWithEnum::Achievement' has a wrong offset!");
static_assert(offsetof(GymAchievements_SetAchievementWithEnum, ReturnValue) == 0x000001, "Member 'GymAchievements_SetAchievementWithEnum::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymAchievements.SetAchievementWithString
// 0x0018 (0x0018 - 0x0000)
struct GymAchievements_SetAchievementWithString final
{
public:
	class FString                                 AchievementID;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymAchievements_SetAchievementWithString) == 0x000008, "Wrong alignment on GymAchievements_SetAchievementWithString");
static_assert(sizeof(GymAchievements_SetAchievementWithString) == 0x000018, "Wrong size on GymAchievements_SetAchievementWithString");
static_assert(offsetof(GymAchievements_SetAchievementWithString, AchievementID) == 0x000000, "Member 'GymAchievements_SetAchievementWithString::AchievementID' has a wrong offset!");
static_assert(offsetof(GymAchievements_SetAchievementWithString, ReturnValue) == 0x000010, "Member 'GymAchievements_SetAchievementWithString::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymActionInputWidget.SetInput
// 0x0008 (0x0008 - 0x0000)
struct GymActionInputWidget_SetInput final
{
public:
	class FName                                   Input;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymActionInputWidget_SetInput) == 0x000004, "Wrong alignment on GymActionInputWidget_SetInput");
static_assert(sizeof(GymActionInputWidget_SetInput) == 0x000008, "Wrong size on GymActionInputWidget_SetInput");
static_assert(offsetof(GymActionInputWidget_SetInput, Input) == 0x000000, "Member 'GymActionInputWidget_SetInput::Input' has a wrong offset!");

// Function GYMGAME.GymGlobalTickerEventControl.Client_AddCustomMessage
// 0x0010 (0x0010 - 0x0000)
struct GymGlobalTickerEventControl_Client_AddCustomMessage final
{
public:
	TSubclassOf<class UGymGuiTickerMessageWidget> Message;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETickerPosition                               Position;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymGlobalTickerEventControl_Client_AddCustomMessage) == 0x000008, "Wrong alignment on GymGlobalTickerEventControl_Client_AddCustomMessage");
static_assert(sizeof(GymGlobalTickerEventControl_Client_AddCustomMessage) == 0x000010, "Wrong size on GymGlobalTickerEventControl_Client_AddCustomMessage");
static_assert(offsetof(GymGlobalTickerEventControl_Client_AddCustomMessage, Message) == 0x000000, "Member 'GymGlobalTickerEventControl_Client_AddCustomMessage::Message' has a wrong offset!");
static_assert(offsetof(GymGlobalTickerEventControl_Client_AddCustomMessage, Position) == 0x000008, "Member 'GymGlobalTickerEventControl_Client_AddCustomMessage::Position' has a wrong offset!");

// Function GYMGAME.GymGlobalTickerEventControl.Client_AddMessage
// 0x0058 (0x0058 - 0x0000)
struct GymGlobalTickerEventControl_Client_AddMessage final
{
public:
	struct FTickerSettingsStruct                  Settings;                                          // 0x0000(0x0058)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGlobalTickerEventControl_Client_AddMessage) == 0x000008, "Wrong alignment on GymGlobalTickerEventControl_Client_AddMessage");
static_assert(sizeof(GymGlobalTickerEventControl_Client_AddMessage) == 0x000058, "Wrong size on GymGlobalTickerEventControl_Client_AddMessage");
static_assert(offsetof(GymGlobalTickerEventControl_Client_AddMessage, Settings) == 0x000000, "Member 'GymGlobalTickerEventControl_Client_AddMessage::Settings' has a wrong offset!");

// Function GYMGAME.GymGlobalTickerEventControl.Client_RemoveMessage
// 0x0008 (0x0008 - 0x0000)
struct GymGlobalTickerEventControl_Client_RemoveMessage final
{
public:
	class FName                                   MessageId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGlobalTickerEventControl_Client_RemoveMessage) == 0x000004, "Wrong alignment on GymGlobalTickerEventControl_Client_RemoveMessage");
static_assert(sizeof(GymGlobalTickerEventControl_Client_RemoveMessage) == 0x000008, "Wrong size on GymGlobalTickerEventControl_Client_RemoveMessage");
static_assert(offsetof(GymGlobalTickerEventControl_Client_RemoveMessage, MessageId) == 0x000000, "Member 'GymGlobalTickerEventControl_Client_RemoveMessage::MessageId' has a wrong offset!");

// Function GYMGAME.GymMetaAction.CanPerform
// 0x0001 (0x0001 - 0x0000)
struct GymMetaAction_CanPerform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMetaAction_CanPerform) == 0x000001, "Wrong alignment on GymMetaAction_CanPerform");
static_assert(sizeof(GymMetaAction_CanPerform) == 0x000001, "Wrong size on GymMetaAction_CanPerform");
static_assert(offsetof(GymMetaAction_CanPerform, ReturnValue) == 0x000000, "Member 'GymMetaAction_CanPerform::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymMetaAction.GetActionName
// 0x0018 (0x0018 - 0x0000)
struct GymMetaAction_GetActionName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMetaAction_GetActionName) == 0x000008, "Wrong alignment on GymMetaAction_GetActionName");
static_assert(sizeof(GymMetaAction_GetActionName) == 0x000018, "Wrong size on GymMetaAction_GetActionName");
static_assert(offsetof(GymMetaAction_GetActionName, ReturnValue) == 0x000000, "Member 'GymMetaAction_GetActionName::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGlobalChatControl.Client_ReceiveMessage
// 0x0020 (0x0020 - 0x0000)
struct GymGlobalChatControl_Client_ReceiveMessage final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGlobalChatControl_Client_ReceiveMessage) == 0x000008, "Wrong alignment on GymGlobalChatControl_Client_ReceiveMessage");
static_assert(sizeof(GymGlobalChatControl_Client_ReceiveMessage) == 0x000020, "Wrong size on GymGlobalChatControl_Client_ReceiveMessage");
static_assert(offsetof(GymGlobalChatControl_Client_ReceiveMessage, PlayerName) == 0x000000, "Member 'GymGlobalChatControl_Client_ReceiveMessage::PlayerName' has a wrong offset!");
static_assert(offsetof(GymGlobalChatControl_Client_ReceiveMessage, Message) == 0x000010, "Member 'GymGlobalChatControl_Client_ReceiveMessage::Message' has a wrong offset!");

// Function GYMGAME.GymGlobalChatControl.Server_SendMessage
// 0x0020 (0x0020 - 0x0000)
struct GymGlobalChatControl_Server_SendMessage final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGlobalChatControl_Server_SendMessage) == 0x000008, "Wrong alignment on GymGlobalChatControl_Server_SendMessage");
static_assert(sizeof(GymGlobalChatControl_Server_SendMessage) == 0x000020, "Wrong size on GymGlobalChatControl_Server_SendMessage");
static_assert(offsetof(GymGlobalChatControl_Server_SendMessage, PlayerName) == 0x000000, "Member 'GymGlobalChatControl_Server_SendMessage::PlayerName' has a wrong offset!");
static_assert(offsetof(GymGlobalChatControl_Server_SendMessage, Message) == 0x000010, "Member 'GymGlobalChatControl_Server_SendMessage::Message' has a wrong offset!");

// Function GYMGAME.GymAnimationControl.GetHandsHidden
// 0x0001 (0x0001 - 0x0000)
struct GymAnimationControl_GetHandsHidden final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymAnimationControl_GetHandsHidden) == 0x000001, "Wrong alignment on GymAnimationControl_GetHandsHidden");
static_assert(sizeof(GymAnimationControl_GetHandsHidden) == 0x000001, "Wrong size on GymAnimationControl_GetHandsHidden");
static_assert(offsetof(GymAnimationControl_GetHandsHidden, ReturnValue) == 0x000000, "Member 'GymAnimationControl_GetHandsHidden::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymAnimationControl.SetFirstPersonBody
// 0x0001 (0x0001 - 0x0000)
struct GymAnimationControl_SetFirstPersonBody final
{
public:
	bool                                          Force;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymAnimationControl_SetFirstPersonBody) == 0x000001, "Wrong alignment on GymAnimationControl_SetFirstPersonBody");
static_assert(sizeof(GymAnimationControl_SetFirstPersonBody) == 0x000001, "Wrong size on GymAnimationControl_SetFirstPersonBody");
static_assert(offsetof(GymAnimationControl_SetFirstPersonBody, Force) == 0x000000, "Member 'GymAnimationControl_SetFirstPersonBody::Force' has a wrong offset!");

// Function GYMGAME.GymAnimationControl.SetFPHideAllArms
// 0x0001 (0x0001 - 0x0000)
struct GymAnimationControl_SetFPHideAllArms final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymAnimationControl_SetFPHideAllArms) == 0x000001, "Wrong alignment on GymAnimationControl_SetFPHideAllArms");
static_assert(sizeof(GymAnimationControl_SetFPHideAllArms) == 0x000001, "Wrong size on GymAnimationControl_SetFPHideAllArms");
static_assert(offsetof(GymAnimationControl_SetFPHideAllArms, State) == 0x000000, "Member 'GymAnimationControl_SetFPHideAllArms::State' has a wrong offset!");

// Function GYMGAME.GymAnimationControl.SetFPHideLegs
// 0x0001 (0x0001 - 0x0000)
struct GymAnimationControl_SetFPHideLegs final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymAnimationControl_SetFPHideLegs) == 0x000001, "Wrong alignment on GymAnimationControl_SetFPHideLegs");
static_assert(sizeof(GymAnimationControl_SetFPHideLegs) == 0x000001, "Wrong size on GymAnimationControl_SetFPHideLegs");
static_assert(offsetof(GymAnimationControl_SetFPHideLegs, State) == 0x000000, "Member 'GymAnimationControl_SetFPHideLegs::State' has a wrong offset!");

// Function GYMGAME.GymAnimationControl.SetFPHideTorso
// 0x0001 (0x0001 - 0x0000)
struct GymAnimationControl_SetFPHideTorso final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymAnimationControl_SetFPHideTorso) == 0x000001, "Wrong alignment on GymAnimationControl_SetFPHideTorso");
static_assert(sizeof(GymAnimationControl_SetFPHideTorso) == 0x000001, "Wrong size on GymAnimationControl_SetFPHideTorso");
static_assert(offsetof(GymAnimationControl_SetFPHideTorso, State) == 0x000000, "Member 'GymAnimationControl_SetFPHideTorso::State' has a wrong offset!");

// Function GYMGAME.GymAnimationControl.SetOverlayMaterial
// 0x0008 (0x0008 - 0x0000)
struct GymAnimationControl_SetOverlayMaterial final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymAnimationControl_SetOverlayMaterial) == 0x000008, "Wrong alignment on GymAnimationControl_SetOverlayMaterial");
static_assert(sizeof(GymAnimationControl_SetOverlayMaterial) == 0x000008, "Wrong size on GymAnimationControl_SetOverlayMaterial");
static_assert(offsetof(GymAnimationControl_SetOverlayMaterial, Material) == 0x000000, "Member 'GymAnimationControl_SetOverlayMaterial::Material' has a wrong offset!");

// Function GYMGAME.GymAnimationControl.SetThirdPersonBody
// 0x0001 (0x0001 - 0x0000)
struct GymAnimationControl_SetThirdPersonBody final
{
public:
	bool                                          Force;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymAnimationControl_SetThirdPersonBody) == 0x000001, "Wrong alignment on GymAnimationControl_SetThirdPersonBody");
static_assert(sizeof(GymAnimationControl_SetThirdPersonBody) == 0x000001, "Wrong size on GymAnimationControl_SetThirdPersonBody");
static_assert(offsetof(GymAnimationControl_SetThirdPersonBody, Force) == 0x000000, "Member 'GymAnimationControl_SetThirdPersonBody::Force' has a wrong offset!");

// Function GYMGAME.GymAnimationControl.GetUtilAnimator
// 0x0008 (0x0008 - 0x0000)
struct GymAnimationControl_GetUtilAnimator final
{
public:
	class UGymUtilityAnimator*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymAnimationControl_GetUtilAnimator) == 0x000008, "Wrong alignment on GymAnimationControl_GetUtilAnimator");
static_assert(sizeof(GymAnimationControl_GetUtilAnimator) == 0x000008, "Wrong size on GymAnimationControl_GetUtilAnimator");
static_assert(offsetof(GymAnimationControl_GetUtilAnimator, ReturnValue) == 0x000000, "Member 'GymAnimationControl_GetUtilAnimator::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiMetaWidget.BPHighlightWidget
// 0x0008 (0x0008 - 0x0000)
struct GymGuiMetaWidget_BPHighlightWidget final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiMetaWidget_BPHighlightWidget) == 0x000008, "Wrong alignment on GymGuiMetaWidget_BPHighlightWidget");
static_assert(sizeof(GymGuiMetaWidget_BPHighlightWidget) == 0x000008, "Wrong size on GymGuiMetaWidget_BPHighlightWidget");
static_assert(offsetof(GymGuiMetaWidget_BPHighlightWidget, Widget) == 0x000000, "Member 'GymGuiMetaWidget_BPHighlightWidget::Widget' has a wrong offset!");

// Function GYMGAME.GymGuiMetaWidget.DoesAnotherWidgetHavePriority
// 0x0001 (0x0001 - 0x0000)
struct GymGuiMetaWidget_DoesAnotherWidgetHavePriority final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiMetaWidget_DoesAnotherWidgetHavePriority) == 0x000001, "Wrong alignment on GymGuiMetaWidget_DoesAnotherWidgetHavePriority");
static_assert(sizeof(GymGuiMetaWidget_DoesAnotherWidgetHavePriority) == 0x000001, "Wrong size on GymGuiMetaWidget_DoesAnotherWidgetHavePriority");
static_assert(offsetof(GymGuiMetaWidget_DoesAnotherWidgetHavePriority, ReturnValue) == 0x000000, "Member 'GymGuiMetaWidget_DoesAnotherWidgetHavePriority::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiMetaWidget.FakeClickHighlightedTextFieldGamepad
// 0x0001 (0x0001 - 0x0000)
struct GymGuiMetaWidget_FakeClickHighlightedTextFieldGamepad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiMetaWidget_FakeClickHighlightedTextFieldGamepad) == 0x000001, "Wrong alignment on GymGuiMetaWidget_FakeClickHighlightedTextFieldGamepad");
static_assert(sizeof(GymGuiMetaWidget_FakeClickHighlightedTextFieldGamepad) == 0x000001, "Wrong size on GymGuiMetaWidget_FakeClickHighlightedTextFieldGamepad");
static_assert(offsetof(GymGuiMetaWidget_FakeClickHighlightedTextFieldGamepad, ReturnValue) == 0x000000, "Member 'GymGuiMetaWidget_FakeClickHighlightedTextFieldGamepad::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiMetaWidget.GamepadUINavigate
// 0x0020 (0x0020 - 0x0000)
struct GymGuiMetaWidget_GamepadUINavigate final
{
public:
	EUINavDirection                               Direction;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        Widgets;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymGuiMetaWidget_GamepadUINavigate) == 0x000008, "Wrong alignment on GymGuiMetaWidget_GamepadUINavigate");
static_assert(sizeof(GymGuiMetaWidget_GamepadUINavigate) == 0x000020, "Wrong size on GymGuiMetaWidget_GamepadUINavigate");
static_assert(offsetof(GymGuiMetaWidget_GamepadUINavigate, Direction) == 0x000000, "Member 'GymGuiMetaWidget_GamepadUINavigate::Direction' has a wrong offset!");
static_assert(offsetof(GymGuiMetaWidget_GamepadUINavigate, Widgets) == 0x000008, "Member 'GymGuiMetaWidget_GamepadUINavigate::Widgets' has a wrong offset!");
static_assert(offsetof(GymGuiMetaWidget_GamepadUINavigate, ReturnValue) == 0x000018, "Member 'GymGuiMetaWidget_GamepadUINavigate::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiMetaWidget.GetInputPriority
// 0x0004 (0x0004 - 0x0000)
struct GymGuiMetaWidget_GetInputPriority final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiMetaWidget_GetInputPriority) == 0x000004, "Wrong alignment on GymGuiMetaWidget_GetInputPriority");
static_assert(sizeof(GymGuiMetaWidget_GetInputPriority) == 0x000004, "Wrong size on GymGuiMetaWidget_GetInputPriority");
static_assert(offsetof(GymGuiMetaWidget_GetInputPriority, ReturnValue) == 0x000000, "Member 'GymGuiMetaWidget_GetInputPriority::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiMetaWidget.HighlightWidget
// 0x0010 (0x0010 - 0x0000)
struct GymGuiMetaWidget_HighlightWidget final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIHoverRequirement                           HoverRequirement;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymGuiMetaWidget_HighlightWidget) == 0x000008, "Wrong alignment on GymGuiMetaWidget_HighlightWidget");
static_assert(sizeof(GymGuiMetaWidget_HighlightWidget) == 0x000010, "Wrong size on GymGuiMetaWidget_HighlightWidget");
static_assert(offsetof(GymGuiMetaWidget_HighlightWidget, Widget) == 0x000000, "Member 'GymGuiMetaWidget_HighlightWidget::Widget' has a wrong offset!");
static_assert(offsetof(GymGuiMetaWidget_HighlightWidget, HoverRequirement) == 0x000008, "Member 'GymGuiMetaWidget_HighlightWidget::HoverRequirement' has a wrong offset!");

// Function GYMGAME.GymGuiMetaWidget.IsOpenVisibleAndHasPriority
// 0x0001 (0x0001 - 0x0000)
struct GymGuiMetaWidget_IsOpenVisibleAndHasPriority final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiMetaWidget_IsOpenVisibleAndHasPriority) == 0x000001, "Wrong alignment on GymGuiMetaWidget_IsOpenVisibleAndHasPriority");
static_assert(sizeof(GymGuiMetaWidget_IsOpenVisibleAndHasPriority) == 0x000001, "Wrong size on GymGuiMetaWidget_IsOpenVisibleAndHasPriority");
static_assert(offsetof(GymGuiMetaWidget_IsOpenVisibleAndHasPriority, ReturnValue) == 0x000000, "Member 'GymGuiMetaWidget_IsOpenVisibleAndHasPriority::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiMetaWidget.IsWidgetVisible
// 0x0010 (0x0010 - 0x0000)
struct GymGuiMetaWidget_IsWidgetVisible final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymGuiMetaWidget_IsWidgetVisible) == 0x000008, "Wrong alignment on GymGuiMetaWidget_IsWidgetVisible");
static_assert(sizeof(GymGuiMetaWidget_IsWidgetVisible) == 0x000010, "Wrong size on GymGuiMetaWidget_IsWidgetVisible");
static_assert(offsetof(GymGuiMetaWidget_IsWidgetVisible, Widget) == 0x000000, "Member 'GymGuiMetaWidget_IsWidgetVisible::Widget' has a wrong offset!");
static_assert(offsetof(GymGuiMetaWidget_IsWidgetVisible, ReturnValue) == 0x000008, "Member 'GymGuiMetaWidget_IsWidgetVisible::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiMetaWidget.SetInputPriority
// 0x0004 (0x0004 - 0x0000)
struct GymGuiMetaWidget_SetInputPriority final
{
public:
	int32                                         NewPriority;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiMetaWidget_SetInputPriority) == 0x000004, "Wrong alignment on GymGuiMetaWidget_SetInputPriority");
static_assert(sizeof(GymGuiMetaWidget_SetInputPriority) == 0x000004, "Wrong size on GymGuiMetaWidget_SetInputPriority");
static_assert(offsetof(GymGuiMetaWidget_SetInputPriority, NewPriority) == 0x000000, "Member 'GymGuiMetaWidget_SetInputPriority::NewPriority' has a wrong offset!");

// Function GYMGAME.GymGuiMetaWidget.SimulateGamepadUINavigate
// 0x0020 (0x0020 - 0x0000)
struct GymGuiMetaWidget_SimulateGamepadUINavigate final
{
public:
	EUINavDirection                               Direction;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        Widgets;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UWidget*                                NextWidget;                                        // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiMetaWidget_SimulateGamepadUINavigate) == 0x000008, "Wrong alignment on GymGuiMetaWidget_SimulateGamepadUINavigate");
static_assert(sizeof(GymGuiMetaWidget_SimulateGamepadUINavigate) == 0x000020, "Wrong size on GymGuiMetaWidget_SimulateGamepadUINavigate");
static_assert(offsetof(GymGuiMetaWidget_SimulateGamepadUINavigate, Direction) == 0x000000, "Member 'GymGuiMetaWidget_SimulateGamepadUINavigate::Direction' has a wrong offset!");
static_assert(offsetof(GymGuiMetaWidget_SimulateGamepadUINavigate, Widgets) == 0x000008, "Member 'GymGuiMetaWidget_SimulateGamepadUINavigate::Widgets' has a wrong offset!");
static_assert(offsetof(GymGuiMetaWidget_SimulateGamepadUINavigate, NextWidget) == 0x000018, "Member 'GymGuiMetaWidget_SimulateGamepadUINavigate::NextWidget' has a wrong offset!");

// Function GYMGAME.GymGuiMetaWidget.IsOpen
// 0x0001 (0x0001 - 0x0000)
struct GymGuiMetaWidget_IsOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiMetaWidget_IsOpen) == 0x000001, "Wrong alignment on GymGuiMetaWidget_IsOpen");
static_assert(sizeof(GymGuiMetaWidget_IsOpen) == 0x000001, "Wrong size on GymGuiMetaWidget_IsOpen");
static_assert(offsetof(GymGuiMetaWidget_IsOpen, ReturnValue) == 0x000000, "Member 'GymGuiMetaWidget_IsOpen::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymBaseGameMode.GetRuleInstance
// 0x0008 (0x0008 - 0x0000)
struct GymBaseGameMode_GetRuleInstance final
{
public:
	class UGymRules*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymBaseGameMode_GetRuleInstance) == 0x000008, "Wrong alignment on GymBaseGameMode_GetRuleInstance");
static_assert(sizeof(GymBaseGameMode_GetRuleInstance) == 0x000008, "Wrong size on GymBaseGameMode_GetRuleInstance");
static_assert(offsetof(GymBaseGameMode_GetRuleInstance, ReturnValue) == 0x000000, "Member 'GymBaseGameMode_GetRuleInstance::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymBaseGameMode.IsCurrentlyInCareer
// 0x0001 (0x0001 - 0x0000)
struct GymBaseGameMode_IsCurrentlyInCareer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymBaseGameMode_IsCurrentlyInCareer) == 0x000001, "Wrong alignment on GymBaseGameMode_IsCurrentlyInCareer");
static_assert(sizeof(GymBaseGameMode_IsCurrentlyInCareer) == 0x000001, "Wrong size on GymBaseGameMode_IsCurrentlyInCareer");
static_assert(offsetof(GymBaseGameMode_IsCurrentlyInCareer, ReturnValue) == 0x000000, "Member 'GymBaseGameMode_IsCurrentlyInCareer::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymBaseGameMode.PauseGymGame
// 0x0008 (0x0008 - 0x0000)
struct GymBaseGameMode_PauseGymGame final
{
public:
	class UObject*                                Pauser;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymBaseGameMode_PauseGymGame) == 0x000008, "Wrong alignment on GymBaseGameMode_PauseGymGame");
static_assert(sizeof(GymBaseGameMode_PauseGymGame) == 0x000008, "Wrong size on GymBaseGameMode_PauseGymGame");
static_assert(offsetof(GymBaseGameMode_PauseGymGame, Pauser) == 0x000000, "Member 'GymBaseGameMode_PauseGymGame::Pauser' has a wrong offset!");

// Function GYMGAME.GymBaseGameMode.UnPauseGymGame
// 0x0010 (0x0010 - 0x0000)
struct GymBaseGameMode_UnPauseGymGame final
{
public:
	class UObject*                                Pauser;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymBaseGameMode_UnPauseGymGame) == 0x000008, "Wrong alignment on GymBaseGameMode_UnPauseGymGame");
static_assert(sizeof(GymBaseGameMode_UnPauseGymGame) == 0x000010, "Wrong size on GymBaseGameMode_UnPauseGymGame");
static_assert(offsetof(GymBaseGameMode_UnPauseGymGame, Pauser) == 0x000000, "Member 'GymBaseGameMode_UnPauseGymGame::Pauser' has a wrong offset!");
static_assert(offsetof(GymBaseGameMode_UnPauseGymGame, bForce) == 0x000008, "Member 'GymBaseGameMode_UnPauseGymGame::bForce' has a wrong offset!");

// Function GYMGAME.GymBaseGameMode.SendRaceStartAnalytics
// 0x0018 (0x0018 - 0x0000)
struct GymBaseGameMode_SendRaceStartAnalytics final
{
public:
	struct FRuleStartInfo                         Info;                                              // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymBaseGameMode_SendRaceStartAnalytics) == 0x000008, "Wrong alignment on GymBaseGameMode_SendRaceStartAnalytics");
static_assert(sizeof(GymBaseGameMode_SendRaceStartAnalytics) == 0x000018, "Wrong size on GymBaseGameMode_SendRaceStartAnalytics");
static_assert(offsetof(GymBaseGameMode_SendRaceStartAnalytics, Info) == 0x000000, "Member 'GymBaseGameMode_SendRaceStartAnalytics::Info' has a wrong offset!");

// Function GYMGAME.GymRules.CalculateTournamentScoreForStanding
// 0x0008 (0x0008 - 0x0000)
struct GymRules_CalculateTournamentScoreForStanding final
{
public:
	int32                                         Standing;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRules_CalculateTournamentScoreForStanding) == 0x000004, "Wrong alignment on GymRules_CalculateTournamentScoreForStanding");
static_assert(sizeof(GymRules_CalculateTournamentScoreForStanding) == 0x000008, "Wrong size on GymRules_CalculateTournamentScoreForStanding");
static_assert(offsetof(GymRules_CalculateTournamentScoreForStanding, Standing) == 0x000000, "Member 'GymRules_CalculateTournamentScoreForStanding::Standing' has a wrong offset!");
static_assert(offsetof(GymRules_CalculateTournamentScoreForStanding, ReturnValue) == 0x000004, "Member 'GymRules_CalculateTournamentScoreForStanding::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymRules.GetGameModeId
// 0x0010 (0x0010 - 0x0000)
struct GymRules_GetGameModeId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRules_GetGameModeId) == 0x000008, "Wrong alignment on GymRules_GetGameModeId");
static_assert(sizeof(GymRules_GetGameModeId) == 0x000010, "Wrong size on GymRules_GetGameModeId");
static_assert(offsetof(GymRules_GetGameModeId, ReturnValue) == 0x000000, "Member 'GymRules_GetGameModeId::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiGlobalMetaWidget.OnWindowFocusChanged
// 0x0001 (0x0001 - 0x0000)
struct GymGuiGlobalMetaWidget_OnWindowFocusChanged final
{
public:
	bool                                          bHasFocus;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiGlobalMetaWidget_OnWindowFocusChanged) == 0x000001, "Wrong alignment on GymGuiGlobalMetaWidget_OnWindowFocusChanged");
static_assert(sizeof(GymGuiGlobalMetaWidget_OnWindowFocusChanged) == 0x000001, "Wrong size on GymGuiGlobalMetaWidget_OnWindowFocusChanged");
static_assert(offsetof(GymGuiGlobalMetaWidget_OnWindowFocusChanged, bHasFocus) == 0x000000, "Member 'GymGuiGlobalMetaWidget_OnWindowFocusChanged::bHasFocus' has a wrong offset!");

// Function GYMGAME.GymCareerRules.BP_SetupEndCutscene
// 0x0008 (0x0008 - 0x0000)
struct GymCareerRules_BP_SetupEndCutscene final
{
public:
	class ALevelSequenceActor*                    SequenceActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCareerRules_BP_SetupEndCutscene) == 0x000008, "Wrong alignment on GymCareerRules_BP_SetupEndCutscene");
static_assert(sizeof(GymCareerRules_BP_SetupEndCutscene) == 0x000008, "Wrong size on GymCareerRules_BP_SetupEndCutscene");
static_assert(offsetof(GymCareerRules_BP_SetupEndCutscene, SequenceActor) == 0x000000, "Member 'GymCareerRules_BP_SetupEndCutscene::SequenceActor' has a wrong offset!");

// Function GYMGAME.GymCareerRules.BP_SetupStartCutscene
// 0x0008 (0x0008 - 0x0000)
struct GymCareerRules_BP_SetupStartCutscene final
{
public:
	class ALevelSequenceActor*                    SequenceActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCareerRules_BP_SetupStartCutscene) == 0x000008, "Wrong alignment on GymCareerRules_BP_SetupStartCutscene");
static_assert(sizeof(GymCareerRules_BP_SetupStartCutscene) == 0x000008, "Wrong size on GymCareerRules_BP_SetupStartCutscene");
static_assert(offsetof(GymCareerRules_BP_SetupStartCutscene, SequenceActor) == 0x000000, "Member 'GymCareerRules_BP_SetupStartCutscene::SequenceActor' has a wrong offset!");

// Function GYMGAME.GymCareerRules.SpawnActorOfClass
// 0x0080 (0x0080 - 0x0000)
struct GymCareerRules_SpawnActorOfClass final
{
public:
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymCareerRules_SpawnActorOfClass) == 0x000010, "Wrong alignment on GymCareerRules_SpawnActorOfClass");
static_assert(sizeof(GymCareerRules_SpawnActorOfClass) == 0x000080, "Wrong size on GymCareerRules_SpawnActorOfClass");
static_assert(offsetof(GymCareerRules_SpawnActorOfClass, ActorClass) == 0x000000, "Member 'GymCareerRules_SpawnActorOfClass::ActorClass' has a wrong offset!");
static_assert(offsetof(GymCareerRules_SpawnActorOfClass, Transform) == 0x000010, "Member 'GymCareerRules_SpawnActorOfClass::Transform' has a wrong offset!");
static_assert(offsetof(GymCareerRules_SpawnActorOfClass, ReturnValue) == 0x000070, "Member 'GymCareerRules_SpawnActorOfClass::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCareerRules.GetCareerName
// 0x0010 (0x0010 - 0x0000)
struct GymCareerRules_GetCareerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCareerRules_GetCareerName) == 0x000008, "Wrong alignment on GymCareerRules_GetCareerName");
static_assert(sizeof(GymCareerRules_GetCareerName) == 0x000010, "Wrong size on GymCareerRules_GetCareerName");
static_assert(offsetof(GymCareerRules_GetCareerName, ReturnValue) == 0x000000, "Member 'GymCareerRules_GetCareerName::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymBasicsRules.GoalReached
// 0x0010 (0x0010 - 0x0000)
struct GymBasicsRules_GoalReached final
{
public:
	class AActor*                                 Goal;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGymCharacter*                          PlayerCharacter;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymBasicsRules_GoalReached) == 0x000008, "Wrong alignment on GymBasicsRules_GoalReached");
static_assert(sizeof(GymBasicsRules_GoalReached) == 0x000010, "Wrong size on GymBasicsRules_GoalReached");
static_assert(offsetof(GymBasicsRules_GoalReached, Goal) == 0x000000, "Member 'GymBasicsRules_GoalReached::Goal' has a wrong offset!");
static_assert(offsetof(GymBasicsRules_GoalReached, PlayerCharacter) == 0x000008, "Member 'GymBasicsRules_GoalReached::PlayerCharacter' has a wrong offset!");

// DelegateFunction GYMGAME.GymGuiAssetPropertyEditorWidget.OnPropertyValueChanged__DelegateSignature
// 0x0048 (0x0048 - 0x0000)
struct GymGuiAssetPropertyEditorWidget_OnPropertyValueChanged__DelegateSignature final
{
public:
	struct FGymPropertyValues                     PropertyValue;                                     // 0x0000(0x0048)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiAssetPropertyEditorWidget_OnPropertyValueChanged__DelegateSignature) == 0x000008, "Wrong alignment on GymGuiAssetPropertyEditorWidget_OnPropertyValueChanged__DelegateSignature");
static_assert(sizeof(GymGuiAssetPropertyEditorWidget_OnPropertyValueChanged__DelegateSignature) == 0x000048, "Wrong size on GymGuiAssetPropertyEditorWidget_OnPropertyValueChanged__DelegateSignature");
static_assert(offsetof(GymGuiAssetPropertyEditorWidget_OnPropertyValueChanged__DelegateSignature, PropertyValue) == 0x000000, "Member 'GymGuiAssetPropertyEditorWidget_OnPropertyValueChanged__DelegateSignature::PropertyValue' has a wrong offset!");

// Function GYMGAME.GymGuiAssetPropertyEditorWidget.UpdateProperty
// 0x00D8 (0x00D8 - 0x0000)
struct GymGuiAssetPropertyEditorWidget_UpdateProperty final
{
public:
	struct FGymProperty                           Property;                                          // 0x0000(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiAssetPropertyEditorWidget_UpdateProperty) == 0x000008, "Wrong alignment on GymGuiAssetPropertyEditorWidget_UpdateProperty");
static_assert(sizeof(GymGuiAssetPropertyEditorWidget_UpdateProperty) == 0x0000D8, "Wrong size on GymGuiAssetPropertyEditorWidget_UpdateProperty");
static_assert(offsetof(GymGuiAssetPropertyEditorWidget_UpdateProperty, Property) == 0x000000, "Member 'GymGuiAssetPropertyEditorWidget_UpdateProperty::Property' has a wrong offset!");

// Function GYMGAME.GymMetaRuleMusicState.Client_OnTriggerAudio
// 0x0008 (0x0008 - 0x0000)
struct GymMetaRuleMusicState_Client_OnTriggerAudio final
{
public:
	class FName                                   TriggerName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMetaRuleMusicState_Client_OnTriggerAudio) == 0x000004, "Wrong alignment on GymMetaRuleMusicState_Client_OnTriggerAudio");
static_assert(sizeof(GymMetaRuleMusicState_Client_OnTriggerAudio) == 0x000008, "Wrong size on GymMetaRuleMusicState_Client_OnTriggerAudio");
static_assert(offsetof(GymMetaRuleMusicState_Client_OnTriggerAudio, TriggerName) == 0x000000, "Member 'GymMetaRuleMusicState_Client_OnTriggerAudio::TriggerName' has a wrong offset!");

// Function GYMGAME.GymMetaRuleMusicState.Client_OnTriggerStingerAudio
// 0x0008 (0x0008 - 0x0000)
struct GymMetaRuleMusicState_Client_OnTriggerStingerAudio final
{
public:
	class FName                                   TriggerName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMetaRuleMusicState_Client_OnTriggerStingerAudio) == 0x000004, "Wrong alignment on GymMetaRuleMusicState_Client_OnTriggerStingerAudio");
static_assert(sizeof(GymMetaRuleMusicState_Client_OnTriggerStingerAudio) == 0x000008, "Wrong size on GymMetaRuleMusicState_Client_OnTriggerStingerAudio");
static_assert(offsetof(GymMetaRuleMusicState_Client_OnTriggerStingerAudio, TriggerName) == 0x000000, "Member 'GymMetaRuleMusicState_Client_OnTriggerStingerAudio::TriggerName' has a wrong offset!");

// Function GYMGAME.GymObjective.Client_SetCurrentProgression
// 0x0004 (0x0004 - 0x0000)
struct GymObjective_Client_SetCurrentProgression final
{
public:
	float                                         Progression;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymObjective_Client_SetCurrentProgression) == 0x000004, "Wrong alignment on GymObjective_Client_SetCurrentProgression");
static_assert(sizeof(GymObjective_Client_SetCurrentProgression) == 0x000004, "Wrong size on GymObjective_Client_SetCurrentProgression");
static_assert(offsetof(GymObjective_Client_SetCurrentProgression, Progression) == 0x000000, "Member 'GymObjective_Client_SetCurrentProgression::Progression' has a wrong offset!");

// Function GYMGAME.GymObjective.Client_SetMaxProgression
// 0x0004 (0x0004 - 0x0000)
struct GymObjective_Client_SetMaxProgression final
{
public:
	float                                         MaxProgress;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymObjective_Client_SetMaxProgression) == 0x000004, "Wrong alignment on GymObjective_Client_SetMaxProgression");
static_assert(sizeof(GymObjective_Client_SetMaxProgression) == 0x000004, "Wrong size on GymObjective_Client_SetMaxProgression");
static_assert(offsetof(GymObjective_Client_SetMaxProgression, MaxProgress) == 0x000000, "Member 'GymObjective_Client_SetMaxProgression::MaxProgress' has a wrong offset!");

// Function GYMGAME.GymObjective.Client_SetObjectiveState
// 0x0001 (0x0001 - 0x0000)
struct GymObjective_Client_SetObjectiveState final
{
public:
	EObjectiveState                               State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymObjective_Client_SetObjectiveState) == 0x000001, "Wrong alignment on GymObjective_Client_SetObjectiveState");
static_assert(sizeof(GymObjective_Client_SetObjectiveState) == 0x000001, "Wrong size on GymObjective_Client_SetObjectiveState");
static_assert(offsetof(GymObjective_Client_SetObjectiveState, State) == 0x000000, "Member 'GymObjective_Client_SetObjectiveState::State' has a wrong offset!");

// Function GYMGAME.GymObjective.IsObjectiveStarted
// 0x0001 (0x0001 - 0x0000)
struct GymObjective_IsObjectiveStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymObjective_IsObjectiveStarted) == 0x000001, "Wrong alignment on GymObjective_IsObjectiveStarted");
static_assert(sizeof(GymObjective_IsObjectiveStarted) == 0x000001, "Wrong size on GymObjective_IsObjectiveStarted");
static_assert(offsetof(GymObjective_IsObjectiveStarted, ReturnValue) == 0x000000, "Member 'GymObjective_IsObjectiveStarted::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymObjective.SetObjectiveState
// 0x0003 (0x0003 - 0x0000)
struct GymObjective_SetObjectiveState final
{
public:
	EObjectiveState                               State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotifyMaster;                                     // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymObjective_SetObjectiveState) == 0x000001, "Wrong alignment on GymObjective_SetObjectiveState");
static_assert(sizeof(GymObjective_SetObjectiveState) == 0x000003, "Wrong size on GymObjective_SetObjectiveState");
static_assert(offsetof(GymObjective_SetObjectiveState, State) == 0x000000, "Member 'GymObjective_SetObjectiveState::State' has a wrong offset!");
static_assert(offsetof(GymObjective_SetObjectiveState, bForce) == 0x000001, "Member 'GymObjective_SetObjectiveState::bForce' has a wrong offset!");
static_assert(offsetof(GymObjective_SetObjectiveState, bNotifyMaster) == 0x000002, "Member 'GymObjective_SetObjectiveState::bNotifyMaster' has a wrong offset!");

// Function GYMGAME.GymObjective.GetCurrentProgression
// 0x0004 (0x0004 - 0x0000)
struct GymObjective_GetCurrentProgression final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymObjective_GetCurrentProgression) == 0x000004, "Wrong alignment on GymObjective_GetCurrentProgression");
static_assert(sizeof(GymObjective_GetCurrentProgression) == 0x000004, "Wrong size on GymObjective_GetCurrentProgression");
static_assert(offsetof(GymObjective_GetCurrentProgression, ReturnValue) == 0x000000, "Member 'GymObjective_GetCurrentProgression::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymObjective.GetDescriptionText
// 0x0018 (0x0018 - 0x0000)
struct GymObjective_GetDescriptionText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymObjective_GetDescriptionText) == 0x000008, "Wrong alignment on GymObjective_GetDescriptionText");
static_assert(sizeof(GymObjective_GetDescriptionText) == 0x000018, "Wrong size on GymObjective_GetDescriptionText");
static_assert(offsetof(GymObjective_GetDescriptionText, ReturnValue) == 0x000000, "Member 'GymObjective_GetDescriptionText::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymObjective.GetMaxProgression
// 0x0004 (0x0004 - 0x0000)
struct GymObjective_GetMaxProgression final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymObjective_GetMaxProgression) == 0x000004, "Wrong alignment on GymObjective_GetMaxProgression");
static_assert(sizeof(GymObjective_GetMaxProgression) == 0x000004, "Wrong size on GymObjective_GetMaxProgression");
static_assert(offsetof(GymObjective_GetMaxProgression, ReturnValue) == 0x000000, "Member 'GymObjective_GetMaxProgression::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymObjective.GetProgressionText
// 0x0018 (0x0018 - 0x0000)
struct GymObjective_GetProgressionText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymObjective_GetProgressionText) == 0x000008, "Wrong alignment on GymObjective_GetProgressionText");
static_assert(sizeof(GymObjective_GetProgressionText) == 0x000018, "Wrong size on GymObjective_GetProgressionText");
static_assert(offsetof(GymObjective_GetProgressionText, ReturnValue) == 0x000000, "Member 'GymObjective_GetProgressionText::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymObjective.GetProgressionTextAreaFillOverride
// 0x0004 (0x0004 - 0x0000)
struct GymObjective_GetProgressionTextAreaFillOverride final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymObjective_GetProgressionTextAreaFillOverride) == 0x000004, "Wrong alignment on GymObjective_GetProgressionTextAreaFillOverride");
static_assert(sizeof(GymObjective_GetProgressionTextAreaFillOverride) == 0x000004, "Wrong size on GymObjective_GetProgressionTextAreaFillOverride");
static_assert(offsetof(GymObjective_GetProgressionTextAreaFillOverride, ReturnValue) == 0x000000, "Member 'GymObjective_GetProgressionTextAreaFillOverride::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymObjective.GetState
// 0x0001 (0x0001 - 0x0000)
struct GymObjective_GetState final
{
public:
	EObjectiveState                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymObjective_GetState) == 0x000001, "Wrong alignment on GymObjective_GetState");
static_assert(sizeof(GymObjective_GetState) == 0x000001, "Wrong size on GymObjective_GetState");
static_assert(offsetof(GymObjective_GetState, ReturnValue) == 0x000000, "Member 'GymObjective_GetState::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymObjective.IsCompleted
// 0x0001 (0x0001 - 0x0000)
struct GymObjective_IsCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymObjective_IsCompleted) == 0x000001, "Wrong alignment on GymObjective_IsCompleted");
static_assert(sizeof(GymObjective_IsCompleted) == 0x000001, "Wrong size on GymObjective_IsCompleted");
static_assert(offsetof(GymObjective_IsCompleted, ReturnValue) == 0x000000, "Member 'GymObjective_IsCompleted::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymObjective.IsFailed
// 0x0001 (0x0001 - 0x0000)
struct GymObjective_IsFailed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymObjective_IsFailed) == 0x000001, "Wrong alignment on GymObjective_IsFailed");
static_assert(sizeof(GymObjective_IsFailed) == 0x000001, "Wrong size on GymObjective_IsFailed");
static_assert(offsetof(GymObjective_IsFailed, ReturnValue) == 0x000000, "Member 'GymObjective_IsFailed::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymObjective.IsInProgress
// 0x0001 (0x0001 - 0x0000)
struct GymObjective_IsInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymObjective_IsInProgress) == 0x000001, "Wrong alignment on GymObjective_IsInProgress");
static_assert(sizeof(GymObjective_IsInProgress) == 0x000001, "Wrong size on GymObjective_IsInProgress");
static_assert(offsetof(GymObjective_IsInProgress, ReturnValue) == 0x000000, "Member 'GymObjective_IsInProgress::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiCanvasPartyOverlayWidget.ShouldShowEndMatch
// 0x0001 (0x0001 - 0x0000)
struct GymGuiCanvasPartyOverlayWidget_ShouldShowEndMatch final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiCanvasPartyOverlayWidget_ShouldShowEndMatch) == 0x000001, "Wrong alignment on GymGuiCanvasPartyOverlayWidget_ShouldShowEndMatch");
static_assert(sizeof(GymGuiCanvasPartyOverlayWidget_ShouldShowEndMatch) == 0x000001, "Wrong size on GymGuiCanvasPartyOverlayWidget_ShouldShowEndMatch");
static_assert(offsetof(GymGuiCanvasPartyOverlayWidget_ShouldShowEndMatch, ReturnValue) == 0x000000, "Member 'GymGuiCanvasPartyOverlayWidget_ShouldShowEndMatch::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.AddVote
// 0x0008 (0x0008 - 0x0000)
struct GymRuleReplicatedData_AddVote final
{
public:
	const class AGymPlayerState*                  Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_AddVote) == 0x000008, "Wrong alignment on GymRuleReplicatedData_AddVote");
static_assert(sizeof(GymRuleReplicatedData_AddVote) == 0x000008, "Wrong size on GymRuleReplicatedData_AddVote");
static_assert(offsetof(GymRuleReplicatedData_AddVote, Player) == 0x000000, "Member 'GymRuleReplicatedData_AddVote::Player' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.GetIsQuickplay
// 0x0001 (0x0001 - 0x0000)
struct GymRuleReplicatedData_GetIsQuickplay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_GetIsQuickplay) == 0x000001, "Wrong alignment on GymRuleReplicatedData_GetIsQuickplay");
static_assert(sizeof(GymRuleReplicatedData_GetIsQuickplay) == 0x000001, "Wrong size on GymRuleReplicatedData_GetIsQuickplay");
static_assert(offsetof(GymRuleReplicatedData_GetIsQuickplay, ReturnValue) == 0x000000, "Member 'GymRuleReplicatedData_GetIsQuickplay::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.GetRaceTime
// 0x0004 (0x0004 - 0x0000)
struct GymRuleReplicatedData_GetRaceTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_GetRaceTime) == 0x000004, "Wrong alignment on GymRuleReplicatedData_GetRaceTime");
static_assert(sizeof(GymRuleReplicatedData_GetRaceTime) == 0x000004, "Wrong size on GymRuleReplicatedData_GetRaceTime");
static_assert(offsetof(GymRuleReplicatedData_GetRaceTime, ReturnValue) == 0x000000, "Member 'GymRuleReplicatedData_GetRaceTime::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.RemoveVote
// 0x0008 (0x0008 - 0x0000)
struct GymRuleReplicatedData_RemoveVote final
{
public:
	const class AGymPlayerState*                  Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_RemoveVote) == 0x000008, "Wrong alignment on GymRuleReplicatedData_RemoveVote");
static_assert(sizeof(GymRuleReplicatedData_RemoveVote) == 0x000008, "Wrong size on GymRuleReplicatedData_RemoveVote");
static_assert(offsetof(GymRuleReplicatedData_RemoveVote, Player) == 0x000000, "Member 'GymRuleReplicatedData_RemoveVote::Player' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.SetCurrentQualified
// 0x0004 (0x0004 - 0x0000)
struct GymRuleReplicatedData_SetCurrentQualified final
{
public:
	int32                                         Qualified;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_SetCurrentQualified) == 0x000004, "Wrong alignment on GymRuleReplicatedData_SetCurrentQualified");
static_assert(sizeof(GymRuleReplicatedData_SetCurrentQualified) == 0x000004, "Wrong size on GymRuleReplicatedData_SetCurrentQualified");
static_assert(offsetof(GymRuleReplicatedData_SetCurrentQualified, Qualified) == 0x000000, "Member 'GymRuleReplicatedData_SetCurrentQualified::Qualified' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.SetIsQuickplay
// 0x0001 (0x0001 - 0x0000)
struct GymRuleReplicatedData_SetIsQuickplay final
{
public:
	bool                                          IsQuickplay;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_SetIsQuickplay) == 0x000001, "Wrong alignment on GymRuleReplicatedData_SetIsQuickplay");
static_assert(sizeof(GymRuleReplicatedData_SetIsQuickplay) == 0x000001, "Wrong size on GymRuleReplicatedData_SetIsQuickplay");
static_assert(offsetof(GymRuleReplicatedData_SetIsQuickplay, IsQuickplay) == 0x000000, "Member 'GymRuleReplicatedData_SetIsQuickplay::IsQuickplay' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.SetMaxQualified
// 0x0004 (0x0004 - 0x0000)
struct GymRuleReplicatedData_SetMaxQualified final
{
public:
	int32                                         Qualified;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_SetMaxQualified) == 0x000004, "Wrong alignment on GymRuleReplicatedData_SetMaxQualified");
static_assert(sizeof(GymRuleReplicatedData_SetMaxQualified) == 0x000004, "Wrong size on GymRuleReplicatedData_SetMaxQualified");
static_assert(offsetof(GymRuleReplicatedData_SetMaxQualified, Qualified) == 0x000000, "Member 'GymRuleReplicatedData_SetMaxQualified::Qualified' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.SetParticipantsRunning
// 0x0004 (0x0004 - 0x0000)
struct GymRuleReplicatedData_SetParticipantsRunning final
{
public:
	int32                                         NewParticipantsRunning;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_SetParticipantsRunning) == 0x000004, "Wrong alignment on GymRuleReplicatedData_SetParticipantsRunning");
static_assert(sizeof(GymRuleReplicatedData_SetParticipantsRunning) == 0x000004, "Wrong size on GymRuleReplicatedData_SetParticipantsRunning");
static_assert(offsetof(GymRuleReplicatedData_SetParticipantsRunning, NewParticipantsRunning) == 0x000000, "Member 'GymRuleReplicatedData_SetParticipantsRunning::NewParticipantsRunning' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.SetQuickplayCountdownMaxTime
// 0x0004 (0x0004 - 0x0000)
struct GymRuleReplicatedData_SetQuickplayCountdownMaxTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_SetQuickplayCountdownMaxTime) == 0x000004, "Wrong alignment on GymRuleReplicatedData_SetQuickplayCountdownMaxTime");
static_assert(sizeof(GymRuleReplicatedData_SetQuickplayCountdownMaxTime) == 0x000004, "Wrong size on GymRuleReplicatedData_SetQuickplayCountdownMaxTime");
static_assert(offsetof(GymRuleReplicatedData_SetQuickplayCountdownMaxTime, Time) == 0x000000, "Member 'GymRuleReplicatedData_SetQuickplayCountdownMaxTime::Time' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.SetQuickplayCountdownStartTime
// 0x0004 (0x0004 - 0x0000)
struct GymRuleReplicatedData_SetQuickplayCountdownStartTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_SetQuickplayCountdownStartTime) == 0x000004, "Wrong alignment on GymRuleReplicatedData_SetQuickplayCountdownStartTime");
static_assert(sizeof(GymRuleReplicatedData_SetQuickplayCountdownStartTime) == 0x000004, "Wrong size on GymRuleReplicatedData_SetQuickplayCountdownStartTime");
static_assert(offsetof(GymRuleReplicatedData_SetQuickplayCountdownStartTime, Time) == 0x000000, "Member 'GymRuleReplicatedData_SetQuickplayCountdownStartTime::Time' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.SetRaceMaxTime
// 0x0004 (0x0004 - 0x0000)
struct GymRuleReplicatedData_SetRaceMaxTime final
{
public:
	float                                         NewMaxTime;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_SetRaceMaxTime) == 0x000004, "Wrong alignment on GymRuleReplicatedData_SetRaceMaxTime");
static_assert(sizeof(GymRuleReplicatedData_SetRaceMaxTime) == 0x000004, "Wrong size on GymRuleReplicatedData_SetRaceMaxTime");
static_assert(offsetof(GymRuleReplicatedData_SetRaceMaxTime, NewMaxTime) == 0x000000, "Member 'GymRuleReplicatedData_SetRaceMaxTime::NewMaxTime' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.SetRaceStartTime
// 0x0004 (0x0004 - 0x0000)
struct GymRuleReplicatedData_SetRaceStartTime final
{
public:
	float                                         NewStartTime;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_SetRaceStartTime) == 0x000004, "Wrong alignment on GymRuleReplicatedData_SetRaceStartTime");
static_assert(sizeof(GymRuleReplicatedData_SetRaceStartTime) == 0x000004, "Wrong size on GymRuleReplicatedData_SetRaceStartTime");
static_assert(offsetof(GymRuleReplicatedData_SetRaceStartTime, NewStartTime) == 0x000000, "Member 'GymRuleReplicatedData_SetRaceStartTime::NewStartTime' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.SetRuleState
// 0x0001 (0x0001 - 0x0000)
struct GymRuleReplicatedData_SetRuleState final
{
public:
	EGymRulesState                                State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_SetRuleState) == 0x000001, "Wrong alignment on GymRuleReplicatedData_SetRuleState");
static_assert(sizeof(GymRuleReplicatedData_SetRuleState) == 0x000001, "Wrong size on GymRuleReplicatedData_SetRuleState");
static_assert(offsetof(GymRuleReplicatedData_SetRuleState, State) == 0x000000, "Member 'GymRuleReplicatedData_SetRuleState::State' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.SetTotalParticipants
// 0x0004 (0x0004 - 0x0000)
struct GymRuleReplicatedData_SetTotalParticipants final
{
public:
	int32                                         NewTotalParticipants;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_SetTotalParticipants) == 0x000004, "Wrong alignment on GymRuleReplicatedData_SetTotalParticipants");
static_assert(sizeof(GymRuleReplicatedData_SetTotalParticipants) == 0x000004, "Wrong size on GymRuleReplicatedData_SetTotalParticipants");
static_assert(offsetof(GymRuleReplicatedData_SetTotalParticipants, NewTotalParticipants) == 0x000000, "Member 'GymRuleReplicatedData_SetTotalParticipants::NewTotalParticipants' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.SetVoteStartTime
// 0x0004 (0x0004 - 0x0000)
struct GymRuleReplicatedData_SetVoteStartTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_SetVoteStartTime) == 0x000004, "Wrong alignment on GymRuleReplicatedData_SetVoteStartTime");
static_assert(sizeof(GymRuleReplicatedData_SetVoteStartTime) == 0x000004, "Wrong size on GymRuleReplicatedData_SetVoteStartTime");
static_assert(offsetof(GymRuleReplicatedData_SetVoteStartTime, Time) == 0x000000, "Member 'GymRuleReplicatedData_SetVoteStartTime::Time' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.SetVoteState
// 0x0001 (0x0001 - 0x0000)
struct GymRuleReplicatedData_SetVoteState final
{
public:
	EVoteState                                    NewVoteState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_SetVoteState) == 0x000001, "Wrong alignment on GymRuleReplicatedData_SetVoteState");
static_assert(sizeof(GymRuleReplicatedData_SetVoteState) == 0x000001, "Wrong size on GymRuleReplicatedData_SetVoteState");
static_assert(offsetof(GymRuleReplicatedData_SetVoteState, NewVoteState) == 0x000000, "Member 'GymRuleReplicatedData_SetVoteState::NewVoteState' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.SetVoteTimer
// 0x0004 (0x0004 - 0x0000)
struct GymRuleReplicatedData_SetVoteTimer final
{
public:
	float                                         Timer;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_SetVoteTimer) == 0x000004, "Wrong alignment on GymRuleReplicatedData_SetVoteTimer");
static_assert(sizeof(GymRuleReplicatedData_SetVoteTimer) == 0x000004, "Wrong size on GymRuleReplicatedData_SetVoteTimer");
static_assert(offsetof(GymRuleReplicatedData_SetVoteTimer, Timer) == 0x000000, "Member 'GymRuleReplicatedData_SetVoteTimer::Timer' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.UpdateVotes
// 0x000C (0x000C - 0x0000)
struct GymRuleReplicatedData_UpdateVotes final
{
public:
	int32                                         NewMinVotes;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewMaxVotes;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewCurrentVotes;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_UpdateVotes) == 0x000004, "Wrong alignment on GymRuleReplicatedData_UpdateVotes");
static_assert(sizeof(GymRuleReplicatedData_UpdateVotes) == 0x00000C, "Wrong size on GymRuleReplicatedData_UpdateVotes");
static_assert(offsetof(GymRuleReplicatedData_UpdateVotes, NewMinVotes) == 0x000000, "Member 'GymRuleReplicatedData_UpdateVotes::NewMinVotes' has a wrong offset!");
static_assert(offsetof(GymRuleReplicatedData_UpdateVotes, NewMaxVotes) == 0x000004, "Member 'GymRuleReplicatedData_UpdateVotes::NewMaxVotes' has a wrong offset!");
static_assert(offsetof(GymRuleReplicatedData_UpdateVotes, NewCurrentVotes) == 0x000008, "Member 'GymRuleReplicatedData_UpdateVotes::NewCurrentVotes' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.GetCheckpointCount
// 0x0004 (0x0004 - 0x0000)
struct GymRuleReplicatedData_GetCheckpointCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_GetCheckpointCount) == 0x000004, "Wrong alignment on GymRuleReplicatedData_GetCheckpointCount");
static_assert(sizeof(GymRuleReplicatedData_GetCheckpointCount) == 0x000004, "Wrong size on GymRuleReplicatedData_GetCheckpointCount");
static_assert(offsetof(GymRuleReplicatedData_GetCheckpointCount, ReturnValue) == 0x000000, "Member 'GymRuleReplicatedData_GetCheckpointCount::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.GetCurrentQualified
// 0x0004 (0x0004 - 0x0000)
struct GymRuleReplicatedData_GetCurrentQualified final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_GetCurrentQualified) == 0x000004, "Wrong alignment on GymRuleReplicatedData_GetCurrentQualified");
static_assert(sizeof(GymRuleReplicatedData_GetCurrentQualified) == 0x000004, "Wrong size on GymRuleReplicatedData_GetCurrentQualified");
static_assert(offsetof(GymRuleReplicatedData_GetCurrentQualified, ReturnValue) == 0x000000, "Member 'GymRuleReplicatedData_GetCurrentQualified::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.GetCurrentVotes
// 0x0004 (0x0004 - 0x0000)
struct GymRuleReplicatedData_GetCurrentVotes final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_GetCurrentVotes) == 0x000004, "Wrong alignment on GymRuleReplicatedData_GetCurrentVotes");
static_assert(sizeof(GymRuleReplicatedData_GetCurrentVotes) == 0x000004, "Wrong size on GymRuleReplicatedData_GetCurrentVotes");
static_assert(offsetof(GymRuleReplicatedData_GetCurrentVotes, ReturnValue) == 0x000000, "Member 'GymRuleReplicatedData_GetCurrentVotes::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.GetMaxQualified
// 0x0004 (0x0004 - 0x0000)
struct GymRuleReplicatedData_GetMaxQualified final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_GetMaxQualified) == 0x000004, "Wrong alignment on GymRuleReplicatedData_GetMaxQualified");
static_assert(sizeof(GymRuleReplicatedData_GetMaxQualified) == 0x000004, "Wrong size on GymRuleReplicatedData_GetMaxQualified");
static_assert(offsetof(GymRuleReplicatedData_GetMaxQualified, ReturnValue) == 0x000000, "Member 'GymRuleReplicatedData_GetMaxQualified::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.GetMaxVotes
// 0x0004 (0x0004 - 0x0000)
struct GymRuleReplicatedData_GetMaxVotes final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_GetMaxVotes) == 0x000004, "Wrong alignment on GymRuleReplicatedData_GetMaxVotes");
static_assert(sizeof(GymRuleReplicatedData_GetMaxVotes) == 0x000004, "Wrong size on GymRuleReplicatedData_GetMaxVotes");
static_assert(offsetof(GymRuleReplicatedData_GetMaxVotes, ReturnValue) == 0x000000, "Member 'GymRuleReplicatedData_GetMaxVotes::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.GetMinVotes
// 0x0004 (0x0004 - 0x0000)
struct GymRuleReplicatedData_GetMinVotes final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_GetMinVotes) == 0x000004, "Wrong alignment on GymRuleReplicatedData_GetMinVotes");
static_assert(sizeof(GymRuleReplicatedData_GetMinVotes) == 0x000004, "Wrong size on GymRuleReplicatedData_GetMinVotes");
static_assert(offsetof(GymRuleReplicatedData_GetMinVotes, ReturnValue) == 0x000000, "Member 'GymRuleReplicatedData_GetMinVotes::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.GetParticipantsRunning
// 0x0004 (0x0004 - 0x0000)
struct GymRuleReplicatedData_GetParticipantsRunning final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_GetParticipantsRunning) == 0x000004, "Wrong alignment on GymRuleReplicatedData_GetParticipantsRunning");
static_assert(sizeof(GymRuleReplicatedData_GetParticipantsRunning) == 0x000004, "Wrong size on GymRuleReplicatedData_GetParticipantsRunning");
static_assert(offsetof(GymRuleReplicatedData_GetParticipantsRunning, ReturnValue) == 0x000000, "Member 'GymRuleReplicatedData_GetParticipantsRunning::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.GetQuickplayCountdownMaxTime
// 0x0004 (0x0004 - 0x0000)
struct GymRuleReplicatedData_GetQuickplayCountdownMaxTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_GetQuickplayCountdownMaxTime) == 0x000004, "Wrong alignment on GymRuleReplicatedData_GetQuickplayCountdownMaxTime");
static_assert(sizeof(GymRuleReplicatedData_GetQuickplayCountdownMaxTime) == 0x000004, "Wrong size on GymRuleReplicatedData_GetQuickplayCountdownMaxTime");
static_assert(offsetof(GymRuleReplicatedData_GetQuickplayCountdownMaxTime, ReturnValue) == 0x000000, "Member 'GymRuleReplicatedData_GetQuickplayCountdownMaxTime::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.GetQuickplayCountdownStartTime
// 0x0004 (0x0004 - 0x0000)
struct GymRuleReplicatedData_GetQuickplayCountdownStartTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_GetQuickplayCountdownStartTime) == 0x000004, "Wrong alignment on GymRuleReplicatedData_GetQuickplayCountdownStartTime");
static_assert(sizeof(GymRuleReplicatedData_GetQuickplayCountdownStartTime) == 0x000004, "Wrong size on GymRuleReplicatedData_GetQuickplayCountdownStartTime");
static_assert(offsetof(GymRuleReplicatedData_GetQuickplayCountdownStartTime, ReturnValue) == 0x000000, "Member 'GymRuleReplicatedData_GetQuickplayCountdownStartTime::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.GetRaceMaxTime
// 0x0004 (0x0004 - 0x0000)
struct GymRuleReplicatedData_GetRaceMaxTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_GetRaceMaxTime) == 0x000004, "Wrong alignment on GymRuleReplicatedData_GetRaceMaxTime");
static_assert(sizeof(GymRuleReplicatedData_GetRaceMaxTime) == 0x000004, "Wrong size on GymRuleReplicatedData_GetRaceMaxTime");
static_assert(offsetof(GymRuleReplicatedData_GetRaceMaxTime, ReturnValue) == 0x000000, "Member 'GymRuleReplicatedData_GetRaceMaxTime::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.GetRaceStartTime
// 0x0004 (0x0004 - 0x0000)
struct GymRuleReplicatedData_GetRaceStartTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_GetRaceStartTime) == 0x000004, "Wrong alignment on GymRuleReplicatedData_GetRaceStartTime");
static_assert(sizeof(GymRuleReplicatedData_GetRaceStartTime) == 0x000004, "Wrong size on GymRuleReplicatedData_GetRaceStartTime");
static_assert(offsetof(GymRuleReplicatedData_GetRaceStartTime, ReturnValue) == 0x000000, "Member 'GymRuleReplicatedData_GetRaceStartTime::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.GetRuleState
// 0x0001 (0x0001 - 0x0000)
struct GymRuleReplicatedData_GetRuleState final
{
public:
	EGymRulesState                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_GetRuleState) == 0x000001, "Wrong alignment on GymRuleReplicatedData_GetRuleState");
static_assert(sizeof(GymRuleReplicatedData_GetRuleState) == 0x000001, "Wrong size on GymRuleReplicatedData_GetRuleState");
static_assert(offsetof(GymRuleReplicatedData_GetRuleState, ReturnValue) == 0x000000, "Member 'GymRuleReplicatedData_GetRuleState::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.GetTimeLeft
// 0x0004 (0x0004 - 0x0000)
struct GymRuleReplicatedData_GetTimeLeft final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_GetTimeLeft) == 0x000004, "Wrong alignment on GymRuleReplicatedData_GetTimeLeft");
static_assert(sizeof(GymRuleReplicatedData_GetTimeLeft) == 0x000004, "Wrong size on GymRuleReplicatedData_GetTimeLeft");
static_assert(offsetof(GymRuleReplicatedData_GetTimeLeft, ReturnValue) == 0x000000, "Member 'GymRuleReplicatedData_GetTimeLeft::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.GetTotalParticipants
// 0x0004 (0x0004 - 0x0000)
struct GymRuleReplicatedData_GetTotalParticipants final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_GetTotalParticipants) == 0x000004, "Wrong alignment on GymRuleReplicatedData_GetTotalParticipants");
static_assert(sizeof(GymRuleReplicatedData_GetTotalParticipants) == 0x000004, "Wrong size on GymRuleReplicatedData_GetTotalParticipants");
static_assert(offsetof(GymRuleReplicatedData_GetTotalParticipants, ReturnValue) == 0x000000, "Member 'GymRuleReplicatedData_GetTotalParticipants::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.GetVoteStartTime
// 0x0004 (0x0004 - 0x0000)
struct GymRuleReplicatedData_GetVoteStartTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_GetVoteStartTime) == 0x000004, "Wrong alignment on GymRuleReplicatedData_GetVoteStartTime");
static_assert(sizeof(GymRuleReplicatedData_GetVoteStartTime) == 0x000004, "Wrong size on GymRuleReplicatedData_GetVoteStartTime");
static_assert(offsetof(GymRuleReplicatedData_GetVoteStartTime, ReturnValue) == 0x000000, "Member 'GymRuleReplicatedData_GetVoteStartTime::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.GetVoteState
// 0x0001 (0x0001 - 0x0000)
struct GymRuleReplicatedData_GetVoteState final
{
public:
	EVoteState                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_GetVoteState) == 0x000001, "Wrong alignment on GymRuleReplicatedData_GetVoteState");
static_assert(sizeof(GymRuleReplicatedData_GetVoteState) == 0x000001, "Wrong size on GymRuleReplicatedData_GetVoteState");
static_assert(offsetof(GymRuleReplicatedData_GetVoteState, ReturnValue) == 0x000000, "Member 'GymRuleReplicatedData_GetVoteState::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.GetVoteTimer
// 0x0004 (0x0004 - 0x0000)
struct GymRuleReplicatedData_GetVoteTimer final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleReplicatedData_GetVoteTimer) == 0x000004, "Wrong alignment on GymRuleReplicatedData_GetVoteTimer");
static_assert(sizeof(GymRuleReplicatedData_GetVoteTimer) == 0x000004, "Wrong size on GymRuleReplicatedData_GetVoteTimer");
static_assert(offsetof(GymRuleReplicatedData_GetVoteTimer, ReturnValue) == 0x000000, "Member 'GymRuleReplicatedData_GetVoteTimer::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymRuleReplicatedData.HasVoted
// 0x0010 (0x0010 - 0x0000)
struct GymRuleReplicatedData_HasVoted final
{
public:
	const class AGymPlayerState*                  Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymRuleReplicatedData_HasVoted) == 0x000008, "Wrong alignment on GymRuleReplicatedData_HasVoted");
static_assert(sizeof(GymRuleReplicatedData_HasVoted) == 0x000010, "Wrong size on GymRuleReplicatedData_HasVoted");
static_assert(offsetof(GymRuleReplicatedData_HasVoted, Player) == 0x000000, "Member 'GymRuleReplicatedData_HasVoted::Player' has a wrong offset!");
static_assert(offsetof(GymRuleReplicatedData_HasVoted, ReturnValue) == 0x000008, "Member 'GymRuleReplicatedData_HasVoted::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymBombModeReplicatedData.SetBombNum
// 0x0004 (0x0004 - 0x0000)
struct GymBombModeReplicatedData_SetBombNum final
{
public:
	int32                                         BombNum;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymBombModeReplicatedData_SetBombNum) == 0x000004, "Wrong alignment on GymBombModeReplicatedData_SetBombNum");
static_assert(sizeof(GymBombModeReplicatedData_SetBombNum) == 0x000004, "Wrong size on GymBombModeReplicatedData_SetBombNum");
static_assert(offsetof(GymBombModeReplicatedData_SetBombNum, BombNum) == 0x000000, "Member 'GymBombModeReplicatedData_SetBombNum::BombNum' has a wrong offset!");

// Function GYMGAME.GymBombModeReplicatedData.SetBombTicking
// 0x0001 (0x0001 - 0x0000)
struct GymBombModeReplicatedData_SetBombTicking final
{
public:
	bool                                          BombTicking;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymBombModeReplicatedData_SetBombTicking) == 0x000001, "Wrong alignment on GymBombModeReplicatedData_SetBombTicking");
static_assert(sizeof(GymBombModeReplicatedData_SetBombTicking) == 0x000001, "Wrong size on GymBombModeReplicatedData_SetBombTicking");
static_assert(offsetof(GymBombModeReplicatedData_SetBombTicking, BombTicking) == 0x000000, "Member 'GymBombModeReplicatedData_SetBombTicking::BombTicking' has a wrong offset!");

// Function GYMGAME.GymBombModeReplicatedData.SetBombTimer
// 0x0004 (0x0004 - 0x0000)
struct GymBombModeReplicatedData_SetBombTimer final
{
public:
	float                                         Timer;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymBombModeReplicatedData_SetBombTimer) == 0x000004, "Wrong alignment on GymBombModeReplicatedData_SetBombTimer");
static_assert(sizeof(GymBombModeReplicatedData_SetBombTimer) == 0x000004, "Wrong size on GymBombModeReplicatedData_SetBombTimer");
static_assert(offsetof(GymBombModeReplicatedData_SetBombTimer, Timer) == 0x000000, "Member 'GymBombModeReplicatedData_SetBombTimer::Timer' has a wrong offset!");

// Function GYMGAME.GymBombModeReplicatedData.SetMaxRounds
// 0x0004 (0x0004 - 0x0000)
struct GymBombModeReplicatedData_SetMaxRounds final
{
public:
	int32                                         Rounds;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymBombModeReplicatedData_SetMaxRounds) == 0x000004, "Wrong alignment on GymBombModeReplicatedData_SetMaxRounds");
static_assert(sizeof(GymBombModeReplicatedData_SetMaxRounds) == 0x000004, "Wrong size on GymBombModeReplicatedData_SetMaxRounds");
static_assert(offsetof(GymBombModeReplicatedData_SetMaxRounds, Rounds) == 0x000000, "Member 'GymBombModeReplicatedData_SetMaxRounds::Rounds' has a wrong offset!");

// Function GYMGAME.GymBombModeReplicatedData.SetRoundNum
// 0x0004 (0x0004 - 0x0000)
struct GymBombModeReplicatedData_SetRoundNum final
{
public:
	int32                                         Rounds;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymBombModeReplicatedData_SetRoundNum) == 0x000004, "Wrong alignment on GymBombModeReplicatedData_SetRoundNum");
static_assert(sizeof(GymBombModeReplicatedData_SetRoundNum) == 0x000004, "Wrong size on GymBombModeReplicatedData_SetRoundNum");
static_assert(offsetof(GymBombModeReplicatedData_SetRoundNum, Rounds) == 0x000000, "Member 'GymBombModeReplicatedData_SetRoundNum::Rounds' has a wrong offset!");

// Function GYMGAME.GymBombModeReplicatedData.SetRoundStartTime
// 0x0004 (0x0004 - 0x0000)
struct GymBombModeReplicatedData_SetRoundStartTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymBombModeReplicatedData_SetRoundStartTime) == 0x000004, "Wrong alignment on GymBombModeReplicatedData_SetRoundStartTime");
static_assert(sizeof(GymBombModeReplicatedData_SetRoundStartTime) == 0x000004, "Wrong size on GymBombModeReplicatedData_SetRoundStartTime");
static_assert(offsetof(GymBombModeReplicatedData_SetRoundStartTime, Time) == 0x000000, "Member 'GymBombModeReplicatedData_SetRoundStartTime::Time' has a wrong offset!");

// Function GYMGAME.GymBombModeReplicatedData.GetBombNum
// 0x0004 (0x0004 - 0x0000)
struct GymBombModeReplicatedData_GetBombNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymBombModeReplicatedData_GetBombNum) == 0x000004, "Wrong alignment on GymBombModeReplicatedData_GetBombNum");
static_assert(sizeof(GymBombModeReplicatedData_GetBombNum) == 0x000004, "Wrong size on GymBombModeReplicatedData_GetBombNum");
static_assert(offsetof(GymBombModeReplicatedData_GetBombNum, ReturnValue) == 0x000000, "Member 'GymBombModeReplicatedData_GetBombNum::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymBombModeReplicatedData.GetBombTicking
// 0x0001 (0x0001 - 0x0000)
struct GymBombModeReplicatedData_GetBombTicking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymBombModeReplicatedData_GetBombTicking) == 0x000001, "Wrong alignment on GymBombModeReplicatedData_GetBombTicking");
static_assert(sizeof(GymBombModeReplicatedData_GetBombTicking) == 0x000001, "Wrong size on GymBombModeReplicatedData_GetBombTicking");
static_assert(offsetof(GymBombModeReplicatedData_GetBombTicking, ReturnValue) == 0x000000, "Member 'GymBombModeReplicatedData_GetBombTicking::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymBombModeReplicatedData.GetBombTimer
// 0x0004 (0x0004 - 0x0000)
struct GymBombModeReplicatedData_GetBombTimer final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymBombModeReplicatedData_GetBombTimer) == 0x000004, "Wrong alignment on GymBombModeReplicatedData_GetBombTimer");
static_assert(sizeof(GymBombModeReplicatedData_GetBombTimer) == 0x000004, "Wrong size on GymBombModeReplicatedData_GetBombTimer");
static_assert(offsetof(GymBombModeReplicatedData_GetBombTimer, ReturnValue) == 0x000000, "Member 'GymBombModeReplicatedData_GetBombTimer::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymBombModeReplicatedData.GetMaxRounds
// 0x0004 (0x0004 - 0x0000)
struct GymBombModeReplicatedData_GetMaxRounds final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymBombModeReplicatedData_GetMaxRounds) == 0x000004, "Wrong alignment on GymBombModeReplicatedData_GetMaxRounds");
static_assert(sizeof(GymBombModeReplicatedData_GetMaxRounds) == 0x000004, "Wrong size on GymBombModeReplicatedData_GetMaxRounds");
static_assert(offsetof(GymBombModeReplicatedData_GetMaxRounds, ReturnValue) == 0x000000, "Member 'GymBombModeReplicatedData_GetMaxRounds::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymBombModeReplicatedData.GetRoundNum
// 0x0004 (0x0004 - 0x0000)
struct GymBombModeReplicatedData_GetRoundNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymBombModeReplicatedData_GetRoundNum) == 0x000004, "Wrong alignment on GymBombModeReplicatedData_GetRoundNum");
static_assert(sizeof(GymBombModeReplicatedData_GetRoundNum) == 0x000004, "Wrong size on GymBombModeReplicatedData_GetRoundNum");
static_assert(offsetof(GymBombModeReplicatedData_GetRoundNum, ReturnValue) == 0x000000, "Member 'GymBombModeReplicatedData_GetRoundNum::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymBombModeReplicatedData.GetRoundStartTime
// 0x0004 (0x0004 - 0x0000)
struct GymBombModeReplicatedData_GetRoundStartTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymBombModeReplicatedData_GetRoundStartTime) == 0x000004, "Wrong alignment on GymBombModeReplicatedData_GetRoundStartTime");
static_assert(sizeof(GymBombModeReplicatedData_GetRoundStartTime) == 0x000004, "Wrong size on GymBombModeReplicatedData_GetRoundStartTime");
static_assert(offsetof(GymBombModeReplicatedData_GetRoundStartTime, ReturnValue) == 0x000000, "Member 'GymBombModeReplicatedData_GetRoundStartTime::ReturnValue' has a wrong offset!");

// DelegateFunction GYMGAME.GymGuiConfirmWidget.OnConfirmReacted__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GymGuiConfirmWidget_OnConfirmReacted__DelegateSignature final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiConfirmWidget_OnConfirmReacted__DelegateSignature) == 0x000001, "Wrong alignment on GymGuiConfirmWidget_OnConfirmReacted__DelegateSignature");
static_assert(sizeof(GymGuiConfirmWidget_OnConfirmReacted__DelegateSignature) == 0x000001, "Wrong size on GymGuiConfirmWidget_OnConfirmReacted__DelegateSignature");
static_assert(offsetof(GymGuiConfirmWidget_OnConfirmReacted__DelegateSignature, Result) == 0x000000, "Member 'GymGuiConfirmWidget_OnConfirmReacted__DelegateSignature::Result' has a wrong offset!");

// Function GYMGAME.GymGuiConfirmWidget.ShowConfirm
// 0x0050 (0x0050 - 0x0000)
struct GymGuiConfirmWidget_ShowConfirm final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   AcceptMessage;                                     // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   DeclineMessage;                                    // 0x0030(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymGuiConfirmWidget_ShowConfirm) == 0x000008, "Wrong alignment on GymGuiConfirmWidget_ShowConfirm");
static_assert(sizeof(GymGuiConfirmWidget_ShowConfirm) == 0x000050, "Wrong size on GymGuiConfirmWidget_ShowConfirm");
static_assert(offsetof(GymGuiConfirmWidget_ShowConfirm, Message) == 0x000000, "Member 'GymGuiConfirmWidget_ShowConfirm::Message' has a wrong offset!");
static_assert(offsetof(GymGuiConfirmWidget_ShowConfirm, AcceptMessage) == 0x000018, "Member 'GymGuiConfirmWidget_ShowConfirm::AcceptMessage' has a wrong offset!");
static_assert(offsetof(GymGuiConfirmWidget_ShowConfirm, DeclineMessage) == 0x000030, "Member 'GymGuiConfirmWidget_ShowConfirm::DeclineMessage' has a wrong offset!");
static_assert(offsetof(GymGuiConfirmWidget_ShowConfirm, ReturnValue) == 0x000048, "Member 'GymGuiConfirmWidget_ShowConfirm::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiConfirmWidget.IsConfirmOpen
// 0x0001 (0x0001 - 0x0000)
struct GymGuiConfirmWidget_IsConfirmOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiConfirmWidget_IsConfirmOpen) == 0x000001, "Wrong alignment on GymGuiConfirmWidget_IsConfirmOpen");
static_assert(sizeof(GymGuiConfirmWidget_IsConfirmOpen) == 0x000001, "Wrong size on GymGuiConfirmWidget_IsConfirmOpen");
static_assert(offsetof(GymGuiConfirmWidget_IsConfirmOpen, ReturnValue) == 0x000000, "Member 'GymGuiConfirmWidget_IsConfirmOpen::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymBPUtils.CopyTextToClipboard
// 0x0010 (0x0010 - 0x0000)
struct GymBPUtils_CopyTextToClipboard final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymBPUtils_CopyTextToClipboard) == 0x000008, "Wrong alignment on GymBPUtils_CopyTextToClipboard");
static_assert(sizeof(GymBPUtils_CopyTextToClipboard) == 0x000010, "Wrong size on GymBPUtils_CopyTextToClipboard");
static_assert(offsetof(GymBPUtils_CopyTextToClipboard, Text) == 0x000000, "Member 'GymBPUtils_CopyTextToClipboard::Text' has a wrong offset!");

// Function GYMGAME.GymBPUtils.FilterLevelName
// 0x0030 (0x0030 - 0x0000)
struct GymBPUtils_FilterLevelName final
{
public:
	class FText                                   InLevelName;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   OutLevelName;                                      // 0x0018(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymBPUtils_FilterLevelName) == 0x000008, "Wrong alignment on GymBPUtils_FilterLevelName");
static_assert(sizeof(GymBPUtils_FilterLevelName) == 0x000030, "Wrong size on GymBPUtils_FilterLevelName");
static_assert(offsetof(GymBPUtils_FilterLevelName, InLevelName) == 0x000000, "Member 'GymBPUtils_FilterLevelName::InLevelName' has a wrong offset!");
static_assert(offsetof(GymBPUtils_FilterLevelName, OutLevelName) == 0x000018, "Member 'GymBPUtils_FilterLevelName::OutLevelName' has a wrong offset!");

// Function GYMGAME.GymBPUtils.FilterText
// 0x0020 (0x0020 - 0x0000)
struct GymBPUtils_FilterText final
{
public:
	class FString                                 InText;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutText;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymBPUtils_FilterText) == 0x000008, "Wrong alignment on GymBPUtils_FilterText");
static_assert(sizeof(GymBPUtils_FilterText) == 0x000020, "Wrong size on GymBPUtils_FilterText");
static_assert(offsetof(GymBPUtils_FilterText, InText) == 0x000000, "Member 'GymBPUtils_FilterText::InText' has a wrong offset!");
static_assert(offsetof(GymBPUtils_FilterText, OutText) == 0x000010, "Member 'GymBPUtils_FilterText::OutText' has a wrong offset!");

// Function GYMGAME.GymBPUtils.FocusAndSetAsHovered
// 0x0008 (0x0008 - 0x0000)
struct GymBPUtils_FocusAndSetAsHovered final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymBPUtils_FocusAndSetAsHovered) == 0x000008, "Wrong alignment on GymBPUtils_FocusAndSetAsHovered");
static_assert(sizeof(GymBPUtils_FocusAndSetAsHovered) == 0x000008, "Wrong size on GymBPUtils_FocusAndSetAsHovered");
static_assert(offsetof(GymBPUtils_FocusAndSetAsHovered, Widget) == 0x000000, "Member 'GymBPUtils_FocusAndSetAsHovered::Widget' has a wrong offset!");

// Function GYMGAME.GymBPUtils.GetCurrentFocusedWidget
// 0x0008 (0x0008 - 0x0000)
struct GymBPUtils_GetCurrentFocusedWidget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymBPUtils_GetCurrentFocusedWidget) == 0x000008, "Wrong alignment on GymBPUtils_GetCurrentFocusedWidget");
static_assert(sizeof(GymBPUtils_GetCurrentFocusedWidget) == 0x000008, "Wrong size on GymBPUtils_GetCurrentFocusedWidget");
static_assert(offsetof(GymBPUtils_GetCurrentFocusedWidget, ReturnValue) == 0x000000, "Member 'GymBPUtils_GetCurrentFocusedWidget::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymBPUtils.GetFocusCause
// 0x000C (0x000C - 0x0000)
struct GymBPUtils_GetFocusCause final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EFocusCause                                   ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymBPUtils_GetFocusCause) == 0x000004, "Wrong alignment on GymBPUtils_GetFocusCause");
static_assert(sizeof(GymBPUtils_GetFocusCause) == 0x00000C, "Wrong size on GymBPUtils_GetFocusCause");
static_assert(offsetof(GymBPUtils_GetFocusCause, InFocusEvent) == 0x000000, "Member 'GymBPUtils_GetFocusCause::InFocusEvent' has a wrong offset!");
static_assert(offsetof(GymBPUtils_GetFocusCause, ReturnValue) == 0x000008, "Member 'GymBPUtils_GetFocusCause::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymBPUtils.IsDevBuild
// 0x0001 (0x0001 - 0x0000)
struct GymBPUtils_IsDevBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymBPUtils_IsDevBuild) == 0x000001, "Wrong alignment on GymBPUtils_IsDevBuild");
static_assert(sizeof(GymBPUtils_IsDevBuild) == 0x000001, "Wrong size on GymBPUtils_IsDevBuild");
static_assert(offsetof(GymBPUtils_IsDevBuild, ReturnValue) == 0x000000, "Member 'GymBPUtils_IsDevBuild::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymBPUtils.IsShippingBuild
// 0x0001 (0x0001 - 0x0000)
struct GymBPUtils_IsShippingBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymBPUtils_IsShippingBuild) == 0x000001, "Wrong alignment on GymBPUtils_IsShippingBuild");
static_assert(sizeof(GymBPUtils_IsShippingBuild) == 0x000001, "Wrong size on GymBPUtils_IsShippingBuild");
static_assert(offsetof(GymBPUtils_IsShippingBuild, ReturnValue) == 0x000000, "Member 'GymBPUtils_IsShippingBuild::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymBPUtils.ResolutionStringToIntPoint
// 0x0018 (0x0018 - 0x0000)
struct GymBPUtils_ResolutionStringToIntPoint final
{
public:
	class FString                                 ResolutionString;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymBPUtils_ResolutionStringToIntPoint) == 0x000008, "Wrong alignment on GymBPUtils_ResolutionStringToIntPoint");
static_assert(sizeof(GymBPUtils_ResolutionStringToIntPoint) == 0x000018, "Wrong size on GymBPUtils_ResolutionStringToIntPoint");
static_assert(offsetof(GymBPUtils_ResolutionStringToIntPoint, ResolutionString) == 0x000000, "Member 'GymBPUtils_ResolutionStringToIntPoint::ResolutionString' has a wrong offset!");
static_assert(offsetof(GymBPUtils_ResolutionStringToIntPoint, ReturnValue) == 0x000010, "Member 'GymBPUtils_ResolutionStringToIntPoint::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymBPUtils.RunningInPIE
// 0x0001 (0x0001 - 0x0000)
struct GymBPUtils_RunningInPIE final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymBPUtils_RunningInPIE) == 0x000001, "Wrong alignment on GymBPUtils_RunningInPIE");
static_assert(sizeof(GymBPUtils_RunningInPIE) == 0x000001, "Wrong size on GymBPUtils_RunningInPIE");
static_assert(offsetof(GymBPUtils_RunningInPIE, ReturnValue) == 0x000000, "Member 'GymBPUtils_RunningInPIE::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCameraControl.PlayerSelectedModeIsFP
// 0x0001 (0x0001 - 0x0000)
struct GymCameraControl_PlayerSelectedModeIsFP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCameraControl_PlayerSelectedModeIsFP) == 0x000001, "Wrong alignment on GymCameraControl_PlayerSelectedModeIsFP");
static_assert(sizeof(GymCameraControl_PlayerSelectedModeIsFP) == 0x000001, "Wrong size on GymCameraControl_PlayerSelectedModeIsFP");
static_assert(offsetof(GymCameraControl_PlayerSelectedModeIsFP, ReturnValue) == 0x000000, "Member 'GymCameraControl_PlayerSelectedModeIsFP::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiCreateMenuWidget.CreateLevel
// 0x0018 (0x0018 - 0x0000)
struct GymGuiCreateMenuWidget_CreateLevel final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymGuiCreateMenuWidget_CreateLevel) == 0x000008, "Wrong alignment on GymGuiCreateMenuWidget_CreateLevel");
static_assert(sizeof(GymGuiCreateMenuWidget_CreateLevel) == 0x000018, "Wrong size on GymGuiCreateMenuWidget_CreateLevel");
static_assert(offsetof(GymGuiCreateMenuWidget_CreateLevel, Name_0) == 0x000000, "Member 'GymGuiCreateMenuWidget_CreateLevel::Name_0' has a wrong offset!");
static_assert(offsetof(GymGuiCreateMenuWidget_CreateLevel, ReturnValue) == 0x000010, "Member 'GymGuiCreateMenuWidget_CreateLevel::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiCreateMenuWidget.CreateLevelWithBaseMap
// 0x0018 (0x0018 - 0x0000)
struct GymGuiCreateMenuWidget_CreateLevelWithBaseMap final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseMapIndex;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymGuiCreateMenuWidget_CreateLevelWithBaseMap) == 0x000008, "Wrong alignment on GymGuiCreateMenuWidget_CreateLevelWithBaseMap");
static_assert(sizeof(GymGuiCreateMenuWidget_CreateLevelWithBaseMap) == 0x000018, "Wrong size on GymGuiCreateMenuWidget_CreateLevelWithBaseMap");
static_assert(offsetof(GymGuiCreateMenuWidget_CreateLevelWithBaseMap, Name_0) == 0x000000, "Member 'GymGuiCreateMenuWidget_CreateLevelWithBaseMap::Name_0' has a wrong offset!");
static_assert(offsetof(GymGuiCreateMenuWidget_CreateLevelWithBaseMap, BaseMapIndex) == 0x000010, "Member 'GymGuiCreateMenuWidget_CreateLevelWithBaseMap::BaseMapIndex' has a wrong offset!");
static_assert(offsetof(GymGuiCreateMenuWidget_CreateLevelWithBaseMap, ReturnValue) == 0x000014, "Member 'GymGuiCreateMenuWidget_CreateLevelWithBaseMap::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiCreateMenuWidget.OnServerCreated
// 0x0018 (0x0018 - 0x0000)
struct GymGuiCreateMenuWidget_OnServerCreated final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ConnectString;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiCreateMenuWidget_OnServerCreated) == 0x000008, "Wrong alignment on GymGuiCreateMenuWidget_OnServerCreated");
static_assert(sizeof(GymGuiCreateMenuWidget_OnServerCreated) == 0x000018, "Wrong size on GymGuiCreateMenuWidget_OnServerCreated");
static_assert(offsetof(GymGuiCreateMenuWidget_OnServerCreated, Success) == 0x000000, "Member 'GymGuiCreateMenuWidget_OnServerCreated::Success' has a wrong offset!");
static_assert(offsetof(GymGuiCreateMenuWidget_OnServerCreated, ConnectString) == 0x000008, "Member 'GymGuiCreateMenuWidget_OnServerCreated::ConnectString' has a wrong offset!");

// Function GYMGAME.GymGuiCreateMenuWidget.SelectKit
// 0x0010 (0x0010 - 0x0000)
struct GymGuiCreateMenuWidget_SelectKit final
{
public:
	class FString                                 KitId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiCreateMenuWidget_SelectKit) == 0x000008, "Wrong alignment on GymGuiCreateMenuWidget_SelectKit");
static_assert(sizeof(GymGuiCreateMenuWidget_SelectKit) == 0x000010, "Wrong size on GymGuiCreateMenuWidget_SelectKit");
static_assert(offsetof(GymGuiCreateMenuWidget_SelectKit, KitId) == 0x000000, "Member 'GymGuiCreateMenuWidget_SelectKit::KitId' has a wrong offset!");

// Function GYMGAME.GymGuiMainMenuWidget.SetTabActive
// 0x0004 (0x0004 - 0x0000)
struct GymGuiMainMenuWidget_SetTabActive final
{
public:
	int32                                         CanvasIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiMainMenuWidget_SetTabActive) == 0x000004, "Wrong alignment on GymGuiMainMenuWidget_SetTabActive");
static_assert(sizeof(GymGuiMainMenuWidget_SetTabActive) == 0x000004, "Wrong size on GymGuiMainMenuWidget_SetTabActive");
static_assert(offsetof(GymGuiMainMenuWidget_SetTabActive, CanvasIndex) == 0x000000, "Member 'GymGuiMainMenuWidget_SetTabActive::CanvasIndex' has a wrong offset!");

// Function GYMGAME.GymGuiEditorWidget.EditAssetProperty
// 0x0020 (0x0020 - 0x0000)
struct GymGuiEditorWidget_EditAssetProperty final
{
public:
	class AGymStaticLevelAsset*                   Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   AssetName;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiEditorWidget_EditAssetProperty) == 0x000008, "Wrong alignment on GymGuiEditorWidget_EditAssetProperty");
static_assert(sizeof(GymGuiEditorWidget_EditAssetProperty) == 0x000020, "Wrong size on GymGuiEditorWidget_EditAssetProperty");
static_assert(offsetof(GymGuiEditorWidget_EditAssetProperty, Asset) == 0x000000, "Member 'GymGuiEditorWidget_EditAssetProperty::Asset' has a wrong offset!");
static_assert(offsetof(GymGuiEditorWidget_EditAssetProperty, AssetName) == 0x000008, "Member 'GymGuiEditorWidget_EditAssetProperty::AssetName' has a wrong offset!");

// Function GYMGAME.GymGuiEditorWidget.GetThumbnail
// 0x0040 (0x0040 - 0x0000)
struct GymGuiEditorWidget_GetThumbnail final
{
public:
	struct FGymLevelAssetVariant                  Variant;                                           // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UTexture*                               ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiEditorWidget_GetThumbnail) == 0x000008, "Wrong alignment on GymGuiEditorWidget_GetThumbnail");
static_assert(sizeof(GymGuiEditorWidget_GetThumbnail) == 0x000040, "Wrong size on GymGuiEditorWidget_GetThumbnail");
static_assert(offsetof(GymGuiEditorWidget_GetThumbnail, Variant) == 0x000000, "Member 'GymGuiEditorWidget_GetThumbnail::Variant' has a wrong offset!");
static_assert(offsetof(GymGuiEditorWidget_GetThumbnail, ReturnValue) == 0x000038, "Member 'GymGuiEditorWidget_GetThumbnail::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiEditorWidget.IsMovingAsset
// 0x0001 (0x0001 - 0x0000)
struct GymGuiEditorWidget_IsMovingAsset final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiEditorWidget_IsMovingAsset) == 0x000001, "Wrong alignment on GymGuiEditorWidget_IsMovingAsset");
static_assert(sizeof(GymGuiEditorWidget_IsMovingAsset) == 0x000001, "Wrong size on GymGuiEditorWidget_IsMovingAsset");
static_assert(offsetof(GymGuiEditorWidget_IsMovingAsset, ReturnValue) == 0x000000, "Member 'GymGuiEditorWidget_IsMovingAsset::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiEditorWidget.OnEditAssetPropertyVariantChanged
// 0x0020 (0x0020 - 0x0000)
struct GymGuiEditorWidget_OnEditAssetPropertyVariantChanged final
{
public:
	class AGymStaticLevelAsset*                   Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   AssetName;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiEditorWidget_OnEditAssetPropertyVariantChanged) == 0x000008, "Wrong alignment on GymGuiEditorWidget_OnEditAssetPropertyVariantChanged");
static_assert(sizeof(GymGuiEditorWidget_OnEditAssetPropertyVariantChanged) == 0x000020, "Wrong size on GymGuiEditorWidget_OnEditAssetPropertyVariantChanged");
static_assert(offsetof(GymGuiEditorWidget_OnEditAssetPropertyVariantChanged, Asset) == 0x000000, "Member 'GymGuiEditorWidget_OnEditAssetPropertyVariantChanged::Asset' has a wrong offset!");
static_assert(offsetof(GymGuiEditorWidget_OnEditAssetPropertyVariantChanged, AssetName) == 0x000008, "Member 'GymGuiEditorWidget_OnEditAssetPropertyVariantChanged::AssetName' has a wrong offset!");

// Function GYMGAME.GymGuiEditorWidget.OnMovingAssetChanged
// 0x0001 (0x0001 - 0x0000)
struct GymGuiEditorWidget_OnMovingAssetChanged final
{
public:
	bool                                          bIsMovingAsset;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiEditorWidget_OnMovingAssetChanged) == 0x000001, "Wrong alignment on GymGuiEditorWidget_OnMovingAssetChanged");
static_assert(sizeof(GymGuiEditorWidget_OnMovingAssetChanged) == 0x000001, "Wrong size on GymGuiEditorWidget_OnMovingAssetChanged");
static_assert(offsetof(GymGuiEditorWidget_OnMovingAssetChanged, bIsMovingAsset) == 0x000000, "Member 'GymGuiEditorWidget_OnMovingAssetChanged::bIsMovingAsset' has a wrong offset!");

// Function GYMGAME.GymGuiEditorWidget.OnPropertiesChangedForAsset
// 0x0008 (0x0008 - 0x0000)
struct GymGuiEditorWidget_OnPropertiesChangedForAsset final
{
public:
	class AGymStaticLevelAsset*                   Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiEditorWidget_OnPropertiesChangedForAsset) == 0x000008, "Wrong alignment on GymGuiEditorWidget_OnPropertiesChangedForAsset");
static_assert(sizeof(GymGuiEditorWidget_OnPropertiesChangedForAsset) == 0x000008, "Wrong size on GymGuiEditorWidget_OnPropertiesChangedForAsset");
static_assert(offsetof(GymGuiEditorWidget_OnPropertiesChangedForAsset, Asset) == 0x000000, "Member 'GymGuiEditorWidget_OnPropertiesChangedForAsset::Asset' has a wrong offset!");

// Function GYMGAME.GymGuiEditorWidget.OpenCategoryAndVariant
// 0x0014 (0x0014 - 0x0000)
struct GymGuiEditorWidget_OpenCategoryAndVariant final
{
public:
	EGymEditorCategory                            Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymAssetVariantId                     VariantId;                                         // 0x0004(0x0010)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiEditorWidget_OpenCategoryAndVariant) == 0x000004, "Wrong alignment on GymGuiEditorWidget_OpenCategoryAndVariant");
static_assert(sizeof(GymGuiEditorWidget_OpenCategoryAndVariant) == 0x000014, "Wrong size on GymGuiEditorWidget_OpenCategoryAndVariant");
static_assert(offsetof(GymGuiEditorWidget_OpenCategoryAndVariant, Category) == 0x000000, "Member 'GymGuiEditorWidget_OpenCategoryAndVariant::Category' has a wrong offset!");
static_assert(offsetof(GymGuiEditorWidget_OpenCategoryAndVariant, VariantId) == 0x000004, "Member 'GymGuiEditorWidget_OpenCategoryAndVariant::VariantId' has a wrong offset!");

// Function GYMGAME.GymGuiEditorWidget.SelectVariant
// 0x0010 (0x0010 - 0x0000)
struct GymGuiEditorWidget_SelectVariant final
{
public:
	struct FGymAssetVariantId                     VariantId;                                         // 0x0000(0x0010)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiEditorWidget_SelectVariant) == 0x000004, "Wrong alignment on GymGuiEditorWidget_SelectVariant");
static_assert(sizeof(GymGuiEditorWidget_SelectVariant) == 0x000010, "Wrong size on GymGuiEditorWidget_SelectVariant");
static_assert(offsetof(GymGuiEditorWidget_SelectVariant, VariantId) == 0x000000, "Member 'GymGuiEditorWidget_SelectVariant::VariantId' has a wrong offset!");

// Function GYMGAME.GymGuiEditorWidget.SetOption
// 0x0040 (0x0040 - 0x0000)
struct GymGuiEditorWidget_SetOption final
{
public:
	struct FEditorGuiOption                       Option;                                            // 0x0000(0x0040)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiEditorWidget_SetOption) == 0x000008, "Wrong alignment on GymGuiEditorWidget_SetOption");
static_assert(sizeof(GymGuiEditorWidget_SetOption) == 0x000040, "Wrong size on GymGuiEditorWidget_SetOption");
static_assert(offsetof(GymGuiEditorWidget_SetOption, Option) == 0x000000, "Member 'GymGuiEditorWidget_SetOption::Option' has a wrong offset!");

// Function GYMGAME.GymGuiEditorWidget.SetTool
// 0x0008 (0x0008 - 0x0000)
struct GymGuiEditorWidget_SetTool final
{
public:
	class UGymToolSetting*                        Tool;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiEditorWidget_SetTool) == 0x000008, "Wrong alignment on GymGuiEditorWidget_SetTool");
static_assert(sizeof(GymGuiEditorWidget_SetTool) == 0x000008, "Wrong size on GymGuiEditorWidget_SetTool");
static_assert(offsetof(GymGuiEditorWidget_SetTool, Tool) == 0x000000, "Member 'GymGuiEditorWidget_SetTool::Tool' has a wrong offset!");

// Function GYMGAME.GymGuiEditorWidget.GetCategoryAssetEntries
// 0x0018 (0x0018 - 0x0000)
struct GymGuiEditorWidget_GetCategoryAssetEntries final
{
public:
	EGymEditorCategory                            Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGymLevelAssetData*>             ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiEditorWidget_GetCategoryAssetEntries) == 0x000008, "Wrong alignment on GymGuiEditorWidget_GetCategoryAssetEntries");
static_assert(sizeof(GymGuiEditorWidget_GetCategoryAssetEntries) == 0x000018, "Wrong size on GymGuiEditorWidget_GetCategoryAssetEntries");
static_assert(offsetof(GymGuiEditorWidget_GetCategoryAssetEntries, Category) == 0x000000, "Member 'GymGuiEditorWidget_GetCategoryAssetEntries::Category' has a wrong offset!");
static_assert(offsetof(GymGuiEditorWidget_GetCategoryAssetEntries, ReturnValue) == 0x000008, "Member 'GymGuiEditorWidget_GetCategoryAssetEntries::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiEditorWidget.IsEditingAssetProperty
// 0x0001 (0x0001 - 0x0000)
struct GymGuiEditorWidget_IsEditingAssetProperty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiEditorWidget_IsEditingAssetProperty) == 0x000001, "Wrong alignment on GymGuiEditorWidget_IsEditingAssetProperty");
static_assert(sizeof(GymGuiEditorWidget_IsEditingAssetProperty) == 0x000001, "Wrong size on GymGuiEditorWidget_IsEditingAssetProperty");
static_assert(offsetof(GymGuiEditorWidget_IsEditingAssetProperty, ReturnValue) == 0x000000, "Member 'GymGuiEditorWidget_IsEditingAssetProperty::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCareerFirstRules.GoalReached
// 0x0010 (0x0010 - 0x0000)
struct GymCareerFirstRules_GoalReached final
{
public:
	class AActor*                                 Goal;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGymCharacter*                          PlayerCharacter;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCareerFirstRules_GoalReached) == 0x000008, "Wrong alignment on GymCareerFirstRules_GoalReached");
static_assert(sizeof(GymCareerFirstRules_GoalReached) == 0x000010, "Wrong size on GymCareerFirstRules_GoalReached");
static_assert(offsetof(GymCareerFirstRules_GoalReached, Goal) == 0x000000, "Member 'GymCareerFirstRules_GoalReached::Goal' has a wrong offset!");
static_assert(offsetof(GymCareerFirstRules_GoalReached, PlayerCharacter) == 0x000008, "Member 'GymCareerFirstRules_GoalReached::PlayerCharacter' has a wrong offset!");

// Function GYMGAME.GymCareerRaveRules.OnIceCreamLocationCollided
// 0x0008 (0x0008 - 0x0000)
struct GymCareerRaveRules_OnIceCreamLocationCollided final
{
public:
	class AGymLocationObjectiveActor*             Location;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCareerRaveRules_OnIceCreamLocationCollided) == 0x000008, "Wrong alignment on GymCareerRaveRules_OnIceCreamLocationCollided");
static_assert(sizeof(GymCareerRaveRules_OnIceCreamLocationCollided) == 0x000008, "Wrong size on GymCareerRaveRules_OnIceCreamLocationCollided");
static_assert(offsetof(GymCareerRaveRules_OnIceCreamLocationCollided, Location) == 0x000000, "Member 'GymCareerRaveRules_OnIceCreamLocationCollided::Location' has a wrong offset!");

// Function GYMGAME.GymCareerReplicatedData.Multi_SetCompletedtasks
// 0x0010 (0x0010 - 0x0000)
struct GymCareerReplicatedData_Multi_SetCompletedtasks final
{
public:
	TArray<class FName>                           Tasks;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCareerReplicatedData_Multi_SetCompletedtasks) == 0x000008, "Wrong alignment on GymCareerReplicatedData_Multi_SetCompletedtasks");
static_assert(sizeof(GymCareerReplicatedData_Multi_SetCompletedtasks) == 0x000010, "Wrong size on GymCareerReplicatedData_Multi_SetCompletedtasks");
static_assert(offsetof(GymCareerReplicatedData_Multi_SetCompletedtasks, Tasks) == 0x000000, "Member 'GymCareerReplicatedData_Multi_SetCompletedtasks::Tasks' has a wrong offset!");

// Function GYMGAME.GymCareerReplicatedData.Multi_SetCurrentTask
// 0x0008 (0x0008 - 0x0000)
struct GymCareerReplicatedData_Multi_SetCurrentTask final
{
public:
	class UGymQuest*                              Task;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCareerReplicatedData_Multi_SetCurrentTask) == 0x000008, "Wrong alignment on GymCareerReplicatedData_Multi_SetCurrentTask");
static_assert(sizeof(GymCareerReplicatedData_Multi_SetCurrentTask) == 0x000008, "Wrong size on GymCareerReplicatedData_Multi_SetCurrentTask");
static_assert(offsetof(GymCareerReplicatedData_Multi_SetCurrentTask, Task) == 0x000000, "Member 'GymCareerReplicatedData_Multi_SetCurrentTask::Task' has a wrong offset!");

// Function GYMGAME.GymCareerReplicatedData.Multi_SetMaxTasks
// 0x0004 (0x0004 - 0x0000)
struct GymCareerReplicatedData_Multi_SetMaxTasks final
{
public:
	int32                                         Tasks;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCareerReplicatedData_Multi_SetMaxTasks) == 0x000004, "Wrong alignment on GymCareerReplicatedData_Multi_SetMaxTasks");
static_assert(sizeof(GymCareerReplicatedData_Multi_SetMaxTasks) == 0x000004, "Wrong size on GymCareerReplicatedData_Multi_SetMaxTasks");
static_assert(offsetof(GymCareerReplicatedData_Multi_SetMaxTasks, Tasks) == 0x000000, "Member 'GymCareerReplicatedData_Multi_SetMaxTasks::Tasks' has a wrong offset!");

// Function GYMGAME.GymCareerReplicatedData.Multi_SetOverrideMusic
// 0x0001 (0x0001 - 0x0000)
struct GymCareerReplicatedData_Multi_SetOverrideMusic final
{
public:
	bool                                          bOverride;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCareerReplicatedData_Multi_SetOverrideMusic) == 0x000001, "Wrong alignment on GymCareerReplicatedData_Multi_SetOverrideMusic");
static_assert(sizeof(GymCareerReplicatedData_Multi_SetOverrideMusic) == 0x000001, "Wrong size on GymCareerReplicatedData_Multi_SetOverrideMusic");
static_assert(offsetof(GymCareerReplicatedData_Multi_SetOverrideMusic, bOverride) == 0x000000, "Member 'GymCareerReplicatedData_Multi_SetOverrideMusic::bOverride' has a wrong offset!");

// Function GYMGAME.GymCareerReplicatedData.Multi_SetOverrideSegment
// 0x0004 (0x0004 - 0x0000)
struct GymCareerReplicatedData_Multi_SetOverrideSegment final
{
public:
	int32                                         Segment;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCareerReplicatedData_Multi_SetOverrideSegment) == 0x000004, "Wrong alignment on GymCareerReplicatedData_Multi_SetOverrideSegment");
static_assert(sizeof(GymCareerReplicatedData_Multi_SetOverrideSegment) == 0x000004, "Wrong size on GymCareerReplicatedData_Multi_SetOverrideSegment");
static_assert(offsetof(GymCareerReplicatedData_Multi_SetOverrideSegment, Segment) == 0x000000, "Member 'GymCareerReplicatedData_Multi_SetOverrideSegment::Segment' has a wrong offset!");

// Function GYMGAME.GymStaticLevelAsset.BP_AssetPropertyChanged
// 0x00D8 (0x00D8 - 0x0000)
struct GymStaticLevelAsset_BP_AssetPropertyChanged final
{
public:
	struct FGymProperty                           Property;                                          // 0x0000(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymStaticLevelAsset_BP_AssetPropertyChanged) == 0x000008, "Wrong alignment on GymStaticLevelAsset_BP_AssetPropertyChanged");
static_assert(sizeof(GymStaticLevelAsset_BP_AssetPropertyChanged) == 0x0000D8, "Wrong size on GymStaticLevelAsset_BP_AssetPropertyChanged");
static_assert(offsetof(GymStaticLevelAsset_BP_AssetPropertyChanged, Property) == 0x000000, "Member 'GymStaticLevelAsset_BP_AssetPropertyChanged::Property' has a wrong offset!");

// Function GYMGAME.GymStaticLevelAsset.GetBounds
// 0x0038 (0x0038 - 0x0000)
struct GymStaticLevelAsset_GetBounds final
{
public:
	struct FBox                                   ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymStaticLevelAsset_GetBounds) == 0x000008, "Wrong alignment on GymStaticLevelAsset_GetBounds");
static_assert(sizeof(GymStaticLevelAsset_GetBounds) == 0x000038, "Wrong size on GymStaticLevelAsset_GetBounds");
static_assert(offsetof(GymStaticLevelAsset_GetBounds, ReturnValue) == 0x000000, "Member 'GymStaticLevelAsset_GetBounds::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymStaticLevelAsset.GetGridBounds
// 0x0040 (0x0040 - 0x0000)
struct GymStaticLevelAsset_GetGridBounds final
{
public:
	int32                                         GridSize;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   ReturnValue;                                       // 0x0008(0x0038)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymStaticLevelAsset_GetGridBounds) == 0x000008, "Wrong alignment on GymStaticLevelAsset_GetGridBounds");
static_assert(sizeof(GymStaticLevelAsset_GetGridBounds) == 0x000040, "Wrong size on GymStaticLevelAsset_GetGridBounds");
static_assert(offsetof(GymStaticLevelAsset_GetGridBounds, GridSize) == 0x000000, "Member 'GymStaticLevelAsset_GetGridBounds::GridSize' has a wrong offset!");
static_assert(offsetof(GymStaticLevelAsset_GetGridBounds, ReturnValue) == 0x000008, "Member 'GymStaticLevelAsset_GetGridBounds::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymStaticLevelAsset.GetProperties
// 0x0010 (0x0010 - 0x0000)
struct GymStaticLevelAsset_GetProperties final
{
public:
	TArray<struct FGymProperty>                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymStaticLevelAsset_GetProperties) == 0x000008, "Wrong alignment on GymStaticLevelAsset_GetProperties");
static_assert(sizeof(GymStaticLevelAsset_GetProperties) == 0x000010, "Wrong size on GymStaticLevelAsset_GetProperties");
static_assert(offsetof(GymStaticLevelAsset_GetProperties, ReturnValue) == 0x000000, "Member 'GymStaticLevelAsset_GetProperties::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymStaticLevelAsset.GetProperty
// 0x00E0 (0x00E0 - 0x0000)
struct GymStaticLevelAsset_GetProperty final
{
public:
	class FName                                   PropertyId;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGymProperty                           ReturnValue;                                       // 0x0008(0x00D8)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymStaticLevelAsset_GetProperty) == 0x000008, "Wrong alignment on GymStaticLevelAsset_GetProperty");
static_assert(sizeof(GymStaticLevelAsset_GetProperty) == 0x0000E0, "Wrong size on GymStaticLevelAsset_GetProperty");
static_assert(offsetof(GymStaticLevelAsset_GetProperty, PropertyId) == 0x000000, "Member 'GymStaticLevelAsset_GetProperty::PropertyId' has a wrong offset!");
static_assert(offsetof(GymStaticLevelAsset_GetProperty, ReturnValue) == 0x000008, "Member 'GymStaticLevelAsset_GetProperty::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymStaticLevelAsset.OnEditorOpen
// 0x0001 (0x0001 - 0x0000)
struct GymStaticLevelAsset_OnEditorOpen final
{
public:
	bool                                          bOpen;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymStaticLevelAsset_OnEditorOpen) == 0x000001, "Wrong alignment on GymStaticLevelAsset_OnEditorOpen");
static_assert(sizeof(GymStaticLevelAsset_OnEditorOpen) == 0x000001, "Wrong size on GymStaticLevelAsset_OnEditorOpen");
static_assert(offsetof(GymStaticLevelAsset_OnEditorOpen, bOpen) == 0x000000, "Member 'GymStaticLevelAsset_OnEditorOpen::bOpen' has a wrong offset!");

// Function GYMGAME.GymStaticLevelAsset.GetRecordId
// 0x0004 (0x0004 - 0x0000)
struct GymStaticLevelAsset_GetRecordId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymStaticLevelAsset_GetRecordId) == 0x000004, "Wrong alignment on GymStaticLevelAsset_GetRecordId");
static_assert(sizeof(GymStaticLevelAsset_GetRecordId) == 0x000004, "Wrong size on GymStaticLevelAsset_GetRecordId");
static_assert(offsetof(GymStaticLevelAsset_GetRecordId, ReturnValue) == 0x000000, "Member 'GymStaticLevelAsset_GetRecordId::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymStaticLevelAsset.HasRecordId
// 0x0001 (0x0001 - 0x0000)
struct GymStaticLevelAsset_HasRecordId final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymStaticLevelAsset_HasRecordId) == 0x000001, "Wrong alignment on GymStaticLevelAsset_HasRecordId");
static_assert(sizeof(GymStaticLevelAsset_HasRecordId) == 0x000001, "Wrong size on GymStaticLevelAsset_HasRecordId");
static_assert(offsetof(GymStaticLevelAsset_HasRecordId, ReturnValue) == 0x000000, "Member 'GymStaticLevelAsset_HasRecordId::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymLootActor.SetVisibility
// 0x0001 (0x0001 - 0x0000)
struct GymLootActor_SetVisibility final
{
public:
	bool                                          bVisibility;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymLootActor_SetVisibility) == 0x000001, "Wrong alignment on GymLootActor_SetVisibility");
static_assert(sizeof(GymLootActor_SetVisibility) == 0x000001, "Wrong size on GymLootActor_SetVisibility");
static_assert(offsetof(GymLootActor_SetVisibility, bVisibility) == 0x000000, "Member 'GymLootActor_SetVisibility::bVisibility' has a wrong offset!");

// Function GYMGAME.GymGuiPodiumNameplateWidget.BP_SetPlayerScore
// 0x0028 (0x0028 - 0x0000)
struct GymGuiPodiumNameplateWidget_BP_SetPlayerScore final
{
public:
	struct FGymPodiumScoreData                    Score;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiPodiumNameplateWidget_BP_SetPlayerScore) == 0x000008, "Wrong alignment on GymGuiPodiumNameplateWidget_BP_SetPlayerScore");
static_assert(sizeof(GymGuiPodiumNameplateWidget_BP_SetPlayerScore) == 0x000028, "Wrong size on GymGuiPodiumNameplateWidget_BP_SetPlayerScore");
static_assert(offsetof(GymGuiPodiumNameplateWidget_BP_SetPlayerScore, Score) == 0x000000, "Member 'GymGuiPodiumNameplateWidget_BP_SetPlayerScore::Score' has a wrong offset!");

// Function GYMGAME.GymLootRules.OnLootCollected
// 0x0010 (0x0010 - 0x0000)
struct GymLootRules_OnLootCollected final
{
public:
	class AGymLootActor*                          LootActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymLootRules_OnLootCollected) == 0x000008, "Wrong alignment on GymLootRules_OnLootCollected");
static_assert(sizeof(GymLootRules_OnLootCollected) == 0x000010, "Wrong size on GymLootRules_OnLootCollected");
static_assert(offsetof(GymLootRules_OnLootCollected, LootActor) == 0x000000, "Member 'GymLootRules_OnLootCollected::LootActor' has a wrong offset!");
static_assert(offsetof(GymLootRules_OnLootCollected, Player) == 0x000008, "Member 'GymLootRules_OnLootCollected::Player' has a wrong offset!");

// Function GYMGAME.GymCharacter.EnableBotTick
// 0x0001 (0x0001 - 0x0000)
struct GymCharacter_EnableBotTick final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCharacter_EnableBotTick) == 0x000001, "Wrong alignment on GymCharacter_EnableBotTick");
static_assert(sizeof(GymCharacter_EnableBotTick) == 0x000001, "Wrong size on GymCharacter_EnableBotTick");
static_assert(offsetof(GymCharacter_EnableBotTick, bEnable) == 0x000000, "Member 'GymCharacter_EnableBotTick::bEnable' has a wrong offset!");

// Function GYMGAME.GymCharacter.ForceSetPlayerLocationAndRotation
// 0x0030 (0x0030 - 0x0000)
struct GymCharacter_ForceSetPlayerLocationAndRotation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCharacter_ForceSetPlayerLocationAndRotation) == 0x000008, "Wrong alignment on GymCharacter_ForceSetPlayerLocationAndRotation");
static_assert(sizeof(GymCharacter_ForceSetPlayerLocationAndRotation) == 0x000030, "Wrong size on GymCharacter_ForceSetPlayerLocationAndRotation");
static_assert(offsetof(GymCharacter_ForceSetPlayerLocationAndRotation, Location) == 0x000000, "Member 'GymCharacter_ForceSetPlayerLocationAndRotation::Location' has a wrong offset!");
static_assert(offsetof(GymCharacter_ForceSetPlayerLocationAndRotation, Rotation) == 0x000018, "Member 'GymCharacter_ForceSetPlayerLocationAndRotation::Rotation' has a wrong offset!");

// Function GYMGAME.GymCharacter.ForceStateSyncEventRPC
// 0x0030 (0x0030 - 0x0000)
struct GymCharacter_ForceStateSyncEventRPC final
{
public:
	double                                        Timestamp;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EventInSeconds;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Loc;                                               // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FireOnServer;                                      // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FireOnClient;                                      // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClientIgnoreEventIfLate;                           // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymCharacter_ForceStateSyncEventRPC) == 0x000008, "Wrong alignment on GymCharacter_ForceStateSyncEventRPC");
static_assert(sizeof(GymCharacter_ForceStateSyncEventRPC) == 0x000030, "Wrong size on GymCharacter_ForceStateSyncEventRPC");
static_assert(offsetof(GymCharacter_ForceStateSyncEventRPC, Timestamp) == 0x000000, "Member 'GymCharacter_ForceStateSyncEventRPC::Timestamp' has a wrong offset!");
static_assert(offsetof(GymCharacter_ForceStateSyncEventRPC, EventInSeconds) == 0x000008, "Member 'GymCharacter_ForceStateSyncEventRPC::EventInSeconds' has a wrong offset!");
static_assert(offsetof(GymCharacter_ForceStateSyncEventRPC, Loc) == 0x000010, "Member 'GymCharacter_ForceStateSyncEventRPC::Loc' has a wrong offset!");
static_assert(offsetof(GymCharacter_ForceStateSyncEventRPC, FireOnServer) == 0x000028, "Member 'GymCharacter_ForceStateSyncEventRPC::FireOnServer' has a wrong offset!");
static_assert(offsetof(GymCharacter_ForceStateSyncEventRPC, FireOnClient) == 0x000029, "Member 'GymCharacter_ForceStateSyncEventRPC::FireOnClient' has a wrong offset!");
static_assert(offsetof(GymCharacter_ForceStateSyncEventRPC, ClientIgnoreEventIfLate) == 0x00002A, "Member 'GymCharacter_ForceStateSyncEventRPC::ClientIgnoreEventIfLate' has a wrong offset!");

// Function GYMGAME.GymCharacter.Multi_ImportAndPlayRecord
// 0x0010 (0x0010 - 0x0000)
struct GymCharacter_Multi_ImportAndPlayRecord final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCharacter_Multi_ImportAndPlayRecord) == 0x000008, "Wrong alignment on GymCharacter_Multi_ImportAndPlayRecord");
static_assert(sizeof(GymCharacter_Multi_ImportAndPlayRecord) == 0x000010, "Wrong size on GymCharacter_Multi_ImportAndPlayRecord");
static_assert(offsetof(GymCharacter_Multi_ImportAndPlayRecord, Filename) == 0x000000, "Member 'GymCharacter_Multi_ImportAndPlayRecord::Filename' has a wrong offset!");

// Function GYMGAME.GymCharacter.Multi_Ragdoll
// 0x0001 (0x0001 - 0x0000)
struct GymCharacter_Multi_Ragdoll final
{
public:
	bool                                          bGetUpWhenPossible;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCharacter_Multi_Ragdoll) == 0x000001, "Wrong alignment on GymCharacter_Multi_Ragdoll");
static_assert(sizeof(GymCharacter_Multi_Ragdoll) == 0x000001, "Wrong size on GymCharacter_Multi_Ragdoll");
static_assert(offsetof(GymCharacter_Multi_Ragdoll, bGetUpWhenPossible) == 0x000000, "Member 'GymCharacter_Multi_Ragdoll::bGetUpWhenPossible' has a wrong offset!");

// Function GYMGAME.GymCharacter.Multi_Ragdoll_AddForce
// 0x0018 (0x0018 - 0x0000)
struct GymCharacter_Multi_Ragdoll_AddForce final
{
public:
	struct FVector                                Impulse;                                           // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCharacter_Multi_Ragdoll_AddForce) == 0x000008, "Wrong alignment on GymCharacter_Multi_Ragdoll_AddForce");
static_assert(sizeof(GymCharacter_Multi_Ragdoll_AddForce) == 0x000018, "Wrong size on GymCharacter_Multi_Ragdoll_AddForce");
static_assert(offsetof(GymCharacter_Multi_Ragdoll_AddForce, Impulse) == 0x000000, "Member 'GymCharacter_Multi_Ragdoll_AddForce::Impulse' has a wrong offset!");

// Function GYMGAME.GymCharacter.Server_ImportAndPlayRecord
// 0x0010 (0x0010 - 0x0000)
struct GymCharacter_Server_ImportAndPlayRecord final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCharacter_Server_ImportAndPlayRecord) == 0x000008, "Wrong alignment on GymCharacter_Server_ImportAndPlayRecord");
static_assert(sizeof(GymCharacter_Server_ImportAndPlayRecord) == 0x000010, "Wrong size on GymCharacter_Server_ImportAndPlayRecord");
static_assert(offsetof(GymCharacter_Server_ImportAndPlayRecord, Filename) == 0x000000, "Member 'GymCharacter_Server_ImportAndPlayRecord::Filename' has a wrong offset!");

// Function GYMGAME.GymCharacter.SetControlTickEnabled
// 0x0018 (0x0018 - 0x0000)
struct GymCharacter_SetControlTickEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCharacter_SetControlTickEnabled) == 0x000008, "Wrong alignment on GymCharacter_SetControlTickEnabled");
static_assert(sizeof(GymCharacter_SetControlTickEnabled) == 0x000018, "Wrong size on GymCharacter_SetControlTickEnabled");
static_assert(offsetof(GymCharacter_SetControlTickEnabled, bEnabled) == 0x000000, "Member 'GymCharacter_SetControlTickEnabled::bEnabled' has a wrong offset!");
static_assert(offsetof(GymCharacter_SetControlTickEnabled, Name_0) == 0x000008, "Member 'GymCharacter_SetControlTickEnabled::Name_0' has a wrong offset!");

// Function GYMGAME.GymCharacter.SetEditMode_Server
// 0x0001 (0x0001 - 0x0000)
struct GymCharacter_SetEditMode_Server final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCharacter_SetEditMode_Server) == 0x000001, "Wrong alignment on GymCharacter_SetEditMode_Server");
static_assert(sizeof(GymCharacter_SetEditMode_Server) == 0x000001, "Wrong size on GymCharacter_SetEditMode_Server");
static_assert(offsetof(GymCharacter_SetEditMode_Server, Value) == 0x000000, "Member 'GymCharacter_SetEditMode_Server::Value' has a wrong offset!");

// Function GYMGAME.GymCharacter.UpdateManualServerWorldTimeDeltaRPC
// 0x0008 (0x0008 - 0x0000)
struct GymCharacter_UpdateManualServerWorldTimeDeltaRPC final
{
public:
	double                                        ServerWorldTime;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCharacter_UpdateManualServerWorldTimeDeltaRPC) == 0x000008, "Wrong alignment on GymCharacter_UpdateManualServerWorldTimeDeltaRPC");
static_assert(sizeof(GymCharacter_UpdateManualServerWorldTimeDeltaRPC) == 0x000008, "Wrong size on GymCharacter_UpdateManualServerWorldTimeDeltaRPC");
static_assert(offsetof(GymCharacter_UpdateManualServerWorldTimeDeltaRPC, ServerWorldTime) == 0x000000, "Member 'GymCharacter_UpdateManualServerWorldTimeDeltaRPC::ServerWorldTime' has a wrong offset!");

// Function GYMGAME.GymCharacter.GetAnimationControl
// 0x0008 (0x0008 - 0x0000)
struct GymCharacter_GetAnimationControl final
{
public:
	class UGymAnimationControl*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCharacter_GetAnimationControl) == 0x000008, "Wrong alignment on GymCharacter_GetAnimationControl");
static_assert(sizeof(GymCharacter_GetAnimationControl) == 0x000008, "Wrong size on GymCharacter_GetAnimationControl");
static_assert(offsetof(GymCharacter_GetAnimationControl, ReturnValue) == 0x000000, "Member 'GymCharacter_GetAnimationControl::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCharacter.GetCameraControl
// 0x0008 (0x0008 - 0x0000)
struct GymCharacter_GetCameraControl final
{
public:
	class UGymCameraControl*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCharacter_GetCameraControl) == 0x000008, "Wrong alignment on GymCharacter_GetCameraControl");
static_assert(sizeof(GymCharacter_GetCameraControl) == 0x000008, "Wrong size on GymCharacter_GetCameraControl");
static_assert(offsetof(GymCharacter_GetCameraControl, ReturnValue) == 0x000000, "Member 'GymCharacter_GetCameraControl::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCharacter.GetCustomizationControl
// 0x0008 (0x0008 - 0x0000)
struct GymCharacter_GetCustomizationControl final
{
public:
	class UGymCustomizationControl*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCharacter_GetCustomizationControl) == 0x000008, "Wrong alignment on GymCharacter_GetCustomizationControl");
static_assert(sizeof(GymCharacter_GetCustomizationControl) == 0x000008, "Wrong size on GymCharacter_GetCustomizationControl");
static_assert(offsetof(GymCharacter_GetCustomizationControl, ReturnValue) == 0x000000, "Member 'GymCharacter_GetCustomizationControl::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCharacter.GetDialogueControl
// 0x0008 (0x0008 - 0x0000)
struct GymCharacter_GetDialogueControl final
{
public:
	class UGymDialogueControl*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCharacter_GetDialogueControl) == 0x000008, "Wrong alignment on GymCharacter_GetDialogueControl");
static_assert(sizeof(GymCharacter_GetDialogueControl) == 0x000008, "Wrong size on GymCharacter_GetDialogueControl");
static_assert(offsetof(GymCharacter_GetDialogueControl, ReturnValue) == 0x000000, "Member 'GymCharacter_GetDialogueControl::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCharacter.GetEditorControl
// 0x0008 (0x0008 - 0x0000)
struct GymCharacter_GetEditorControl final
{
public:
	class UGymEditorControl*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCharacter_GetEditorControl) == 0x000008, "Wrong alignment on GymCharacter_GetEditorControl");
static_assert(sizeof(GymCharacter_GetEditorControl) == 0x000008, "Wrong size on GymCharacter_GetEditorControl");
static_assert(offsetof(GymCharacter_GetEditorControl, ReturnValue) == 0x000000, "Member 'GymCharacter_GetEditorControl::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCharacter.GetGymController
// 0x0008 (0x0008 - 0x0000)
struct GymCharacter_GetGymController final
{
public:
	class AGymPlayerController*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCharacter_GetGymController) == 0x000008, "Wrong alignment on GymCharacter_GetGymController");
static_assert(sizeof(GymCharacter_GetGymController) == 0x000008, "Wrong size on GymCharacter_GetGymController");
static_assert(offsetof(GymCharacter_GetGymController, ReturnValue) == 0x000000, "Member 'GymCharacter_GetGymController::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCharacter.GetGymPlayerState
// 0x0008 (0x0008 - 0x0000)
struct GymCharacter_GetGymPlayerState final
{
public:
	class AGymPlayerState*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCharacter_GetGymPlayerState) == 0x000008, "Wrong alignment on GymCharacter_GetGymPlayerState");
static_assert(sizeof(GymCharacter_GetGymPlayerState) == 0x000008, "Wrong size on GymCharacter_GetGymPlayerState");
static_assert(offsetof(GymCharacter_GetGymPlayerState, ReturnValue) == 0x000000, "Member 'GymCharacter_GetGymPlayerState::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCharacter.GetInputControl
// 0x0008 (0x0008 - 0x0000)
struct GymCharacter_GetInputControl final
{
public:
	class UGymInputControl*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCharacter_GetInputControl) == 0x000008, "Wrong alignment on GymCharacter_GetInputControl");
static_assert(sizeof(GymCharacter_GetInputControl) == 0x000008, "Wrong size on GymCharacter_GetInputControl");
static_assert(offsetof(GymCharacter_GetInputControl, ReturnValue) == 0x000000, "Member 'GymCharacter_GetInputControl::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCharacter.GetRuleControl
// 0x0008 (0x0008 - 0x0000)
struct GymCharacter_GetRuleControl final
{
public:
	class UGymRuleControl*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCharacter_GetRuleControl) == 0x000008, "Wrong alignment on GymCharacter_GetRuleControl");
static_assert(sizeof(GymCharacter_GetRuleControl) == 0x000008, "Wrong size on GymCharacter_GetRuleControl");
static_assert(offsetof(GymCharacter_GetRuleControl, ReturnValue) == 0x000000, "Member 'GymCharacter_GetRuleControl::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCharacter.RenderAssetThumbnails
// 0x0010 (0x0010 - 0x0000)
struct GymCharacter_RenderAssetThumbnails final
{
public:
	class FString                                 Arg1;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCharacter_RenderAssetThumbnails) == 0x000008, "Wrong alignment on GymCharacter_RenderAssetThumbnails");
static_assert(sizeof(GymCharacter_RenderAssetThumbnails) == 0x000010, "Wrong size on GymCharacter_RenderAssetThumbnails");
static_assert(offsetof(GymCharacter_RenderAssetThumbnails, Arg1) == 0x000000, "Member 'GymCharacter_RenderAssetThumbnails::Arg1' has a wrong offset!");

// Function GYMGAME.GymCharacter.RenderCustomizationPreviews
// 0x0020 (0x0020 - 0x0000)
struct GymCharacter_RenderCustomizationPreviews final
{
public:
	class FString                                 Arg1;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Arg2;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCharacter_RenderCustomizationPreviews) == 0x000008, "Wrong alignment on GymCharacter_RenderCustomizationPreviews");
static_assert(sizeof(GymCharacter_RenderCustomizationPreviews) == 0x000020, "Wrong size on GymCharacter_RenderCustomizationPreviews");
static_assert(offsetof(GymCharacter_RenderCustomizationPreviews, Arg1) == 0x000000, "Member 'GymCharacter_RenderCustomizationPreviews::Arg1' has a wrong offset!");
static_assert(offsetof(GymCharacter_RenderCustomizationPreviews, Arg2) == 0x000010, "Member 'GymCharacter_RenderCustomizationPreviews::Arg2' has a wrong offset!");

// Function GYMGAME.GymCharacter.RenderCustomizationThumbnails
// 0x0020 (0x0020 - 0x0000)
struct GymCharacter_RenderCustomizationThumbnails final
{
public:
	class FString                                 Arg1;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Arg2;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCharacter_RenderCustomizationThumbnails) == 0x000008, "Wrong alignment on GymCharacter_RenderCustomizationThumbnails");
static_assert(sizeof(GymCharacter_RenderCustomizationThumbnails) == 0x000020, "Wrong size on GymCharacter_RenderCustomizationThumbnails");
static_assert(offsetof(GymCharacter_RenderCustomizationThumbnails, Arg1) == 0x000000, "Member 'GymCharacter_RenderCustomizationThumbnails::Arg1' has a wrong offset!");
static_assert(offsetof(GymCharacter_RenderCustomizationThumbnails, Arg2) == 0x000010, "Member 'GymCharacter_RenderCustomizationThumbnails::Arg2' has a wrong offset!");

// Function GYMGAME.GymCharacter.ReplaceAssetThumbnails
// 0x0010 (0x0010 - 0x0000)
struct GymCharacter_ReplaceAssetThumbnails final
{
public:
	class FString                                 Arg1;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCharacter_ReplaceAssetThumbnails) == 0x000008, "Wrong alignment on GymCharacter_ReplaceAssetThumbnails");
static_assert(sizeof(GymCharacter_ReplaceAssetThumbnails) == 0x000010, "Wrong size on GymCharacter_ReplaceAssetThumbnails");
static_assert(offsetof(GymCharacter_ReplaceAssetThumbnails, Arg1) == 0x000000, "Member 'GymCharacter_ReplaceAssetThumbnails::Arg1' has a wrong offset!");

// Function GYMGAME.GymCharacter.ReplaceCustomizationPreviews
// 0x0010 (0x0010 - 0x0000)
struct GymCharacter_ReplaceCustomizationPreviews final
{
public:
	class FString                                 Arg1;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCharacter_ReplaceCustomizationPreviews) == 0x000008, "Wrong alignment on GymCharacter_ReplaceCustomizationPreviews");
static_assert(sizeof(GymCharacter_ReplaceCustomizationPreviews) == 0x000010, "Wrong size on GymCharacter_ReplaceCustomizationPreviews");
static_assert(offsetof(GymCharacter_ReplaceCustomizationPreviews, Arg1) == 0x000000, "Member 'GymCharacter_ReplaceCustomizationPreviews::Arg1' has a wrong offset!");

// Function GYMGAME.GymCharacter.ReplaceCustomizationThumbnails
// 0x0010 (0x0010 - 0x0000)
struct GymCharacter_ReplaceCustomizationThumbnails final
{
public:
	class FString                                 Arg1;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCharacter_ReplaceCustomizationThumbnails) == 0x000008, "Wrong alignment on GymCharacter_ReplaceCustomizationThumbnails");
static_assert(sizeof(GymCharacter_ReplaceCustomizationThumbnails) == 0x000010, "Wrong size on GymCharacter_ReplaceCustomizationThumbnails");
static_assert(offsetof(GymCharacter_ReplaceCustomizationThumbnails, Arg1) == 0x000000, "Member 'GymCharacter_ReplaceCustomizationThumbnails::Arg1' has a wrong offset!");

// Function GYMGAME.GymCharacter.WaitingForRespawn
// 0x0001 (0x0001 - 0x0000)
struct GymCharacter_WaitingForRespawn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCharacter_WaitingForRespawn) == 0x000001, "Wrong alignment on GymCharacter_WaitingForRespawn");
static_assert(sizeof(GymCharacter_WaitingForRespawn) == 0x000001, "Wrong size on GymCharacter_WaitingForRespawn");
static_assert(offsetof(GymCharacter_WaitingForRespawn, ReturnValue) == 0x000000, "Member 'GymCharacter_WaitingForRespawn::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCharacterAnimInstance.OnAnimationNotify
// 0x0010 (0x0010 - 0x0000)
struct GymCharacterAnimInstance_OnAnimationNotify final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCharacterAnimInstance_OnAnimationNotify) == 0x000008, "Wrong alignment on GymCharacterAnimInstance_OnAnimationNotify");
static_assert(sizeof(GymCharacterAnimInstance_OnAnimationNotify) == 0x000010, "Wrong size on GymCharacterAnimInstance_OnAnimationNotify");
static_assert(offsetof(GymCharacterAnimInstance_OnAnimationNotify, Name_0) == 0x000000, "Member 'GymCharacterAnimInstance_OnAnimationNotify::Name_0' has a wrong offset!");

// Function GYMGAME.GymGuiPlaylistWidget.GetPlaylistName
// 0x0010 (0x0010 - 0x0000)
struct GymGuiPlaylistWidget_GetPlaylistName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiPlaylistWidget_GetPlaylistName) == 0x000008, "Wrong alignment on GymGuiPlaylistWidget_GetPlaylistName");
static_assert(sizeof(GymGuiPlaylistWidget_GetPlaylistName) == 0x000010, "Wrong size on GymGuiPlaylistWidget_GetPlaylistName");
static_assert(offsetof(GymGuiPlaylistWidget_GetPlaylistName, ReturnValue) == 0x000000, "Member 'GymGuiPlaylistWidget_GetPlaylistName::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiPlaylistWidget.OpenScoreboard
// 0x0001 (0x0001 - 0x0000)
struct GymGuiPlaylistWidget_OpenScoreboard final
{
public:
	bool                                          bIsValidLevel;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiPlaylistWidget_OpenScoreboard) == 0x000001, "Wrong alignment on GymGuiPlaylistWidget_OpenScoreboard");
static_assert(sizeof(GymGuiPlaylistWidget_OpenScoreboard) == 0x000001, "Wrong size on GymGuiPlaylistWidget_OpenScoreboard");
static_assert(offsetof(GymGuiPlaylistWidget_OpenScoreboard, bIsValidLevel) == 0x000000, "Member 'GymGuiPlaylistWidget_OpenScoreboard::bIsValidLevel' has a wrong offset!");

// Function GYMGAME.GymGuiPlaylistWidget.GetLevelCount
// 0x0004 (0x0004 - 0x0000)
struct GymGuiPlaylistWidget_GetLevelCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiPlaylistWidget_GetLevelCount) == 0x000004, "Wrong alignment on GymGuiPlaylistWidget_GetLevelCount");
static_assert(sizeof(GymGuiPlaylistWidget_GetLevelCount) == 0x000004, "Wrong size on GymGuiPlaylistWidget_GetLevelCount");
static_assert(offsetof(GymGuiPlaylistWidget_GetLevelCount, ReturnValue) == 0x000000, "Member 'GymGuiPlaylistWidget_GetLevelCount::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiPlaylistWidget.IsLocalAndFinal
// 0x0001 (0x0001 - 0x0000)
struct GymGuiPlaylistWidget_IsLocalAndFinal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiPlaylistWidget_IsLocalAndFinal) == 0x000001, "Wrong alignment on GymGuiPlaylistWidget_IsLocalAndFinal");
static_assert(sizeof(GymGuiPlaylistWidget_IsLocalAndFinal) == 0x000001, "Wrong size on GymGuiPlaylistWidget_IsLocalAndFinal");
static_assert(offsetof(GymGuiPlaylistWidget_IsLocalAndFinal, ReturnValue) == 0x000000, "Member 'GymGuiPlaylistWidget_IsLocalAndFinal::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiPlaylistWidget.IsLocalPlaylist
// 0x0001 (0x0001 - 0x0000)
struct GymGuiPlaylistWidget_IsLocalPlaylist final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiPlaylistWidget_IsLocalPlaylist) == 0x000001, "Wrong alignment on GymGuiPlaylistWidget_IsLocalPlaylist");
static_assert(sizeof(GymGuiPlaylistWidget_IsLocalPlaylist) == 0x000001, "Wrong size on GymGuiPlaylistWidget_IsLocalPlaylist");
static_assert(offsetof(GymGuiPlaylistWidget_IsLocalPlaylist, ReturnValue) == 0x000000, "Member 'GymGuiPlaylistWidget_IsLocalPlaylist::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiPlaylistWidget.IsSingleCareerLevel
// 0x0001 (0x0001 - 0x0000)
struct GymGuiPlaylistWidget_IsSingleCareerLevel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiPlaylistWidget_IsSingleCareerLevel) == 0x000001, "Wrong alignment on GymGuiPlaylistWidget_IsSingleCareerLevel");
static_assert(sizeof(GymGuiPlaylistWidget_IsSingleCareerLevel) == 0x000001, "Wrong size on GymGuiPlaylistWidget_IsSingleCareerLevel");
static_assert(offsetof(GymGuiPlaylistWidget_IsSingleCareerLevel, ReturnValue) == 0x000000, "Member 'GymGuiPlaylistWidget_IsSingleCareerLevel::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiRuleStateWidget.OnEliminated
// 0x0001 (0x0001 - 0x0000)
struct GymGuiRuleStateWidget_OnEliminated final
{
public:
	EEliminationReason                            EliminationReason;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiRuleStateWidget_OnEliminated) == 0x000001, "Wrong alignment on GymGuiRuleStateWidget_OnEliminated");
static_assert(sizeof(GymGuiRuleStateWidget_OnEliminated) == 0x000001, "Wrong size on GymGuiRuleStateWidget_OnEliminated");
static_assert(offsetof(GymGuiRuleStateWidget_OnEliminated, EliminationReason) == 0x000000, "Member 'GymGuiRuleStateWidget_OnEliminated::EliminationReason' has a wrong offset!");

// Function GYMGAME.GymGuiRuleStateWidget.OnFinished
// 0x0001 (0x0001 - 0x0000)
struct GymGuiRuleStateWidget_OnFinished final
{
public:
	bool                                          bIsRoyale;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiRuleStateWidget_OnFinished) == 0x000001, "Wrong alignment on GymGuiRuleStateWidget_OnFinished");
static_assert(sizeof(GymGuiRuleStateWidget_OnFinished) == 0x000001, "Wrong size on GymGuiRuleStateWidget_OnFinished");
static_assert(offsetof(GymGuiRuleStateWidget_OnFinished, bIsRoyale) == 0x000000, "Member 'GymGuiRuleStateWidget_OnFinished::bIsRoyale' has a wrong offset!");

// Function GYMGAME.GymGuiRuleStateWidget.ParticipantReachedCheckpoint
// 0x0004 (0x0004 - 0x0000)
struct GymGuiRuleStateWidget_ParticipantReachedCheckpoint final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiRuleStateWidget_ParticipantReachedCheckpoint) == 0x000004, "Wrong alignment on GymGuiRuleStateWidget_ParticipantReachedCheckpoint");
static_assert(sizeof(GymGuiRuleStateWidget_ParticipantReachedCheckpoint) == 0x000004, "Wrong size on GymGuiRuleStateWidget_ParticipantReachedCheckpoint");
static_assert(offsetof(GymGuiRuleStateWidget_ParticipantReachedCheckpoint, Index_0) == 0x000000, "Member 'GymGuiRuleStateWidget_ParticipantReachedCheckpoint::Index_0' has a wrong offset!");

// Function GYMGAME.GymGuiRuleStateWidget.GetBasicParticipantData
// 0x0008 (0x0008 - 0x0000)
struct GymGuiRuleStateWidget_GetBasicParticipantData final
{
public:
	class UGymParticipantRepData*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiRuleStateWidget_GetBasicParticipantData) == 0x000008, "Wrong alignment on GymGuiRuleStateWidget_GetBasicParticipantData");
static_assert(sizeof(GymGuiRuleStateWidget_GetBasicParticipantData) == 0x000008, "Wrong size on GymGuiRuleStateWidget_GetBasicParticipantData");
static_assert(offsetof(GymGuiRuleStateWidget_GetBasicParticipantData, ReturnValue) == 0x000000, "Member 'GymGuiRuleStateWidget_GetBasicParticipantData::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiRuleStateWidget.GetBasicRuleData
// 0x0008 (0x0008 - 0x0000)
struct GymGuiRuleStateWidget_GetBasicRuleData final
{
public:
	class UGymRuleReplicatedData*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiRuleStateWidget_GetBasicRuleData) == 0x000008, "Wrong alignment on GymGuiRuleStateWidget_GetBasicRuleData");
static_assert(sizeof(GymGuiRuleStateWidget_GetBasicRuleData) == 0x000008, "Wrong size on GymGuiRuleStateWidget_GetBasicRuleData");
static_assert(offsetof(GymGuiRuleStateWidget_GetBasicRuleData, ReturnValue) == 0x000000, "Member 'GymGuiRuleStateWidget_GetBasicRuleData::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCharacterCustomizationWidget.IsAssetOwned
// 0x0020 (0x0020 - 0x0000)
struct GymCharacterCustomizationWidget_IsAssetOwned final
{
public:
	struct FGymInventory                          Inventory;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UGymCustomizationAsset*           Asset;                                             // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymCharacterCustomizationWidget_IsAssetOwned) == 0x000008, "Wrong alignment on GymCharacterCustomizationWidget_IsAssetOwned");
static_assert(sizeof(GymCharacterCustomizationWidget_IsAssetOwned) == 0x000020, "Wrong size on GymCharacterCustomizationWidget_IsAssetOwned");
static_assert(offsetof(GymCharacterCustomizationWidget_IsAssetOwned, Inventory) == 0x000000, "Member 'GymCharacterCustomizationWidget_IsAssetOwned::Inventory' has a wrong offset!");
static_assert(offsetof(GymCharacterCustomizationWidget_IsAssetOwned, Asset) == 0x000010, "Member 'GymCharacterCustomizationWidget_IsAssetOwned::Asset' has a wrong offset!");
static_assert(offsetof(GymCharacterCustomizationWidget_IsAssetOwned, ReturnValue) == 0x000018, "Member 'GymCharacterCustomizationWidget_IsAssetOwned::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCharacterCustomizationWidget.GetOptions
// 0x0018 (0x0018 - 0x0000)
struct GymCharacterCustomizationWidget_GetOptions final
{
public:
	class FName                                   CharacterSlot;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGymCharacterCustomizationGUIOption> ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCharacterCustomizationWidget_GetOptions) == 0x000008, "Wrong alignment on GymCharacterCustomizationWidget_GetOptions");
static_assert(sizeof(GymCharacterCustomizationWidget_GetOptions) == 0x000018, "Wrong size on GymCharacterCustomizationWidget_GetOptions");
static_assert(offsetof(GymCharacterCustomizationWidget_GetOptions, CharacterSlot) == 0x000000, "Member 'GymCharacterCustomizationWidget_GetOptions::CharacterSlot' has a wrong offset!");
static_assert(offsetof(GymCharacterCustomizationWidget_GetOptions, ReturnValue) == 0x000008, "Member 'GymCharacterCustomizationWidget_GetOptions::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCharacterCustomizationWidget.ApplyCustomizationAttribute
// 0x0050 (0x0050 - 0x0000)
struct GymCharacterCustomizationWidget_ApplyCustomizationAttribute final
{
public:
	struct FGymCharacterCustomizationGUIOption    Option;                                            // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCharacterCustomizationWidget_ApplyCustomizationAttribute) == 0x000008, "Wrong alignment on GymCharacterCustomizationWidget_ApplyCustomizationAttribute");
static_assert(sizeof(GymCharacterCustomizationWidget_ApplyCustomizationAttribute) == 0x000050, "Wrong size on GymCharacterCustomizationWidget_ApplyCustomizationAttribute");
static_assert(offsetof(GymCharacterCustomizationWidget_ApplyCustomizationAttribute, Option) == 0x000000, "Member 'GymCharacterCustomizationWidget_ApplyCustomizationAttribute::Option' has a wrong offset!");

// Function GYMGAME.GymCharacterCustomizationWidget.GetCurrentOptionForSlot
// 0x0058 (0x0058 - 0x0000)
struct GymCharacterCustomizationWidget_GetCurrentOptionForSlot final
{
public:
	class FName                                   CharacterSlot;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGymCharacterCustomizationGUIOption    ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCharacterCustomizationWidget_GetCurrentOptionForSlot) == 0x000008, "Wrong alignment on GymCharacterCustomizationWidget_GetCurrentOptionForSlot");
static_assert(sizeof(GymCharacterCustomizationWidget_GetCurrentOptionForSlot) == 0x000058, "Wrong size on GymCharacterCustomizationWidget_GetCurrentOptionForSlot");
static_assert(offsetof(GymCharacterCustomizationWidget_GetCurrentOptionForSlot, CharacterSlot) == 0x000000, "Member 'GymCharacterCustomizationWidget_GetCurrentOptionForSlot::CharacterSlot' has a wrong offset!");
static_assert(offsetof(GymCharacterCustomizationWidget_GetCurrentOptionForSlot, ReturnValue) == 0x000008, "Member 'GymCharacterCustomizationWidget_GetCurrentOptionForSlot::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCharacterCustomizationWidget.GetSlots
// 0x0010 (0x0010 - 0x0000)
struct GymCharacterCustomizationWidget_GetSlots final
{
public:
	TArray<struct FGymCharacterCustomizationGUIOption> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCharacterCustomizationWidget_GetSlots) == 0x000008, "Wrong alignment on GymCharacterCustomizationWidget_GetSlots");
static_assert(sizeof(GymCharacterCustomizationWidget_GetSlots) == 0x000010, "Wrong size on GymCharacterCustomizationWidget_GetSlots");
static_assert(offsetof(GymCharacterCustomizationWidget_GetSlots, ReturnValue) == 0x000000, "Member 'GymCharacterCustomizationWidget_GetSlots::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCharacterCustomizationWidget.IsEverySlotInUse
// 0x0001 (0x0001 - 0x0000)
struct GymCharacterCustomizationWidget_IsEverySlotInUse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCharacterCustomizationWidget_IsEverySlotInUse) == 0x000001, "Wrong alignment on GymCharacterCustomizationWidget_IsEverySlotInUse");
static_assert(sizeof(GymCharacterCustomizationWidget_IsEverySlotInUse) == 0x000001, "Wrong size on GymCharacterCustomizationWidget_IsEverySlotInUse");
static_assert(offsetof(GymCharacterCustomizationWidget_IsEverySlotInUse, ReturnValue) == 0x000000, "Member 'GymCharacterCustomizationWidget_IsEverySlotInUse::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymChasedPlayerMarker.SetOnCooldown
// 0x0004 (0x0004 - 0x0000)
struct GymChasedPlayerMarker_SetOnCooldown final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymChasedPlayerMarker_SetOnCooldown) == 0x000004, "Wrong alignment on GymChasedPlayerMarker_SetOnCooldown");
static_assert(sizeof(GymChasedPlayerMarker_SetOnCooldown) == 0x000004, "Wrong size on GymChasedPlayerMarker_SetOnCooldown");
static_assert(offsetof(GymChasedPlayerMarker_SetOnCooldown, Time) == 0x000000, "Member 'GymChasedPlayerMarker_SetOnCooldown::Time' has a wrong offset!");

// Function GYMGAME.GymGuiPhotoModeWidget.GetLocalPhotosPaths
// 0x0018 (0x0018 - 0x0000)
struct GymGuiPhotoModeWidget_GetLocalPhotosPaths final
{
public:
	int32                                         MaxPhotoCount;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiPhotoModeWidget_GetLocalPhotosPaths) == 0x000008, "Wrong alignment on GymGuiPhotoModeWidget_GetLocalPhotosPaths");
static_assert(sizeof(GymGuiPhotoModeWidget_GetLocalPhotosPaths) == 0x000018, "Wrong size on GymGuiPhotoModeWidget_GetLocalPhotosPaths");
static_assert(offsetof(GymGuiPhotoModeWidget_GetLocalPhotosPaths, MaxPhotoCount) == 0x000000, "Member 'GymGuiPhotoModeWidget_GetLocalPhotosPaths::MaxPhotoCount' has a wrong offset!");
static_assert(offsetof(GymGuiPhotoModeWidget_GetLocalPhotosPaths, ReturnValue) == 0x000008, "Member 'GymGuiPhotoModeWidget_GetLocalPhotosPaths::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiPhotoModeWidget.GetUniquePhotoFileNames
// 0x0028 (0x0028 - 0x0000)
struct GymGuiPhotoModeWidget_GetUniquePhotoFileNames final
{
public:
	class FString                                 FullSizeFileName;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ThumbnailFileName;                                 // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Overwrite;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymGuiPhotoModeWidget_GetUniquePhotoFileNames) == 0x000008, "Wrong alignment on GymGuiPhotoModeWidget_GetUniquePhotoFileNames");
static_assert(sizeof(GymGuiPhotoModeWidget_GetUniquePhotoFileNames) == 0x000028, "Wrong size on GymGuiPhotoModeWidget_GetUniquePhotoFileNames");
static_assert(offsetof(GymGuiPhotoModeWidget_GetUniquePhotoFileNames, FullSizeFileName) == 0x000000, "Member 'GymGuiPhotoModeWidget_GetUniquePhotoFileNames::FullSizeFileName' has a wrong offset!");
static_assert(offsetof(GymGuiPhotoModeWidget_GetUniquePhotoFileNames, ThumbnailFileName) == 0x000010, "Member 'GymGuiPhotoModeWidget_GetUniquePhotoFileNames::ThumbnailFileName' has a wrong offset!");
static_assert(offsetof(GymGuiPhotoModeWidget_GetUniquePhotoFileNames, Overwrite) == 0x000020, "Member 'GymGuiPhotoModeWidget_GetUniquePhotoFileNames::Overwrite' has a wrong offset!");

// Function GYMGAME.GymGuiPhotoModeWidget.IsMapOwner
// 0x0001 (0x0001 - 0x0000)
struct GymGuiPhotoModeWidget_IsMapOwner final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiPhotoModeWidget_IsMapOwner) == 0x000001, "Wrong alignment on GymGuiPhotoModeWidget_IsMapOwner");
static_assert(sizeof(GymGuiPhotoModeWidget_IsMapOwner) == 0x000001, "Wrong size on GymGuiPhotoModeWidget_IsMapOwner");
static_assert(offsetof(GymGuiPhotoModeWidget_IsMapOwner, ReturnValue) == 0x000000, "Member 'GymGuiPhotoModeWidget_IsMapOwner::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiPhotoModeWidget.IsPhotoFromThisLevel
// 0x0018 (0x0018 - 0x0000)
struct GymGuiPhotoModeWidget_IsPhotoFromThisLevel final
{
public:
	class FString                                 PhotoFilePath;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymGuiPhotoModeWidget_IsPhotoFromThisLevel) == 0x000008, "Wrong alignment on GymGuiPhotoModeWidget_IsPhotoFromThisLevel");
static_assert(sizeof(GymGuiPhotoModeWidget_IsPhotoFromThisLevel) == 0x000018, "Wrong size on GymGuiPhotoModeWidget_IsPhotoFromThisLevel");
static_assert(offsetof(GymGuiPhotoModeWidget_IsPhotoFromThisLevel, PhotoFilePath) == 0x000000, "Member 'GymGuiPhotoModeWidget_IsPhotoFromThisLevel::PhotoFilePath' has a wrong offset!");
static_assert(offsetof(GymGuiPhotoModeWidget_IsPhotoFromThisLevel, ReturnValue) == 0x000010, "Member 'GymGuiPhotoModeWidget_IsPhotoFromThisLevel::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiPhotoModeWidget.NotifyThumbnailUpdated
// 0x0010 (0x0010 - 0x0000)
struct GymGuiPhotoModeWidget_NotifyThumbnailUpdated final
{
public:
	class FString                                 LocalFilePath;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiPhotoModeWidget_NotifyThumbnailUpdated) == 0x000008, "Wrong alignment on GymGuiPhotoModeWidget_NotifyThumbnailUpdated");
static_assert(sizeof(GymGuiPhotoModeWidget_NotifyThumbnailUpdated) == 0x000010, "Wrong size on GymGuiPhotoModeWidget_NotifyThumbnailUpdated");
static_assert(offsetof(GymGuiPhotoModeWidget_NotifyThumbnailUpdated, LocalFilePath) == 0x000000, "Member 'GymGuiPhotoModeWidget_NotifyThumbnailUpdated::LocalFilePath' has a wrong offset!");

// Function GYMGAME.GymGuiPhotoModeWidget.SetPhotoAsThumbnail
// 0x0018 (0x0018 - 0x0000)
struct GymGuiPhotoModeWidget_SetPhotoAsThumbnail final
{
public:
	class FString                                 PhotoFilePath;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymGuiPhotoModeWidget_SetPhotoAsThumbnail) == 0x000008, "Wrong alignment on GymGuiPhotoModeWidget_SetPhotoAsThumbnail");
static_assert(sizeof(GymGuiPhotoModeWidget_SetPhotoAsThumbnail) == 0x000018, "Wrong size on GymGuiPhotoModeWidget_SetPhotoAsThumbnail");
static_assert(offsetof(GymGuiPhotoModeWidget_SetPhotoAsThumbnail, PhotoFilePath) == 0x000000, "Member 'GymGuiPhotoModeWidget_SetPhotoAsThumbnail::PhotoFilePath' has a wrong offset!");
static_assert(offsetof(GymGuiPhotoModeWidget_SetPhotoAsThumbnail, ReturnValue) == 0x000010, "Member 'GymGuiPhotoModeWidget_SetPhotoAsThumbnail::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiPhotoModeWidget.TakeScreenshot
// 0x0018 (0x0018 - 0x0000)
struct GymGuiPhotoModeWidget_TakeScreenshot final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              Dimensions;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiPhotoModeWidget_TakeScreenshot) == 0x000008, "Wrong alignment on GymGuiPhotoModeWidget_TakeScreenshot");
static_assert(sizeof(GymGuiPhotoModeWidget_TakeScreenshot) == 0x000018, "Wrong size on GymGuiPhotoModeWidget_TakeScreenshot");
static_assert(offsetof(GymGuiPhotoModeWidget_TakeScreenshot, FilePath) == 0x000000, "Member 'GymGuiPhotoModeWidget_TakeScreenshot::FilePath' has a wrong offset!");
static_assert(offsetof(GymGuiPhotoModeWidget_TakeScreenshot, Dimensions) == 0x000010, "Member 'GymGuiPhotoModeWidget_TakeScreenshot::Dimensions' has a wrong offset!");

// Function GYMGAME.GymGuiREScoreboardWidget.NotifyRaceRestartIn
// 0x0004 (0x0004 - 0x0000)
struct GymGuiREScoreboardWidget_NotifyRaceRestartIn final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiREScoreboardWidget_NotifyRaceRestartIn) == 0x000004, "Wrong alignment on GymGuiREScoreboardWidget_NotifyRaceRestartIn");
static_assert(sizeof(GymGuiREScoreboardWidget_NotifyRaceRestartIn) == 0x000004, "Wrong size on GymGuiREScoreboardWidget_NotifyRaceRestartIn");
static_assert(offsetof(GymGuiREScoreboardWidget_NotifyRaceRestartIn, Time) == 0x000000, "Member 'GymGuiREScoreboardWidget_NotifyRaceRestartIn::Time' has a wrong offset!");

// Function GYMGAME.GymCheckpointPiece.OnActorOverlap
// 0x0108 (0x0108 - 0x0000)
struct GymCheckpointPiece_OnActorOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCheckpointPiece_OnActorOverlap) == 0x000008, "Wrong alignment on GymCheckpointPiece_OnActorOverlap");
static_assert(sizeof(GymCheckpointPiece_OnActorOverlap) == 0x000108, "Wrong size on GymCheckpointPiece_OnActorOverlap");
static_assert(offsetof(GymCheckpointPiece_OnActorOverlap, OverlappedComponent) == 0x000000, "Member 'GymCheckpointPiece_OnActorOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(GymCheckpointPiece_OnActorOverlap, OtherActor) == 0x000008, "Member 'GymCheckpointPiece_OnActorOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(GymCheckpointPiece_OnActorOverlap, OtherComp) == 0x000010, "Member 'GymCheckpointPiece_OnActorOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(GymCheckpointPiece_OnActorOverlap, OtherBodyIndex) == 0x000018, "Member 'GymCheckpointPiece_OnActorOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(GymCheckpointPiece_OnActorOverlap, bFromSweep) == 0x00001C, "Member 'GymCheckpointPiece_OnActorOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(GymCheckpointPiece_OnActorOverlap, SweepResult) == 0x000020, "Member 'GymCheckpointPiece_OnActorOverlap::SweepResult' has a wrong offset!");

// Function GYMGAME.GymCheckpointBanner.SetPlaceables
// 0x0010 (0x0010 - 0x0000)
struct GymCheckpointBanner_SetPlaceables final
{
public:
	TArray<class AGymSplinePlaceable*>            SplinePlaceables;                                  // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCheckpointBanner_SetPlaceables) == 0x000008, "Wrong alignment on GymCheckpointBanner_SetPlaceables");
static_assert(sizeof(GymCheckpointBanner_SetPlaceables) == 0x000010, "Wrong size on GymCheckpointBanner_SetPlaceables");
static_assert(offsetof(GymCheckpointBanner_SetPlaceables, SplinePlaceables) == 0x000000, "Member 'GymCheckpointBanner_SetPlaceables::SplinePlaceables' has a wrong offset!");

// Function GYMGAME.GymCheckpointBanner.SetWidth
// 0x0004 (0x0004 - 0x0000)
struct GymCheckpointBanner_SetWidth final
{
public:
	float                                         NewWidth;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCheckpointBanner_SetWidth) == 0x000004, "Wrong alignment on GymCheckpointBanner_SetWidth");
static_assert(sizeof(GymCheckpointBanner_SetWidth) == 0x000004, "Wrong size on GymCheckpointBanner_SetWidth");
static_assert(offsetof(GymCheckpointBanner_SetWidth, NewWidth) == 0x000000, "Member 'GymCheckpointBanner_SetWidth::NewWidth' has a wrong offset!");

// Function GYMGAME.GymGuiRuleStateWidgetTide.GetParticipantData
// 0x0008 (0x0008 - 0x0000)
struct GymGuiRuleStateWidgetTide_GetParticipantData final
{
public:
	class UGymParticipantRepDataSprint*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiRuleStateWidgetTide_GetParticipantData) == 0x000008, "Wrong alignment on GymGuiRuleStateWidgetTide_GetParticipantData");
static_assert(sizeof(GymGuiRuleStateWidgetTide_GetParticipantData) == 0x000008, "Wrong size on GymGuiRuleStateWidgetTide_GetParticipantData");
static_assert(offsetof(GymGuiRuleStateWidgetTide_GetParticipantData, ReturnValue) == 0x000000, "Member 'GymGuiRuleStateWidgetTide_GetParticipantData::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiRuleStateWidgetTide.GetRuleData
// 0x0008 (0x0008 - 0x0000)
struct GymGuiRuleStateWidgetTide_GetRuleData final
{
public:
	class UGymRuleReplicatedData*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiRuleStateWidgetTide_GetRuleData) == 0x000008, "Wrong alignment on GymGuiRuleStateWidgetTide_GetRuleData");
static_assert(sizeof(GymGuiRuleStateWidgetTide_GetRuleData) == 0x000008, "Wrong size on GymGuiRuleStateWidgetTide_GetRuleData");
static_assert(offsetof(GymGuiRuleStateWidgetTide_GetRuleData, ReturnValue) == 0x000000, "Member 'GymGuiRuleStateWidgetTide_GetRuleData::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCheckpointManager.GetCheckpointCount
// 0x0004 (0x0004 - 0x0000)
struct GymCheckpointManager_GetCheckpointCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCheckpointManager_GetCheckpointCount) == 0x000004, "Wrong alignment on GymCheckpointManager_GetCheckpointCount");
static_assert(sizeof(GymCheckpointManager_GetCheckpointCount) == 0x000004, "Wrong size on GymCheckpointManager_GetCheckpointCount");
static_assert(offsetof(GymCheckpointManager_GetCheckpointCount, ReturnValue) == 0x000000, "Member 'GymCheckpointManager_GetCheckpointCount::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCheckpointManager.GetHighestCheckpointIndex
// 0x0004 (0x0004 - 0x0000)
struct GymCheckpointManager_GetHighestCheckpointIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCheckpointManager_GetHighestCheckpointIndex) == 0x000004, "Wrong alignment on GymCheckpointManager_GetHighestCheckpointIndex");
static_assert(sizeof(GymCheckpointManager_GetHighestCheckpointIndex) == 0x000004, "Wrong size on GymCheckpointManager_GetHighestCheckpointIndex");
static_assert(offsetof(GymCheckpointManager_GetHighestCheckpointIndex, ReturnValue) == 0x000000, "Member 'GymCheckpointManager_GetHighestCheckpointIndex::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiRuleStateWidgetBombMode.GetBombTimer
// 0x0004 (0x0004 - 0x0000)
struct GymGuiRuleStateWidgetBombMode_GetBombTimer final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiRuleStateWidgetBombMode_GetBombTimer) == 0x000004, "Wrong alignment on GymGuiRuleStateWidgetBombMode_GetBombTimer");
static_assert(sizeof(GymGuiRuleStateWidgetBombMode_GetBombTimer) == 0x000004, "Wrong size on GymGuiRuleStateWidgetBombMode_GetBombTimer");
static_assert(offsetof(GymGuiRuleStateWidgetBombMode_GetBombTimer, ReturnValue) == 0x000000, "Member 'GymGuiRuleStateWidgetBombMode_GetBombTimer::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiRuleStateWidgetBombMode.GetIsBombTicking
// 0x0001 (0x0001 - 0x0000)
struct GymGuiRuleStateWidgetBombMode_GetIsBombTicking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiRuleStateWidgetBombMode_GetIsBombTicking) == 0x000001, "Wrong alignment on GymGuiRuleStateWidgetBombMode_GetIsBombTicking");
static_assert(sizeof(GymGuiRuleStateWidgetBombMode_GetIsBombTicking) == 0x000001, "Wrong size on GymGuiRuleStateWidgetBombMode_GetIsBombTicking");
static_assert(offsetof(GymGuiRuleStateWidgetBombMode_GetIsBombTicking, ReturnValue) == 0x000000, "Member 'GymGuiRuleStateWidgetBombMode_GetIsBombTicking::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiRuleStateWidgetBombMode.GetRoundStartTime
// 0x0004 (0x0004 - 0x0000)
struct GymGuiRuleStateWidgetBombMode_GetRoundStartTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiRuleStateWidgetBombMode_GetRoundStartTime) == 0x000004, "Wrong alignment on GymGuiRuleStateWidgetBombMode_GetRoundStartTime");
static_assert(sizeof(GymGuiRuleStateWidgetBombMode_GetRoundStartTime) == 0x000004, "Wrong size on GymGuiRuleStateWidgetBombMode_GetRoundStartTime");
static_assert(offsetof(GymGuiRuleStateWidgetBombMode_GetRoundStartTime, ReturnValue) == 0x000000, "Member 'GymGuiRuleStateWidgetBombMode_GetRoundStartTime::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiRuleStateWidgetBombMode.GetRuleData
// 0x0008 (0x0008 - 0x0000)
struct GymGuiRuleStateWidgetBombMode_GetRuleData final
{
public:
	class UGymBombModeReplicatedData*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiRuleStateWidgetBombMode_GetRuleData) == 0x000008, "Wrong alignment on GymGuiRuleStateWidgetBombMode_GetRuleData");
static_assert(sizeof(GymGuiRuleStateWidgetBombMode_GetRuleData) == 0x000008, "Wrong size on GymGuiRuleStateWidgetBombMode_GetRuleData");
static_assert(offsetof(GymGuiRuleStateWidgetBombMode_GetRuleData, ReturnValue) == 0x000000, "Member 'GymGuiRuleStateWidgetBombMode_GetRuleData::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiRuleStateWidgetBombMode.OnPlayerTagged
// 0x0010 (0x0010 - 0x0000)
struct GymGuiRuleStateWidgetBombMode_OnPlayerTagged final
{
public:
	class AGymPlayerState*                        OtherPlayer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Cooldown;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymGuiRuleStateWidgetBombMode_OnPlayerTagged) == 0x000008, "Wrong alignment on GymGuiRuleStateWidgetBombMode_OnPlayerTagged");
static_assert(sizeof(GymGuiRuleStateWidgetBombMode_OnPlayerTagged) == 0x000010, "Wrong size on GymGuiRuleStateWidgetBombMode_OnPlayerTagged");
static_assert(offsetof(GymGuiRuleStateWidgetBombMode_OnPlayerTagged, OtherPlayer) == 0x000000, "Member 'GymGuiRuleStateWidgetBombMode_OnPlayerTagged::OtherPlayer' has a wrong offset!");
static_assert(offsetof(GymGuiRuleStateWidgetBombMode_OnPlayerTagged, Cooldown) == 0x000008, "Member 'GymGuiRuleStateWidgetBombMode_OnPlayerTagged::Cooldown' has a wrong offset!");

// Function GYMGAME.GymGuiRuleStateWidgetBombMode.OnTaggedByPlayer
// 0x0008 (0x0008 - 0x0000)
struct GymGuiRuleStateWidgetBombMode_OnTaggedByPlayer final
{
public:
	class AGymPlayerState*                        OtherPlayer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiRuleStateWidgetBombMode_OnTaggedByPlayer) == 0x000008, "Wrong alignment on GymGuiRuleStateWidgetBombMode_OnTaggedByPlayer");
static_assert(sizeof(GymGuiRuleStateWidgetBombMode_OnTaggedByPlayer) == 0x000008, "Wrong size on GymGuiRuleStateWidgetBombMode_OnTaggedByPlayer");
static_assert(offsetof(GymGuiRuleStateWidgetBombMode_OnTaggedByPlayer, OtherPlayer) == 0x000000, "Member 'GymGuiRuleStateWidgetBombMode_OnTaggedByPlayer::OtherPlayer' has a wrong offset!");

// Function GYMGAME.GymCheckpointObjective.OnCheckpointReached
// 0x0008 (0x0008 - 0x0000)
struct GymCheckpointObjective_OnCheckpointReached final
{
public:
	class AGymCheckpointPiece*                    CheckpointActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCheckpointObjective_OnCheckpointReached) == 0x000008, "Wrong alignment on GymCheckpointObjective_OnCheckpointReached");
static_assert(sizeof(GymCheckpointObjective_OnCheckpointReached) == 0x000008, "Wrong size on GymCheckpointObjective_OnCheckpointReached");
static_assert(offsetof(GymCheckpointObjective_OnCheckpointReached, CheckpointActor) == 0x000000, "Member 'GymCheckpointObjective_OnCheckpointReached::CheckpointActor' has a wrong offset!");

// Function GYMGAME.GymGuiRadialWidget.AddSelectionWidget
// 0x0008 (0x0008 - 0x0000)
struct GymGuiRadialWidget_AddSelectionWidget final
{
public:
	class UGymGuiRadialSelectionWidget*           SelectionWidget;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiRadialWidget_AddSelectionWidget) == 0x000008, "Wrong alignment on GymGuiRadialWidget_AddSelectionWidget");
static_assert(sizeof(GymGuiRadialWidget_AddSelectionWidget) == 0x000008, "Wrong size on GymGuiRadialWidget_AddSelectionWidget");
static_assert(offsetof(GymGuiRadialWidget_AddSelectionWidget, SelectionWidget) == 0x000000, "Member 'GymGuiRadialWidget_AddSelectionWidget::SelectionWidget' has a wrong offset!");

// Function GYMGAME.GymGuiRadialWidget.BP_OpenPage
// 0x0004 (0x0004 - 0x0000)
struct GymGuiRadialWidget_BP_OpenPage final
{
public:
	int32                                         Page;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiRadialWidget_BP_OpenPage) == 0x000004, "Wrong alignment on GymGuiRadialWidget_BP_OpenPage");
static_assert(sizeof(GymGuiRadialWidget_BP_OpenPage) == 0x000004, "Wrong size on GymGuiRadialWidget_BP_OpenPage");
static_assert(offsetof(GymGuiRadialWidget_BP_OpenPage, Page) == 0x000000, "Member 'GymGuiRadialWidget_BP_OpenPage::Page' has a wrong offset!");

// Function GYMGAME.GymGuiRadialWidget.GetSelectionWidgets
// 0x0018 (0x0018 - 0x0000)
struct GymGuiRadialWidget_GetSelectionWidgets final
{
public:
	int32                                         Page;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGymGuiRadialSelectionWidget*>   ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiRadialWidget_GetSelectionWidgets) == 0x000008, "Wrong alignment on GymGuiRadialWidget_GetSelectionWidgets");
static_assert(sizeof(GymGuiRadialWidget_GetSelectionWidgets) == 0x000018, "Wrong size on GymGuiRadialWidget_GetSelectionWidgets");
static_assert(offsetof(GymGuiRadialWidget_GetSelectionWidgets, Page) == 0x000000, "Member 'GymGuiRadialWidget_GetSelectionWidgets::Page' has a wrong offset!");
static_assert(offsetof(GymGuiRadialWidget_GetSelectionWidgets, ReturnValue) == 0x000008, "Member 'GymGuiRadialWidget_GetSelectionWidgets::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSplinePlaceable.GetSplinePointOffset
// 0x0018 (0x0018 - 0x0000)
struct GymSplinePlaceable_GetSplinePointOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSplinePlaceable_GetSplinePointOffset) == 0x000008, "Wrong alignment on GymSplinePlaceable_GetSplinePointOffset");
static_assert(sizeof(GymSplinePlaceable_GetSplinePointOffset) == 0x000018, "Wrong size on GymSplinePlaceable_GetSplinePointOffset");
static_assert(offsetof(GymSplinePlaceable_GetSplinePointOffset, ReturnValue) == 0x000000, "Member 'GymSplinePlaceable_GetSplinePointOffset::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSplinePlaceable.SetVisible
// 0x0001 (0x0001 - 0x0000)
struct GymSplinePlaceable_SetVisible final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSplinePlaceable_SetVisible) == 0x000001, "Wrong alignment on GymSplinePlaceable_SetVisible");
static_assert(sizeof(GymSplinePlaceable_SetVisible) == 0x000001, "Wrong size on GymSplinePlaceable_SetVisible");
static_assert(offsetof(GymSplinePlaceable_SetVisible, State) == 0x000000, "Member 'GymSplinePlaceable_SetVisible::State' has a wrong offset!");

// Function GYMGAME.GymFinishlinePlaceable.BP_SetIsEndPoint
// 0x0001 (0x0001 - 0x0000)
struct GymFinishlinePlaceable_BP_SetIsEndPoint final
{
public:
	bool                                          bEndPoint;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymFinishlinePlaceable_BP_SetIsEndPoint) == 0x000001, "Wrong alignment on GymFinishlinePlaceable_BP_SetIsEndPoint");
static_assert(sizeof(GymFinishlinePlaceable_BP_SetIsEndPoint) == 0x000001, "Wrong size on GymFinishlinePlaceable_BP_SetIsEndPoint");
static_assert(offsetof(GymFinishlinePlaceable_BP_SetIsEndPoint, bEndPoint) == 0x000000, "Member 'GymFinishlinePlaceable_BP_SetIsEndPoint::bEndPoint' has a wrong offset!");

// Function GYMGAME.GymGuiRuleStateWidgetObstacle.GetParticipantData
// 0x0008 (0x0008 - 0x0000)
struct GymGuiRuleStateWidgetObstacle_GetParticipantData final
{
public:
	class UGymParticipantRepDataObby*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiRuleStateWidgetObstacle_GetParticipantData) == 0x000008, "Wrong alignment on GymGuiRuleStateWidgetObstacle_GetParticipantData");
static_assert(sizeof(GymGuiRuleStateWidgetObstacle_GetParticipantData) == 0x000008, "Wrong size on GymGuiRuleStateWidgetObstacle_GetParticipantData");
static_assert(offsetof(GymGuiRuleStateWidgetObstacle_GetParticipantData, ReturnValue) == 0x000000, "Member 'GymGuiRuleStateWidgetObstacle_GetParticipantData::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiRuleStateWidgetObstacle.GetRuleData
// 0x0008 (0x0008 - 0x0000)
struct GymGuiRuleStateWidgetObstacle_GetRuleData final
{
public:
	class UGymOCReplicatedData*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiRuleStateWidgetObstacle_GetRuleData) == 0x000008, "Wrong alignment on GymGuiRuleStateWidgetObstacle_GetRuleData");
static_assert(sizeof(GymGuiRuleStateWidgetObstacle_GetRuleData) == 0x000008, "Wrong size on GymGuiRuleStateWidgetObstacle_GetRuleData");
static_assert(offsetof(GymGuiRuleStateWidgetObstacle_GetRuleData, ReturnValue) == 0x000000, "Member 'GymGuiRuleStateWidgetObstacle_GetRuleData::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCheckpointSpawn.GetIndex
// 0x0004 (0x0004 - 0x0000)
struct GymCheckpointSpawn_GetIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCheckpointSpawn_GetIndex) == 0x000004, "Wrong alignment on GymCheckpointSpawn_GetIndex");
static_assert(sizeof(GymCheckpointSpawn_GetIndex) == 0x000004, "Wrong size on GymCheckpointSpawn_GetIndex");
static_assert(offsetof(GymCheckpointSpawn_GetIndex, ReturnValue) == 0x000000, "Member 'GymCheckpointSpawn_GetIndex::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiSpectatorRuleMetaWidget.OnEliminated
// 0x0001 (0x0001 - 0x0000)
struct GymGuiSpectatorRuleMetaWidget_OnEliminated final
{
public:
	EEliminationReason                            EliminationReason;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiSpectatorRuleMetaWidget_OnEliminated) == 0x000001, "Wrong alignment on GymGuiSpectatorRuleMetaWidget_OnEliminated");
static_assert(sizeof(GymGuiSpectatorRuleMetaWidget_OnEliminated) == 0x000001, "Wrong size on GymGuiSpectatorRuleMetaWidget_OnEliminated");
static_assert(offsetof(GymGuiSpectatorRuleMetaWidget_OnEliminated, EliminationReason) == 0x000000, "Member 'GymGuiSpectatorRuleMetaWidget_OnEliminated::EliminationReason' has a wrong offset!");

// Function GYMGAME.GymGuiSpectatorRuleMetaWidget.ParticipantReachedCheckpoint
// 0x0004 (0x0004 - 0x0000)
struct GymGuiSpectatorRuleMetaWidget_ParticipantReachedCheckpoint final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiSpectatorRuleMetaWidget_ParticipantReachedCheckpoint) == 0x000004, "Wrong alignment on GymGuiSpectatorRuleMetaWidget_ParticipantReachedCheckpoint");
static_assert(sizeof(GymGuiSpectatorRuleMetaWidget_ParticipantReachedCheckpoint) == 0x000004, "Wrong size on GymGuiSpectatorRuleMetaWidget_ParticipantReachedCheckpoint");
static_assert(offsetof(GymGuiSpectatorRuleMetaWidget_ParticipantReachedCheckpoint, Index_0) == 0x000000, "Member 'GymGuiSpectatorRuleMetaWidget_ParticipantReachedCheckpoint::Index_0' has a wrong offset!");

// Function GYMGAME.GymGuiSpectatorRuleWidgetLoot.OnLootCollected
// 0x0008 (0x0008 - 0x0000)
struct GymGuiSpectatorRuleWidgetLoot_OnLootCollected final
{
public:
	int32                                         Collected;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootLeft;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiSpectatorRuleWidgetLoot_OnLootCollected) == 0x000004, "Wrong alignment on GymGuiSpectatorRuleWidgetLoot_OnLootCollected");
static_assert(sizeof(GymGuiSpectatorRuleWidgetLoot_OnLootCollected) == 0x000008, "Wrong size on GymGuiSpectatorRuleWidgetLoot_OnLootCollected");
static_assert(offsetof(GymGuiSpectatorRuleWidgetLoot_OnLootCollected, Collected) == 0x000000, "Member 'GymGuiSpectatorRuleWidgetLoot_OnLootCollected::Collected' has a wrong offset!");
static_assert(offsetof(GymGuiSpectatorRuleWidgetLoot_OnLootCollected, LootLeft) == 0x000004, "Member 'GymGuiSpectatorRuleWidgetLoot_OnLootCollected::LootLeft' has a wrong offset!");

// Function GYMGAME.GymGuiSpectatorRuleWidgetLoot.GetParticipantData
// 0x0008 (0x0008 - 0x0000)
struct GymGuiSpectatorRuleWidgetLoot_GetParticipantData final
{
public:
	class UGymParticipantRepDataLoot*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiSpectatorRuleWidgetLoot_GetParticipantData) == 0x000008, "Wrong alignment on GymGuiSpectatorRuleWidgetLoot_GetParticipantData");
static_assert(sizeof(GymGuiSpectatorRuleWidgetLoot_GetParticipantData) == 0x000008, "Wrong size on GymGuiSpectatorRuleWidgetLoot_GetParticipantData");
static_assert(offsetof(GymGuiSpectatorRuleWidgetLoot_GetParticipantData, ReturnValue) == 0x000000, "Member 'GymGuiSpectatorRuleWidgetLoot_GetParticipantData::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiSpectatorRuleWidgetLoot.GetRuleData
// 0x0008 (0x0008 - 0x0000)
struct GymGuiSpectatorRuleWidgetLoot_GetRuleData final
{
public:
	class UGymLootReplicatedData*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiSpectatorRuleWidgetLoot_GetRuleData) == 0x000008, "Wrong alignment on GymGuiSpectatorRuleWidgetLoot_GetRuleData");
static_assert(sizeof(GymGuiSpectatorRuleWidgetLoot_GetRuleData) == 0x000008, "Wrong size on GymGuiSpectatorRuleWidgetLoot_GetRuleData");
static_assert(offsetof(GymGuiSpectatorRuleWidgetLoot_GetRuleData, ReturnValue) == 0x000000, "Member 'GymGuiSpectatorRuleWidgetLoot_GetRuleData::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymRuleModifier.GetDisplayText
// 0x0018 (0x0018 - 0x0000)
struct GymRuleModifier_GetDisplayText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleModifier_GetDisplayText) == 0x000008, "Wrong alignment on GymRuleModifier_GetDisplayText");
static_assert(sizeof(GymRuleModifier_GetDisplayText) == 0x000018, "Wrong size on GymRuleModifier_GetDisplayText");
static_assert(offsetof(GymRuleModifier_GetDisplayText, ReturnValue) == 0x000000, "Member 'GymRuleModifier_GetDisplayText::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiRuleStateWidgetCircuit.GetRuleData
// 0x0008 (0x0008 - 0x0000)
struct GymGuiRuleStateWidgetCircuit_GetRuleData final
{
public:
	class UGymCircuitReplicatedData*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiRuleStateWidgetCircuit_GetRuleData) == 0x000008, "Wrong alignment on GymGuiRuleStateWidgetCircuit_GetRuleData");
static_assert(sizeof(GymGuiRuleStateWidgetCircuit_GetRuleData) == 0x000008, "Wrong size on GymGuiRuleStateWidgetCircuit_GetRuleData");
static_assert(offsetof(GymGuiRuleStateWidgetCircuit_GetRuleData, ReturnValue) == 0x000000, "Member 'GymGuiRuleStateWidgetCircuit_GetRuleData::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiRuleStateWidgetCircuit.GetParticipantData
// 0x0008 (0x0008 - 0x0000)
struct GymGuiRuleStateWidgetCircuit_GetParticipantData final
{
public:
	class UGymParticipantRepDataCircuit*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiRuleStateWidgetCircuit_GetParticipantData) == 0x000008, "Wrong alignment on GymGuiRuleStateWidgetCircuit_GetParticipantData");
static_assert(sizeof(GymGuiRuleStateWidgetCircuit_GetParticipantData) == 0x000008, "Wrong size on GymGuiRuleStateWidgetCircuit_GetParticipantData");
static_assert(offsetof(GymGuiRuleStateWidgetCircuit_GetParticipantData, ReturnValue) == 0x000000, "Member 'GymGuiRuleStateWidgetCircuit_GetParticipantData::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCircuitReplicatedData.SetLapNum
// 0x0004 (0x0004 - 0x0000)
struct GymCircuitReplicatedData_SetLapNum final
{
public:
	int32                                         Laps;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCircuitReplicatedData_SetLapNum) == 0x000004, "Wrong alignment on GymCircuitReplicatedData_SetLapNum");
static_assert(sizeof(GymCircuitReplicatedData_SetLapNum) == 0x000004, "Wrong size on GymCircuitReplicatedData_SetLapNum");
static_assert(offsetof(GymCircuitReplicatedData_SetLapNum, Laps) == 0x000000, "Member 'GymCircuitReplicatedData_SetLapNum::Laps' has a wrong offset!");

// Function GYMGAME.GymCircuitReplicatedData.GetLapNum
// 0x0004 (0x0004 - 0x0000)
struct GymCircuitReplicatedData_GetLapNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCircuitReplicatedData_GetLapNum) == 0x000004, "Wrong alignment on GymCircuitReplicatedData_GetLapNum");
static_assert(sizeof(GymCircuitReplicatedData_GetLapNum) == 0x000004, "Wrong size on GymCircuitReplicatedData_GetLapNum");
static_assert(offsetof(GymCircuitReplicatedData_GetLapNum, ReturnValue) == 0x000000, "Member 'GymCircuitReplicatedData_GetLapNum::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCircuitRules.GoalReached
// 0x0010 (0x0010 - 0x0000)
struct GymCircuitRules_GoalReached final
{
public:
	class AActor*                                 GoalPiece;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGymCharacter*                          PlayerCharacter;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCircuitRules_GoalReached) == 0x000008, "Wrong alignment on GymCircuitRules_GoalReached");
static_assert(sizeof(GymCircuitRules_GoalReached) == 0x000010, "Wrong size on GymCircuitRules_GoalReached");
static_assert(offsetof(GymCircuitRules_GoalReached, GoalPiece) == 0x000000, "Member 'GymCircuitRules_GoalReached::GoalPiece' has a wrong offset!");
static_assert(offsetof(GymCircuitRules_GoalReached, PlayerCharacter) == 0x000008, "Member 'GymCircuitRules_GoalReached::PlayerCharacter' has a wrong offset!");

// Function GYMGAME.GymGuiVideoPlayer.BP_SetLooping
// 0x0001 (0x0001 - 0x0000)
struct GymGuiVideoPlayer_BP_SetLooping final
{
public:
	bool                                          bShouldLoopPlayback;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiVideoPlayer_BP_SetLooping) == 0x000001, "Wrong alignment on GymGuiVideoPlayer_BP_SetLooping");
static_assert(sizeof(GymGuiVideoPlayer_BP_SetLooping) == 0x000001, "Wrong size on GymGuiVideoPlayer_BP_SetLooping");
static_assert(offsetof(GymGuiVideoPlayer_BP_SetLooping, bShouldLoopPlayback) == 0x000000, "Member 'GymGuiVideoPlayer_BP_SetLooping::bShouldLoopPlayback' has a wrong offset!");

// Function GYMGAME.GymGuiVideoPlayer.BP_SetVideo
// 0x0008 (0x0008 - 0x0000)
struct GymGuiVideoPlayer_BP_SetVideo final
{
public:
	class UMediaSource*                           MediaSource;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiVideoPlayer_BP_SetVideo) == 0x000008, "Wrong alignment on GymGuiVideoPlayer_BP_SetVideo");
static_assert(sizeof(GymGuiVideoPlayer_BP_SetVideo) == 0x000008, "Wrong size on GymGuiVideoPlayer_BP_SetVideo");
static_assert(offsetof(GymGuiVideoPlayer_BP_SetVideo, MediaSource) == 0x000000, "Member 'GymGuiVideoPlayer_BP_SetVideo::MediaSource' has a wrong offset!");

// Function GYMGAME.GymCloudApi.AcceptTOS_Client
// 0x0010 (0x0010 - 0x0000)
struct GymCloudApi_AcceptTOS_Client final
{
public:
	class FString                                 TOSVersion;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_AcceptTOS_Client) == 0x000008, "Wrong alignment on GymCloudApi_AcceptTOS_Client");
static_assert(sizeof(GymCloudApi_AcceptTOS_Client) == 0x000010, "Wrong size on GymCloudApi_AcceptTOS_Client");
static_assert(offsetof(GymCloudApi_AcceptTOS_Client, TOSVersion) == 0x000000, "Member 'GymCloudApi_AcceptTOS_Client::TOSVersion' has a wrong offset!");

// Function GYMGAME.GymCloudApi.AddToPlaylist_Client
// 0x0020 (0x0020 - 0x0000)
struct GymCloudApi_AddToPlaylist_Client final
{
public:
	class FString                                 PlaylistId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapId;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_AddToPlaylist_Client) == 0x000008, "Wrong alignment on GymCloudApi_AddToPlaylist_Client");
static_assert(sizeof(GymCloudApi_AddToPlaylist_Client) == 0x000020, "Wrong size on GymCloudApi_AddToPlaylist_Client");
static_assert(offsetof(GymCloudApi_AddToPlaylist_Client, PlaylistId) == 0x000000, "Member 'GymCloudApi_AddToPlaylist_Client::PlaylistId' has a wrong offset!");
static_assert(offsetof(GymCloudApi_AddToPlaylist_Client, MapId) == 0x000010, "Member 'GymCloudApi_AddToPlaylist_Client::MapId' has a wrong offset!");

// Function GYMGAME.GymCloudApi.ClaimChallenge_Client
// 0x0010 (0x0010 - 0x0000)
struct GymCloudApi_ClaimChallenge_Client final
{
public:
	class FString                                 ChallengeId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_ClaimChallenge_Client) == 0x000008, "Wrong alignment on GymCloudApi_ClaimChallenge_Client");
static_assert(sizeof(GymCloudApi_ClaimChallenge_Client) == 0x000010, "Wrong size on GymCloudApi_ClaimChallenge_Client");
static_assert(offsetof(GymCloudApi_ClaimChallenge_Client, ChallengeId) == 0x000000, "Member 'GymCloudApi_ClaimChallenge_Client::ChallengeId' has a wrong offset!");

// Function GYMGAME.GymCloudApi.ClaimCheatXP_Client
// 0x0004 (0x0004 - 0x0000)
struct GymCloudApi_ClaimCheatXP_Client final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_ClaimCheatXP_Client) == 0x000004, "Wrong alignment on GymCloudApi_ClaimCheatXP_Client");
static_assert(sizeof(GymCloudApi_ClaimCheatXP_Client) == 0x000004, "Wrong size on GymCloudApi_ClaimCheatXP_Client");
static_assert(offsetof(GymCloudApi_ClaimCheatXP_Client, Amount) == 0x000000, "Member 'GymCloudApi_ClaimCheatXP_Client::Amount' has a wrong offset!");

// Function GYMGAME.GymCloudApi.CreatePlaylist_Client
// 0x0020 (0x0020 - 0x0000)
struct GymCloudApi_CreatePlaylist_Client final
{
public:
	class FString                                 PlaylistName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_CreatePlaylist_Client) == 0x000008, "Wrong alignment on GymCloudApi_CreatePlaylist_Client");
static_assert(sizeof(GymCloudApi_CreatePlaylist_Client) == 0x000020, "Wrong size on GymCloudApi_CreatePlaylist_Client");
static_assert(offsetof(GymCloudApi_CreatePlaylist_Client, PlaylistName) == 0x000000, "Member 'GymCloudApi_CreatePlaylist_Client::PlaylistName' has a wrong offset!");
static_assert(offsetof(GymCloudApi_CreatePlaylist_Client, Type) == 0x000010, "Member 'GymCloudApi_CreatePlaylist_Client::Type' has a wrong offset!");

// Function GYMGAME.GymCloudApi.DeletePlaylist_Client
// 0x0010 (0x0010 - 0x0000)
struct GymCloudApi_DeletePlaylist_Client final
{
public:
	class FString                                 PlaylistId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_DeletePlaylist_Client) == 0x000008, "Wrong alignment on GymCloudApi_DeletePlaylist_Client");
static_assert(sizeof(GymCloudApi_DeletePlaylist_Client) == 0x000010, "Wrong size on GymCloudApi_DeletePlaylist_Client");
static_assert(offsetof(GymCloudApi_DeletePlaylist_Client, PlaylistId) == 0x000000, "Member 'GymCloudApi_DeletePlaylist_Client::PlaylistId' has a wrong offset!");

// Function GYMGAME.GymCloudApi.DownvoteMap_Client
// 0x0018 (0x0018 - 0x0000)
struct GymCloudApi_DownvoteMap_Client final
{
public:
	class FString                                 MapId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Remove;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymCloudApi_DownvoteMap_Client) == 0x000008, "Wrong alignment on GymCloudApi_DownvoteMap_Client");
static_assert(sizeof(GymCloudApi_DownvoteMap_Client) == 0x000018, "Wrong size on GymCloudApi_DownvoteMap_Client");
static_assert(offsetof(GymCloudApi_DownvoteMap_Client, MapId) == 0x000000, "Member 'GymCloudApi_DownvoteMap_Client::MapId' has a wrong offset!");
static_assert(offsetof(GymCloudApi_DownvoteMap_Client, Remove) == 0x000010, "Member 'GymCloudApi_DownvoteMap_Client::Remove' has a wrong offset!");

// Function GYMGAME.GymCloudApi.FavouriteMap_Client
// 0x0018 (0x0018 - 0x0000)
struct GymCloudApi_FavouriteMap_Client final
{
public:
	class FString                                 MapId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Remove;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymCloudApi_FavouriteMap_Client) == 0x000008, "Wrong alignment on GymCloudApi_FavouriteMap_Client");
static_assert(sizeof(GymCloudApi_FavouriteMap_Client) == 0x000018, "Wrong size on GymCloudApi_FavouriteMap_Client");
static_assert(offsetof(GymCloudApi_FavouriteMap_Client, MapId) == 0x000000, "Member 'GymCloudApi_FavouriteMap_Client::MapId' has a wrong offset!");
static_assert(offsetof(GymCloudApi_FavouriteMap_Client, Remove) == 0x000010, "Member 'GymCloudApi_FavouriteMap_Client::Remove' has a wrong offset!");

// Function GYMGAME.GymCloudApi.FeatureMap_Client
// 0x0018 (0x0018 - 0x0000)
struct GymCloudApi_FeatureMap_Client final
{
public:
	class FString                                 MapId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Remove;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymCloudApi_FeatureMap_Client) == 0x000008, "Wrong alignment on GymCloudApi_FeatureMap_Client");
static_assert(sizeof(GymCloudApi_FeatureMap_Client) == 0x000018, "Wrong size on GymCloudApi_FeatureMap_Client");
static_assert(offsetof(GymCloudApi_FeatureMap_Client, MapId) == 0x000000, "Member 'GymCloudApi_FeatureMap_Client::MapId' has a wrong offset!");
static_assert(offsetof(GymCloudApi_FeatureMap_Client, Remove) == 0x000010, "Member 'GymCloudApi_FeatureMap_Client::Remove' has a wrong offset!");

// Function GYMGAME.GymCloudApi.GetFavouritedMaps_Client
// 0x0004 (0x0004 - 0x0000)
struct GymCloudApi_GetFavouritedMaps_Client final
{
public:
	int32                                         Page;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_GetFavouritedMaps_Client) == 0x000004, "Wrong alignment on GymCloudApi_GetFavouritedMaps_Client");
static_assert(sizeof(GymCloudApi_GetFavouritedMaps_Client) == 0x000004, "Wrong size on GymCloudApi_GetFavouritedMaps_Client");
static_assert(offsetof(GymCloudApi_GetFavouritedMaps_Client, Page) == 0x000000, "Member 'GymCloudApi_GetFavouritedMaps_Client::Page' has a wrong offset!");

// Function GYMGAME.GymCloudApi.GetFeaturedMaps_Client
// 0x0004 (0x0004 - 0x0000)
struct GymCloudApi_GetFeaturedMaps_Client final
{
public:
	int32                                         Page;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_GetFeaturedMaps_Client) == 0x000004, "Wrong alignment on GymCloudApi_GetFeaturedMaps_Client");
static_assert(sizeof(GymCloudApi_GetFeaturedMaps_Client) == 0x000004, "Wrong size on GymCloudApi_GetFeaturedMaps_Client");
static_assert(offsetof(GymCloudApi_GetFeaturedMaps_Client, Page) == 0x000000, "Member 'GymCloudApi_GetFeaturedMaps_Client::Page' has a wrong offset!");

// Function GYMGAME.GymCloudApi.GetLeaderboard_Client
// 0x0018 (0x0018 - 0x0000)
struct GymCloudApi_GetLeaderboard_Client final
{
public:
	class FString                                 MapId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapVersion;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymCloudApi_GetLeaderboard_Client) == 0x000008, "Wrong alignment on GymCloudApi_GetLeaderboard_Client");
static_assert(sizeof(GymCloudApi_GetLeaderboard_Client) == 0x000018, "Wrong size on GymCloudApi_GetLeaderboard_Client");
static_assert(offsetof(GymCloudApi_GetLeaderboard_Client, MapId) == 0x000000, "Member 'GymCloudApi_GetLeaderboard_Client::MapId' has a wrong offset!");
static_assert(offsetof(GymCloudApi_GetLeaderboard_Client, MapVersion) == 0x000010, "Member 'GymCloudApi_GetLeaderboard_Client::MapVersion' has a wrong offset!");

// Function GYMGAME.GymCloudApi.GetMapDetails_Client
// 0x0018 (0x0018 - 0x0000)
struct GymCloudApi_GetMapDetails_Client final
{
public:
	class FString                                 MapId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLobby;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymCloudApi_GetMapDetails_Client) == 0x000008, "Wrong alignment on GymCloudApi_GetMapDetails_Client");
static_assert(sizeof(GymCloudApi_GetMapDetails_Client) == 0x000018, "Wrong size on GymCloudApi_GetMapDetails_Client");
static_assert(offsetof(GymCloudApi_GetMapDetails_Client, MapId) == 0x000000, "Member 'GymCloudApi_GetMapDetails_Client::MapId' has a wrong offset!");
static_assert(offsetof(GymCloudApi_GetMapDetails_Client, bIsLobby) == 0x000010, "Member 'GymCloudApi_GetMapDetails_Client::bIsLobby' has a wrong offset!");

// Function GYMGAME.GymCloudApi.GetMaps_Client
// 0x0048 (0x0048 - 0x0000)
struct GymCloudApi_GetMaps_Client final
{
public:
	struct FGymMapSearchFilters                   Filters;                                           // 0x0000(0x0040)(ConstParm, Parm, NativeAccessSpecifierPublic)
	int32                                         Page;                                              // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymCloudApi_GetMaps_Client) == 0x000008, "Wrong alignment on GymCloudApi_GetMaps_Client");
static_assert(sizeof(GymCloudApi_GetMaps_Client) == 0x000048, "Wrong size on GymCloudApi_GetMaps_Client");
static_assert(offsetof(GymCloudApi_GetMaps_Client, Filters) == 0x000000, "Member 'GymCloudApi_GetMaps_Client::Filters' has a wrong offset!");
static_assert(offsetof(GymCloudApi_GetMaps_Client, Page) == 0x000040, "Member 'GymCloudApi_GetMaps_Client::Page' has a wrong offset!");

// Function GYMGAME.GymCloudApi.GetOwnMaps_Client
// 0x0004 (0x0004 - 0x0000)
struct GymCloudApi_GetOwnMaps_Client final
{
public:
	int32                                         Page;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_GetOwnMaps_Client) == 0x000004, "Wrong alignment on GymCloudApi_GetOwnMaps_Client");
static_assert(sizeof(GymCloudApi_GetOwnMaps_Client) == 0x000004, "Wrong size on GymCloudApi_GetOwnMaps_Client");
static_assert(offsetof(GymCloudApi_GetOwnMaps_Client, Page) == 0x000000, "Member 'GymCloudApi_GetOwnMaps_Client::Page' has a wrong offset!");

// Function GYMGAME.GymCloudApi.GetPhotos_Client
// 0x0008 (0x0008 - 0x0000)
struct GymCloudApi_GetPhotos_Client final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Page;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_GetPhotos_Client) == 0x000004, "Wrong alignment on GymCloudApi_GetPhotos_Client");
static_assert(sizeof(GymCloudApi_GetPhotos_Client) == 0x000008, "Wrong size on GymCloudApi_GetPhotos_Client");
static_assert(offsetof(GymCloudApi_GetPhotos_Client, Count) == 0x000000, "Member 'GymCloudApi_GetPhotos_Client::Count' has a wrong offset!");
static_assert(offsetof(GymCloudApi_GetPhotos_Client, Page) == 0x000004, "Member 'GymCloudApi_GetPhotos_Client::Page' has a wrong offset!");

// Function GYMGAME.GymCloudApi.GetPhotosFiltered_Client
// 0x0018 (0x0018 - 0x0000)
struct GymCloudApi_GetPhotosFiltered_Client final
{
public:
	struct FPhotoSearchFilters                    Filters;                                           // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Page;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_GetPhotosFiltered_Client) == 0x000008, "Wrong alignment on GymCloudApi_GetPhotosFiltered_Client");
static_assert(sizeof(GymCloudApi_GetPhotosFiltered_Client) == 0x000018, "Wrong size on GymCloudApi_GetPhotosFiltered_Client");
static_assert(offsetof(GymCloudApi_GetPhotosFiltered_Client, Filters) == 0x000000, "Member 'GymCloudApi_GetPhotosFiltered_Client::Filters' has a wrong offset!");
static_assert(offsetof(GymCloudApi_GetPhotosFiltered_Client, Count) == 0x000010, "Member 'GymCloudApi_GetPhotosFiltered_Client::Count' has a wrong offset!");
static_assert(offsetof(GymCloudApi_GetPhotosFiltered_Client, Page) == 0x000014, "Member 'GymCloudApi_GetPhotosFiltered_Client::Page' has a wrong offset!");

// Function GYMGAME.GymCloudApi.GetPlaylistDetails_Client
// 0x0010 (0x0010 - 0x0000)
struct GymCloudApi_GetPlaylistDetails_Client final
{
public:
	class FString                                 PlaylistId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_GetPlaylistDetails_Client) == 0x000008, "Wrong alignment on GymCloudApi_GetPlaylistDetails_Client");
static_assert(sizeof(GymCloudApi_GetPlaylistDetails_Client) == 0x000010, "Wrong size on GymCloudApi_GetPlaylistDetails_Client");
static_assert(offsetof(GymCloudApi_GetPlaylistDetails_Client, PlaylistId) == 0x000000, "Member 'GymCloudApi_GetPlaylistDetails_Client::PlaylistId' has a wrong offset!");

// Function GYMGAME.GymCloudApi.GetRandomPlaylist_Client
// 0x0018 (0x0018 - 0x0000)
struct GymCloudApi_GetRandomPlaylist_Client final
{
public:
	class FString                                 PlayListType;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymCloudApi_GetRandomPlaylist_Client) == 0x000008, "Wrong alignment on GymCloudApi_GetRandomPlaylist_Client");
static_assert(sizeof(GymCloudApi_GetRandomPlaylist_Client) == 0x000018, "Wrong size on GymCloudApi_GetRandomPlaylist_Client");
static_assert(offsetof(GymCloudApi_GetRandomPlaylist_Client, PlayListType) == 0x000000, "Member 'GymCloudApi_GetRandomPlaylist_Client::PlayListType' has a wrong offset!");
static_assert(offsetof(GymCloudApi_GetRandomPlaylist_Client, Length) == 0x000010, "Member 'GymCloudApi_GetRandomPlaylist_Client::Length' has a wrong offset!");

// DelegateFunction GYMGAME.GymCloudApi.GymServerJoinRequestComplete__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct GymCloudApi_GymServerJoinRequestComplete__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 JoinUrl;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_GymServerJoinRequestComplete__DelegateSignature) == 0x000008, "Wrong alignment on GymCloudApi_GymServerJoinRequestComplete__DelegateSignature");
static_assert(sizeof(GymCloudApi_GymServerJoinRequestComplete__DelegateSignature) == 0x000018, "Wrong size on GymCloudApi_GymServerJoinRequestComplete__DelegateSignature");
static_assert(offsetof(GymCloudApi_GymServerJoinRequestComplete__DelegateSignature, Success) == 0x000000, "Member 'GymCloudApi_GymServerJoinRequestComplete__DelegateSignature::Success' has a wrong offset!");
static_assert(offsetof(GymCloudApi_GymServerJoinRequestComplete__DelegateSignature, JoinUrl) == 0x000008, "Member 'GymCloudApi_GymServerJoinRequestComplete__DelegateSignature::JoinUrl' has a wrong offset!");

// DelegateFunction GYMGAME.GymCloudApi.LoginComplete__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GymCloudApi_LoginComplete__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_LoginComplete__DelegateSignature) == 0x000001, "Wrong alignment on GymCloudApi_LoginComplete__DelegateSignature");
static_assert(sizeof(GymCloudApi_LoginComplete__DelegateSignature) == 0x000001, "Wrong size on GymCloudApi_LoginComplete__DelegateSignature");
static_assert(offsetof(GymCloudApi_LoginComplete__DelegateSignature, Success) == 0x000000, "Member 'GymCloudApi_LoginComplete__DelegateSignature::Success' has a wrong offset!");

// DelegateFunction GYMGAME.GymCloudApi.MapSearchComplete__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GymCloudApi_MapSearchComplete__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_MapSearchComplete__DelegateSignature) == 0x000001, "Wrong alignment on GymCloudApi_MapSearchComplete__DelegateSignature");
static_assert(sizeof(GymCloudApi_MapSearchComplete__DelegateSignature) == 0x000001, "Wrong size on GymCloudApi_MapSearchComplete__DelegateSignature");
static_assert(offsetof(GymCloudApi_MapSearchComplete__DelegateSignature, Success) == 0x000000, "Member 'GymCloudApi_MapSearchComplete__DelegateSignature::Success' has a wrong offset!");

// DelegateFunction GYMGAME.GymCloudApi.OnChallengeRequestComplete__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct GymCloudApi_OnChallengeRequestComplete__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymCHallengeResponse                  Challenges;                                        // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_OnChallengeRequestComplete__DelegateSignature) == 0x000008, "Wrong alignment on GymCloudApi_OnChallengeRequestComplete__DelegateSignature");
static_assert(sizeof(GymCloudApi_OnChallengeRequestComplete__DelegateSignature) == 0x000028, "Wrong size on GymCloudApi_OnChallengeRequestComplete__DelegateSignature");
static_assert(offsetof(GymCloudApi_OnChallengeRequestComplete__DelegateSignature, Success) == 0x000000, "Member 'GymCloudApi_OnChallengeRequestComplete__DelegateSignature::Success' has a wrong offset!");
static_assert(offsetof(GymCloudApi_OnChallengeRequestComplete__DelegateSignature, Challenges) == 0x000008, "Member 'GymCloudApi_OnChallengeRequestComplete__DelegateSignature::Challenges' has a wrong offset!");

// DelegateFunction GYMGAME.GymCloudApi.OnCheatXPGranted__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GymCloudApi_OnCheatXPGranted__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_OnCheatXPGranted__DelegateSignature) == 0x000001, "Wrong alignment on GymCloudApi_OnCheatXPGranted__DelegateSignature");
static_assert(sizeof(GymCloudApi_OnCheatXPGranted__DelegateSignature) == 0x000001, "Wrong size on GymCloudApi_OnCheatXPGranted__DelegateSignature");
static_assert(offsetof(GymCloudApi_OnCheatXPGranted__DelegateSignature, Success) == 0x000000, "Member 'GymCloudApi_OnCheatXPGranted__DelegateSignature::Success' has a wrong offset!");

// DelegateFunction GYMGAME.GymCloudApi.OnCloudError__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct GymCloudApi_OnCloudError__DelegateSignature final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_OnCloudError__DelegateSignature) == 0x000008, "Wrong alignment on GymCloudApi_OnCloudError__DelegateSignature");
static_assert(sizeof(GymCloudApi_OnCloudError__DelegateSignature) == 0x000018, "Wrong size on GymCloudApi_OnCloudError__DelegateSignature");
static_assert(offsetof(GymCloudApi_OnCloudError__DelegateSignature, Message) == 0x000000, "Member 'GymCloudApi_OnCloudError__DelegateSignature::Message' has a wrong offset!");

// DelegateFunction GYMGAME.GymCloudApi.OnCreateGymServer__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct GymCloudApi_OnCreateGymServer__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ConnectString;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_OnCreateGymServer__DelegateSignature) == 0x000008, "Wrong alignment on GymCloudApi_OnCreateGymServer__DelegateSignature");
static_assert(sizeof(GymCloudApi_OnCreateGymServer__DelegateSignature) == 0x000018, "Wrong size on GymCloudApi_OnCreateGymServer__DelegateSignature");
static_assert(offsetof(GymCloudApi_OnCreateGymServer__DelegateSignature, Success) == 0x000000, "Member 'GymCloudApi_OnCreateGymServer__DelegateSignature::Success' has a wrong offset!");
static_assert(offsetof(GymCloudApi_OnCreateGymServer__DelegateSignature, ConnectString) == 0x000008, "Member 'GymCloudApi_OnCreateGymServer__DelegateSignature::ConnectString' has a wrong offset!");

// DelegateFunction GYMGAME.GymCloudApi.OnDailyPlaylistsReceived__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct GymCloudApi_OnDailyPlaylistsReceived__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGymDailyPlaylist>              Playlists;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_OnDailyPlaylistsReceived__DelegateSignature) == 0x000008, "Wrong alignment on GymCloudApi_OnDailyPlaylistsReceived__DelegateSignature");
static_assert(sizeof(GymCloudApi_OnDailyPlaylistsReceived__DelegateSignature) == 0x000018, "Wrong size on GymCloudApi_OnDailyPlaylistsReceived__DelegateSignature");
static_assert(offsetof(GymCloudApi_OnDailyPlaylistsReceived__DelegateSignature, Success) == 0x000000, "Member 'GymCloudApi_OnDailyPlaylistsReceived__DelegateSignature::Success' has a wrong offset!");
static_assert(offsetof(GymCloudApi_OnDailyPlaylistsReceived__DelegateSignature, Playlists) == 0x000008, "Member 'GymCloudApi_OnDailyPlaylistsReceived__DelegateSignature::Playlists' has a wrong offset!");

// DelegateFunction GYMGAME.GymCloudApi.OnInventoryRequestComplete__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GymCloudApi_OnInventoryRequestComplete__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_OnInventoryRequestComplete__DelegateSignature) == 0x000001, "Wrong alignment on GymCloudApi_OnInventoryRequestComplete__DelegateSignature");
static_assert(sizeof(GymCloudApi_OnInventoryRequestComplete__DelegateSignature) == 0x000001, "Wrong size on GymCloudApi_OnInventoryRequestComplete__DelegateSignature");
static_assert(offsetof(GymCloudApi_OnInventoryRequestComplete__DelegateSignature, Success) == 0x000000, "Member 'GymCloudApi_OnInventoryRequestComplete__DelegateSignature::Success' has a wrong offset!");

// DelegateFunction GYMGAME.GymCloudApi.OnLeaderboardReceived__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct GymCloudApi_OnLeaderboardReceived__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymLeaderboard                        Leaderboard;                                       // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_OnLeaderboardReceived__DelegateSignature) == 0x000008, "Wrong alignment on GymCloudApi_OnLeaderboardReceived__DelegateSignature");
static_assert(sizeof(GymCloudApi_OnLeaderboardReceived__DelegateSignature) == 0x000018, "Wrong size on GymCloudApi_OnLeaderboardReceived__DelegateSignature");
static_assert(offsetof(GymCloudApi_OnLeaderboardReceived__DelegateSignature, Success) == 0x000000, "Member 'GymCloudApi_OnLeaderboardReceived__DelegateSignature::Success' has a wrong offset!");
static_assert(offsetof(GymCloudApi_OnLeaderboardReceived__DelegateSignature, Leaderboard) == 0x000008, "Member 'GymCloudApi_OnLeaderboardReceived__DelegateSignature::Leaderboard' has a wrong offset!");

// DelegateFunction GYMGAME.GymCloudApi.OnMapDetailsReceived__DelegateSignature
// 0x00D0 (0x00D0 - 0x0000)
struct GymCloudApi_OnMapDetailsReceived__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymMapDetailsResult                   Details;                                           // 0x0008(0x00C8)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_OnMapDetailsReceived__DelegateSignature) == 0x000008, "Wrong alignment on GymCloudApi_OnMapDetailsReceived__DelegateSignature");
static_assert(sizeof(GymCloudApi_OnMapDetailsReceived__DelegateSignature) == 0x0000D0, "Wrong size on GymCloudApi_OnMapDetailsReceived__DelegateSignature");
static_assert(offsetof(GymCloudApi_OnMapDetailsReceived__DelegateSignature, Success) == 0x000000, "Member 'GymCloudApi_OnMapDetailsReceived__DelegateSignature::Success' has a wrong offset!");
static_assert(offsetof(GymCloudApi_OnMapDetailsReceived__DelegateSignature, Details) == 0x000008, "Member 'GymCloudApi_OnMapDetailsReceived__DelegateSignature::Details' has a wrong offset!");

// DelegateFunction GYMGAME.GymCloudApi.OnMapPublished__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GymCloudApi_OnMapPublished__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_OnMapPublished__DelegateSignature) == 0x000001, "Wrong alignment on GymCloudApi_OnMapPublished__DelegateSignature");
static_assert(sizeof(GymCloudApi_OnMapPublished__DelegateSignature) == 0x000001, "Wrong size on GymCloudApi_OnMapPublished__DelegateSignature");
static_assert(offsetof(GymCloudApi_OnMapPublished__DelegateSignature, Success) == 0x000000, "Member 'GymCloudApi_OnMapPublished__DelegateSignature::Success' has a wrong offset!");

// DelegateFunction GYMGAME.GymCloudApi.OnMapRenameComplete__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GymCloudApi_OnMapRenameComplete__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_OnMapRenameComplete__DelegateSignature) == 0x000001, "Wrong alignment on GymCloudApi_OnMapRenameComplete__DelegateSignature");
static_assert(sizeof(GymCloudApi_OnMapRenameComplete__DelegateSignature) == 0x000001, "Wrong size on GymCloudApi_OnMapRenameComplete__DelegateSignature");
static_assert(offsetof(GymCloudApi_OnMapRenameComplete__DelegateSignature, Success) == 0x000000, "Member 'GymCloudApi_OnMapRenameComplete__DelegateSignature::Success' has a wrong offset!");

// DelegateFunction GYMGAME.GymCloudApi.OnMapReported__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GymCloudApi_OnMapReported__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_OnMapReported__DelegateSignature) == 0x000001, "Wrong alignment on GymCloudApi_OnMapReported__DelegateSignature");
static_assert(sizeof(GymCloudApi_OnMapReported__DelegateSignature) == 0x000001, "Wrong size on GymCloudApi_OnMapReported__DelegateSignature");
static_assert(offsetof(GymCloudApi_OnMapReported__DelegateSignature, Success) == 0x000000, "Member 'GymCloudApi_OnMapReported__DelegateSignature::Success' has a wrong offset!");

// DelegateFunction GYMGAME.GymCloudApi.OnMapVoteComplete__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GymCloudApi_OnMapVoteComplete__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_OnMapVoteComplete__DelegateSignature) == 0x000001, "Wrong alignment on GymCloudApi_OnMapVoteComplete__DelegateSignature");
static_assert(sizeof(GymCloudApi_OnMapVoteComplete__DelegateSignature) == 0x000001, "Wrong size on GymCloudApi_OnMapVoteComplete__DelegateSignature");
static_assert(offsetof(GymCloudApi_OnMapVoteComplete__DelegateSignature, Success) == 0x000000, "Member 'GymCloudApi_OnMapVoteComplete__DelegateSignature::Success' has a wrong offset!");

// DelegateFunction GYMGAME.GymCloudApi.OnPlaylistDetailsReceived__DelegateSignature
// 0x0068 (0x0068 - 0x0000)
struct GymCloudApi_OnPlaylistDetailsReceived__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymPlaylistDetailsResult              Details;                                           // 0x0008(0x0060)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_OnPlaylistDetailsReceived__DelegateSignature) == 0x000008, "Wrong alignment on GymCloudApi_OnPlaylistDetailsReceived__DelegateSignature");
static_assert(sizeof(GymCloudApi_OnPlaylistDetailsReceived__DelegateSignature) == 0x000068, "Wrong size on GymCloudApi_OnPlaylistDetailsReceived__DelegateSignature");
static_assert(offsetof(GymCloudApi_OnPlaylistDetailsReceived__DelegateSignature, Success) == 0x000000, "Member 'GymCloudApi_OnPlaylistDetailsReceived__DelegateSignature::Success' has a wrong offset!");
static_assert(offsetof(GymCloudApi_OnPlaylistDetailsReceived__DelegateSignature, Details) == 0x000008, "Member 'GymCloudApi_OnPlaylistDetailsReceived__DelegateSignature::Details' has a wrong offset!");

// DelegateFunction GYMGAME.GymCloudApi.OnRandomPlaylistReceived__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct GymCloudApi_OnRandomPlaylistReceived__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlaylistId;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_OnRandomPlaylistReceived__DelegateSignature) == 0x000008, "Wrong alignment on GymCloudApi_OnRandomPlaylistReceived__DelegateSignature");
static_assert(sizeof(GymCloudApi_OnRandomPlaylistReceived__DelegateSignature) == 0x000018, "Wrong size on GymCloudApi_OnRandomPlaylistReceived__DelegateSignature");
static_assert(offsetof(GymCloudApi_OnRandomPlaylistReceived__DelegateSignature, Success) == 0x000000, "Member 'GymCloudApi_OnRandomPlaylistReceived__DelegateSignature::Success' has a wrong offset!");
static_assert(offsetof(GymCloudApi_OnRandomPlaylistReceived__DelegateSignature, PlaylistId) == 0x000008, "Member 'GymCloudApi_OnRandomPlaylistReceived__DelegateSignature::PlaylistId' has a wrong offset!");

// DelegateFunction GYMGAME.GymCloudApi.OnSeasonRequestComplete__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GymCloudApi_OnSeasonRequestComplete__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_OnSeasonRequestComplete__DelegateSignature) == 0x000001, "Wrong alignment on GymCloudApi_OnSeasonRequestComplete__DelegateSignature");
static_assert(sizeof(GymCloudApi_OnSeasonRequestComplete__DelegateSignature) == 0x000001, "Wrong size on GymCloudApi_OnSeasonRequestComplete__DelegateSignature");
static_assert(offsetof(GymCloudApi_OnSeasonRequestComplete__DelegateSignature, Success) == 0x000000, "Member 'GymCloudApi_OnSeasonRequestComplete__DelegateSignature::Success' has a wrong offset!");

// DelegateFunction GYMGAME.GymCloudApi.OnServerDetailsReceived__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GymCloudApi_OnServerDetailsReceived__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_OnServerDetailsReceived__DelegateSignature) == 0x000001, "Wrong alignment on GymCloudApi_OnServerDetailsReceived__DelegateSignature");
static_assert(sizeof(GymCloudApi_OnServerDetailsReceived__DelegateSignature) == 0x000001, "Wrong size on GymCloudApi_OnServerDetailsReceived__DelegateSignature");
static_assert(offsetof(GymCloudApi_OnServerDetailsReceived__DelegateSignature, Success) == 0x000000, "Member 'GymCloudApi_OnServerDetailsReceived__DelegateSignature::Success' has a wrong offset!");

// DelegateFunction GYMGAME.GymCloudApi.OnTOSAccepted__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GymCloudApi_OnTOSAccepted__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_OnTOSAccepted__DelegateSignature) == 0x000001, "Wrong alignment on GymCloudApi_OnTOSAccepted__DelegateSignature");
static_assert(sizeof(GymCloudApi_OnTOSAccepted__DelegateSignature) == 0x000001, "Wrong size on GymCloudApi_OnTOSAccepted__DelegateSignature");
static_assert(offsetof(GymCloudApi_OnTOSAccepted__DelegateSignature, Success) == 0x000000, "Member 'GymCloudApi_OnTOSAccepted__DelegateSignature::Success' has a wrong offset!");

// DelegateFunction GYMGAME.GymCloudApi.OnUnclaimedRequestComplete__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct GymCloudApi_OnUnclaimedRequestComplete__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymUnclaimedRewardResponse            Response;                                          // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_OnUnclaimedRequestComplete__DelegateSignature) == 0x000008, "Wrong alignment on GymCloudApi_OnUnclaimedRequestComplete__DelegateSignature");
static_assert(sizeof(GymCloudApi_OnUnclaimedRequestComplete__DelegateSignature) == 0x000018, "Wrong size on GymCloudApi_OnUnclaimedRequestComplete__DelegateSignature");
static_assert(offsetof(GymCloudApi_OnUnclaimedRequestComplete__DelegateSignature, Success) == 0x000000, "Member 'GymCloudApi_OnUnclaimedRequestComplete__DelegateSignature::Success' has a wrong offset!");
static_assert(offsetof(GymCloudApi_OnUnclaimedRequestComplete__DelegateSignature, Response) == 0x000008, "Member 'GymCloudApi_OnUnclaimedRequestComplete__DelegateSignature::Response' has a wrong offset!");

// DelegateFunction GYMGAME.GymCloudApi.PhotoSearchComplete__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GymCloudApi_PhotoSearchComplete__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_PhotoSearchComplete__DelegateSignature) == 0x000001, "Wrong alignment on GymCloudApi_PhotoSearchComplete__DelegateSignature");
static_assert(sizeof(GymCloudApi_PhotoSearchComplete__DelegateSignature) == 0x000001, "Wrong size on GymCloudApi_PhotoSearchComplete__DelegateSignature");
static_assert(offsetof(GymCloudApi_PhotoSearchComplete__DelegateSignature, Success) == 0x000000, "Member 'GymCloudApi_PhotoSearchComplete__DelegateSignature::Success' has a wrong offset!");

// DelegateFunction GYMGAME.GymCloudApi.PhotoUploadComplete__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GymCloudApi_PhotoUploadComplete__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_PhotoUploadComplete__DelegateSignature) == 0x000001, "Wrong alignment on GymCloudApi_PhotoUploadComplete__DelegateSignature");
static_assert(sizeof(GymCloudApi_PhotoUploadComplete__DelegateSignature) == 0x000001, "Wrong size on GymCloudApi_PhotoUploadComplete__DelegateSignature");
static_assert(offsetof(GymCloudApi_PhotoUploadComplete__DelegateSignature, Success) == 0x000000, "Member 'GymCloudApi_PhotoUploadComplete__DelegateSignature::Success' has a wrong offset!");

// DelegateFunction GYMGAME.GymCloudApi.PlaylistAddComplete__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GymCloudApi_PlaylistAddComplete__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_PlaylistAddComplete__DelegateSignature) == 0x000001, "Wrong alignment on GymCloudApi_PlaylistAddComplete__DelegateSignature");
static_assert(sizeof(GymCloudApi_PlaylistAddComplete__DelegateSignature) == 0x000001, "Wrong size on GymCloudApi_PlaylistAddComplete__DelegateSignature");
static_assert(offsetof(GymCloudApi_PlaylistAddComplete__DelegateSignature, Success) == 0x000000, "Member 'GymCloudApi_PlaylistAddComplete__DelegateSignature::Success' has a wrong offset!");

// DelegateFunction GYMGAME.GymCloudApi.PlaylistCreateComplete__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct GymCloudApi_PlaylistCreateComplete__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ID;                                                // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_PlaylistCreateComplete__DelegateSignature) == 0x000008, "Wrong alignment on GymCloudApi_PlaylistCreateComplete__DelegateSignature");
static_assert(sizeof(GymCloudApi_PlaylistCreateComplete__DelegateSignature) == 0x000018, "Wrong size on GymCloudApi_PlaylistCreateComplete__DelegateSignature");
static_assert(offsetof(GymCloudApi_PlaylistCreateComplete__DelegateSignature, Success) == 0x000000, "Member 'GymCloudApi_PlaylistCreateComplete__DelegateSignature::Success' has a wrong offset!");
static_assert(offsetof(GymCloudApi_PlaylistCreateComplete__DelegateSignature, ID) == 0x000008, "Member 'GymCloudApi_PlaylistCreateComplete__DelegateSignature::ID' has a wrong offset!");

// DelegateFunction GYMGAME.GymCloudApi.PlaylistDeleteComplete__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GymCloudApi_PlaylistDeleteComplete__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_PlaylistDeleteComplete__DelegateSignature) == 0x000001, "Wrong alignment on GymCloudApi_PlaylistDeleteComplete__DelegateSignature");
static_assert(sizeof(GymCloudApi_PlaylistDeleteComplete__DelegateSignature) == 0x000001, "Wrong size on GymCloudApi_PlaylistDeleteComplete__DelegateSignature");
static_assert(offsetof(GymCloudApi_PlaylistDeleteComplete__DelegateSignature, Success) == 0x000000, "Member 'GymCloudApi_PlaylistDeleteComplete__DelegateSignature::Success' has a wrong offset!");

// DelegateFunction GYMGAME.GymCloudApi.PlaylistRemovalComplete__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GymCloudApi_PlaylistRemovalComplete__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_PlaylistRemovalComplete__DelegateSignature) == 0x000001, "Wrong alignment on GymCloudApi_PlaylistRemovalComplete__DelegateSignature");
static_assert(sizeof(GymCloudApi_PlaylistRemovalComplete__DelegateSignature) == 0x000001, "Wrong size on GymCloudApi_PlaylistRemovalComplete__DelegateSignature");
static_assert(offsetof(GymCloudApi_PlaylistRemovalComplete__DelegateSignature, Success) == 0x000000, "Member 'GymCloudApi_PlaylistRemovalComplete__DelegateSignature::Success' has a wrong offset!");

// DelegateFunction GYMGAME.GymCloudApi.PlaylistSearchComplete__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GymCloudApi_PlaylistSearchComplete__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_PlaylistSearchComplete__DelegateSignature) == 0x000001, "Wrong alignment on GymCloudApi_PlaylistSearchComplete__DelegateSignature");
static_assert(sizeof(GymCloudApi_PlaylistSearchComplete__DelegateSignature) == 0x000001, "Wrong size on GymCloudApi_PlaylistSearchComplete__DelegateSignature");
static_assert(offsetof(GymCloudApi_PlaylistSearchComplete__DelegateSignature, Success) == 0x000000, "Member 'GymCloudApi_PlaylistSearchComplete__DelegateSignature::Success' has a wrong offset!");

// Function GYMGAME.GymCloudApi.PublishMap_Client
// 0x0010 (0x0010 - 0x0000)
struct GymCloudApi_PublishMap_Client final
{
public:
	class FString                                 MapId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_PublishMap_Client) == 0x000008, "Wrong alignment on GymCloudApi_PublishMap_Client");
static_assert(sizeof(GymCloudApi_PublishMap_Client) == 0x000010, "Wrong size on GymCloudApi_PublishMap_Client");
static_assert(offsetof(GymCloudApi_PublishMap_Client, MapId) == 0x000000, "Member 'GymCloudApi_PublishMap_Client::MapId' has a wrong offset!");

// Function GYMGAME.GymCloudApi.RemoveFromPlaylist_Client
// 0x0018 (0x0018 - 0x0000)
struct GymCloudApi_RemoveFromPlaylist_Client final
{
public:
	class FString                                 PlaylistId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymCloudApi_RemoveFromPlaylist_Client) == 0x000008, "Wrong alignment on GymCloudApi_RemoveFromPlaylist_Client");
static_assert(sizeof(GymCloudApi_RemoveFromPlaylist_Client) == 0x000018, "Wrong size on GymCloudApi_RemoveFromPlaylist_Client");
static_assert(offsetof(GymCloudApi_RemoveFromPlaylist_Client, PlaylistId) == 0x000000, "Member 'GymCloudApi_RemoveFromPlaylist_Client::PlaylistId' has a wrong offset!");
static_assert(offsetof(GymCloudApi_RemoveFromPlaylist_Client, Index_0) == 0x000010, "Member 'GymCloudApi_RemoveFromPlaylist_Client::Index_0' has a wrong offset!");

// Function GYMGAME.GymCloudApi.RenameMap_Client
// 0x0020 (0x0020 - 0x0000)
struct GymCloudApi_RenameMap_Client final
{
public:
	class FString                                 MapId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_RenameMap_Client) == 0x000008, "Wrong alignment on GymCloudApi_RenameMap_Client");
static_assert(sizeof(GymCloudApi_RenameMap_Client) == 0x000020, "Wrong size on GymCloudApi_RenameMap_Client");
static_assert(offsetof(GymCloudApi_RenameMap_Client, MapId) == 0x000000, "Member 'GymCloudApi_RenameMap_Client::MapId' has a wrong offset!");
static_assert(offsetof(GymCloudApi_RenameMap_Client, Name_0) == 0x000010, "Member 'GymCloudApi_RenameMap_Client::Name_0' has a wrong offset!");

// Function GYMGAME.GymCloudApi.ReportMap_Client
// 0x0020 (0x0020 - 0x0000)
struct GymCloudApi_ReportMap_Client final
{
public:
	class FString                                 MapId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_ReportMap_Client) == 0x000008, "Wrong alignment on GymCloudApi_ReportMap_Client");
static_assert(sizeof(GymCloudApi_ReportMap_Client) == 0x000020, "Wrong size on GymCloudApi_ReportMap_Client");
static_assert(offsetof(GymCloudApi_ReportMap_Client, MapId) == 0x000000, "Member 'GymCloudApi_ReportMap_Client::MapId' has a wrong offset!");
static_assert(offsetof(GymCloudApi_ReportMap_Client, Description) == 0x000010, "Member 'GymCloudApi_ReportMap_Client::Description' has a wrong offset!");

// Function GYMGAME.GymCloudApi.RequestDeleteMap_Client
// 0x0010 (0x0010 - 0x0000)
struct GymCloudApi_RequestDeleteMap_Client final
{
public:
	class FString                                 MapId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_RequestDeleteMap_Client) == 0x000008, "Wrong alignment on GymCloudApi_RequestDeleteMap_Client");
static_assert(sizeof(GymCloudApi_RequestDeleteMap_Client) == 0x000010, "Wrong size on GymCloudApi_RequestDeleteMap_Client");
static_assert(offsetof(GymCloudApi_RequestDeleteMap_Client, MapId) == 0x000000, "Member 'GymCloudApi_RequestDeleteMap_Client::MapId' has a wrong offset!");

// DelegateFunction GYMGAME.GymCloudApi.ServerListUpdated__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GymCloudApi_ServerListUpdated__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_ServerListUpdated__DelegateSignature) == 0x000001, "Wrong alignment on GymCloudApi_ServerListUpdated__DelegateSignature");
static_assert(sizeof(GymCloudApi_ServerListUpdated__DelegateSignature) == 0x000001, "Wrong size on GymCloudApi_ServerListUpdated__DelegateSignature");
static_assert(offsetof(GymCloudApi_ServerListUpdated__DelegateSignature, Success) == 0x000000, "Member 'GymCloudApi_ServerListUpdated__DelegateSignature::Success' has a wrong offset!");

// Function GYMGAME.GymCloudApi.SetCloudName_Client
// 0x0010 (0x0010 - 0x0000)
struct GymCloudApi_SetCloudName_Client final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_SetCloudName_Client) == 0x000008, "Wrong alignment on GymCloudApi_SetCloudName_Client");
static_assert(sizeof(GymCloudApi_SetCloudName_Client) == 0x000010, "Wrong size on GymCloudApi_SetCloudName_Client");
static_assert(offsetof(GymCloudApi_SetCloudName_Client, Name_0) == 0x000000, "Member 'GymCloudApi_SetCloudName_Client::Name_0' has a wrong offset!");

// Function GYMGAME.GymCloudApi.SteamLogin
// 0x0020 (0x0020 - 0x0000)
struct GymCloudApi_SteamLogin final
{
public:
	class FString                                 Ticket;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamName;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_SteamLogin) == 0x000008, "Wrong alignment on GymCloudApi_SteamLogin");
static_assert(sizeof(GymCloudApi_SteamLogin) == 0x000020, "Wrong size on GymCloudApi_SteamLogin");
static_assert(offsetof(GymCloudApi_SteamLogin, Ticket) == 0x000000, "Member 'GymCloudApi_SteamLogin::Ticket' has a wrong offset!");
static_assert(offsetof(GymCloudApi_SteamLogin, SteamName) == 0x000010, "Member 'GymCloudApi_SteamLogin::SteamName' has a wrong offset!");

// Function GYMGAME.GymCloudApi.TestLogin
// 0x0010 (0x0010 - 0x0000)
struct GymCloudApi_TestLogin final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_TestLogin) == 0x000008, "Wrong alignment on GymCloudApi_TestLogin");
static_assert(sizeof(GymCloudApi_TestLogin) == 0x000010, "Wrong size on GymCloudApi_TestLogin");
static_assert(offsetof(GymCloudApi_TestLogin, ID) == 0x000000, "Member 'GymCloudApi_TestLogin::ID' has a wrong offset!");

// Function GYMGAME.GymCloudApi.UnpublishMap_Client
// 0x0010 (0x0010 - 0x0000)
struct GymCloudApi_UnpublishMap_Client final
{
public:
	class FString                                 MapId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_UnpublishMap_Client) == 0x000008, "Wrong alignment on GymCloudApi_UnpublishMap_Client");
static_assert(sizeof(GymCloudApi_UnpublishMap_Client) == 0x000010, "Wrong size on GymCloudApi_UnpublishMap_Client");
static_assert(offsetof(GymCloudApi_UnpublishMap_Client, MapId) == 0x000000, "Member 'GymCloudApi_UnpublishMap_Client::MapId' has a wrong offset!");

// Function GYMGAME.GymCloudApi.UploadPhotoWithMeta_Client
// 0x0028 (0x0028 - 0x0000)
struct GymCloudApi_UploadPhotoWithMeta_Client final
{
public:
	class FString                                 PhotoPath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhotoMetaData                         Meta;                                              // 0x0010(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_UploadPhotoWithMeta_Client) == 0x000008, "Wrong alignment on GymCloudApi_UploadPhotoWithMeta_Client");
static_assert(sizeof(GymCloudApi_UploadPhotoWithMeta_Client) == 0x000028, "Wrong size on GymCloudApi_UploadPhotoWithMeta_Client");
static_assert(offsetof(GymCloudApi_UploadPhotoWithMeta_Client, PhotoPath) == 0x000000, "Member 'GymCloudApi_UploadPhotoWithMeta_Client::PhotoPath' has a wrong offset!");
static_assert(offsetof(GymCloudApi_UploadPhotoWithMeta_Client, Meta) == 0x000010, "Member 'GymCloudApi_UploadPhotoWithMeta_Client::Meta' has a wrong offset!");

// Function GYMGAME.GymCloudApi.UpvoteMap_Client
// 0x0018 (0x0018 - 0x0000)
struct GymCloudApi_UpvoteMap_Client final
{
public:
	class FString                                 MapId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Remove;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymCloudApi_UpvoteMap_Client) == 0x000008, "Wrong alignment on GymCloudApi_UpvoteMap_Client");
static_assert(sizeof(GymCloudApi_UpvoteMap_Client) == 0x000018, "Wrong size on GymCloudApi_UpvoteMap_Client");
static_assert(offsetof(GymCloudApi_UpvoteMap_Client, MapId) == 0x000000, "Member 'GymCloudApi_UpvoteMap_Client::MapId' has a wrong offset!");
static_assert(offsetof(GymCloudApi_UpvoteMap_Client, Remove) == 0x000010, "Member 'GymCloudApi_UpvoteMap_Client::Remove' has a wrong offset!");

// Function GYMGAME.GymCloudApi.GetBaseUrl
// 0x0010 (0x0010 - 0x0000)
struct GymCloudApi_GetBaseUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_GetBaseUrl) == 0x000008, "Wrong alignment on GymCloudApi_GetBaseUrl");
static_assert(sizeof(GymCloudApi_GetBaseUrl) == 0x000010, "Wrong size on GymCloudApi_GetBaseUrl");
static_assert(offsetof(GymCloudApi_GetBaseUrl, ReturnValue) == 0x000000, "Member 'GymCloudApi_GetBaseUrl::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCloudApi.GetJoinToken
// 0x0010 (0x0010 - 0x0000)
struct GymCloudApi_GetJoinToken final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_GetJoinToken) == 0x000008, "Wrong alignment on GymCloudApi_GetJoinToken");
static_assert(sizeof(GymCloudApi_GetJoinToken) == 0x000010, "Wrong size on GymCloudApi_GetJoinToken");
static_assert(offsetof(GymCloudApi_GetJoinToken, ReturnValue) == 0x000000, "Member 'GymCloudApi_GetJoinToken::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCloudApi.GetServerInfo
// 0x0158 (0x0158 - 0x0000)
struct GymCloudApi_GetServerInfo final
{
public:
	struct FGymServerInfo                         ReturnValue;                                       // 0x0000(0x0158)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_GetServerInfo) == 0x000008, "Wrong alignment on GymCloudApi_GetServerInfo");
static_assert(sizeof(GymCloudApi_GetServerInfo) == 0x000158, "Wrong size on GymCloudApi_GetServerInfo");
static_assert(offsetof(GymCloudApi_GetServerInfo, ReturnValue) == 0x000000, "Member 'GymCloudApi_GetServerInfo::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCloudApi.GetServerVersion
// 0x0010 (0x0010 - 0x0000)
struct GymCloudApi_GetServerVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_GetServerVersion) == 0x000008, "Wrong alignment on GymCloudApi_GetServerVersion");
static_assert(sizeof(GymCloudApi_GetServerVersion) == 0x000010, "Wrong size on GymCloudApi_GetServerVersion");
static_assert(offsetof(GymCloudApi_GetServerVersion, ReturnValue) == 0x000000, "Member 'GymCloudApi_GetServerVersion::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCloudApi.HasClientAcceptedTos
// 0x0001 (0x0001 - 0x0000)
struct GymCloudApi_HasClientAcceptedTos final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_HasClientAcceptedTos) == 0x000001, "Wrong alignment on GymCloudApi_HasClientAcceptedTos");
static_assert(sizeof(GymCloudApi_HasClientAcceptedTos) == 0x000001, "Wrong size on GymCloudApi_HasClientAcceptedTos");
static_assert(offsetof(GymCloudApi_HasClientAcceptedTos, ReturnValue) == 0x000000, "Member 'GymCloudApi_HasClientAcceptedTos::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCloudApi.IsClientAdmin
// 0x0001 (0x0001 - 0x0000)
struct GymCloudApi_IsClientAdmin final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_IsClientAdmin) == 0x000001, "Wrong alignment on GymCloudApi_IsClientAdmin");
static_assert(sizeof(GymCloudApi_IsClientAdmin) == 0x000001, "Wrong size on GymCloudApi_IsClientAdmin");
static_assert(offsetof(GymCloudApi_IsClientAdmin, ReturnValue) == 0x000000, "Member 'GymCloudApi_IsClientAdmin::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCloudApi.IsClientLoggedIn
// 0x0001 (0x0001 - 0x0000)
struct GymCloudApi_IsClientLoggedIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_IsClientLoggedIn) == 0x000001, "Wrong alignment on GymCloudApi_IsClientLoggedIn");
static_assert(sizeof(GymCloudApi_IsClientLoggedIn) == 0x000001, "Wrong size on GymCloudApi_IsClientLoggedIn");
static_assert(offsetof(GymCloudApi_IsClientLoggedIn, ReturnValue) == 0x000000, "Member 'GymCloudApi_IsClientLoggedIn::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCloudApi.IsLobbyOwner
// 0x0001 (0x0001 - 0x0000)
struct GymCloudApi_IsLobbyOwner final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCloudApi_IsLobbyOwner) == 0x000001, "Wrong alignment on GymCloudApi_IsLobbyOwner");
static_assert(sizeof(GymCloudApi_IsLobbyOwner) == 0x000001, "Wrong size on GymCloudApi_IsLobbyOwner");
static_assert(offsetof(GymCloudApi_IsLobbyOwner, ReturnValue) == 0x000000, "Member 'GymCloudApi_IsLobbyOwner::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCollectibleObjective.BPLootCollected
// 0x0008 (0x0008 - 0x0000)
struct GymCollectibleObjective_BPLootCollected final
{
public:
	class AGymLootActor*                          Loot;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCollectibleObjective_BPLootCollected) == 0x000008, "Wrong alignment on GymCollectibleObjective_BPLootCollected");
static_assert(sizeof(GymCollectibleObjective_BPLootCollected) == 0x000008, "Wrong size on GymCollectibleObjective_BPLootCollected");
static_assert(offsetof(GymCollectibleObjective_BPLootCollected, Loot) == 0x000000, "Member 'GymCollectibleObjective_BPLootCollected::Loot' has a wrong offset!");

// Function GYMGAME.GymCollectibleObjective.Client_SetLootVisible
// 0x0010 (0x0010 - 0x0000)
struct GymCollectibleObjective_Client_SetLootVisible final
{
public:
	class AGymLootActor*                          LootActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibility;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymCollectibleObjective_Client_SetLootVisible) == 0x000008, "Wrong alignment on GymCollectibleObjective_Client_SetLootVisible");
static_assert(sizeof(GymCollectibleObjective_Client_SetLootVisible) == 0x000010, "Wrong size on GymCollectibleObjective_Client_SetLootVisible");
static_assert(offsetof(GymCollectibleObjective_Client_SetLootVisible, LootActor) == 0x000000, "Member 'GymCollectibleObjective_Client_SetLootVisible::LootActor' has a wrong offset!");
static_assert(offsetof(GymCollectibleObjective_Client_SetLootVisible, bVisibility) == 0x000008, "Member 'GymCollectibleObjective_Client_SetLootVisible::bVisibility' has a wrong offset!");

// Function GYMGAME.GymCollectibleObjective.OnCollected
// 0x0008 (0x0008 - 0x0000)
struct GymCollectibleObjective_OnCollected final
{
public:
	class AGymLootActor*                          Loot;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCollectibleObjective_OnCollected) == 0x000008, "Wrong alignment on GymCollectibleObjective_OnCollected");
static_assert(sizeof(GymCollectibleObjective_OnCollected) == 0x000008, "Wrong size on GymCollectibleObjective_OnCollected");
static_assert(offsetof(GymCollectibleObjective_OnCollected, Loot) == 0x000000, "Member 'GymCollectibleObjective_OnCollected::Loot' has a wrong offset!");

// Function GYMGAME.GymCollectibleObjective.GetLootCollectedText
// 0x0018 (0x0018 - 0x0000)
struct GymCollectibleObjective_GetLootCollectedText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCollectibleObjective_GetLootCollectedText) == 0x000008, "Wrong alignment on GymCollectibleObjective_GetLootCollectedText");
static_assert(sizeof(GymCollectibleObjective_GetLootCollectedText) == 0x000018, "Wrong size on GymCollectibleObjective_GetLootCollectedText");
static_assert(offsetof(GymCollectibleObjective_GetLootCollectedText, ReturnValue) == 0x000000, "Member 'GymCollectibleObjective_GetLootCollectedText::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiTickerMessageWidget.GetTexture
// 0x0018 (0x0018 - 0x0000)
struct GymGuiTickerMessageWidget_GetTexture final
{
public:
	class FString                                 IconTextureId;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiTickerMessageWidget_GetTexture) == 0x000008, "Wrong alignment on GymGuiTickerMessageWidget_GetTexture");
static_assert(sizeof(GymGuiTickerMessageWidget_GetTexture) == 0x000018, "Wrong size on GymGuiTickerMessageWidget_GetTexture");
static_assert(offsetof(GymGuiTickerMessageWidget_GetTexture, IconTextureId) == 0x000000, "Member 'GymGuiTickerMessageWidget_GetTexture::IconTextureId' has a wrong offset!");
static_assert(offsetof(GymGuiTickerMessageWidget_GetTexture, ReturnValue) == 0x000010, "Member 'GymGuiTickerMessageWidget_GetTexture::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymInteractableInterface.CanInteractThroughWall
// 0x0001 (0x0001 - 0x0000)
struct GymInteractableInterface_CanInteractThroughWall final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymInteractableInterface_CanInteractThroughWall) == 0x000001, "Wrong alignment on GymInteractableInterface_CanInteractThroughWall");
static_assert(sizeof(GymInteractableInterface_CanInteractThroughWall) == 0x000001, "Wrong size on GymInteractableInterface_CanInteractThroughWall");
static_assert(offsetof(GymInteractableInterface_CanInteractThroughWall, ReturnValue) == 0x000000, "Member 'GymInteractableInterface_CanInteractThroughWall::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymInteractableInterface.CanInteractWith
// 0x0018 (0x0018 - 0x0000)
struct GymInteractableInterface_CanInteractWith final
{
public:
	class AGymCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymInteractableInterface_CanInteractWith) == 0x000008, "Wrong alignment on GymInteractableInterface_CanInteractWith");
static_assert(sizeof(GymInteractableInterface_CanInteractWith) == 0x000018, "Wrong size on GymInteractableInterface_CanInteractWith");
static_assert(offsetof(GymInteractableInterface_CanInteractWith, Character) == 0x000000, "Member 'GymInteractableInterface_CanInteractWith::Character' has a wrong offset!");
static_assert(offsetof(GymInteractableInterface_CanInteractWith, Component) == 0x000008, "Member 'GymInteractableInterface_CanInteractWith::Component' has a wrong offset!");
static_assert(offsetof(GymInteractableInterface_CanInteractWith, ReturnValue) == 0x000010, "Member 'GymInteractableInterface_CanInteractWith::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymInteractableInterface.DisableInteract
// 0x0010 (0x0010 - 0x0000)
struct GymInteractableInterface_DisableInteract final
{
public:
	class AGymCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymInteractableInterface_DisableInteract) == 0x000008, "Wrong alignment on GymInteractableInterface_DisableInteract");
static_assert(sizeof(GymInteractableInterface_DisableInteract) == 0x000010, "Wrong size on GymInteractableInterface_DisableInteract");
static_assert(offsetof(GymInteractableInterface_DisableInteract, Character) == 0x000000, "Member 'GymInteractableInterface_DisableInteract::Character' has a wrong offset!");
static_assert(offsetof(GymInteractableInterface_DisableInteract, Component) == 0x000008, "Member 'GymInteractableInterface_DisableInteract::Component' has a wrong offset!");

// Function GYMGAME.GymInteractableInterface.EnableInteract
// 0x0010 (0x0010 - 0x0000)
struct GymInteractableInterface_EnableInteract final
{
public:
	class AGymCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymInteractableInterface_EnableInteract) == 0x000008, "Wrong alignment on GymInteractableInterface_EnableInteract");
static_assert(sizeof(GymInteractableInterface_EnableInteract) == 0x000010, "Wrong size on GymInteractableInterface_EnableInteract");
static_assert(offsetof(GymInteractableInterface_EnableInteract, Character) == 0x000000, "Member 'GymInteractableInterface_EnableInteract::Character' has a wrong offset!");
static_assert(offsetof(GymInteractableInterface_EnableInteract, Component) == 0x000008, "Member 'GymInteractableInterface_EnableInteract::Component' has a wrong offset!");

// Function GYMGAME.GymInteractableInterface.EndInteract
// 0x0010 (0x0010 - 0x0000)
struct GymInteractableInterface_EndInteract final
{
public:
	class AGymCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymInteractableInterface_EndInteract) == 0x000008, "Wrong alignment on GymInteractableInterface_EndInteract");
static_assert(sizeof(GymInteractableInterface_EndInteract) == 0x000010, "Wrong size on GymInteractableInterface_EndInteract");
static_assert(offsetof(GymInteractableInterface_EndInteract, Character) == 0x000000, "Member 'GymInteractableInterface_EndInteract::Character' has a wrong offset!");
static_assert(offsetof(GymInteractableInterface_EndInteract, Component) == 0x000008, "Member 'GymInteractableInterface_EndInteract::Component' has a wrong offset!");

// Function GYMGAME.GymInteractableInterface.GetInteractionType
// 0x0010 (0x0010 - 0x0000)
struct GymInteractableInterface_GetInteractionType final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInteractionType                              ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymInteractableInterface_GetInteractionType) == 0x000008, "Wrong alignment on GymInteractableInterface_GetInteractionType");
static_assert(sizeof(GymInteractableInterface_GetInteractionType) == 0x000010, "Wrong size on GymInteractableInterface_GetInteractionType");
static_assert(offsetof(GymInteractableInterface_GetInteractionType, Component) == 0x000000, "Member 'GymInteractableInterface_GetInteractionType::Component' has a wrong offset!");
static_assert(offsetof(GymInteractableInterface_GetInteractionType, ReturnValue) == 0x000008, "Member 'GymInteractableInterface_GetInteractionType::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymInteractableInterface.GetLineDistance
// 0x0004 (0x0004 - 0x0000)
struct GymInteractableInterface_GetLineDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymInteractableInterface_GetLineDistance) == 0x000004, "Wrong alignment on GymInteractableInterface_GetLineDistance");
static_assert(sizeof(GymInteractableInterface_GetLineDistance) == 0x000004, "Wrong size on GymInteractableInterface_GetLineDistance");
static_assert(offsetof(GymInteractableInterface_GetLineDistance, ReturnValue) == 0x000000, "Member 'GymInteractableInterface_GetLineDistance::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymInteractableInterface.GetSphereDistance
// 0x0004 (0x0004 - 0x0000)
struct GymInteractableInterface_GetSphereDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymInteractableInterface_GetSphereDistance) == 0x000004, "Wrong alignment on GymInteractableInterface_GetSphereDistance");
static_assert(sizeof(GymInteractableInterface_GetSphereDistance) == 0x000004, "Wrong size on GymInteractableInterface_GetSphereDistance");
static_assert(offsetof(GymInteractableInterface_GetSphereDistance, ReturnValue) == 0x000000, "Member 'GymInteractableInterface_GetSphereDistance::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymInteractableInterface.Interact
// 0x0010 (0x0010 - 0x0000)
struct GymInteractableInterface_Interact final
{
public:
	class AGymCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymInteractableInterface_Interact) == 0x000008, "Wrong alignment on GymInteractableInterface_Interact");
static_assert(sizeof(GymInteractableInterface_Interact) == 0x000010, "Wrong size on GymInteractableInterface_Interact");
static_assert(offsetof(GymInteractableInterface_Interact, Character) == 0x000000, "Member 'GymInteractableInterface_Interact::Character' has a wrong offset!");
static_assert(offsetof(GymInteractableInterface_Interact, Component) == 0x000008, "Member 'GymInteractableInterface_Interact::Component' has a wrong offset!");

// Function GYMGAME.GymInteractableInterface.IsForEditMode
// 0x0001 (0x0001 - 0x0000)
struct GymInteractableInterface_IsForEditMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymInteractableInterface_IsForEditMode) == 0x000001, "Wrong alignment on GymInteractableInterface_IsForEditMode");
static_assert(sizeof(GymInteractableInterface_IsForEditMode) == 0x000001, "Wrong size on GymInteractableInterface_IsForEditMode");
static_assert(offsetof(GymInteractableInterface_IsForEditMode, ReturnValue) == 0x000000, "Member 'GymInteractableInterface_IsForEditMode::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymInteractableInterface.ShouldAutoInteract
// 0x0001 (0x0001 - 0x0000)
struct GymInteractableInterface_ShouldAutoInteract final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymInteractableInterface_ShouldAutoInteract) == 0x000001, "Wrong alignment on GymInteractableInterface_ShouldAutoInteract");
static_assert(sizeof(GymInteractableInterface_ShouldAutoInteract) == 0x000001, "Wrong size on GymInteractableInterface_ShouldAutoInteract");
static_assert(offsetof(GymInteractableInterface_ShouldAutoInteract, ReturnValue) == 0x000000, "Member 'GymInteractableInterface_ShouldAutoInteract::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymInteractableInterface.SupportsLineTrace
// 0x0001 (0x0001 - 0x0000)
struct GymInteractableInterface_SupportsLineTrace final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymInteractableInterface_SupportsLineTrace) == 0x000001, "Wrong alignment on GymInteractableInterface_SupportsLineTrace");
static_assert(sizeof(GymInteractableInterface_SupportsLineTrace) == 0x000001, "Wrong size on GymInteractableInterface_SupportsLineTrace");
static_assert(offsetof(GymInteractableInterface_SupportsLineTrace, ReturnValue) == 0x000000, "Member 'GymInteractableInterface_SupportsLineTrace::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymInteractableInterface.SupportsSphereTrace
// 0x0001 (0x0001 - 0x0000)
struct GymInteractableInterface_SupportsSphereTrace final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymInteractableInterface_SupportsSphereTrace) == 0x000001, "Wrong alignment on GymInteractableInterface_SupportsSphereTrace");
static_assert(sizeof(GymInteractableInterface_SupportsSphereTrace) == 0x000001, "Wrong size on GymInteractableInterface_SupportsSphereTrace");
static_assert(offsetof(GymInteractableInterface_SupportsSphereTrace, ReturnValue) == 0x000000, "Member 'GymInteractableInterface_SupportsSphereTrace::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymInputRecorder.ExportInputRecord
// 0x0018 (0x0018 - 0x0000)
struct GymInputRecorder_ExportInputRecord final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymInputRecorder_ExportInputRecord) == 0x000008, "Wrong alignment on GymInputRecorder_ExportInputRecord");
static_assert(sizeof(GymInputRecorder_ExportInputRecord) == 0x000018, "Wrong size on GymInputRecorder_ExportInputRecord");
static_assert(offsetof(GymInputRecorder_ExportInputRecord, Filename) == 0x000000, "Member 'GymInputRecorder_ExportInputRecord::Filename' has a wrong offset!");
static_assert(offsetof(GymInputRecorder_ExportInputRecord, bForce) == 0x000010, "Member 'GymInputRecorder_ExportInputRecord::bForce' has a wrong offset!");

// Function GYMGAME.GymInputRecorder.ImportAndPlayRecord
// 0x0010 (0x0010 - 0x0000)
struct GymInputRecorder_ImportAndPlayRecord final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymInputRecorder_ImportAndPlayRecord) == 0x000008, "Wrong alignment on GymInputRecorder_ImportAndPlayRecord");
static_assert(sizeof(GymInputRecorder_ImportAndPlayRecord) == 0x000010, "Wrong size on GymInputRecorder_ImportAndPlayRecord");
static_assert(offsetof(GymInputRecorder_ImportAndPlayRecord, Filename) == 0x000000, "Member 'GymInputRecorder_ImportAndPlayRecord::Filename' has a wrong offset!");

// Function GYMGAME.GymInputRecorder.ImportInputRecord
// 0x0010 (0x0010 - 0x0000)
struct GymInputRecorder_ImportInputRecord final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymInputRecorder_ImportInputRecord) == 0x000008, "Wrong alignment on GymInputRecorder_ImportInputRecord");
static_assert(sizeof(GymInputRecorder_ImportInputRecord) == 0x000010, "Wrong size on GymInputRecorder_ImportInputRecord");
static_assert(offsetof(GymInputRecorder_ImportInputRecord, Filename) == 0x000000, "Member 'GymInputRecorder_ImportInputRecord::Filename' has a wrong offset!");

// Function GYMGAME.GymInputRecorder.SetAutoRecordOn
// 0x0018 (0x0018 - 0x0000)
struct GymInputRecorder_SetAutoRecordOn final
{
public:
	bool                                          AutoRecord;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StartLocation;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RecordFileName;                                    // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymInputRecorder_SetAutoRecordOn) == 0x000008, "Wrong alignment on GymInputRecorder_SetAutoRecordOn");
static_assert(sizeof(GymInputRecorder_SetAutoRecordOn) == 0x000018, "Wrong size on GymInputRecorder_SetAutoRecordOn");
static_assert(offsetof(GymInputRecorder_SetAutoRecordOn, AutoRecord) == 0x000000, "Member 'GymInputRecorder_SetAutoRecordOn::AutoRecord' has a wrong offset!");
static_assert(offsetof(GymInputRecorder_SetAutoRecordOn, StartLocation) == 0x000004, "Member 'GymInputRecorder_SetAutoRecordOn::StartLocation' has a wrong offset!");
static_assert(offsetof(GymInputRecorder_SetAutoRecordOn, RecordFileName) == 0x000008, "Member 'GymInputRecorder_SetAutoRecordOn::RecordFileName' has a wrong offset!");

// Function GYMGAME.GymInputRecorder.GetIsRecording
// 0x0001 (0x0001 - 0x0000)
struct GymInputRecorder_GetIsRecording final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymInputRecorder_GetIsRecording) == 0x000001, "Wrong alignment on GymInputRecorder_GetIsRecording");
static_assert(sizeof(GymInputRecorder_GetIsRecording) == 0x000001, "Wrong size on GymInputRecorder_GetIsRecording");
static_assert(offsetof(GymInputRecorder_GetIsRecording, ReturnValue) == 0x000000, "Member 'GymInputRecorder_GetIsRecording::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymInputRecorder.GetRecordTime
// 0x0004 (0x0004 - 0x0000)
struct GymInputRecorder_GetRecordTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymInputRecorder_GetRecordTime) == 0x000004, "Wrong alignment on GymInputRecorder_GetRecordTime");
static_assert(sizeof(GymInputRecorder_GetRecordTime) == 0x000004, "Wrong size on GymInputRecorder_GetRecordTime");
static_assert(offsetof(GymInputRecorder_GetRecordTime, ReturnValue) == 0x000000, "Member 'GymInputRecorder_GetRecordTime::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCrowd.BlueprintEditorTick
// 0x0004 (0x0004 - 0x0000)
struct GymCrowd_BlueprintEditorTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCrowd_BlueprintEditorTick) == 0x000004, "Wrong alignment on GymCrowd_BlueprintEditorTick");
static_assert(sizeof(GymCrowd_BlueprintEditorTick) == 0x000004, "Wrong size on GymCrowd_BlueprintEditorTick");
static_assert(offsetof(GymCrowd_BlueprintEditorTick, DeltaTime) == 0x000000, "Member 'GymCrowd_BlueprintEditorTick::DeltaTime' has a wrong offset!");

// Function GYMGAME.GymCrowd.SetCrowdState
// 0x0010 (0x0010 - 0x0000)
struct GymCrowd_SetCrowdState final
{
public:
	class FString                                 State;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCrowd_SetCrowdState) == 0x000008, "Wrong alignment on GymCrowd_SetCrowdState");
static_assert(sizeof(GymCrowd_SetCrowdState) == 0x000010, "Wrong size on GymCrowd_SetCrowdState");
static_assert(offsetof(GymCrowd_SetCrowdState, State) == 0x000000, "Member 'GymCrowd_SetCrowdState::State' has a wrong offset!");

// Function GYMGAME.GymCrowd.IsInPlayMode
// 0x0001 (0x0001 - 0x0000)
struct GymCrowd_IsInPlayMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCrowd_IsInPlayMode) == 0x000001, "Wrong alignment on GymCrowd_IsInPlayMode");
static_assert(sizeof(GymCrowd_IsInPlayMode) == 0x000001, "Wrong size on GymCrowd_IsInPlayMode");
static_assert(offsetof(GymCrowd_IsInPlayMode, ReturnValue) == 0x000000, "Member 'GymCrowd_IsInPlayMode::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCustomizationControl.GetLoadedAssets
// 0x0018 (0x0018 - 0x0000)
struct GymCustomizationControl_GetLoadedAssets final
{
public:
	TArray<class UGymCustomizationAsset*>         Assets;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymCustomizationControl_GetLoadedAssets) == 0x000008, "Wrong alignment on GymCustomizationControl_GetLoadedAssets");
static_assert(sizeof(GymCustomizationControl_GetLoadedAssets) == 0x000018, "Wrong size on GymCustomizationControl_GetLoadedAssets");
static_assert(offsetof(GymCustomizationControl_GetLoadedAssets, Assets) == 0x000000, "Member 'GymCustomizationControl_GetLoadedAssets::Assets' has a wrong offset!");
static_assert(offsetof(GymCustomizationControl_GetLoadedAssets, ReturnValue) == 0x000010, "Member 'GymCustomizationControl_GetLoadedAssets::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCustomizationControl.GetCurrentSKMeshes
// 0x0010 (0x0010 - 0x0000)
struct GymCustomizationControl_GetCurrentSKMeshes final
{
public:
	TArray<class USkeletalMeshComponent*>         ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCustomizationControl_GetCurrentSKMeshes) == 0x000008, "Wrong alignment on GymCustomizationControl_GetCurrentSKMeshes");
static_assert(sizeof(GymCustomizationControl_GetCurrentSKMeshes) == 0x000010, "Wrong size on GymCustomizationControl_GetCurrentSKMeshes");
static_assert(offsetof(GymCustomizationControl_GetCurrentSKMeshes, ReturnValue) == 0x000000, "Member 'GymCustomizationControl_GetCurrentSKMeshes::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCustomizationControl.Multi_SpawnSpray
// 0x0038 (0x0038 - 0x0000)
struct GymCustomizationControl_Multi_SpawnSpray final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class AGymStaticLevelAsset>       AssetClass;                                        // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCustomizationControl_Multi_SpawnSpray) == 0x000008, "Wrong alignment on GymCustomizationControl_Multi_SpawnSpray");
static_assert(sizeof(GymCustomizationControl_Multi_SpawnSpray) == 0x000038, "Wrong size on GymCustomizationControl_Multi_SpawnSpray");
static_assert(offsetof(GymCustomizationControl_Multi_SpawnSpray, Location) == 0x000000, "Member 'GymCustomizationControl_Multi_SpawnSpray::Location' has a wrong offset!");
static_assert(offsetof(GymCustomizationControl_Multi_SpawnSpray, Rotation) == 0x000018, "Member 'GymCustomizationControl_Multi_SpawnSpray::Rotation' has a wrong offset!");
static_assert(offsetof(GymCustomizationControl_Multi_SpawnSpray, AssetClass) == 0x000030, "Member 'GymCustomizationControl_Multi_SpawnSpray::AssetClass' has a wrong offset!");

// Function GYMGAME.GymCustomizationControl.SendAttribute
// 0x0018 (0x0018 - 0x0000)
struct GymCustomizationControl_SendAttribute final
{
public:
	struct FGymCustomizationAttribute             Attribute;                                         // 0x0000(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCustomizationControl_SendAttribute) == 0x000008, "Wrong alignment on GymCustomizationControl_SendAttribute");
static_assert(sizeof(GymCustomizationControl_SendAttribute) == 0x000018, "Wrong size on GymCustomizationControl_SendAttribute");
static_assert(offsetof(GymCustomizationControl_SendAttribute, Attribute) == 0x000000, "Member 'GymCustomizationControl_SendAttribute::Attribute' has a wrong offset!");

// Function GYMGAME.GymCustomizationControl.SendCustomization
// 0x0010 (0x0010 - 0x0000)
struct GymCustomizationControl_SendCustomization final
{
public:
	struct FGymCharacterCustomization             NewCustomization;                                  // 0x0000(0x0010)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCustomizationControl_SendCustomization) == 0x000008, "Wrong alignment on GymCustomizationControl_SendCustomization");
static_assert(sizeof(GymCustomizationControl_SendCustomization) == 0x000010, "Wrong size on GymCustomizationControl_SendCustomization");
static_assert(offsetof(GymCustomizationControl_SendCustomization, NewCustomization) == 0x000000, "Member 'GymCustomizationControl_SendCustomization::NewCustomization' has a wrong offset!");

// Function GYMGAME.GymCustomizationControl.Server_SelectSpray
// 0x0008 (0x0008 - 0x0000)
struct GymCustomizationControl_Server_SelectSpray final
{
public:
	class FName                                   SprayID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCustomizationControl_Server_SelectSpray) == 0x000004, "Wrong alignment on GymCustomizationControl_Server_SelectSpray");
static_assert(sizeof(GymCustomizationControl_Server_SelectSpray) == 0x000008, "Wrong size on GymCustomizationControl_Server_SelectSpray");
static_assert(offsetof(GymCustomizationControl_Server_SelectSpray, SprayID) == 0x000000, "Member 'GymCustomizationControl_Server_SelectSpray::SprayID' has a wrong offset!");

// Function GYMGAME.GymCustomizationControl.Server_SelectTaunt
// 0x0008 (0x0008 - 0x0000)
struct GymCustomizationControl_Server_SelectTaunt final
{
public:
	class FName                                   TauntID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCustomizationControl_Server_SelectTaunt) == 0x000004, "Wrong alignment on GymCustomizationControl_Server_SelectTaunt");
static_assert(sizeof(GymCustomizationControl_Server_SelectTaunt) == 0x000008, "Wrong size on GymCustomizationControl_Server_SelectTaunt");
static_assert(offsetof(GymCustomizationControl_Server_SelectTaunt, TauntID) == 0x000000, "Member 'GymCustomizationControl_Server_SelectTaunt::TauntID' has a wrong offset!");

// Function GYMGAME.GymCustomizationControl.SetTauntID
// 0x0008 (0x0008 - 0x0000)
struct GymCustomizationControl_SetTauntID final
{
public:
	class FName                                   TauntID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCustomizationControl_SetTauntID) == 0x000004, "Wrong alignment on GymCustomizationControl_SetTauntID");
static_assert(sizeof(GymCustomizationControl_SetTauntID) == 0x000008, "Wrong size on GymCustomizationControl_SetTauntID");
static_assert(offsetof(GymCustomizationControl_SetTauntID, TauntID) == 0x000000, "Member 'GymCustomizationControl_SetTauntID::TauntID' has a wrong offset!");

// Function GYMGAME.GymCustomizationControl.GetSelectedSprays
// 0x0010 (0x0010 - 0x0000)
struct GymCustomizationControl_GetSelectedSprays final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCustomizationControl_GetSelectedSprays) == 0x000008, "Wrong alignment on GymCustomizationControl_GetSelectedSprays");
static_assert(sizeof(GymCustomizationControl_GetSelectedSprays) == 0x000010, "Wrong size on GymCustomizationControl_GetSelectedSprays");
static_assert(offsetof(GymCustomizationControl_GetSelectedSprays, ReturnValue) == 0x000000, "Member 'GymCustomizationControl_GetSelectedSprays::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCustomizationControl.GetSelectedTaunts
// 0x0010 (0x0010 - 0x0000)
struct GymCustomizationControl_GetSelectedTaunts final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCustomizationControl_GetSelectedTaunts) == 0x000008, "Wrong alignment on GymCustomizationControl_GetSelectedTaunts");
static_assert(sizeof(GymCustomizationControl_GetSelectedTaunts) == 0x000010, "Wrong size on GymCustomizationControl_GetSelectedTaunts");
static_assert(offsetof(GymCustomizationControl_GetSelectedTaunts, ReturnValue) == 0x000000, "Member 'GymCustomizationControl_GetSelectedTaunts::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymCustomizationControl.SaveCustomizationToFile
// 0x0018 (0x0018 - 0x0000)
struct GymCustomizationControl_SaveCustomizationToFile final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymCustomizationControl_SaveCustomizationToFile) == 0x000008, "Wrong alignment on GymCustomizationControl_SaveCustomizationToFile");
static_assert(sizeof(GymCustomizationControl_SaveCustomizationToFile) == 0x000018, "Wrong size on GymCustomizationControl_SaveCustomizationToFile");
static_assert(offsetof(GymCustomizationControl_SaveCustomizationToFile, Filename) == 0x000000, "Member 'GymCustomizationControl_SaveCustomizationToFile::Filename' has a wrong offset!");
static_assert(offsetof(GymCustomizationControl_SaveCustomizationToFile, bForce) == 0x000010, "Member 'GymCustomizationControl_SaveCustomizationToFile::bForce' has a wrong offset!");

// Function GYMGAME.GymCustomizationMannequin.PartyMannequinJoined
// 0x0040 (0x0040 - 0x0000)
struct GymCustomizationMannequin_PartyMannequinJoined final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymPlayerPartyInfo                    PlayerInfo;                                        // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCustomizationMannequin_PartyMannequinJoined) == 0x000008, "Wrong alignment on GymCustomizationMannequin_PartyMannequinJoined");
static_assert(sizeof(GymCustomizationMannequin_PartyMannequinJoined) == 0x000040, "Wrong size on GymCustomizationMannequin_PartyMannequinJoined");
static_assert(offsetof(GymCustomizationMannequin_PartyMannequinJoined, Index_0) == 0x000000, "Member 'GymCustomizationMannequin_PartyMannequinJoined::Index_0' has a wrong offset!");
static_assert(offsetof(GymCustomizationMannequin_PartyMannequinJoined, PlayerInfo) == 0x000008, "Member 'GymCustomizationMannequin_PartyMannequinJoined::PlayerInfo' has a wrong offset!");

// Function GYMGAME.GymCustomizationMannequin.PartyMannequinLeft
// 0x0018 (0x0018 - 0x0000)
struct GymCustomizationMannequin_PartyMannequinLeft final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerId;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCustomizationMannequin_PartyMannequinLeft) == 0x000008, "Wrong alignment on GymCustomizationMannequin_PartyMannequinLeft");
static_assert(sizeof(GymCustomizationMannequin_PartyMannequinLeft) == 0x000018, "Wrong size on GymCustomizationMannequin_PartyMannequinLeft");
static_assert(offsetof(GymCustomizationMannequin_PartyMannequinLeft, PartyIndex) == 0x000000, "Member 'GymCustomizationMannequin_PartyMannequinLeft::PartyIndex' has a wrong offset!");
static_assert(offsetof(GymCustomizationMannequin_PartyMannequinLeft, PlayerId) == 0x000008, "Member 'GymCustomizationMannequin_PartyMannequinLeft::PlayerId' has a wrong offset!");

// Function GYMGAME.GymCustomizationUtils.GetVariants
// 0x0020 (0x0020 - 0x0000)
struct GymCustomizationUtils_GetVariants final
{
public:
	class FString                                 AssetId;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGymCharacterCustomizationGUIOption> ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymCustomizationUtils_GetVariants) == 0x000008, "Wrong alignment on GymCustomizationUtils_GetVariants");
static_assert(sizeof(GymCustomizationUtils_GetVariants) == 0x000020, "Wrong size on GymCustomizationUtils_GetVariants");
static_assert(offsetof(GymCustomizationUtils_GetVariants, AssetId) == 0x000000, "Member 'GymCustomizationUtils_GetVariants::AssetId' has a wrong offset!");
static_assert(offsetof(GymCustomizationUtils_GetVariants, ReturnValue) == 0x000010, "Member 'GymCustomizationUtils_GetVariants::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymDevWordLists.GetAdjective
// 0x0010 (0x0010 - 0x0000)
struct GymDevWordLists_GetAdjective final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymDevWordLists_GetAdjective) == 0x000008, "Wrong alignment on GymDevWordLists_GetAdjective");
static_assert(sizeof(GymDevWordLists_GetAdjective) == 0x000010, "Wrong size on GymDevWordLists_GetAdjective");
static_assert(offsetof(GymDevWordLists_GetAdjective, ReturnValue) == 0x000000, "Member 'GymDevWordLists_GetAdjective::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymDevWordLists.GetAnimal
// 0x0010 (0x0010 - 0x0000)
struct GymDevWordLists_GetAnimal final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymDevWordLists_GetAnimal) == 0x000008, "Wrong alignment on GymDevWordLists_GetAnimal");
static_assert(sizeof(GymDevWordLists_GetAnimal) == 0x000010, "Wrong size on GymDevWordLists_GetAnimal");
static_assert(offsetof(GymDevWordLists_GetAnimal, ReturnValue) == 0x000000, "Member 'GymDevWordLists_GetAnimal::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymDevWordLists.GetNoun
// 0x0010 (0x0010 - 0x0000)
struct GymDevWordLists_GetNoun final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymDevWordLists_GetNoun) == 0x000008, "Wrong alignment on GymDevWordLists_GetNoun");
static_assert(sizeof(GymDevWordLists_GetNoun) == 0x000010, "Wrong size on GymDevWordLists_GetNoun");
static_assert(offsetof(GymDevWordLists_GetNoun, ReturnValue) == 0x000000, "Member 'GymDevWordLists_GetNoun::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymDialogueControl.Client_BeginDialogue
// 0x0008 (0x0008 - 0x0000)
struct GymDialogueControl_Client_BeginDialogue final
{
public:
	class AGymNPC*                                ConversationParticipant;                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymDialogueControl_Client_BeginDialogue) == 0x000008, "Wrong alignment on GymDialogueControl_Client_BeginDialogue");
static_assert(sizeof(GymDialogueControl_Client_BeginDialogue) == 0x000008, "Wrong size on GymDialogueControl_Client_BeginDialogue");
static_assert(offsetof(GymDialogueControl_Client_BeginDialogue, ConversationParticipant) == 0x000000, "Member 'GymDialogueControl_Client_BeginDialogue::ConversationParticipant' has a wrong offset!");

// Function GYMGAME.GymDialogueControl.QueryNPCObjectiveMarkerVisibilityComplete
// 0x0018 (0x0018 - 0x0000)
struct GymDialogueControl_QueryNPCObjectiveMarkerVisibilityComplete final
{
public:
	class AAIController*                          TestController;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGymNPC*                                NPC;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActorVisibility;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymDialogueControl_QueryNPCObjectiveMarkerVisibilityComplete) == 0x000008, "Wrong alignment on GymDialogueControl_QueryNPCObjectiveMarkerVisibilityComplete");
static_assert(sizeof(GymDialogueControl_QueryNPCObjectiveMarkerVisibilityComplete) == 0x000018, "Wrong size on GymDialogueControl_QueryNPCObjectiveMarkerVisibilityComplete");
static_assert(offsetof(GymDialogueControl_QueryNPCObjectiveMarkerVisibilityComplete, TestController) == 0x000000, "Member 'GymDialogueControl_QueryNPCObjectiveMarkerVisibilityComplete::TestController' has a wrong offset!");
static_assert(offsetof(GymDialogueControl_QueryNPCObjectiveMarkerVisibilityComplete, NPC) == 0x000008, "Member 'GymDialogueControl_QueryNPCObjectiveMarkerVisibilityComplete::NPC' has a wrong offset!");
static_assert(offsetof(GymDialogueControl_QueryNPCObjectiveMarkerVisibilityComplete, bActorVisibility) == 0x000010, "Member 'GymDialogueControl_QueryNPCObjectiveMarkerVisibilityComplete::bActorVisibility' has a wrong offset!");

// Function GYMGAME.GymDialogueControl.SetNPCSpeech
// 0x0018 (0x0018 - 0x0000)
struct GymDialogueControl_SetNPCSpeech final
{
public:
	class FText                                   NPCText;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymDialogueControl_SetNPCSpeech) == 0x000008, "Wrong alignment on GymDialogueControl_SetNPCSpeech");
static_assert(sizeof(GymDialogueControl_SetNPCSpeech) == 0x000018, "Wrong size on GymDialogueControl_SetNPCSpeech");
static_assert(offsetof(GymDialogueControl_SetNPCSpeech, NPCText) == 0x000000, "Member 'GymDialogueControl_SetNPCSpeech::NPCText' has a wrong offset!");

// Function GYMGAME.GymDialogueControl.SetPlayerAnswers
// 0x0010 (0x0010 - 0x0000)
struct GymDialogueControl_SetPlayerAnswers final
{
public:
	TArray<struct FGymAnswer>                     Answers;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymDialogueControl_SetPlayerAnswers) == 0x000008, "Wrong alignment on GymDialogueControl_SetPlayerAnswers");
static_assert(sizeof(GymDialogueControl_SetPlayerAnswers) == 0x000010, "Wrong size on GymDialogueControl_SetPlayerAnswers");
static_assert(offsetof(GymDialogueControl_SetPlayerAnswers, Answers) == 0x000000, "Member 'GymDialogueControl_SetPlayerAnswers::Answers' has a wrong offset!");

// Function GYMGAME.GymDialogueTree.AddTask
// 0x0010 (0x0010 - 0x0000)
struct GymDialogueTree_AddTask final
{
public:
	TSubclassOf<class UGymQuest>                  TaskType;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetActive;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymDialogueTree_AddTask) == 0x000008, "Wrong alignment on GymDialogueTree_AddTask");
static_assert(sizeof(GymDialogueTree_AddTask) == 0x000010, "Wrong size on GymDialogueTree_AddTask");
static_assert(offsetof(GymDialogueTree_AddTask, TaskType) == 0x000000, "Member 'GymDialogueTree_AddTask::TaskType' has a wrong offset!");
static_assert(offsetof(GymDialogueTree_AddTask, bSetActive) == 0x000008, "Member 'GymDialogueTree_AddTask::bSetActive' has a wrong offset!");

// Function GYMGAME.GymDialogueTree.BPAllTasksComplete
// 0x0018 (0x0018 - 0x0000)
struct GymDialogueTree_BPAllTasksComplete final
{
public:
	TArray<class FName>                           TaskIDs;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EGymDTBranch                                  Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymDialogueTree_BPAllTasksComplete) == 0x000008, "Wrong alignment on GymDialogueTree_BPAllTasksComplete");
static_assert(sizeof(GymDialogueTree_BPAllTasksComplete) == 0x000018, "Wrong size on GymDialogueTree_BPAllTasksComplete");
static_assert(offsetof(GymDialogueTree_BPAllTasksComplete, TaskIDs) == 0x000000, "Member 'GymDialogueTree_BPAllTasksComplete::TaskIDs' has a wrong offset!");
static_assert(offsetof(GymDialogueTree_BPAllTasksComplete, Result) == 0x000010, "Member 'GymDialogueTree_BPAllTasksComplete::Result' has a wrong offset!");

// Function GYMGAME.GymDialogueTree.BPAnyTaskFailed
// 0x0018 (0x0018 - 0x0000)
struct GymDialogueTree_BPAnyTaskFailed final
{
public:
	TArray<class FName>                           TaskIDs;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EGymDTBranch                                  Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymDialogueTree_BPAnyTaskFailed) == 0x000008, "Wrong alignment on GymDialogueTree_BPAnyTaskFailed");
static_assert(sizeof(GymDialogueTree_BPAnyTaskFailed) == 0x000018, "Wrong size on GymDialogueTree_BPAnyTaskFailed");
static_assert(offsetof(GymDialogueTree_BPAnyTaskFailed, TaskIDs) == 0x000000, "Member 'GymDialogueTree_BPAnyTaskFailed::TaskIDs' has a wrong offset!");
static_assert(offsetof(GymDialogueTree_BPAnyTaskFailed, Result) == 0x000010, "Member 'GymDialogueTree_BPAnyTaskFailed::Result' has a wrong offset!");

// Function GYMGAME.GymDialogueTree.BPHasTask
// 0x000C (0x000C - 0x0000)
struct GymDialogueTree_BPHasTask final
{
public:
	class FName                                   TaskID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGymDTBranch                                  Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymDialogueTree_BPHasTask) == 0x000004, "Wrong alignment on GymDialogueTree_BPHasTask");
static_assert(sizeof(GymDialogueTree_BPHasTask) == 0x00000C, "Wrong size on GymDialogueTree_BPHasTask");
static_assert(offsetof(GymDialogueTree_BPHasTask, TaskID) == 0x000000, "Member 'GymDialogueTree_BPHasTask::TaskID' has a wrong offset!");
static_assert(offsetof(GymDialogueTree_BPHasTask, Result) == 0x000008, "Member 'GymDialogueTree_BPHasTask::Result' has a wrong offset!");

// Function GYMGAME.GymDialogueTree.BPIsActiveTaskInProgress
// 0x0001 (0x0001 - 0x0000)
struct GymDialogueTree_BPIsActiveTaskInProgress final
{
public:
	EGymDTBranch                                  Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymDialogueTree_BPIsActiveTaskInProgress) == 0x000001, "Wrong alignment on GymDialogueTree_BPIsActiveTaskInProgress");
static_assert(sizeof(GymDialogueTree_BPIsActiveTaskInProgress) == 0x000001, "Wrong size on GymDialogueTree_BPIsActiveTaskInProgress");
static_assert(offsetof(GymDialogueTree_BPIsActiveTaskInProgress, Result) == 0x000000, "Member 'GymDialogueTree_BPIsActiveTaskInProgress::Result' has a wrong offset!");

// Function GYMGAME.GymDialogueTree.BPIsObjectiveCompleted
// 0x000C (0x000C - 0x0000)
struct GymDialogueTree_BPIsObjectiveCompleted final
{
public:
	class FName                                   TaskID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGymDTBranch                                  Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymDialogueTree_BPIsObjectiveCompleted) == 0x000004, "Wrong alignment on GymDialogueTree_BPIsObjectiveCompleted");
static_assert(sizeof(GymDialogueTree_BPIsObjectiveCompleted) == 0x00000C, "Wrong size on GymDialogueTree_BPIsObjectiveCompleted");
static_assert(offsetof(GymDialogueTree_BPIsObjectiveCompleted, TaskID) == 0x000000, "Member 'GymDialogueTree_BPIsObjectiveCompleted::TaskID' has a wrong offset!");
static_assert(offsetof(GymDialogueTree_BPIsObjectiveCompleted, Result) == 0x000008, "Member 'GymDialogueTree_BPIsObjectiveCompleted::Result' has a wrong offset!");

// Function GYMGAME.GymDialogueTree.BPIsTaskCompleted
// 0x000C (0x000C - 0x0000)
struct GymDialogueTree_BPIsTaskCompleted final
{
public:
	class FName                                   TaskID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGymDTBranch                                  Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymDialogueTree_BPIsTaskCompleted) == 0x000004, "Wrong alignment on GymDialogueTree_BPIsTaskCompleted");
static_assert(sizeof(GymDialogueTree_BPIsTaskCompleted) == 0x00000C, "Wrong size on GymDialogueTree_BPIsTaskCompleted");
static_assert(offsetof(GymDialogueTree_BPIsTaskCompleted, TaskID) == 0x000000, "Member 'GymDialogueTree_BPIsTaskCompleted::TaskID' has a wrong offset!");
static_assert(offsetof(GymDialogueTree_BPIsTaskCompleted, Result) == 0x000008, "Member 'GymDialogueTree_BPIsTaskCompleted::Result' has a wrong offset!");

// Function GYMGAME.GymDialogueTree.BPIsTaskFailed
// 0x000C (0x000C - 0x0000)
struct GymDialogueTree_BPIsTaskFailed final
{
public:
	class FName                                   TaskID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGymDTBranch                                  Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymDialogueTree_BPIsTaskFailed) == 0x000004, "Wrong alignment on GymDialogueTree_BPIsTaskFailed");
static_assert(sizeof(GymDialogueTree_BPIsTaskFailed) == 0x00000C, "Wrong size on GymDialogueTree_BPIsTaskFailed");
static_assert(offsetof(GymDialogueTree_BPIsTaskFailed, TaskID) == 0x000000, "Member 'GymDialogueTree_BPIsTaskFailed::TaskID' has a wrong offset!");
static_assert(offsetof(GymDialogueTree_BPIsTaskFailed, Result) == 0x000008, "Member 'GymDialogueTree_BPIsTaskFailed::Result' has a wrong offset!");

// Function GYMGAME.GymDialogueTree.BPIsTaskInProgress
// 0x000C (0x000C - 0x0000)
struct GymDialogueTree_BPIsTaskInProgress final
{
public:
	class FName                                   TaskID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGymDTBranch                                  Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymDialogueTree_BPIsTaskInProgress) == 0x000004, "Wrong alignment on GymDialogueTree_BPIsTaskInProgress");
static_assert(sizeof(GymDialogueTree_BPIsTaskInProgress) == 0x00000C, "Wrong size on GymDialogueTree_BPIsTaskInProgress");
static_assert(offsetof(GymDialogueTree_BPIsTaskInProgress, TaskID) == 0x000000, "Member 'GymDialogueTree_BPIsTaskInProgress::TaskID' has a wrong offset!");
static_assert(offsetof(GymDialogueTree_BPIsTaskInProgress, Result) == 0x000008, "Member 'GymDialogueTree_BPIsTaskInProgress::Result' has a wrong offset!");

// Function GYMGAME.GymDialogueTree.BPSwitchOnTaskState
// 0x000C (0x000C - 0x0000)
struct GymDialogueTree_BPSwitchOnTaskState final
{
public:
	class FName                                   TaskID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGymDTTaskStatus                              Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymDialogueTree_BPSwitchOnTaskState) == 0x000004, "Wrong alignment on GymDialogueTree_BPSwitchOnTaskState");
static_assert(sizeof(GymDialogueTree_BPSwitchOnTaskState) == 0x00000C, "Wrong size on GymDialogueTree_BPSwitchOnTaskState");
static_assert(offsetof(GymDialogueTree_BPSwitchOnTaskState, TaskID) == 0x000000, "Member 'GymDialogueTree_BPSwitchOnTaskState::TaskID' has a wrong offset!");
static_assert(offsetof(GymDialogueTree_BPSwitchOnTaskState, Result) == 0x000008, "Member 'GymDialogueTree_BPSwitchOnTaskState::Result' has a wrong offset!");

// Function GYMGAME.GymDialogueTree.GetNPC
// 0x0008 (0x0008 - 0x0000)
struct GymDialogueTree_GetNPC final
{
public:
	class AGymNPC*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymDialogueTree_GetNPC) == 0x000008, "Wrong alignment on GymDialogueTree_GetNPC");
static_assert(sizeof(GymDialogueTree_GetNPC) == 0x000008, "Wrong size on GymDialogueTree_GetNPC");
static_assert(offsetof(GymDialogueTree_GetNPC, ReturnValue) == 0x000000, "Member 'GymDialogueTree_GetNPC::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymDialogueTree.GetObjectiveControl
// 0x0008 (0x0008 - 0x0000)
struct GymDialogueTree_GetObjectiveControl final
{
public:
	class UGymObjectiveControl*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymDialogueTree_GetObjectiveControl) == 0x000008, "Wrong alignment on GymDialogueTree_GetObjectiveControl");
static_assert(sizeof(GymDialogueTree_GetObjectiveControl) == 0x000008, "Wrong size on GymDialogueTree_GetObjectiveControl");
static_assert(offsetof(GymDialogueTree_GetObjectiveControl, ReturnValue) == 0x000000, "Member 'GymDialogueTree_GetObjectiveControl::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymDialogueTree.IsOtherObjectiveInProgress
// 0x0018 (0x0018 - 0x0000)
struct GymDialogueTree_IsOtherObjectiveInProgress final
{
public:
	TArray<class FName>                           ExcludeTasks;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymDialogueTree_IsOtherObjectiveInProgress) == 0x000008, "Wrong alignment on GymDialogueTree_IsOtherObjectiveInProgress");
static_assert(sizeof(GymDialogueTree_IsOtherObjectiveInProgress) == 0x000018, "Wrong size on GymDialogueTree_IsOtherObjectiveInProgress");
static_assert(offsetof(GymDialogueTree_IsOtherObjectiveInProgress, ExcludeTasks) == 0x000000, "Member 'GymDialogueTree_IsOtherObjectiveInProgress::ExcludeTasks' has a wrong offset!");
static_assert(offsetof(GymDialogueTree_IsOtherObjectiveInProgress, ReturnValue) == 0x000010, "Member 'GymDialogueTree_IsOtherObjectiveInProgress::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymDialogueTree.PlayerAnswered
// 0x0004 (0x0004 - 0x0000)
struct GymDialogueTree_PlayerAnswered final
{
public:
	int32                                         AnswerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymDialogueTree_PlayerAnswered) == 0x000004, "Wrong alignment on GymDialogueTree_PlayerAnswered");
static_assert(sizeof(GymDialogueTree_PlayerAnswered) == 0x000004, "Wrong size on GymDialogueTree_PlayerAnswered");
static_assert(offsetof(GymDialogueTree_PlayerAnswered, AnswerIndex) == 0x000000, "Member 'GymDialogueTree_PlayerAnswered::AnswerIndex' has a wrong offset!");

// Function GYMGAME.GymDialogueTree.RestartTask
// 0x0008 (0x0008 - 0x0000)
struct GymDialogueTree_RestartTask final
{
public:
	class FName                                   TaskID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymDialogueTree_RestartTask) == 0x000004, "Wrong alignment on GymDialogueTree_RestartTask");
static_assert(sizeof(GymDialogueTree_RestartTask) == 0x000008, "Wrong size on GymDialogueTree_RestartTask");
static_assert(offsetof(GymDialogueTree_RestartTask, TaskID) == 0x000000, "Member 'GymDialogueTree_RestartTask::TaskID' has a wrong offset!");

// Function GYMGAME.GymDialogueTree.SetAnswerVisibility
// 0x0001 (0x0001 - 0x0000)
struct GymDialogueTree_SetAnswerVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymDialogueTree_SetAnswerVisibility) == 0x000001, "Wrong alignment on GymDialogueTree_SetAnswerVisibility");
static_assert(sizeof(GymDialogueTree_SetAnswerVisibility) == 0x000001, "Wrong size on GymDialogueTree_SetAnswerVisibility");
static_assert(offsetof(GymDialogueTree_SetAnswerVisibility, bVisible) == 0x000000, "Member 'GymDialogueTree_SetAnswerVisibility::bVisible' has a wrong offset!");

// Function GYMGAME.GymLocationCriterionActor.GetLocationCriteria
// 0x0028 (0x0028 - 0x0000)
struct GymLocationCriterionActor_GetLocationCriteria final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ObjectiveID;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AGymLocationCriterionActor*>     ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymLocationCriterionActor_GetLocationCriteria) == 0x000008, "Wrong alignment on GymLocationCriterionActor_GetLocationCriteria");
static_assert(sizeof(GymLocationCriterionActor_GetLocationCriteria) == 0x000028, "Wrong size on GymLocationCriterionActor_GetLocationCriteria");
static_assert(offsetof(GymLocationCriterionActor_GetLocationCriteria, WorldContext) == 0x000000, "Member 'GymLocationCriterionActor_GetLocationCriteria::WorldContext' has a wrong offset!");
static_assert(offsetof(GymLocationCriterionActor_GetLocationCriteria, ObjectiveID) == 0x000008, "Member 'GymLocationCriterionActor_GetLocationCriteria::ObjectiveID' has a wrong offset!");
static_assert(offsetof(GymLocationCriterionActor_GetLocationCriteria, ReturnValue) == 0x000018, "Member 'GymLocationCriterionActor_GetLocationCriteria::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymDialogueTreeAsyncAction.NPCSpeechNode
// 0x0048 (0x0048 - 0x0000)
struct GymDialogueTreeAsyncAction_NPCSpeechNode final
{
public:
	class UGymDialogueTree*                       DialogueTree;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   NPCText;                                           // 0x0008(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
	TArray<struct FGymAnswer>                     Answers;                                           // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Emotion;                                           // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymDialogueTreeAsyncAction*            ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymDialogueTreeAsyncAction_NPCSpeechNode) == 0x000008, "Wrong alignment on GymDialogueTreeAsyncAction_NPCSpeechNode");
static_assert(sizeof(GymDialogueTreeAsyncAction_NPCSpeechNode) == 0x000048, "Wrong size on GymDialogueTreeAsyncAction_NPCSpeechNode");
static_assert(offsetof(GymDialogueTreeAsyncAction_NPCSpeechNode, DialogueTree) == 0x000000, "Member 'GymDialogueTreeAsyncAction_NPCSpeechNode::DialogueTree' has a wrong offset!");
static_assert(offsetof(GymDialogueTreeAsyncAction_NPCSpeechNode, NPCText) == 0x000008, "Member 'GymDialogueTreeAsyncAction_NPCSpeechNode::NPCText' has a wrong offset!");
static_assert(offsetof(GymDialogueTreeAsyncAction_NPCSpeechNode, Answers) == 0x000020, "Member 'GymDialogueTreeAsyncAction_NPCSpeechNode::Answers' has a wrong offset!");
static_assert(offsetof(GymDialogueTreeAsyncAction_NPCSpeechNode, Emotion) == 0x000030, "Member 'GymDialogueTreeAsyncAction_NPCSpeechNode::Emotion' has a wrong offset!");
static_assert(offsetof(GymDialogueTreeAsyncAction_NPCSpeechNode, ReturnValue) == 0x000040, "Member 'GymDialogueTreeAsyncAction_NPCSpeechNode::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymEditorBoundsFeature.Action
// 0x0018 (0x0018 - 0x0000)
struct GymEditorBoundsFeature_Action final
{
public:
	struct FGymWallLocator                        Locator;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EGymBoundsPushMode                            Mode;                                              // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorBoundsFeature_Action) == 0x000004, "Wrong alignment on GymEditorBoundsFeature_Action");
static_assert(sizeof(GymEditorBoundsFeature_Action) == 0x000018, "Wrong size on GymEditorBoundsFeature_Action");
static_assert(offsetof(GymEditorBoundsFeature_Action, Locator) == 0x000000, "Member 'GymEditorBoundsFeature_Action::Locator' has a wrong offset!");
static_assert(offsetof(GymEditorBoundsFeature_Action, Mode) == 0x000010, "Member 'GymEditorBoundsFeature_Action::Mode' has a wrong offset!");
static_assert(offsetof(GymEditorBoundsFeature_Action, Value) == 0x000014, "Member 'GymEditorBoundsFeature_Action::Value' has a wrong offset!");

// Function GYMGAME.GymEditorBoundsFeature.IssueAction
// 0x0018 (0x0018 - 0x0000)
struct GymEditorBoundsFeature_IssueAction final
{
public:
	struct FGymWallLocator                        Locator;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EGymBoundsPushMode                            Mode;                                              // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorBoundsFeature_IssueAction) == 0x000004, "Wrong alignment on GymEditorBoundsFeature_IssueAction");
static_assert(sizeof(GymEditorBoundsFeature_IssueAction) == 0x000018, "Wrong size on GymEditorBoundsFeature_IssueAction");
static_assert(offsetof(GymEditorBoundsFeature_IssueAction, Locator) == 0x000000, "Member 'GymEditorBoundsFeature_IssueAction::Locator' has a wrong offset!");
static_assert(offsetof(GymEditorBoundsFeature_IssueAction, Mode) == 0x000010, "Member 'GymEditorBoundsFeature_IssueAction::Mode' has a wrong offset!");
static_assert(offsetof(GymEditorBoundsFeature_IssueAction, Value) == 0x000014, "Member 'GymEditorBoundsFeature_IssueAction::Value' has a wrong offset!");

// Function GYMGAME.GymEditorControl.AssetRemoved
// 0x0028 (0x0028 - 0x0000)
struct GymEditorControl_AssetRemoved final
{
public:
	struct FGymAssetVariantId                     AssetId;                                           // 0x0000(0x0010)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_AssetRemoved) == 0x000008, "Wrong alignment on GymEditorControl_AssetRemoved");
static_assert(sizeof(GymEditorControl_AssetRemoved) == 0x000028, "Wrong size on GymEditorControl_AssetRemoved");
static_assert(offsetof(GymEditorControl_AssetRemoved, AssetId) == 0x000000, "Member 'GymEditorControl_AssetRemoved::AssetId' has a wrong offset!");
static_assert(offsetof(GymEditorControl_AssetRemoved, Location) == 0x000010, "Member 'GymEditorControl_AssetRemoved::Location' has a wrong offset!");

// Function GYMGAME.GymEditorControl.Build
// 0x0068 (0x0068 - 0x0000)
struct GymEditorControl_Build final
{
public:
	struct FGymAssetVariantId                     AssetId;                                           // 0x0000(0x0010)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecordId;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AGymStaticLevelAsset*                   Parent;                                            // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGymMapAssetLink>               Links;                                             // 0x0050(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FUndoParams                            UndoParams;                                        // 0x0060(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_63[0x5];                                       // 0x0063(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymEditorControl_Build) == 0x000008, "Wrong alignment on GymEditorControl_Build");
static_assert(sizeof(GymEditorControl_Build) == 0x000068, "Wrong size on GymEditorControl_Build");
static_assert(offsetof(GymEditorControl_Build, AssetId) == 0x000000, "Member 'GymEditorControl_Build::AssetId' has a wrong offset!");
static_assert(offsetof(GymEditorControl_Build, RecordId) == 0x000010, "Member 'GymEditorControl_Build::RecordId' has a wrong offset!");
static_assert(offsetof(GymEditorControl_Build, Location) == 0x000018, "Member 'GymEditorControl_Build::Location' has a wrong offset!");
static_assert(offsetof(GymEditorControl_Build, Rotator) == 0x000030, "Member 'GymEditorControl_Build::Rotator' has a wrong offset!");
static_assert(offsetof(GymEditorControl_Build, Parent) == 0x000048, "Member 'GymEditorControl_Build::Parent' has a wrong offset!");
static_assert(offsetof(GymEditorControl_Build, Links) == 0x000050, "Member 'GymEditorControl_Build::Links' has a wrong offset!");
static_assert(offsetof(GymEditorControl_Build, UndoParams) == 0x000060, "Member 'GymEditorControl_Build::UndoParams' has a wrong offset!");

// Function GYMGAME.GymEditorControl.CancelSelectAsset_Server
// 0x0004 (0x0004 - 0x0000)
struct GymEditorControl_CancelSelectAsset_Server final
{
public:
	int32                                         AssetRecordId;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_CancelSelectAsset_Server) == 0x000004, "Wrong alignment on GymEditorControl_CancelSelectAsset_Server");
static_assert(sizeof(GymEditorControl_CancelSelectAsset_Server) == 0x000004, "Wrong size on GymEditorControl_CancelSelectAsset_Server");
static_assert(offsetof(GymEditorControl_CancelSelectAsset_Server, AssetRecordId) == 0x000000, "Member 'GymEditorControl_CancelSelectAsset_Server::AssetRecordId' has a wrong offset!");

// Function GYMGAME.GymEditorControl.Client_ClearSplinePreview
// 0x0008 (0x0008 - 0x0000)
struct GymEditorControl_Client_ClearSplinePreview final
{
public:
	class AGymSplinePlacer*                       Spline;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_Client_ClearSplinePreview) == 0x000008, "Wrong alignment on GymEditorControl_Client_ClearSplinePreview");
static_assert(sizeof(GymEditorControl_Client_ClearSplinePreview) == 0x000008, "Wrong size on GymEditorControl_Client_ClearSplinePreview");
static_assert(offsetof(GymEditorControl_Client_ClearSplinePreview, Spline) == 0x000000, "Member 'GymEditorControl_Client_ClearSplinePreview::Spline' has a wrong offset!");

// Function GYMGAME.GymEditorControl.Client_ShowPlacementResponse
// 0x0020 (0x0020 - 0x0000)
struct GymEditorControl_Client_ShowPlacementResponse final
{
public:
	struct FRuleAdvanceResponse                   Response;                                          // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_Client_ShowPlacementResponse) == 0x000008, "Wrong alignment on GymEditorControl_Client_ShowPlacementResponse");
static_assert(sizeof(GymEditorControl_Client_ShowPlacementResponse) == 0x000020, "Wrong size on GymEditorControl_Client_ShowPlacementResponse");
static_assert(offsetof(GymEditorControl_Client_ShowPlacementResponse, Response) == 0x000000, "Member 'GymEditorControl_Client_ShowPlacementResponse::Response' has a wrong offset!");

// Function GYMGAME.GymEditorControl.CopyPropertiesToAsset
// 0x0008 (0x0008 - 0x0000)
struct GymEditorControl_CopyPropertiesToAsset final
{
public:
	int32                                         FromRecordId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ToRecordId;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_CopyPropertiesToAsset) == 0x000004, "Wrong alignment on GymEditorControl_CopyPropertiesToAsset");
static_assert(sizeof(GymEditorControl_CopyPropertiesToAsset) == 0x000008, "Wrong size on GymEditorControl_CopyPropertiesToAsset");
static_assert(offsetof(GymEditorControl_CopyPropertiesToAsset, FromRecordId) == 0x000000, "Member 'GymEditorControl_CopyPropertiesToAsset::FromRecordId' has a wrong offset!");
static_assert(offsetof(GymEditorControl_CopyPropertiesToAsset, ToRecordId) == 0x000004, "Member 'GymEditorControl_CopyPropertiesToAsset::ToRecordId' has a wrong offset!");

// Function GYMGAME.GymEditorControl.CopyPropertiesToAssetResponse
// 0x0008 (0x0008 - 0x0000)
struct GymEditorControl_CopyPropertiesToAssetResponse final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RecordId;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_CopyPropertiesToAssetResponse) == 0x000004, "Wrong alignment on GymEditorControl_CopyPropertiesToAssetResponse");
static_assert(sizeof(GymEditorControl_CopyPropertiesToAssetResponse) == 0x000008, "Wrong size on GymEditorControl_CopyPropertiesToAssetResponse");
static_assert(offsetof(GymEditorControl_CopyPropertiesToAssetResponse, bSuccess) == 0x000000, "Member 'GymEditorControl_CopyPropertiesToAssetResponse::bSuccess' has a wrong offset!");
static_assert(offsetof(GymEditorControl_CopyPropertiesToAssetResponse, RecordId) == 0x000004, "Member 'GymEditorControl_CopyPropertiesToAssetResponse::RecordId' has a wrong offset!");

// Function GYMGAME.GymEditorControl.DebugExport
// 0x0010 (0x0010 - 0x0000)
struct GymEditorControl_DebugExport final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_DebugExport) == 0x000008, "Wrong alignment on GymEditorControl_DebugExport");
static_assert(sizeof(GymEditorControl_DebugExport) == 0x000010, "Wrong size on GymEditorControl_DebugExport");
static_assert(offsetof(GymEditorControl_DebugExport, File) == 0x000000, "Member 'GymEditorControl_DebugExport::File' has a wrong offset!");

// Function GYMGAME.GymEditorControl.DebugExportToFile
// 0x0018 (0x0018 - 0x0000)
struct GymEditorControl_DebugExportToFile final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymEditorControl_DebugExportToFile) == 0x000008, "Wrong alignment on GymEditorControl_DebugExportToFile");
static_assert(sizeof(GymEditorControl_DebugExportToFile) == 0x000018, "Wrong size on GymEditorControl_DebugExportToFile");
static_assert(offsetof(GymEditorControl_DebugExportToFile, File) == 0x000000, "Member 'GymEditorControl_DebugExportToFile::File' has a wrong offset!");
static_assert(offsetof(GymEditorControl_DebugExportToFile, bForce) == 0x000010, "Member 'GymEditorControl_DebugExportToFile::bForce' has a wrong offset!");

// Function GYMGAME.GymEditorControl.DebugImport
// 0x0010 (0x0010 - 0x0000)
struct GymEditorControl_DebugImport final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_DebugImport) == 0x000008, "Wrong alignment on GymEditorControl_DebugImport");
static_assert(sizeof(GymEditorControl_DebugImport) == 0x000010, "Wrong size on GymEditorControl_DebugImport");
static_assert(offsetof(GymEditorControl_DebugImport, File) == 0x000000, "Member 'GymEditorControl_DebugImport::File' has a wrong offset!");

// Function GYMGAME.GymEditorControl.DebugImportFromFile
// 0x0010 (0x0010 - 0x0000)
struct GymEditorControl_DebugImportFromFile final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_DebugImportFromFile) == 0x000008, "Wrong alignment on GymEditorControl_DebugImportFromFile");
static_assert(sizeof(GymEditorControl_DebugImportFromFile) == 0x000010, "Wrong size on GymEditorControl_DebugImportFromFile");
static_assert(offsetof(GymEditorControl_DebugImportFromFile, File) == 0x000000, "Member 'GymEditorControl_DebugImportFromFile::File' has a wrong offset!");

// Function GYMGAME.GymEditorControl.DebugPrepopulateMap
// 0x0010 (0x0010 - 0x0000)
struct GymEditorControl_DebugPrepopulateMap final
{
public:
	class FString                                 GameMode;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_DebugPrepopulateMap) == 0x000008, "Wrong alignment on GymEditorControl_DebugPrepopulateMap");
static_assert(sizeof(GymEditorControl_DebugPrepopulateMap) == 0x000010, "Wrong size on GymEditorControl_DebugPrepopulateMap");
static_assert(offsetof(GymEditorControl_DebugPrepopulateMap, GameMode) == 0x000000, "Member 'GymEditorControl_DebugPrepopulateMap::GameMode' has a wrong offset!");

// Function GYMGAME.GymEditorControl.EndSelectedAssetMove_Client
// 0x0038 (0x0038 - 0x0000)
struct GymEditorControl_EndSelectedAssetMove_Client final
{
public:
	int32                                         AssetRecordId;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_EndSelectedAssetMove_Client) == 0x000008, "Wrong alignment on GymEditorControl_EndSelectedAssetMove_Client");
static_assert(sizeof(GymEditorControl_EndSelectedAssetMove_Client) == 0x000038, "Wrong size on GymEditorControl_EndSelectedAssetMove_Client");
static_assert(offsetof(GymEditorControl_EndSelectedAssetMove_Client, AssetRecordId) == 0x000000, "Member 'GymEditorControl_EndSelectedAssetMove_Client::AssetRecordId' has a wrong offset!");
static_assert(offsetof(GymEditorControl_EndSelectedAssetMove_Client, Location) == 0x000008, "Member 'GymEditorControl_EndSelectedAssetMove_Client::Location' has a wrong offset!");
static_assert(offsetof(GymEditorControl_EndSelectedAssetMove_Client, Rotator) == 0x000020, "Member 'GymEditorControl_EndSelectedAssetMove_Client::Rotator' has a wrong offset!");

// Function GYMGAME.GymEditorControl.EndSelectedAssetMove_Server
// 0x0004 (0x0004 - 0x0000)
struct GymEditorControl_EndSelectedAssetMove_Server final
{
public:
	int32                                         AssetRecordId;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_EndSelectedAssetMove_Server) == 0x000004, "Wrong alignment on GymEditorControl_EndSelectedAssetMove_Server");
static_assert(sizeof(GymEditorControl_EndSelectedAssetMove_Server) == 0x000004, "Wrong size on GymEditorControl_EndSelectedAssetMove_Server");
static_assert(offsetof(GymEditorControl_EndSelectedAssetMove_Server, AssetRecordId) == 0x000000, "Member 'GymEditorControl_EndSelectedAssetMove_Server::AssetRecordId' has a wrong offset!");

// Function GYMGAME.GymEditorControl.GetShowDevAssets
// 0x0001 (0x0001 - 0x0000)
struct GymEditorControl_GetShowDevAssets final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_GetShowDevAssets) == 0x000001, "Wrong alignment on GymEditorControl_GetShowDevAssets");
static_assert(sizeof(GymEditorControl_GetShowDevAssets) == 0x000001, "Wrong size on GymEditorControl_GetShowDevAssets");
static_assert(offsetof(GymEditorControl_GetShowDevAssets, ReturnValue) == 0x000000, "Member 'GymEditorControl_GetShowDevAssets::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymEditorControl.GetTraceHitAsset
// 0x0008 (0x0008 - 0x0000)
struct GymEditorControl_GetTraceHitAsset final
{
public:
	class AGymStaticLevelAsset*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_GetTraceHitAsset) == 0x000008, "Wrong alignment on GymEditorControl_GetTraceHitAsset");
static_assert(sizeof(GymEditorControl_GetTraceHitAsset) == 0x000008, "Wrong size on GymEditorControl_GetTraceHitAsset");
static_assert(offsetof(GymEditorControl_GetTraceHitAsset, ReturnValue) == 0x000000, "Member 'GymEditorControl_GetTraceHitAsset::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymEditorControl.IssueBuild
// 0x0060 (0x0060 - 0x0000)
struct GymEditorControl_IssueBuild final
{
public:
	struct FGymAssetVariantId                     AssetId;                                           // 0x0000(0x0010)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AGymStaticLevelAsset*                   Parent;                                            // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGymMapAssetLink>               Links;                                             // 0x0048(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FUndoParams                            UndoParams;                                        // 0x0058(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSkipPlacementCheck;                               // 0x005B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymEditorControl_IssueBuild) == 0x000008, "Wrong alignment on GymEditorControl_IssueBuild");
static_assert(sizeof(GymEditorControl_IssueBuild) == 0x000060, "Wrong size on GymEditorControl_IssueBuild");
static_assert(offsetof(GymEditorControl_IssueBuild, AssetId) == 0x000000, "Member 'GymEditorControl_IssueBuild::AssetId' has a wrong offset!");
static_assert(offsetof(GymEditorControl_IssueBuild, Location) == 0x000010, "Member 'GymEditorControl_IssueBuild::Location' has a wrong offset!");
static_assert(offsetof(GymEditorControl_IssueBuild, Rotator) == 0x000028, "Member 'GymEditorControl_IssueBuild::Rotator' has a wrong offset!");
static_assert(offsetof(GymEditorControl_IssueBuild, Parent) == 0x000040, "Member 'GymEditorControl_IssueBuild::Parent' has a wrong offset!");
static_assert(offsetof(GymEditorControl_IssueBuild, Links) == 0x000048, "Member 'GymEditorControl_IssueBuild::Links' has a wrong offset!");
static_assert(offsetof(GymEditorControl_IssueBuild, UndoParams) == 0x000058, "Member 'GymEditorControl_IssueBuild::UndoParams' has a wrong offset!");
static_assert(offsetof(GymEditorControl_IssueBuild, bSkipPlacementCheck) == 0x00005B, "Member 'GymEditorControl_IssueBuild::bSkipPlacementCheck' has a wrong offset!");

// Function GYMGAME.GymEditorControl.IssueBuildWithAssetRecordId
// 0x00B8 (0x00B8 - 0x0000)
struct GymEditorControl_IssueBuildWithAssetRecordId final
{
public:
	struct FGymAssetVariantId                     AssetId;                                           // 0x0000(0x0010)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecordId;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ParentAssetRecordId;                               // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   Bounds;                                            // 0x0050(0x0038)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0088(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGymMapAssetLink>               Links;                                             // 0x00A0(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FUndoParams                            UndoParams;                                        // 0x00B0(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B3[0x5];                                       // 0x00B3(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymEditorControl_IssueBuildWithAssetRecordId) == 0x000008, "Wrong alignment on GymEditorControl_IssueBuildWithAssetRecordId");
static_assert(sizeof(GymEditorControl_IssueBuildWithAssetRecordId) == 0x0000B8, "Wrong size on GymEditorControl_IssueBuildWithAssetRecordId");
static_assert(offsetof(GymEditorControl_IssueBuildWithAssetRecordId, AssetId) == 0x000000, "Member 'GymEditorControl_IssueBuildWithAssetRecordId::AssetId' has a wrong offset!");
static_assert(offsetof(GymEditorControl_IssueBuildWithAssetRecordId, RecordId) == 0x000010, "Member 'GymEditorControl_IssueBuildWithAssetRecordId::RecordId' has a wrong offset!");
static_assert(offsetof(GymEditorControl_IssueBuildWithAssetRecordId, Location) == 0x000018, "Member 'GymEditorControl_IssueBuildWithAssetRecordId::Location' has a wrong offset!");
static_assert(offsetof(GymEditorControl_IssueBuildWithAssetRecordId, Rotator) == 0x000030, "Member 'GymEditorControl_IssueBuildWithAssetRecordId::Rotator' has a wrong offset!");
static_assert(offsetof(GymEditorControl_IssueBuildWithAssetRecordId, ParentAssetRecordId) == 0x000048, "Member 'GymEditorControl_IssueBuildWithAssetRecordId::ParentAssetRecordId' has a wrong offset!");
static_assert(offsetof(GymEditorControl_IssueBuildWithAssetRecordId, Bounds) == 0x000050, "Member 'GymEditorControl_IssueBuildWithAssetRecordId::Bounds' has a wrong offset!");
static_assert(offsetof(GymEditorControl_IssueBuildWithAssetRecordId, Scale) == 0x000088, "Member 'GymEditorControl_IssueBuildWithAssetRecordId::Scale' has a wrong offset!");
static_assert(offsetof(GymEditorControl_IssueBuildWithAssetRecordId, Links) == 0x0000A0, "Member 'GymEditorControl_IssueBuildWithAssetRecordId::Links' has a wrong offset!");
static_assert(offsetof(GymEditorControl_IssueBuildWithAssetRecordId, UndoParams) == 0x0000B0, "Member 'GymEditorControl_IssueBuildWithAssetRecordId::UndoParams' has a wrong offset!");

// Function GYMGAME.GymEditorControl.IssueMove_Client
// 0x0038 (0x0038 - 0x0000)
struct GymEditorControl_IssueMove_Client final
{
public:
	class AGymStaticLevelAsset*                   Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_IssueMove_Client) == 0x000008, "Wrong alignment on GymEditorControl_IssueMove_Client");
static_assert(sizeof(GymEditorControl_IssueMove_Client) == 0x000038, "Wrong size on GymEditorControl_IssueMove_Client");
static_assert(offsetof(GymEditorControl_IssueMove_Client, Asset) == 0x000000, "Member 'GymEditorControl_IssueMove_Client::Asset' has a wrong offset!");
static_assert(offsetof(GymEditorControl_IssueMove_Client, Location) == 0x000008, "Member 'GymEditorControl_IssueMove_Client::Location' has a wrong offset!");
static_assert(offsetof(GymEditorControl_IssueMove_Client, Rotator) == 0x000020, "Member 'GymEditorControl_IssueMove_Client::Rotator' has a wrong offset!");

// Function GYMGAME.GymEditorControl.IssueMove_Server
// 0x0040 (0x0040 - 0x0000)
struct GymEditorControl_IssueMove_Server final
{
public:
	int32                                         AssetRecordId;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FUndoParams                            UndoParams;                                        // 0x0038(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymEditorControl_IssueMove_Server) == 0x000008, "Wrong alignment on GymEditorControl_IssueMove_Server");
static_assert(sizeof(GymEditorControl_IssueMove_Server) == 0x000040, "Wrong size on GymEditorControl_IssueMove_Server");
static_assert(offsetof(GymEditorControl_IssueMove_Server, AssetRecordId) == 0x000000, "Member 'GymEditorControl_IssueMove_Server::AssetRecordId' has a wrong offset!");
static_assert(offsetof(GymEditorControl_IssueMove_Server, Location) == 0x000008, "Member 'GymEditorControl_IssueMove_Server::Location' has a wrong offset!");
static_assert(offsetof(GymEditorControl_IssueMove_Server, Rotator) == 0x000020, "Member 'GymEditorControl_IssueMove_Server::Rotator' has a wrong offset!");
static_assert(offsetof(GymEditorControl_IssueMove_Server, UndoParams) == 0x000038, "Member 'GymEditorControl_IssueMove_Server::UndoParams' has a wrong offset!");

// Function GYMGAME.GymEditorControl.IssueMultiBuild
// 0x0088 (0x0088 - 0x0000)
struct GymEditorControl_IssueMultiBuild final
{
public:
	struct FGymAssetVariantId                     AssetId;                                           // 0x0000(0x0010)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMultiBuildParams                      Params_0;                                          // 0x0040(0x0038)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class AGymStaticLevelAsset*                   Parent;                                            // 0x0078(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUndoParams                            UndoParams;                                        // 0x0080(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_83[0x5];                                       // 0x0083(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymEditorControl_IssueMultiBuild) == 0x000008, "Wrong alignment on GymEditorControl_IssueMultiBuild");
static_assert(sizeof(GymEditorControl_IssueMultiBuild) == 0x000088, "Wrong size on GymEditorControl_IssueMultiBuild");
static_assert(offsetof(GymEditorControl_IssueMultiBuild, AssetId) == 0x000000, "Member 'GymEditorControl_IssueMultiBuild::AssetId' has a wrong offset!");
static_assert(offsetof(GymEditorControl_IssueMultiBuild, Location) == 0x000010, "Member 'GymEditorControl_IssueMultiBuild::Location' has a wrong offset!");
static_assert(offsetof(GymEditorControl_IssueMultiBuild, Rotator) == 0x000028, "Member 'GymEditorControl_IssueMultiBuild::Rotator' has a wrong offset!");
static_assert(offsetof(GymEditorControl_IssueMultiBuild, Params_0) == 0x000040, "Member 'GymEditorControl_IssueMultiBuild::Params_0' has a wrong offset!");
static_assert(offsetof(GymEditorControl_IssueMultiBuild, Parent) == 0x000078, "Member 'GymEditorControl_IssueMultiBuild::Parent' has a wrong offset!");
static_assert(offsetof(GymEditorControl_IssueMultiBuild, UndoParams) == 0x000080, "Member 'GymEditorControl_IssueMultiBuild::UndoParams' has a wrong offset!");

// Function GYMGAME.GymEditorControl.IssueRemove
// 0x0010 (0x0010 - 0x0000)
struct GymEditorControl_IssueRemove final
{
public:
	class AGymStaticLevelAsset*                   Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUndoParams                            UndoParams;                                        // 0x0008(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymEditorControl_IssueRemove) == 0x000008, "Wrong alignment on GymEditorControl_IssueRemove");
static_assert(sizeof(GymEditorControl_IssueRemove) == 0x000010, "Wrong size on GymEditorControl_IssueRemove");
static_assert(offsetof(GymEditorControl_IssueRemove, Asset) == 0x000000, "Member 'GymEditorControl_IssueRemove::Asset' has a wrong offset!");
static_assert(offsetof(GymEditorControl_IssueRemove, UndoParams) == 0x000008, "Member 'GymEditorControl_IssueRemove::UndoParams' has a wrong offset!");

// Function GYMGAME.GymEditorControl.IssueRemoveWithAssetRecordId
// 0x0008 (0x0008 - 0x0000)
struct GymEditorControl_IssueRemoveWithAssetRecordId final
{
public:
	int32                                         AssetRecordId;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUndoParams                            UndoParams;                                        // 0x0004(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymEditorControl_IssueRemoveWithAssetRecordId) == 0x000004, "Wrong alignment on GymEditorControl_IssueRemoveWithAssetRecordId");
static_assert(sizeof(GymEditorControl_IssueRemoveWithAssetRecordId) == 0x000008, "Wrong size on GymEditorControl_IssueRemoveWithAssetRecordId");
static_assert(offsetof(GymEditorControl_IssueRemoveWithAssetRecordId, AssetRecordId) == 0x000000, "Member 'GymEditorControl_IssueRemoveWithAssetRecordId::AssetRecordId' has a wrong offset!");
static_assert(offsetof(GymEditorControl_IssueRemoveWithAssetRecordId, UndoParams) == 0x000004, "Member 'GymEditorControl_IssueRemoveWithAssetRecordId::UndoParams' has a wrong offset!");

// Function GYMGAME.GymEditorControl.PrepopulateFinishline
// 0x0030 (0x0030 - 0x0000)
struct GymEditorControl_PrepopulateFinishline final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndLocation;                                       // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_PrepopulateFinishline) == 0x000008, "Wrong alignment on GymEditorControl_PrepopulateFinishline");
static_assert(sizeof(GymEditorControl_PrepopulateFinishline) == 0x000030, "Wrong size on GymEditorControl_PrepopulateFinishline");
static_assert(offsetof(GymEditorControl_PrepopulateFinishline, StartLocation) == 0x000000, "Member 'GymEditorControl_PrepopulateFinishline::StartLocation' has a wrong offset!");
static_assert(offsetof(GymEditorControl_PrepopulateFinishline, EndLocation) == 0x000018, "Member 'GymEditorControl_PrepopulateFinishline::EndLocation' has a wrong offset!");

// Function GYMGAME.GymEditorControl.RecreateVariant
// 0x0014 (0x0014 - 0x0000)
struct GymEditorControl_RecreateVariant final
{
public:
	int32                                         OldAssetRecordId;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGymAssetVariantId                     NewVariantId;                                      // 0x0004(0x0010)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_RecreateVariant) == 0x000004, "Wrong alignment on GymEditorControl_RecreateVariant");
static_assert(sizeof(GymEditorControl_RecreateVariant) == 0x000014, "Wrong size on GymEditorControl_RecreateVariant");
static_assert(offsetof(GymEditorControl_RecreateVariant, OldAssetRecordId) == 0x000000, "Member 'GymEditorControl_RecreateVariant::OldAssetRecordId' has a wrong offset!");
static_assert(offsetof(GymEditorControl_RecreateVariant, NewVariantId) == 0x000004, "Member 'GymEditorControl_RecreateVariant::NewVariantId' has a wrong offset!");

// Function GYMGAME.GymEditorControl.RecreateVariantResponse
// 0x0008 (0x0008 - 0x0000)
struct GymEditorControl_RecreateVariantResponse final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NewAssetRecordId;                                  // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_RecreateVariantResponse) == 0x000004, "Wrong alignment on GymEditorControl_RecreateVariantResponse");
static_assert(sizeof(GymEditorControl_RecreateVariantResponse) == 0x000008, "Wrong size on GymEditorControl_RecreateVariantResponse");
static_assert(offsetof(GymEditorControl_RecreateVariantResponse, bSuccess) == 0x000000, "Member 'GymEditorControl_RecreateVariantResponse::bSuccess' has a wrong offset!");
static_assert(offsetof(GymEditorControl_RecreateVariantResponse, NewAssetRecordId) == 0x000004, "Member 'GymEditorControl_RecreateVariantResponse::NewAssetRecordId' has a wrong offset!");

// Function GYMGAME.GymEditorControl.SelectAsset_Client
// 0x0010 (0x0010 - 0x0000)
struct GymEditorControl_SelectAsset_Client final
{
public:
	struct FGymAssetVariantId                     AssetVariantId;                                    // 0x0000(0x0010)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_SelectAsset_Client) == 0x000004, "Wrong alignment on GymEditorControl_SelectAsset_Client");
static_assert(sizeof(GymEditorControl_SelectAsset_Client) == 0x000010, "Wrong size on GymEditorControl_SelectAsset_Client");
static_assert(offsetof(GymEditorControl_SelectAsset_Client, AssetVariantId) == 0x000000, "Member 'GymEditorControl_SelectAsset_Client::AssetVariantId' has a wrong offset!");

// Function GYMGAME.GymEditorControl.SelectAsset_Server
// 0x0008 (0x0008 - 0x0000)
struct GymEditorControl_SelectAsset_Server final
{
public:
	class AGymStaticLevelAsset*                   Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_SelectAsset_Server) == 0x000008, "Wrong alignment on GymEditorControl_SelectAsset_Server");
static_assert(sizeof(GymEditorControl_SelectAsset_Server) == 0x000008, "Wrong size on GymEditorControl_SelectAsset_Server");
static_assert(offsetof(GymEditorControl_SelectAsset_Server, Asset) == 0x000000, "Member 'GymEditorControl_SelectAsset_Server::Asset' has a wrong offset!");

// Function GYMGAME.GymEditorControl.SelectCopyOfAsset
// 0x0008 (0x0008 - 0x0000)
struct GymEditorControl_SelectCopyOfAsset final
{
public:
	class AGymStaticLevelAsset*                   Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_SelectCopyOfAsset) == 0x000008, "Wrong alignment on GymEditorControl_SelectCopyOfAsset");
static_assert(sizeof(GymEditorControl_SelectCopyOfAsset) == 0x000008, "Wrong size on GymEditorControl_SelectCopyOfAsset");
static_assert(offsetof(GymEditorControl_SelectCopyOfAsset, Asset) == 0x000000, "Member 'GymEditorControl_SelectCopyOfAsset::Asset' has a wrong offset!");

// Function GYMGAME.GymEditorControl.Server_EditAssetProperty
// 0x0050 (0x0050 - 0x0000)
struct GymEditorControl_Server_EditAssetProperty final
{
public:
	class AGymStaticLevelAsset*                   Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGymPropertyValues                     PropertyVal;                                       // 0x0008(0x0048)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_Server_EditAssetProperty) == 0x000008, "Wrong alignment on GymEditorControl_Server_EditAssetProperty");
static_assert(sizeof(GymEditorControl_Server_EditAssetProperty) == 0x000050, "Wrong size on GymEditorControl_Server_EditAssetProperty");
static_assert(offsetof(GymEditorControl_Server_EditAssetProperty, Asset) == 0x000000, "Member 'GymEditorControl_Server_EditAssetProperty::Asset' has a wrong offset!");
static_assert(offsetof(GymEditorControl_Server_EditAssetProperty, PropertyVal) == 0x000008, "Member 'GymEditorControl_Server_EditAssetProperty::PropertyVal' has a wrong offset!");

// Function GYMGAME.GymEditorControl.SetFloatModifier
// 0x000C (0x000C - 0x0000)
struct GymEditorControl_SetFloatModifier final
{
public:
	class FName                                   ModifierID;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_SetFloatModifier) == 0x000004, "Wrong alignment on GymEditorControl_SetFloatModifier");
static_assert(sizeof(GymEditorControl_SetFloatModifier) == 0x00000C, "Wrong size on GymEditorControl_SetFloatModifier");
static_assert(offsetof(GymEditorControl_SetFloatModifier, ModifierID) == 0x000000, "Member 'GymEditorControl_SetFloatModifier::ModifierID' has a wrong offset!");
static_assert(offsetof(GymEditorControl_SetFloatModifier, Value) == 0x000008, "Member 'GymEditorControl_SetFloatModifier::Value' has a wrong offset!");

// Function GYMGAME.GymEditorControl.SetIntModifier
// 0x000C (0x000C - 0x0000)
struct GymEditorControl_SetIntModifier final
{
public:
	class FName                                   ModifierID;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_SetIntModifier) == 0x000004, "Wrong alignment on GymEditorControl_SetIntModifier");
static_assert(sizeof(GymEditorControl_SetIntModifier) == 0x00000C, "Wrong size on GymEditorControl_SetIntModifier");
static_assert(offsetof(GymEditorControl_SetIntModifier, ModifierID) == 0x000000, "Member 'GymEditorControl_SetIntModifier::ModifierID' has a wrong offset!");
static_assert(offsetof(GymEditorControl_SetIntModifier, Value) == 0x000008, "Member 'GymEditorControl_SetIntModifier::Value' has a wrong offset!");

// Function GYMGAME.GymEditorControl.SetMusic
// 0x0008 (0x0008 - 0x0000)
struct GymEditorControl_SetMusic final
{
public:
	class FName                                   Music;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_SetMusic) == 0x000004, "Wrong alignment on GymEditorControl_SetMusic");
static_assert(sizeof(GymEditorControl_SetMusic) == 0x000008, "Wrong size on GymEditorControl_SetMusic");
static_assert(offsetof(GymEditorControl_SetMusic, Music) == 0x000000, "Member 'GymEditorControl_SetMusic::Music' has a wrong offset!");

// Function GYMGAME.GymEditorControl.SetPropertiesToCopyFrom
// 0x0004 (0x0004 - 0x0000)
struct GymEditorControl_SetPropertiesToCopyFrom final
{
public:
	int32                                         RecordId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_SetPropertiesToCopyFrom) == 0x000004, "Wrong alignment on GymEditorControl_SetPropertiesToCopyFrom");
static_assert(sizeof(GymEditorControl_SetPropertiesToCopyFrom) == 0x000004, "Wrong size on GymEditorControl_SetPropertiesToCopyFrom");
static_assert(offsetof(GymEditorControl_SetPropertiesToCopyFrom, RecordId) == 0x000000, "Member 'GymEditorControl_SetPropertiesToCopyFrom::RecordId' has a wrong offset!");

// Function GYMGAME.GymEditorControl.SetRule
// 0x0008 (0x0008 - 0x0000)
struct GymEditorControl_SetRule final
{
public:
	class FName                                   RuleId;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_SetRule) == 0x000004, "Wrong alignment on GymEditorControl_SetRule");
static_assert(sizeof(GymEditorControl_SetRule) == 0x000008, "Wrong size on GymEditorControl_SetRule");
static_assert(offsetof(GymEditorControl_SetRule, RuleId) == 0x000000, "Member 'GymEditorControl_SetRule::RuleId' has a wrong offset!");

// Function GYMGAME.GymEditorControl.SetSelectedAssetSpawn_Server
// 0x0010 (0x0010 - 0x0000)
struct GymEditorControl_SetSelectedAssetSpawn_Server final
{
public:
	struct FGymAssetVariantId                     AssetId;                                           // 0x0000(0x0010)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_SetSelectedAssetSpawn_Server) == 0x000004, "Wrong alignment on GymEditorControl_SetSelectedAssetSpawn_Server");
static_assert(sizeof(GymEditorControl_SetSelectedAssetSpawn_Server) == 0x000010, "Wrong size on GymEditorControl_SetSelectedAssetSpawn_Server");
static_assert(offsetof(GymEditorControl_SetSelectedAssetSpawn_Server, AssetId) == 0x000000, "Member 'GymEditorControl_SetSelectedAssetSpawn_Server::AssetId' has a wrong offset!");

// Function GYMGAME.GymEditorControl.SetSelectedAssetSpawnTransformServer
// 0x0030 (0x0030 - 0x0000)
struct GymEditorControl_SetSelectedAssetSpawnTransformServer final
{
public:
	struct FVector_NetQuantize10                  Location;                                          // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_SetSelectedAssetSpawnTransformServer) == 0x000008, "Wrong alignment on GymEditorControl_SetSelectedAssetSpawnTransformServer");
static_assert(sizeof(GymEditorControl_SetSelectedAssetSpawnTransformServer) == 0x000030, "Wrong size on GymEditorControl_SetSelectedAssetSpawnTransformServer");
static_assert(offsetof(GymEditorControl_SetSelectedAssetSpawnTransformServer, Location) == 0x000000, "Member 'GymEditorControl_SetSelectedAssetSpawnTransformServer::Location' has a wrong offset!");
static_assert(offsetof(GymEditorControl_SetSelectedAssetSpawnTransformServer, Rotator) == 0x000018, "Member 'GymEditorControl_SetSelectedAssetSpawnTransformServer::Rotator' has a wrong offset!");

// Function GYMGAME.GymEditorControl.SetStringModifier
// 0x0018 (0x0018 - 0x0000)
struct GymEditorControl_SetStringModifier final
{
public:
	class FName                                   ModifierID;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_SetStringModifier) == 0x000008, "Wrong alignment on GymEditorControl_SetStringModifier");
static_assert(sizeof(GymEditorControl_SetStringModifier) == 0x000018, "Wrong size on GymEditorControl_SetStringModifier");
static_assert(offsetof(GymEditorControl_SetStringModifier, ModifierID) == 0x000000, "Member 'GymEditorControl_SetStringModifier::ModifierID' has a wrong offset!");
static_assert(offsetof(GymEditorControl_SetStringModifier, Value) == 0x000008, "Member 'GymEditorControl_SetStringModifier::Value' has a wrong offset!");

// Function GYMGAME.GymEditorControl.TryInitPrepopulated
// 0x0010 (0x0010 - 0x0000)
struct GymEditorControl_TryInitPrepopulated final
{
public:
	class FString                                 GameMode;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_TryInitPrepopulated) == 0x000008, "Wrong alignment on GymEditorControl_TryInitPrepopulated");
static_assert(sizeof(GymEditorControl_TryInitPrepopulated) == 0x000010, "Wrong size on GymEditorControl_TryInitPrepopulated");
static_assert(offsetof(GymEditorControl_TryInitPrepopulated, GameMode) == 0x000000, "Member 'GymEditorControl_TryInitPrepopulated::GameMode' has a wrong offset!");

// Function GYMGAME.GymEditorControl.GetEditingAllowed
// 0x0001 (0x0001 - 0x0000)
struct GymEditorControl_GetEditingAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_GetEditingAllowed) == 0x000001, "Wrong alignment on GymEditorControl_GetEditingAllowed");
static_assert(sizeof(GymEditorControl_GetEditingAllowed) == 0x000001, "Wrong size on GymEditorControl_GetEditingAllowed");
static_assert(offsetof(GymEditorControl_GetEditingAllowed, ReturnValue) == 0x000000, "Member 'GymEditorControl_GetEditingAllowed::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymEditorControl.SetPhysicsPreviewDuration
// 0x0008 (0x0008 - 0x0000)
struct GymEditorControl_SetPhysicsPreviewDuration final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InfinitePhysicsPreview;                            // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymEditorControl_SetPhysicsPreviewDuration) == 0x000004, "Wrong alignment on GymEditorControl_SetPhysicsPreviewDuration");
static_assert(sizeof(GymEditorControl_SetPhysicsPreviewDuration) == 0x000008, "Wrong size on GymEditorControl_SetPhysicsPreviewDuration");
static_assert(offsetof(GymEditorControl_SetPhysicsPreviewDuration, Duration) == 0x000000, "Member 'GymEditorControl_SetPhysicsPreviewDuration::Duration' has a wrong offset!");
static_assert(offsetof(GymEditorControl_SetPhysicsPreviewDuration, InfinitePhysicsPreview) == 0x000004, "Member 'GymEditorControl_SetPhysicsPreviewDuration::InfinitePhysicsPreview' has a wrong offset!");

// Function GYMGAME.GymEditorControl.SetTime
// 0x0004 (0x0004 - 0x0000)
struct GymEditorControl_SetTime final
{
public:
	float                                         NewTime;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_SetTime) == 0x000004, "Wrong alignment on GymEditorControl_SetTime");
static_assert(sizeof(GymEditorControl_SetTime) == 0x000004, "Wrong size on GymEditorControl_SetTime");
static_assert(offsetof(GymEditorControl_SetTime, NewTime) == 0x000000, "Member 'GymEditorControl_SetTime::NewTime' has a wrong offset!");

// Function GYMGAME.GymEditorControl.SetWeather
// 0x0008 (0x0008 - 0x0000)
struct GymEditorControl_SetWeather final
{
public:
	class FName                                   NewWeather;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymEditorControl_SetWeather) == 0x000004, "Wrong alignment on GymEditorControl_SetWeather");
static_assert(sizeof(GymEditorControl_SetWeather) == 0x000008, "Wrong size on GymEditorControl_SetWeather");
static_assert(offsetof(GymEditorControl_SetWeather, NewWeather) == 0x000000, "Member 'GymEditorControl_SetWeather::NewWeather' has a wrong offset!");

// Function GYMGAME.GymEditorWallStyleFeature.Action
// 0x0010 (0x0010 - 0x0000)
struct GymEditorWallStyleFeature_Action final
{
public:
	const class AGymStaticLevelAsset*             WallPiece;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymEditorWallStyleFeature_Action) == 0x000008, "Wrong alignment on GymEditorWallStyleFeature_Action");
static_assert(sizeof(GymEditorWallStyleFeature_Action) == 0x000010, "Wrong size on GymEditorWallStyleFeature_Action");
static_assert(offsetof(GymEditorWallStyleFeature_Action, WallPiece) == 0x000000, "Member 'GymEditorWallStyleFeature_Action::WallPiece' has a wrong offset!");
static_assert(offsetof(GymEditorWallStyleFeature_Action, Value) == 0x000008, "Member 'GymEditorWallStyleFeature_Action::Value' has a wrong offset!");

// Function GYMGAME.GymEditorWallStyleFeature.IssueAction
// 0x0010 (0x0010 - 0x0000)
struct GymEditorWallStyleFeature_IssueAction final
{
public:
	const class AGymStaticLevelAsset*             WallPiece;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymEditorWallStyleFeature_IssueAction) == 0x000008, "Wrong alignment on GymEditorWallStyleFeature_IssueAction");
static_assert(sizeof(GymEditorWallStyleFeature_IssueAction) == 0x000010, "Wrong size on GymEditorWallStyleFeature_IssueAction");
static_assert(offsetof(GymEditorWallStyleFeature_IssueAction, WallPiece) == 0x000000, "Member 'GymEditorWallStyleFeature_IssueAction::WallPiece' has a wrong offset!");
static_assert(offsetof(GymEditorWallStyleFeature_IssueAction, Value) == 0x000008, "Member 'GymEditorWallStyleFeature_IssueAction::Value' has a wrong offset!");

// Function GYMGAME.GymFadeWidget.Fade
// 0x0010 (0x0010 - 0x0000)
struct GymFadeWidget_Fade final
{
public:
	float                                         FadeInTime;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadedTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Layer;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymFadeWidget_Fade) == 0x000004, "Wrong alignment on GymFadeWidget_Fade");
static_assert(sizeof(GymFadeWidget_Fade) == 0x000010, "Wrong size on GymFadeWidget_Fade");
static_assert(offsetof(GymFadeWidget_Fade, FadeInTime) == 0x000000, "Member 'GymFadeWidget_Fade::FadeInTime' has a wrong offset!");
static_assert(offsetof(GymFadeWidget_Fade, FadedTime) == 0x000004, "Member 'GymFadeWidget_Fade::FadedTime' has a wrong offset!");
static_assert(offsetof(GymFadeWidget_Fade, FadeOutTime) == 0x000008, "Member 'GymFadeWidget_Fade::FadeOutTime' has a wrong offset!");
static_assert(offsetof(GymFadeWidget_Fade, Layer) == 0x00000C, "Member 'GymFadeWidget_Fade::Layer' has a wrong offset!");

// Function GYMGAME.GymFinishlineBanner.OnBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct GymFinishlineBanner_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymFinishlineBanner_OnBeginOverlap) == 0x000008, "Wrong alignment on GymFinishlineBanner_OnBeginOverlap");
static_assert(sizeof(GymFinishlineBanner_OnBeginOverlap) == 0x000108, "Wrong size on GymFinishlineBanner_OnBeginOverlap");
static_assert(offsetof(GymFinishlineBanner_OnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'GymFinishlineBanner_OnBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(GymFinishlineBanner_OnBeginOverlap, OtherActor) == 0x000008, "Member 'GymFinishlineBanner_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(GymFinishlineBanner_OnBeginOverlap, OtherComp) == 0x000010, "Member 'GymFinishlineBanner_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(GymFinishlineBanner_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'GymFinishlineBanner_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(GymFinishlineBanner_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'GymFinishlineBanner_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(GymFinishlineBanner_OnBeginOverlap, SweepResult) == 0x000020, "Member 'GymFinishlineBanner_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function GYMGAME.GymFinishlineBanner.SetWidth
// 0x0004 (0x0004 - 0x0000)
struct GymFinishlineBanner_SetWidth final
{
public:
	float                                         NewWidth;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymFinishlineBanner_SetWidth) == 0x000004, "Wrong alignment on GymFinishlineBanner_SetWidth");
static_assert(sizeof(GymFinishlineBanner_SetWidth) == 0x000004, "Wrong size on GymFinishlineBanner_SetWidth");
static_assert(offsetof(GymFinishlineBanner_SetWidth, NewWidth) == 0x000000, "Member 'GymFinishlineBanner_SetWidth::NewWidth' has a wrong offset!");

// Function GYMGAME.GymFragileFloor.Multi_StartBreaking
// 0x0008 (0x0008 - 0x0000)
struct GymFragileFloor_Multi_StartBreaking final
{
public:
	double                                        ServerTimestamp;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymFragileFloor_Multi_StartBreaking) == 0x000008, "Wrong alignment on GymFragileFloor_Multi_StartBreaking");
static_assert(sizeof(GymFragileFloor_Multi_StartBreaking) == 0x000008, "Wrong size on GymFragileFloor_Multi_StartBreaking");
static_assert(offsetof(GymFragileFloor_Multi_StartBreaking, ServerTimestamp) == 0x000000, "Member 'GymFragileFloor_Multi_StartBreaking::ServerTimestamp' has a wrong offset!");

// Function GYMGAME.GymFragileFloor.UpdateVisualsBP
// 0x0004 (0x0004 - 0x0000)
struct GymFragileFloor_UpdateVisualsBP final
{
public:
	float                                         TotalCrackingRatio;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymFragileFloor_UpdateVisualsBP) == 0x000004, "Wrong alignment on GymFragileFloor_UpdateVisualsBP");
static_assert(sizeof(GymFragileFloor_UpdateVisualsBP) == 0x000004, "Wrong size on GymFragileFloor_UpdateVisualsBP");
static_assert(offsetof(GymFragileFloor_UpdateVisualsBP, TotalCrackingRatio) == 0x000000, "Member 'GymFragileFloor_UpdateVisualsBP::TotalCrackingRatio' has a wrong offset!");

// Function GYMGAME.GymFragileFloor.GetBrokenRatio
// 0x0008 (0x0008 - 0x0000)
struct GymFragileFloor_GetBrokenRatio final
{
public:
	int32                                         OptionalHP;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymFragileFloor_GetBrokenRatio) == 0x000004, "Wrong alignment on GymFragileFloor_GetBrokenRatio");
static_assert(sizeof(GymFragileFloor_GetBrokenRatio) == 0x000008, "Wrong size on GymFragileFloor_GetBrokenRatio");
static_assert(offsetof(GymFragileFloor_GetBrokenRatio, OptionalHP) == 0x000000, "Member 'GymFragileFloor_GetBrokenRatio::OptionalHP' has a wrong offset!");
static_assert(offsetof(GymFragileFloor_GetBrokenRatio, ReturnValue) == 0x000004, "Member 'GymFragileFloor_GetBrokenRatio::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymFragileFloor.GetCrackingRatio
// 0x0004 (0x0004 - 0x0000)
struct GymFragileFloor_GetCrackingRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymFragileFloor_GetCrackingRatio) == 0x000004, "Wrong alignment on GymFragileFloor_GetCrackingRatio");
static_assert(sizeof(GymFragileFloor_GetCrackingRatio) == 0x000004, "Wrong size on GymFragileFloor_GetCrackingRatio");
static_assert(offsetof(GymFragileFloor_GetCrackingRatio, ReturnValue) == 0x000000, "Member 'GymFragileFloor_GetCrackingRatio::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymFragileFloor.GetRecoverRatio
// 0x0004 (0x0004 - 0x0000)
struct GymFragileFloor_GetRecoverRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymFragileFloor_GetRecoverRatio) == 0x000004, "Wrong alignment on GymFragileFloor_GetRecoverRatio");
static_assert(sizeof(GymFragileFloor_GetRecoverRatio) == 0x000004, "Wrong size on GymFragileFloor_GetRecoverRatio");
static_assert(offsetof(GymFragileFloor_GetRecoverRatio, ReturnValue) == 0x000000, "Member 'GymFragileFloor_GetRecoverRatio::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGameInstance.BeginLoadingScreen
// 0x0010 (0x0010 - 0x0000)
struct GymGameInstance_BeginLoadingScreen final
{
public:
	class FString                                 MapName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGameInstance_BeginLoadingScreen) == 0x000008, "Wrong alignment on GymGameInstance_BeginLoadingScreen");
static_assert(sizeof(GymGameInstance_BeginLoadingScreen) == 0x000010, "Wrong size on GymGameInstance_BeginLoadingScreen");
static_assert(offsetof(GymGameInstance_BeginLoadingScreen, MapName) == 0x000000, "Member 'GymGameInstance_BeginLoadingScreen::MapName' has a wrong offset!");

// Function GYMGAME.GymGameInstance.CreateLoadingScreen
// 0x0018 (0x0018 - 0x0000)
struct GymGameInstance_CreateLoadingScreen final
{
public:
	float                                         HideIn;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGameInstance_CreateLoadingScreen) == 0x000008, "Wrong alignment on GymGameInstance_CreateLoadingScreen");
static_assert(sizeof(GymGameInstance_CreateLoadingScreen) == 0x000018, "Wrong size on GymGameInstance_CreateLoadingScreen");
static_assert(offsetof(GymGameInstance_CreateLoadingScreen, HideIn) == 0x000000, "Member 'GymGameInstance_CreateLoadingScreen::HideIn' has a wrong offset!");
static_assert(offsetof(GymGameInstance_CreateLoadingScreen, Message) == 0x000008, "Member 'GymGameInstance_CreateLoadingScreen::Message' has a wrong offset!");

// Function GYMGAME.GymGameInstance.EndLoadingScreen
// 0x0008 (0x0008 - 0x0000)
struct GymGameInstance_EndLoadingScreen final
{
public:
	class UWorld*                                 InLoadedWorld;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGameInstance_EndLoadingScreen) == 0x000008, "Wrong alignment on GymGameInstance_EndLoadingScreen");
static_assert(sizeof(GymGameInstance_EndLoadingScreen) == 0x000008, "Wrong size on GymGameInstance_EndLoadingScreen");
static_assert(offsetof(GymGameInstance_EndLoadingScreen, InLoadedWorld) == 0x000000, "Member 'GymGameInstance_EndLoadingScreen::InLoadedWorld' has a wrong offset!");

// Function GYMGAME.GymGameInstance.FindAndJoinHub
// 0x0010 (0x0010 - 0x0000)
struct GymGameInstance_FindAndJoinHub final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGameInstance_FindAndJoinHub) == 0x000008, "Wrong alignment on GymGameInstance_FindAndJoinHub");
static_assert(sizeof(GymGameInstance_FindAndJoinHub) == 0x000010, "Wrong size on GymGameInstance_FindAndJoinHub");
static_assert(offsetof(GymGameInstance_FindAndJoinHub, URL) == 0x000000, "Member 'GymGameInstance_FindAndJoinHub::URL' has a wrong offset!");

// Function GYMGAME.GymGameInstance.OnGSDKHealthCheck
// 0x0001 (0x0001 - 0x0000)
struct GymGameInstance_OnGSDKHealthCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGameInstance_OnGSDKHealthCheck) == 0x000001, "Wrong alignment on GymGameInstance_OnGSDKHealthCheck");
static_assert(sizeof(GymGameInstance_OnGSDKHealthCheck) == 0x000001, "Wrong size on GymGameInstance_OnGSDKHealthCheck");
static_assert(offsetof(GymGameInstance_OnGSDKHealthCheck, ReturnValue) == 0x000000, "Member 'GymGameInstance_OnGSDKHealthCheck::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGameInstance.SetLevelFileName
// 0x0010 (0x0010 - 0x0000)
struct GymGameInstance_SetLevelFileName final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGameInstance_SetLevelFileName) == 0x000008, "Wrong alignment on GymGameInstance_SetLevelFileName");
static_assert(sizeof(GymGameInstance_SetLevelFileName) == 0x000010, "Wrong size on GymGameInstance_SetLevelFileName");
static_assert(offsetof(GymGameInstance_SetLevelFileName, Name_0) == 0x000000, "Member 'GymGameInstance_SetLevelFileName::Name_0' has a wrong offset!");

// Function GYMGAME.GymGameInstance.SetLoadingScreenData
// 0x0058 (0x0058 - 0x0000)
struct GymGameInstance_SetLoadingScreenData final
{
public:
	struct FGymLoadingScreenOptions               Options;                                           // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGameInstance_SetLoadingScreenData) == 0x000008, "Wrong alignment on GymGameInstance_SetLoadingScreenData");
static_assert(sizeof(GymGameInstance_SetLoadingScreenData) == 0x000058, "Wrong size on GymGameInstance_SetLoadingScreenData");
static_assert(offsetof(GymGameInstance_SetLoadingScreenData, Options) == 0x000000, "Member 'GymGameInstance_SetLoadingScreenData::Options' has a wrong offset!");

// Function GYMGAME.GymGameInstance.SetLobbyMapDetails
// 0x00D0 (0x00D0 - 0x0000)
struct GymGameInstance_SetLobbyMapDetails final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymMapDetailsResult                   Result;                                            // 0x0008(0x00C8)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGameInstance_SetLobbyMapDetails) == 0x000008, "Wrong alignment on GymGameInstance_SetLobbyMapDetails");
static_assert(sizeof(GymGameInstance_SetLobbyMapDetails) == 0x0000D0, "Wrong size on GymGameInstance_SetLobbyMapDetails");
static_assert(offsetof(GymGameInstance_SetLobbyMapDetails, bSuccess) == 0x000000, "Member 'GymGameInstance_SetLobbyMapDetails::bSuccess' has a wrong offset!");
static_assert(offsetof(GymGameInstance_SetLobbyMapDetails, Result) == 0x000008, "Member 'GymGameInstance_SetLobbyMapDetails::Result' has a wrong offset!");

// Function GYMGAME.GymGameInstance.SetPlaylist
// 0x0060 (0x0060 - 0x0000)
struct GymGameInstance_SetPlaylist final
{
public:
	struct FGymPlaylistDetailsResult              Details;                                           // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGameInstance_SetPlaylist) == 0x000008, "Wrong alignment on GymGameInstance_SetPlaylist");
static_assert(sizeof(GymGameInstance_SetPlaylist) == 0x000060, "Wrong size on GymGameInstance_SetPlaylist");
static_assert(offsetof(GymGameInstance_SetPlaylist, Details) == 0x000000, "Member 'GymGameInstance_SetPlaylist::Details' has a wrong offset!");

// Function GYMGAME.GymGameInstance.StartCareerPlaylist
// 0x0030 (0x0030 - 0x0000)
struct GymGameInstance_StartCareerPlaylist final
{
public:
	TArray<struct FGymCareerPlaylistMapInfo>      PlaylistMaps;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 PlaylistName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGymAISelectionData>            NPCs;                                              // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGameInstance_StartCareerPlaylist) == 0x000008, "Wrong alignment on GymGameInstance_StartCareerPlaylist");
static_assert(sizeof(GymGameInstance_StartCareerPlaylist) == 0x000030, "Wrong size on GymGameInstance_StartCareerPlaylist");
static_assert(offsetof(GymGameInstance_StartCareerPlaylist, PlaylistMaps) == 0x000000, "Member 'GymGameInstance_StartCareerPlaylist::PlaylistMaps' has a wrong offset!");
static_assert(offsetof(GymGameInstance_StartCareerPlaylist, PlaylistName) == 0x000010, "Member 'GymGameInstance_StartCareerPlaylist::PlaylistName' has a wrong offset!");
static_assert(offsetof(GymGameInstance_StartCareerPlaylist, NPCs) == 0x000020, "Member 'GymGameInstance_StartCareerPlaylist::NPCs' has a wrong offset!");

// Function GYMGAME.GymGameInstance.GetCurrentMapInfo
// 0x0060 (0x0060 - 0x0000)
struct GymGameInstance_GetCurrentMapInfo final
{
public:
	struct FCustomLevelFileInfo                   ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGameInstance_GetCurrentMapInfo) == 0x000008, "Wrong alignment on GymGameInstance_GetCurrentMapInfo");
static_assert(sizeof(GymGameInstance_GetCurrentMapInfo) == 0x000060, "Wrong size on GymGameInstance_GetCurrentMapInfo");
static_assert(offsetof(GymGameInstance_GetCurrentMapInfo, ReturnValue) == 0x000000, "Member 'GymGameInstance_GetCurrentMapInfo::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGameInstance.GetRequestedServerId
// 0x0010 (0x0010 - 0x0000)
struct GymGameInstance_GetRequestedServerId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGameInstance_GetRequestedServerId) == 0x000008, "Wrong alignment on GymGameInstance_GetRequestedServerId");
static_assert(sizeof(GymGameInstance_GetRequestedServerId) == 0x000010, "Wrong size on GymGameInstance_GetRequestedServerId");
static_assert(offsetof(GymGameInstance_GetRequestedServerId, ReturnValue) == 0x000000, "Member 'GymGameInstance_GetRequestedServerId::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGameInstance.IsServerReadyToStart
// 0x0001 (0x0001 - 0x0000)
struct GymGameInstance_IsServerReadyToStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGameInstance_IsServerReadyToStart) == 0x000001, "Wrong alignment on GymGameInstance_IsServerReadyToStart");
static_assert(sizeof(GymGameInstance_IsServerReadyToStart) == 0x000001, "Wrong size on GymGameInstance_IsServerReadyToStart");
static_assert(offsetof(GymGameInstance_IsServerReadyToStart, ReturnValue) == 0x000000, "Member 'GymGameInstance_IsServerReadyToStart::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGameState.Multi_SetScoreboard
// 0x0010 (0x0010 - 0x0000)
struct GymGameState_Multi_SetScoreboard final
{
public:
	TArray<struct FGymScoreboardEntry>            Scoreboard;                                        // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGameState_Multi_SetScoreboard) == 0x000008, "Wrong alignment on GymGameState_Multi_SetScoreboard");
static_assert(sizeof(GymGameState_Multi_SetScoreboard) == 0x000010, "Wrong size on GymGameState_Multi_SetScoreboard");
static_assert(offsetof(GymGameState_Multi_SetScoreboard, Scoreboard) == 0x000000, "Member 'GymGameState_Multi_SetScoreboard::Scoreboard' has a wrong offset!");

// DelegateFunction GYMGAME.GymGameState.OnLevelInfoUpdated__DelegateSignature
// 0x0060 (0x0060 - 0x0000)
struct GymGameState_OnLevelInfoUpdated__DelegateSignature final
{
public:
	struct FCustomLevelFileInfo                   LevelInfo;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGameState_OnLevelInfoUpdated__DelegateSignature) == 0x000008, "Wrong alignment on GymGameState_OnLevelInfoUpdated__DelegateSignature");
static_assert(sizeof(GymGameState_OnLevelInfoUpdated__DelegateSignature) == 0x000060, "Wrong size on GymGameState_OnLevelInfoUpdated__DelegateSignature");
static_assert(offsetof(GymGameState_OnLevelInfoUpdated__DelegateSignature, LevelInfo) == 0x000000, "Member 'GymGameState_OnLevelInfoUpdated__DelegateSignature::LevelInfo' has a wrong offset!");

// Function GYMGAME.GymGameState.OnMapDetailsReceived
// 0x00D0 (0x00D0 - 0x0000)
struct GymGameState_OnMapDetailsReceived final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymMapDetailsResult                   Details;                                           // 0x0008(0x00C8)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGameState_OnMapDetailsReceived) == 0x000008, "Wrong alignment on GymGameState_OnMapDetailsReceived");
static_assert(sizeof(GymGameState_OnMapDetailsReceived) == 0x0000D0, "Wrong size on GymGameState_OnMapDetailsReceived");
static_assert(offsetof(GymGameState_OnMapDetailsReceived, Success) == 0x000000, "Member 'GymGameState_OnMapDetailsReceived::Success' has a wrong offset!");
static_assert(offsetof(GymGameState_OnMapDetailsReceived, Details) == 0x000008, "Member 'GymGameState_OnMapDetailsReceived::Details' has a wrong offset!");

// DelegateFunction GYMGAME.GymGameState.OnServerInfoChanged__DelegateSignature
// 0x0158 (0x0158 - 0x0000)
struct GymGameState_OnServerInfoChanged__DelegateSignature final
{
public:
	struct FGymServerInfo                         ServerInfo_0;                                      // 0x0000(0x0158)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGameState_OnServerInfoChanged__DelegateSignature) == 0x000008, "Wrong alignment on GymGameState_OnServerInfoChanged__DelegateSignature");
static_assert(sizeof(GymGameState_OnServerInfoChanged__DelegateSignature) == 0x000158, "Wrong size on GymGameState_OnServerInfoChanged__DelegateSignature");
static_assert(offsetof(GymGameState_OnServerInfoChanged__DelegateSignature, ServerInfo_0) == 0x000000, "Member 'GymGameState_OnServerInfoChanged__DelegateSignature::ServerInfo_0' has a wrong offset!");

// DelegateFunction GYMGAME.GymGameState.OnVoteStateChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GymGameState_OnVoteStateChanged__DelegateSignature final
{
public:
	EVoteState                                    VoteState_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGameState_OnVoteStateChanged__DelegateSignature) == 0x000001, "Wrong alignment on GymGameState_OnVoteStateChanged__DelegateSignature");
static_assert(sizeof(GymGameState_OnVoteStateChanged__DelegateSignature) == 0x000001, "Wrong size on GymGameState_OnVoteStateChanged__DelegateSignature");
static_assert(offsetof(GymGameState_OnVoteStateChanged__DelegateSignature, VoteState_0) == 0x000000, "Member 'GymGameState_OnVoteStateChanged__DelegateSignature::VoteState_0' has a wrong offset!");

// Function GYMGAME.GymGameState.GetBasicRuleData
// 0x0008 (0x0008 - 0x0000)
struct GymGameState_GetBasicRuleData final
{
public:
	class UGymRuleReplicatedData*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGameState_GetBasicRuleData) == 0x000008, "Wrong alignment on GymGameState_GetBasicRuleData");
static_assert(sizeof(GymGameState_GetBasicRuleData) == 0x000008, "Wrong size on GymGameState_GetBasicRuleData");
static_assert(offsetof(GymGameState_GetBasicRuleData, ReturnValue) == 0x000000, "Member 'GymGameState_GetBasicRuleData::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGameState.IsPlayMode
// 0x0001 (0x0001 - 0x0000)
struct GymGameState_IsPlayMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGameState_IsPlayMode) == 0x000001, "Wrong alignment on GymGameState_IsPlayMode");
static_assert(sizeof(GymGameState_IsPlayMode) == 0x000001, "Wrong size on GymGameState_IsPlayMode");
static_assert(offsetof(GymGameState_IsPlayMode, ReturnValue) == 0x000000, "Member 'GymGameState_IsPlayMode::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGameState.IsSandboxMode
// 0x0001 (0x0001 - 0x0000)
struct GymGameState_IsSandboxMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGameState_IsSandboxMode) == 0x000001, "Wrong alignment on GymGameState_IsSandboxMode");
static_assert(sizeof(GymGameState_IsSandboxMode) == 0x000001, "Wrong size on GymGameState_IsSandboxMode");
static_assert(offsetof(GymGameState_IsSandboxMode, ReturnValue) == 0x000000, "Member 'GymGameState_IsSandboxMode::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGameState.MapEditingAllowed
// 0x0001 (0x0001 - 0x0000)
struct GymGameState_MapEditingAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGameState_MapEditingAllowed) == 0x000001, "Wrong alignment on GymGameState_MapEditingAllowed");
static_assert(sizeof(GymGameState_MapEditingAllowed) == 0x000001, "Wrong size on GymGameState_MapEditingAllowed");
static_assert(offsetof(GymGameState_MapEditingAllowed, ReturnValue) == 0x000000, "Member 'GymGameState_MapEditingAllowed::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGlobalAudioControl.Client_PlayAmbientAudio
// 0x000C (0x000C - 0x0000)
struct GymGlobalAudioControl_Client_PlayAmbientAudio final
{
public:
	class FName                                   TriggerName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRulesRunningOnly;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymGlobalAudioControl_Client_PlayAmbientAudio) == 0x000004, "Wrong alignment on GymGlobalAudioControl_Client_PlayAmbientAudio");
static_assert(sizeof(GymGlobalAudioControl_Client_PlayAmbientAudio) == 0x00000C, "Wrong size on GymGlobalAudioControl_Client_PlayAmbientAudio");
static_assert(offsetof(GymGlobalAudioControl_Client_PlayAmbientAudio, TriggerName) == 0x000000, "Member 'GymGlobalAudioControl_Client_PlayAmbientAudio::TriggerName' has a wrong offset!");
static_assert(offsetof(GymGlobalAudioControl_Client_PlayAmbientAudio, bRulesRunningOnly) == 0x000008, "Member 'GymGlobalAudioControl_Client_PlayAmbientAudio::bRulesRunningOnly' has a wrong offset!");

// Function GYMGAME.GymGlobalAudioControl.Client_PlayStingerAudio
// 0x0008 (0x0008 - 0x0000)
struct GymGlobalAudioControl_Client_PlayStingerAudio final
{
public:
	class FName                                   TriggerName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGlobalAudioControl_Client_PlayStingerAudio) == 0x000004, "Wrong alignment on GymGlobalAudioControl_Client_PlayStingerAudio");
static_assert(sizeof(GymGlobalAudioControl_Client_PlayStingerAudio) == 0x000008, "Wrong size on GymGlobalAudioControl_Client_PlayStingerAudio");
static_assert(offsetof(GymGlobalAudioControl_Client_PlayStingerAudio, TriggerName) == 0x000000, "Member 'GymGlobalAudioControl_Client_PlayStingerAudio::TriggerName' has a wrong offset!");

// Function GYMGAME.GymGlobalWidgetControl.GetDistanceToPreviousFocusedWidget
// 0x003C (0x003C - 0x0000)
struct GymGlobalWidgetControl_GetDistanceToPreviousFocusedWidget final
{
public:
	struct FGeometry                              Geometry;                                          // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGlobalWidgetControl_GetDistanceToPreviousFocusedWidget) == 0x000004, "Wrong alignment on GymGlobalWidgetControl_GetDistanceToPreviousFocusedWidget");
static_assert(sizeof(GymGlobalWidgetControl_GetDistanceToPreviousFocusedWidget) == 0x00003C, "Wrong size on GymGlobalWidgetControl_GetDistanceToPreviousFocusedWidget");
static_assert(offsetof(GymGlobalWidgetControl_GetDistanceToPreviousFocusedWidget, Geometry) == 0x000000, "Member 'GymGlobalWidgetControl_GetDistanceToPreviousFocusedWidget::Geometry' has a wrong offset!");
static_assert(offsetof(GymGlobalWidgetControl_GetDistanceToPreviousFocusedWidget, ReturnValue) == 0x000038, "Member 'GymGlobalWidgetControl_GetDistanceToPreviousFocusedWidget::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGlobalWidgetControl.IsMenuOpen
// 0x0001 (0x0001 - 0x0000)
struct GymGlobalWidgetControl_IsMenuOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGlobalWidgetControl_IsMenuOpen) == 0x000001, "Wrong alignment on GymGlobalWidgetControl_IsMenuOpen");
static_assert(sizeof(GymGlobalWidgetControl_IsMenuOpen) == 0x000001, "Wrong size on GymGlobalWidgetControl_IsMenuOpen");
static_assert(offsetof(GymGlobalWidgetControl_IsMenuOpen, ReturnValue) == 0x000000, "Member 'GymGlobalWidgetControl_IsMenuOpen::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGlobalWidgetControl.IsSettingsOpen
// 0x0001 (0x0001 - 0x0000)
struct GymGlobalWidgetControl_IsSettingsOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGlobalWidgetControl_IsSettingsOpen) == 0x000001, "Wrong alignment on GymGlobalWidgetControl_IsSettingsOpen");
static_assert(sizeof(GymGlobalWidgetControl_IsSettingsOpen) == 0x000001, "Wrong size on GymGlobalWidgetControl_IsSettingsOpen");
static_assert(offsetof(GymGlobalWidgetControl_IsSettingsOpen, ReturnValue) == 0x000000, "Member 'GymGlobalWidgetControl_IsSettingsOpen::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGlobalWidgetControl.OnGameOverlayActivityChanged
// 0x0001 (0x0001 - 0x0000)
struct GymGlobalWidgetControl_OnGameOverlayActivityChanged final
{
public:
	bool                                          bIsOverlayActive;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGlobalWidgetControl_OnGameOverlayActivityChanged) == 0x000001, "Wrong alignment on GymGlobalWidgetControl_OnGameOverlayActivityChanged");
static_assert(sizeof(GymGlobalWidgetControl_OnGameOverlayActivityChanged) == 0x000001, "Wrong size on GymGlobalWidgetControl_OnGameOverlayActivityChanged");
static_assert(offsetof(GymGlobalWidgetControl_OnGameOverlayActivityChanged, bIsOverlayActive) == 0x000000, "Member 'GymGlobalWidgetControl_OnGameOverlayActivityChanged::bIsOverlayActive' has a wrong offset!");

// Function GYMGAME.GymGlobalWidgetControl.OnGamepadConnectionChanged
// 0x000C (0x000C - 0x0000)
struct GymGlobalWidgetControl_OnGamepadConnectionChanged final
{
public:
	EInputDeviceConnectionState                   NewConnectionState;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlatformUserId                        PlatformUserId;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputDeviceId                         InputDeviceId;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGlobalWidgetControl_OnGamepadConnectionChanged) == 0x000004, "Wrong alignment on GymGlobalWidgetControl_OnGamepadConnectionChanged");
static_assert(sizeof(GymGlobalWidgetControl_OnGamepadConnectionChanged) == 0x00000C, "Wrong size on GymGlobalWidgetControl_OnGamepadConnectionChanged");
static_assert(offsetof(GymGlobalWidgetControl_OnGamepadConnectionChanged, NewConnectionState) == 0x000000, "Member 'GymGlobalWidgetControl_OnGamepadConnectionChanged::NewConnectionState' has a wrong offset!");
static_assert(offsetof(GymGlobalWidgetControl_OnGamepadConnectionChanged, PlatformUserId) == 0x000004, "Member 'GymGlobalWidgetControl_OnGamepadConnectionChanged::PlatformUserId' has a wrong offset!");
static_assert(offsetof(GymGlobalWidgetControl_OnGamepadConnectionChanged, InputDeviceId) == 0x000008, "Member 'GymGlobalWidgetControl_OnGamepadConnectionChanged::InputDeviceId' has a wrong offset!");

// Function GYMGAME.GymGlobalWidgetControl.OnWindowFocusChanged
// 0x0001 (0x0001 - 0x0000)
struct GymGlobalWidgetControl_OnWindowFocusChanged final
{
public:
	bool                                          bIsFocused;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGlobalWidgetControl_OnWindowFocusChanged) == 0x000001, "Wrong alignment on GymGlobalWidgetControl_OnWindowFocusChanged");
static_assert(sizeof(GymGlobalWidgetControl_OnWindowFocusChanged) == 0x000001, "Wrong size on GymGlobalWidgetControl_OnWindowFocusChanged");
static_assert(offsetof(GymGlobalWidgetControl_OnWindowFocusChanged, bIsFocused) == 0x000000, "Member 'GymGlobalWidgetControl_OnWindowFocusChanged::bIsFocused' has a wrong offset!");

// Function GYMGAME.GymGlobalWidgetControl.SetUIMode
// 0x0018 (0x0018 - 0x0000)
struct GymGlobalWidgetControl_SetUIMode final
{
public:
	bool                                          UIMode;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymGuiMetaWidget*                      WidgetResponsible;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreventMoving;                                    // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreventLooking;                                   // 0x0011(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymGlobalWidgetControl_SetUIMode) == 0x000008, "Wrong alignment on GymGlobalWidgetControl_SetUIMode");
static_assert(sizeof(GymGlobalWidgetControl_SetUIMode) == 0x000018, "Wrong size on GymGlobalWidgetControl_SetUIMode");
static_assert(offsetof(GymGlobalWidgetControl_SetUIMode, UIMode) == 0x000000, "Member 'GymGlobalWidgetControl_SetUIMode::UIMode' has a wrong offset!");
static_assert(offsetof(GymGlobalWidgetControl_SetUIMode, WidgetResponsible) == 0x000008, "Member 'GymGlobalWidgetControl_SetUIMode::WidgetResponsible' has a wrong offset!");
static_assert(offsetof(GymGlobalWidgetControl_SetUIMode, bPreventMoving) == 0x000010, "Member 'GymGlobalWidgetControl_SetUIMode::bPreventMoving' has a wrong offset!");
static_assert(offsetof(GymGlobalWidgetControl_SetUIMode, bPreventLooking) == 0x000011, "Member 'GymGlobalWidgetControl_SetUIMode::bPreventLooking' has a wrong offset!");

// Function GYMGAME.GymGlobalWidgetControl.GetActionWheel
// 0x0008 (0x0008 - 0x0000)
struct GymGlobalWidgetControl_GetActionWheel final
{
public:
	class UGymGuiRadialWidget*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGlobalWidgetControl_GetActionWheel) == 0x000008, "Wrong alignment on GymGlobalWidgetControl_GetActionWheel");
static_assert(sizeof(GymGlobalWidgetControl_GetActionWheel) == 0x000008, "Wrong size on GymGlobalWidgetControl_GetActionWheel");
static_assert(offsetof(GymGlobalWidgetControl_GetActionWheel, ReturnValue) == 0x000000, "Member 'GymGlobalWidgetControl_GetActionWheel::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGlobalWidgetControl.GetChatWidget
// 0x0008 (0x0008 - 0x0000)
struct GymGlobalWidgetControl_GetChatWidget final
{
public:
	class UGymGuiGlobalChatWidget*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGlobalWidgetControl_GetChatWidget) == 0x000008, "Wrong alignment on GymGlobalWidgetControl_GetChatWidget");
static_assert(sizeof(GymGlobalWidgetControl_GetChatWidget) == 0x000008, "Wrong size on GymGlobalWidgetControl_GetChatWidget");
static_assert(offsetof(GymGlobalWidgetControl_GetChatWidget, ReturnValue) == 0x000000, "Member 'GymGlobalWidgetControl_GetChatWidget::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGlobalWidgetControl.GetFadeWidget
// 0x0008 (0x0008 - 0x0000)
struct GymGlobalWidgetControl_GetFadeWidget final
{
public:
	class UGymFadeWidget*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGlobalWidgetControl_GetFadeWidget) == 0x000008, "Wrong alignment on GymGlobalWidgetControl_GetFadeWidget");
static_assert(sizeof(GymGlobalWidgetControl_GetFadeWidget) == 0x000008, "Wrong size on GymGlobalWidgetControl_GetFadeWidget");
static_assert(offsetof(GymGlobalWidgetControl_GetFadeWidget, ReturnValue) == 0x000000, "Member 'GymGlobalWidgetControl_GetFadeWidget::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGlobalWidgetControl.GetHideAllWidgets
// 0x0001 (0x0001 - 0x0000)
struct GymGlobalWidgetControl_GetHideAllWidgets final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGlobalWidgetControl_GetHideAllWidgets) == 0x000001, "Wrong alignment on GymGlobalWidgetControl_GetHideAllWidgets");
static_assert(sizeof(GymGlobalWidgetControl_GetHideAllWidgets) == 0x000001, "Wrong size on GymGlobalWidgetControl_GetHideAllWidgets");
static_assert(offsetof(GymGlobalWidgetControl_GetHideAllWidgets, ReturnValue) == 0x000000, "Member 'GymGlobalWidgetControl_GetHideAllWidgets::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGlobalWidgetControl.GetInfoPopup
// 0x0008 (0x0008 - 0x0000)
struct GymGlobalWidgetControl_GetInfoPopup final
{
public:
	class UGymGuiGlobalMetaWidget*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGlobalWidgetControl_GetInfoPopup) == 0x000008, "Wrong alignment on GymGlobalWidgetControl_GetInfoPopup");
static_assert(sizeof(GymGlobalWidgetControl_GetInfoPopup) == 0x000008, "Wrong size on GymGlobalWidgetControl_GetInfoPopup");
static_assert(offsetof(GymGlobalWidgetControl_GetInfoPopup, ReturnValue) == 0x000000, "Member 'GymGlobalWidgetControl_GetInfoPopup::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGlobalWidgetControl.GetMainMenu
// 0x0008 (0x0008 - 0x0000)
struct GymGlobalWidgetControl_GetMainMenu final
{
public:
	class UGymGuiMainMenuWidget*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGlobalWidgetControl_GetMainMenu) == 0x000008, "Wrong alignment on GymGlobalWidgetControl_GetMainMenu");
static_assert(sizeof(GymGlobalWidgetControl_GetMainMenu) == 0x000008, "Wrong size on GymGlobalWidgetControl_GetMainMenu");
static_assert(offsetof(GymGlobalWidgetControl_GetMainMenu, ReturnValue) == 0x000000, "Member 'GymGlobalWidgetControl_GetMainMenu::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGlobalWidgetControl.GetPauseMenu
// 0x0008 (0x0008 - 0x0000)
struct GymGlobalWidgetControl_GetPauseMenu final
{
public:
	class UGymGuiPauseMenu*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGlobalWidgetControl_GetPauseMenu) == 0x000008, "Wrong alignment on GymGlobalWidgetControl_GetPauseMenu");
static_assert(sizeof(GymGlobalWidgetControl_GetPauseMenu) == 0x000008, "Wrong size on GymGlobalWidgetControl_GetPauseMenu");
static_assert(offsetof(GymGlobalWidgetControl_GetPauseMenu, ReturnValue) == 0x000000, "Member 'GymGlobalWidgetControl_GetPauseMenu::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGlobalWidgetControl.IsPopupOrConfirmOpen
// 0x0001 (0x0001 - 0x0000)
struct GymGlobalWidgetControl_IsPopupOrConfirmOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGlobalWidgetControl_IsPopupOrConfirmOpen) == 0x000001, "Wrong alignment on GymGlobalWidgetControl_IsPopupOrConfirmOpen");
static_assert(sizeof(GymGlobalWidgetControl_IsPopupOrConfirmOpen) == 0x000001, "Wrong size on GymGlobalWidgetControl_IsPopupOrConfirmOpen");
static_assert(offsetof(GymGlobalWidgetControl_IsPopupOrConfirmOpen, ReturnValue) == 0x000000, "Member 'GymGlobalWidgetControl_IsPopupOrConfirmOpen::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGlobalWidgetControl.OpenPlaylistScoreboard
// 0x0050 (0x0050 - 0x0000)
struct GymGlobalWidgetControl_OpenPlaylistScoreboard final
{
public:
	struct FGymPlayerScoreboard                   Scoreboard;                                        // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EGymPlaylistType                              PlayListType;                                      // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFinal;                                           // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidLevel;                                     // 0x004A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymGlobalWidgetControl_OpenPlaylistScoreboard) == 0x000008, "Wrong alignment on GymGlobalWidgetControl_OpenPlaylistScoreboard");
static_assert(sizeof(GymGlobalWidgetControl_OpenPlaylistScoreboard) == 0x000050, "Wrong size on GymGlobalWidgetControl_OpenPlaylistScoreboard");
static_assert(offsetof(GymGlobalWidgetControl_OpenPlaylistScoreboard, Scoreboard) == 0x000000, "Member 'GymGlobalWidgetControl_OpenPlaylistScoreboard::Scoreboard' has a wrong offset!");
static_assert(offsetof(GymGlobalWidgetControl_OpenPlaylistScoreboard, PlayListType) == 0x000048, "Member 'GymGlobalWidgetControl_OpenPlaylistScoreboard::PlayListType' has a wrong offset!");
static_assert(offsetof(GymGlobalWidgetControl_OpenPlaylistScoreboard, IsFinal) == 0x000049, "Member 'GymGlobalWidgetControl_OpenPlaylistScoreboard::IsFinal' has a wrong offset!");
static_assert(offsetof(GymGlobalWidgetControl_OpenPlaylistScoreboard, bIsValidLevel) == 0x00004A, "Member 'GymGlobalWidgetControl_OpenPlaylistScoreboard::bIsValidLevel' has a wrong offset!");

// Function GYMGAME.GymGoalPiece.OnBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct GymGoalPiece_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGoalPiece_OnBeginOverlap) == 0x000008, "Wrong alignment on GymGoalPiece_OnBeginOverlap");
static_assert(sizeof(GymGoalPiece_OnBeginOverlap) == 0x000108, "Wrong size on GymGoalPiece_OnBeginOverlap");
static_assert(offsetof(GymGoalPiece_OnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'GymGoalPiece_OnBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(GymGoalPiece_OnBeginOverlap, OtherActor) == 0x000008, "Member 'GymGoalPiece_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(GymGoalPiece_OnBeginOverlap, OtherComp) == 0x000010, "Member 'GymGoalPiece_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(GymGoalPiece_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'GymGoalPiece_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(GymGoalPiece_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'GymGoalPiece_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(GymGoalPiece_OnBeginOverlap, SweepResult) == 0x000020, "Member 'GymGoalPiece_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function GYMGAME.GymGuiControl.Client_AddQuestMessage
// 0x0020 (0x0020 - 0x0000)
struct GymGuiControl_Client_AddQuestMessage final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bGoodMessage;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymGuiControl_Client_AddQuestMessage) == 0x000008, "Wrong alignment on GymGuiControl_Client_AddQuestMessage");
static_assert(sizeof(GymGuiControl_Client_AddQuestMessage) == 0x000020, "Wrong size on GymGuiControl_Client_AddQuestMessage");
static_assert(offsetof(GymGuiControl_Client_AddQuestMessage, Text) == 0x000000, "Member 'GymGuiControl_Client_AddQuestMessage::Text' has a wrong offset!");
static_assert(offsetof(GymGuiControl_Client_AddQuestMessage, bGoodMessage) == 0x000018, "Member 'GymGuiControl_Client_AddQuestMessage::bGoodMessage' has a wrong offset!");

// Function GYMGAME.GymGuiControl.SetUIMode
// 0x0018 (0x0018 - 0x0000)
struct GymGuiControl_SetUIMode final
{
public:
	bool                                          UIMode;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymGuiMetaWidget*                      WidgetResponsible;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreventMovement;                                  // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreventLooking;                                   // 0x0011(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymGuiControl_SetUIMode) == 0x000008, "Wrong alignment on GymGuiControl_SetUIMode");
static_assert(sizeof(GymGuiControl_SetUIMode) == 0x000018, "Wrong size on GymGuiControl_SetUIMode");
static_assert(offsetof(GymGuiControl_SetUIMode, UIMode) == 0x000000, "Member 'GymGuiControl_SetUIMode::UIMode' has a wrong offset!");
static_assert(offsetof(GymGuiControl_SetUIMode, WidgetResponsible) == 0x000008, "Member 'GymGuiControl_SetUIMode::WidgetResponsible' has a wrong offset!");
static_assert(offsetof(GymGuiControl_SetUIMode, bPreventMovement) == 0x000010, "Member 'GymGuiControl_SetUIMode::bPreventMovement' has a wrong offset!");
static_assert(offsetof(GymGuiControl_SetUIMode, bPreventLooking) == 0x000011, "Member 'GymGuiControl_SetUIMode::bPreventLooking' has a wrong offset!");

// Function GYMGAME.GymGuiCreateLevelWidget.CreateLevel
// 0x0018 (0x0018 - 0x0000)
struct GymGuiCreateLevelWidget_CreateLevel final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymGuiCreateLevelWidget_CreateLevel) == 0x000008, "Wrong alignment on GymGuiCreateLevelWidget_CreateLevel");
static_assert(sizeof(GymGuiCreateLevelWidget_CreateLevel) == 0x000018, "Wrong size on GymGuiCreateLevelWidget_CreateLevel");
static_assert(offsetof(GymGuiCreateLevelWidget_CreateLevel, Name_0) == 0x000000, "Member 'GymGuiCreateLevelWidget_CreateLevel::Name_0' has a wrong offset!");
static_assert(offsetof(GymGuiCreateLevelWidget_CreateLevel, ReturnValue) == 0x000010, "Member 'GymGuiCreateLevelWidget_CreateLevel::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiCursorWidget.BPOnSupermoveReadyChanged
// 0x0004 (0x0004 - 0x0000)
struct GymGuiCursorWidget_BPOnSupermoveReadyChanged final
{
public:
	int32                                         IsReady;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiCursorWidget_BPOnSupermoveReadyChanged) == 0x000004, "Wrong alignment on GymGuiCursorWidget_BPOnSupermoveReadyChanged");
static_assert(sizeof(GymGuiCursorWidget_BPOnSupermoveReadyChanged) == 0x000004, "Wrong size on GymGuiCursorWidget_BPOnSupermoveReadyChanged");
static_assert(offsetof(GymGuiCursorWidget_BPOnSupermoveReadyChanged, IsReady) == 0x000000, "Member 'GymGuiCursorWidget_BPOnSupermoveReadyChanged::IsReady' has a wrong offset!");

// Function GYMGAME.GymGuiCursorWidget.UpdateSupermoveStamina
// 0x0004 (0x0004 - 0x0000)
struct GymGuiCursorWidget_UpdateSupermoveStamina final
{
public:
	float                                         Stamina;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiCursorWidget_UpdateSupermoveStamina) == 0x000004, "Wrong alignment on GymGuiCursorWidget_UpdateSupermoveStamina");
static_assert(sizeof(GymGuiCursorWidget_UpdateSupermoveStamina) == 0x000004, "Wrong size on GymGuiCursorWidget_UpdateSupermoveStamina");
static_assert(offsetof(GymGuiCursorWidget_UpdateSupermoveStamina, Stamina) == 0x000000, "Member 'GymGuiCursorWidget_UpdateSupermoveStamina::Stamina' has a wrong offset!");

// Function GYMGAME.GymGuiDialogueWidget.BPSetNPCName
// 0x0008 (0x0008 - 0x0000)
struct GymGuiDialogueWidget_BPSetNPCName final
{
public:
	class FName                                   NPCName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiDialogueWidget_BPSetNPCName) == 0x000004, "Wrong alignment on GymGuiDialogueWidget_BPSetNPCName");
static_assert(sizeof(GymGuiDialogueWidget_BPSetNPCName) == 0x000008, "Wrong size on GymGuiDialogueWidget_BPSetNPCName");
static_assert(offsetof(GymGuiDialogueWidget_BPSetNPCName, NPCName) == 0x000000, "Member 'GymGuiDialogueWidget_BPSetNPCName::NPCName' has a wrong offset!");

// Function GYMGAME.GymGuiDialogueWidget.BPSetNPCSpeech
// 0x0018 (0x0018 - 0x0000)
struct GymGuiDialogueWidget_BPSetNPCSpeech final
{
public:
	class FText                                   NPCSPeech;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiDialogueWidget_BPSetNPCSpeech) == 0x000008, "Wrong alignment on GymGuiDialogueWidget_BPSetNPCSpeech");
static_assert(sizeof(GymGuiDialogueWidget_BPSetNPCSpeech) == 0x000018, "Wrong size on GymGuiDialogueWidget_BPSetNPCSpeech");
static_assert(offsetof(GymGuiDialogueWidget_BPSetNPCSpeech, NPCSPeech) == 0x000000, "Member 'GymGuiDialogueWidget_BPSetNPCSpeech::NPCSPeech' has a wrong offset!");

// Function GYMGAME.GymGuiDialogueWidget.BPSetPlayerAnswers
// 0x0010 (0x0010 - 0x0000)
struct GymGuiDialogueWidget_BPSetPlayerAnswers final
{
public:
	TArray<struct FGymAnswer>                     PlayerAnswers;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiDialogueWidget_BPSetPlayerAnswers) == 0x000008, "Wrong alignment on GymGuiDialogueWidget_BPSetPlayerAnswers");
static_assert(sizeof(GymGuiDialogueWidget_BPSetPlayerAnswers) == 0x000010, "Wrong size on GymGuiDialogueWidget_BPSetPlayerAnswers");
static_assert(offsetof(GymGuiDialogueWidget_BPSetPlayerAnswers, PlayerAnswers) == 0x000000, "Member 'GymGuiDialogueWidget_BPSetPlayerAnswers::PlayerAnswers' has a wrong offset!");

// Function GYMGAME.GymGuiDialogueWidget.PlayerAnswered
// 0x0004 (0x0004 - 0x0000)
struct GymGuiDialogueWidget_PlayerAnswered final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiDialogueWidget_PlayerAnswered) == 0x000004, "Wrong alignment on GymGuiDialogueWidget_PlayerAnswered");
static_assert(sizeof(GymGuiDialogueWidget_PlayerAnswered) == 0x000004, "Wrong size on GymGuiDialogueWidget_PlayerAnswered");
static_assert(offsetof(GymGuiDialogueWidget_PlayerAnswered, Index_0) == 0x000000, "Member 'GymGuiDialogueWidget_PlayerAnswered::Index_0' has a wrong offset!");

// Function GYMGAME.GymGuiDialogueWidget.SetAnswerVisible
// 0x0001 (0x0001 - 0x0000)
struct GymGuiDialogueWidget_SetAnswerVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiDialogueWidget_SetAnswerVisible) == 0x000001, "Wrong alignment on GymGuiDialogueWidget_SetAnswerVisible");
static_assert(sizeof(GymGuiDialogueWidget_SetAnswerVisible) == 0x000001, "Wrong size on GymGuiDialogueWidget_SetAnswerVisible");
static_assert(offsetof(GymGuiDialogueWidget_SetAnswerVisible, bVisible) == 0x000000, "Member 'GymGuiDialogueWidget_SetAnswerVisible::bVisible' has a wrong offset!");

// Function GYMGAME.GymGuiGenericButton.FocusAndHover
// 0x0001 (0x0001 - 0x0000)
struct GymGuiGenericButton_FocusAndHover final
{
public:
	bool                                          bFocusToButtonObject;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiGenericButton_FocusAndHover) == 0x000001, "Wrong alignment on GymGuiGenericButton_FocusAndHover");
static_assert(sizeof(GymGuiGenericButton_FocusAndHover) == 0x000001, "Wrong size on GymGuiGenericButton_FocusAndHover");
static_assert(offsetof(GymGuiGenericButton_FocusAndHover, bFocusToButtonObject) == 0x000000, "Member 'GymGuiGenericButton_FocusAndHover::bFocusToButtonObject' has a wrong offset!");

// Function GYMGAME.GymGuiGenericTab.AddButton
// 0x0008 (0x0008 - 0x0000)
struct GymGuiGenericTab_AddButton final
{
public:
	class UGymGuiGenericTabButton*                Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiGenericTab_AddButton) == 0x000008, "Wrong alignment on GymGuiGenericTab_AddButton");
static_assert(sizeof(GymGuiGenericTab_AddButton) == 0x000008, "Wrong size on GymGuiGenericTab_AddButton");
static_assert(offsetof(GymGuiGenericTab_AddButton, Button) == 0x000000, "Member 'GymGuiGenericTab_AddButton::Button' has a wrong offset!");

// Function GYMGAME.GymGuiGenericTab.ClickCurrentButton
// 0x0001 (0x0001 - 0x0000)
struct GymGuiGenericTab_ClickCurrentButton final
{
public:
	bool                                          bForceClick;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiGenericTab_ClickCurrentButton) == 0x000001, "Wrong alignment on GymGuiGenericTab_ClickCurrentButton");
static_assert(sizeof(GymGuiGenericTab_ClickCurrentButton) == 0x000001, "Wrong size on GymGuiGenericTab_ClickCurrentButton");
static_assert(offsetof(GymGuiGenericTab_ClickCurrentButton, bForceClick) == 0x000000, "Member 'GymGuiGenericTab_ClickCurrentButton::bForceClick' has a wrong offset!");

// Function GYMGAME.GymGuiGenericTab.GetAllButtons
// 0x0010 (0x0010 - 0x0000)
struct GymGuiGenericTab_GetAllButtons final
{
public:
	TArray<class UGymGuiGenericTabButton*>        AllButtons;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiGenericTab_GetAllButtons) == 0x000008, "Wrong alignment on GymGuiGenericTab_GetAllButtons");
static_assert(sizeof(GymGuiGenericTab_GetAllButtons) == 0x000010, "Wrong size on GymGuiGenericTab_GetAllButtons");
static_assert(offsetof(GymGuiGenericTab_GetAllButtons, AllButtons) == 0x000000, "Member 'GymGuiGenericTab_GetAllButtons::AllButtons' has a wrong offset!");

// Function GYMGAME.GymGuiGenericTab.GetCurrentButton
// 0x0008 (0x0008 - 0x0000)
struct GymGuiGenericTab_GetCurrentButton final
{
public:
	class UGymGuiGenericTabButton*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiGenericTab_GetCurrentButton) == 0x000008, "Wrong alignment on GymGuiGenericTab_GetCurrentButton");
static_assert(sizeof(GymGuiGenericTab_GetCurrentButton) == 0x000008, "Wrong size on GymGuiGenericTab_GetCurrentButton");
static_assert(offsetof(GymGuiGenericTab_GetCurrentButton, ReturnValue) == 0x000000, "Member 'GymGuiGenericTab_GetCurrentButton::ReturnValue' has a wrong offset!");

// DelegateFunction GYMGAME.GymGuiGenericTab.OnTabButtonSelected__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct GymGuiGenericTab_OnTabButtonSelected__DelegateSignature final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiGenericTab_OnTabButtonSelected__DelegateSignature) == 0x000004, "Wrong alignment on GymGuiGenericTab_OnTabButtonSelected__DelegateSignature");
static_assert(sizeof(GymGuiGenericTab_OnTabButtonSelected__DelegateSignature) == 0x000004, "Wrong size on GymGuiGenericTab_OnTabButtonSelected__DelegateSignature");
static_assert(offsetof(GymGuiGenericTab_OnTabButtonSelected__DelegateSignature, Index_0) == 0x000000, "Member 'GymGuiGenericTab_OnTabButtonSelected__DelegateSignature::Index_0' has a wrong offset!");

// Function GYMGAME.GymGuiGenericTab.SetTabActive
// 0x0004 (0x0004 - 0x0000)
struct GymGuiGenericTab_SetTabActive final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiGenericTab_SetTabActive) == 0x000004, "Wrong alignment on GymGuiGenericTab_SetTabActive");
static_assert(sizeof(GymGuiGenericTab_SetTabActive) == 0x000004, "Wrong size on GymGuiGenericTab_SetTabActive");
static_assert(offsetof(GymGuiGenericTab_SetTabActive, Index_0) == 0x000000, "Member 'GymGuiGenericTab_SetTabActive::Index_0' has a wrong offset!");

// Function GYMGAME.GymGuiGenericTab.SetTabVisuallySelected
// 0x0008 (0x0008 - 0x0000)
struct GymGuiGenericTab_SetTabVisuallySelected final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHover;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymGuiGenericTab_SetTabVisuallySelected) == 0x000004, "Wrong alignment on GymGuiGenericTab_SetTabVisuallySelected");
static_assert(sizeof(GymGuiGenericTab_SetTabVisuallySelected) == 0x000008, "Wrong size on GymGuiGenericTab_SetTabVisuallySelected");
static_assert(offsetof(GymGuiGenericTab_SetTabVisuallySelected, Index_0) == 0x000000, "Member 'GymGuiGenericTab_SetTabVisuallySelected::Index_0' has a wrong offset!");
static_assert(offsetof(GymGuiGenericTab_SetTabVisuallySelected, bHover) == 0x000004, "Member 'GymGuiGenericTab_SetTabVisuallySelected::bHover' has a wrong offset!");

// Function GYMGAME.GymGuiGlobalChatWidget.ReceiveMessage
// 0x0020 (0x0020 - 0x0000)
struct GymGuiGlobalChatWidget_ReceiveMessage final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiGlobalChatWidget_ReceiveMessage) == 0x000008, "Wrong alignment on GymGuiGlobalChatWidget_ReceiveMessage");
static_assert(sizeof(GymGuiGlobalChatWidget_ReceiveMessage) == 0x000020, "Wrong size on GymGuiGlobalChatWidget_ReceiveMessage");
static_assert(offsetof(GymGuiGlobalChatWidget_ReceiveMessage, PlayerName) == 0x000000, "Member 'GymGuiGlobalChatWidget_ReceiveMessage::PlayerName' has a wrong offset!");
static_assert(offsetof(GymGuiGlobalChatWidget_ReceiveMessage, Message) == 0x000010, "Member 'GymGuiGlobalChatWidget_ReceiveMessage::Message' has a wrong offset!");

// Function GYMGAME.GymGuiGlobalChatWidget.SendMessage
// 0x0020 (0x0020 - 0x0000)
struct GymGuiGlobalChatWidget_SendMessage final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiGlobalChatWidget_SendMessage) == 0x000008, "Wrong alignment on GymGuiGlobalChatWidget_SendMessage");
static_assert(sizeof(GymGuiGlobalChatWidget_SendMessage) == 0x000020, "Wrong size on GymGuiGlobalChatWidget_SendMessage");
static_assert(offsetof(GymGuiGlobalChatWidget_SendMessage, PlayerName) == 0x000000, "Member 'GymGuiGlobalChatWidget_SendMessage::PlayerName' has a wrong offset!");
static_assert(offsetof(GymGuiGlobalChatWidget_SendMessage, Message) == 0x000010, "Member 'GymGuiGlobalChatWidget_SendMessage::Message' has a wrong offset!");

// Function GYMGAME.GymGuiMasterMenuWidget.CreateTabButton
// 0x0030 (0x0030 - 0x0000)
struct GymGuiMasterMenuWidget_CreateTabButton final
{
public:
	class FText                                   ButtonTitle;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         TabIndex;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGymGuiMainMenuWidget*                  MainPanel;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Hidden;                                            // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymGuiMasterMenuWidget_CreateTabButton) == 0x000008, "Wrong alignment on GymGuiMasterMenuWidget_CreateTabButton");
static_assert(sizeof(GymGuiMasterMenuWidget_CreateTabButton) == 0x000030, "Wrong size on GymGuiMasterMenuWidget_CreateTabButton");
static_assert(offsetof(GymGuiMasterMenuWidget_CreateTabButton, ButtonTitle) == 0x000000, "Member 'GymGuiMasterMenuWidget_CreateTabButton::ButtonTitle' has a wrong offset!");
static_assert(offsetof(GymGuiMasterMenuWidget_CreateTabButton, TabIndex) == 0x000018, "Member 'GymGuiMasterMenuWidget_CreateTabButton::TabIndex' has a wrong offset!");
static_assert(offsetof(GymGuiMasterMenuWidget_CreateTabButton, MainPanel) == 0x000020, "Member 'GymGuiMasterMenuWidget_CreateTabButton::MainPanel' has a wrong offset!");
static_assert(offsetof(GymGuiMasterMenuWidget_CreateTabButton, Hidden) == 0x000028, "Member 'GymGuiMasterMenuWidget_CreateTabButton::Hidden' has a wrong offset!");

// Function GYMGAME.GymGuiMasterMenuWidget.SetNotificationCount
// 0x0008 (0x0008 - 0x0000)
struct GymGuiMasterMenuWidget_SetNotificationCount final
{
public:
	int32                                         TabIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiMasterMenuWidget_SetNotificationCount) == 0x000004, "Wrong alignment on GymGuiMasterMenuWidget_SetNotificationCount");
static_assert(sizeof(GymGuiMasterMenuWidget_SetNotificationCount) == 0x000008, "Wrong size on GymGuiMasterMenuWidget_SetNotificationCount");
static_assert(offsetof(GymGuiMasterMenuWidget_SetNotificationCount, TabIndex) == 0x000000, "Member 'GymGuiMasterMenuWidget_SetNotificationCount::TabIndex' has a wrong offset!");
static_assert(offsetof(GymGuiMasterMenuWidget_SetNotificationCount, Count) == 0x000004, "Member 'GymGuiMasterMenuWidget_SetNotificationCount::Count' has a wrong offset!");

// Function GYMGAME.GymGuiMasterRuleStateWidget.AddRuleStateWidget
// 0x0008 (0x0008 - 0x0000)
struct GymGuiMasterRuleStateWidget_AddRuleStateWidget final
{
public:
	class UGymGuiRuleStateWidget*                 Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiMasterRuleStateWidget_AddRuleStateWidget) == 0x000008, "Wrong alignment on GymGuiMasterRuleStateWidget_AddRuleStateWidget");
static_assert(sizeof(GymGuiMasterRuleStateWidget_AddRuleStateWidget) == 0x000008, "Wrong size on GymGuiMasterRuleStateWidget_AddRuleStateWidget");
static_assert(offsetof(GymGuiMasterRuleStateWidget_AddRuleStateWidget, Widget) == 0x000000, "Member 'GymGuiMasterRuleStateWidget_AddRuleStateWidget::Widget' has a wrong offset!");

// Function GYMGAME.GymGuiMasterRuleStateWidget.ParticipantReachedCheckpoint
// 0x0004 (0x0004 - 0x0000)
struct GymGuiMasterRuleStateWidget_ParticipantReachedCheckpoint final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiMasterRuleStateWidget_ParticipantReachedCheckpoint) == 0x000004, "Wrong alignment on GymGuiMasterRuleStateWidget_ParticipantReachedCheckpoint");
static_assert(sizeof(GymGuiMasterRuleStateWidget_ParticipantReachedCheckpoint) == 0x000004, "Wrong size on GymGuiMasterRuleStateWidget_ParticipantReachedCheckpoint");
static_assert(offsetof(GymGuiMasterRuleStateWidget_ParticipantReachedCheckpoint, Index_0) == 0x000000, "Member 'GymGuiMasterRuleStateWidget_ParticipantReachedCheckpoint::Index_0' has a wrong offset!");

// Function GYMGAME.GymGuiMasterRuleStateWidget.ShowRuleInfoText
// 0x0018 (0x0018 - 0x0000)
struct GymGuiMasterRuleStateWidget_ShowRuleInfoText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiMasterRuleStateWidget_ShowRuleInfoText) == 0x000008, "Wrong alignment on GymGuiMasterRuleStateWidget_ShowRuleInfoText");
static_assert(sizeof(GymGuiMasterRuleStateWidget_ShowRuleInfoText) == 0x000018, "Wrong size on GymGuiMasterRuleStateWidget_ShowRuleInfoText");
static_assert(offsetof(GymGuiMasterRuleStateWidget_ShowRuleInfoText, Text) == 0x000000, "Member 'GymGuiMasterRuleStateWidget_ShowRuleInfoText::Text' has a wrong offset!");

// Function GYMGAME.GymGuiPauseMenu.BP_OnThumbnailUpdated
// 0x0010 (0x0010 - 0x0000)
struct GymGuiPauseMenu_BP_OnThumbnailUpdated final
{
public:
	class FString                                 LocalFilePath;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiPauseMenu_BP_OnThumbnailUpdated) == 0x000008, "Wrong alignment on GymGuiPauseMenu_BP_OnThumbnailUpdated");
static_assert(sizeof(GymGuiPauseMenu_BP_OnThumbnailUpdated) == 0x000010, "Wrong size on GymGuiPauseMenu_BP_OnThumbnailUpdated");
static_assert(offsetof(GymGuiPauseMenu_BP_OnThumbnailUpdated, LocalFilePath) == 0x000000, "Member 'GymGuiPauseMenu_BP_OnThumbnailUpdated::LocalFilePath' has a wrong offset!");

// Function GYMGAME.GymGuiPauseMenu.GetCurrentMapData
// 0x0060 (0x0060 - 0x0000)
struct GymGuiPauseMenu_GetCurrentMapData final
{
public:
	struct FCustomLevelFileInfo                   ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiPauseMenu_GetCurrentMapData) == 0x000008, "Wrong alignment on GymGuiPauseMenu_GetCurrentMapData");
static_assert(sizeof(GymGuiPauseMenu_GetCurrentMapData) == 0x000060, "Wrong size on GymGuiPauseMenu_GetCurrentMapData");
static_assert(offsetof(GymGuiPauseMenu_GetCurrentMapData, ReturnValue) == 0x000000, "Member 'GymGuiPauseMenu_GetCurrentMapData::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiPauseMenu.GetPlaylistName
// 0x0010 (0x0010 - 0x0000)
struct GymGuiPauseMenu_GetPlaylistName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiPauseMenu_GetPlaylistName) == 0x000008, "Wrong alignment on GymGuiPauseMenu_GetPlaylistName");
static_assert(sizeof(GymGuiPauseMenu_GetPlaylistName) == 0x000010, "Wrong size on GymGuiPauseMenu_GetPlaylistName");
static_assert(offsetof(GymGuiPauseMenu_GetPlaylistName, ReturnValue) == 0x000000, "Member 'GymGuiPauseMenu_GetPlaylistName::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiPauseMenu.IsLobbyOwner
// 0x0001 (0x0001 - 0x0000)
struct GymGuiPauseMenu_IsLobbyOwner final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiPauseMenu_IsLobbyOwner) == 0x000001, "Wrong alignment on GymGuiPauseMenu_IsLobbyOwner");
static_assert(sizeof(GymGuiPauseMenu_IsLobbyOwner) == 0x000001, "Wrong size on GymGuiPauseMenu_IsLobbyOwner");
static_assert(offsetof(GymGuiPauseMenu_IsLobbyOwner, ReturnValue) == 0x000000, "Member 'GymGuiPauseMenu_IsLobbyOwner::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiPauseMenu.IsValidLevel
// 0x0068 (0x0068 - 0x0000)
struct GymGuiPauseMenu_IsValidLevel final
{
public:
	struct FCustomLevelFileInfo                   LevelInfo;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymGuiPauseMenu_IsValidLevel) == 0x000008, "Wrong alignment on GymGuiPauseMenu_IsValidLevel");
static_assert(sizeof(GymGuiPauseMenu_IsValidLevel) == 0x000068, "Wrong size on GymGuiPauseMenu_IsValidLevel");
static_assert(offsetof(GymGuiPauseMenu_IsValidLevel, LevelInfo) == 0x000000, "Member 'GymGuiPauseMenu_IsValidLevel::LevelInfo' has a wrong offset!");
static_assert(offsetof(GymGuiPauseMenu_IsValidLevel, ReturnValue) == 0x000060, "Member 'GymGuiPauseMenu_IsValidLevel::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiPauseMenu.UpdateLevelInfo
// 0x0060 (0x0060 - 0x0000)
struct GymGuiPauseMenu_UpdateLevelInfo final
{
public:
	struct FCustomLevelFileInfo                   LevelInfo;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiPauseMenu_UpdateLevelInfo) == 0x000008, "Wrong alignment on GymGuiPauseMenu_UpdateLevelInfo");
static_assert(sizeof(GymGuiPauseMenu_UpdateLevelInfo) == 0x000060, "Wrong size on GymGuiPauseMenu_UpdateLevelInfo");
static_assert(offsetof(GymGuiPauseMenu_UpdateLevelInfo, LevelInfo) == 0x000000, "Member 'GymGuiPauseMenu_UpdateLevelInfo::LevelInfo' has a wrong offset!");

// Function GYMGAME.GymGuiPauseMenu.UpdateServerInfo
// 0x0158 (0x0158 - 0x0000)
struct GymGuiPauseMenu_UpdateServerInfo final
{
public:
	struct FGymServerInfo                         ServerInfo;                                        // 0x0000(0x0158)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiPauseMenu_UpdateServerInfo) == 0x000008, "Wrong alignment on GymGuiPauseMenu_UpdateServerInfo");
static_assert(sizeof(GymGuiPauseMenu_UpdateServerInfo) == 0x000158, "Wrong size on GymGuiPauseMenu_UpdateServerInfo");
static_assert(offsetof(GymGuiPauseMenu_UpdateServerInfo, ServerInfo) == 0x000000, "Member 'GymGuiPauseMenu_UpdateServerInfo::ServerInfo' has a wrong offset!");

// Function GYMGAME.GymGuiPauseMenu.IsCareer
// 0x0001 (0x0001 - 0x0000)
struct GymGuiPauseMenu_IsCareer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiPauseMenu_IsCareer) == 0x000001, "Wrong alignment on GymGuiPauseMenu_IsCareer");
static_assert(sizeof(GymGuiPauseMenu_IsCareer) == 0x000001, "Wrong size on GymGuiPauseMenu_IsCareer");
static_assert(offsetof(GymGuiPauseMenu_IsCareer, ReturnValue) == 0x000000, "Member 'GymGuiPauseMenu_IsCareer::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiPauseMenu.IsCareerRace
// 0x0001 (0x0001 - 0x0000)
struct GymGuiPauseMenu_IsCareerRace final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiPauseMenu_IsCareerRace) == 0x000001, "Wrong alignment on GymGuiPauseMenu_IsCareerRace");
static_assert(sizeof(GymGuiPauseMenu_IsCareerRace) == 0x000001, "Wrong size on GymGuiPauseMenu_IsCareerRace");
static_assert(offsetof(GymGuiPauseMenu_IsCareerRace, ReturnValue) == 0x000000, "Member 'GymGuiPauseMenu_IsCareerRace::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiPauseMenu.IsGoalMap
// 0x0001 (0x0001 - 0x0000)
struct GymGuiPauseMenu_IsGoalMap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiPauseMenu_IsGoalMap) == 0x000001, "Wrong alignment on GymGuiPauseMenu_IsGoalMap");
static_assert(sizeof(GymGuiPauseMenu_IsGoalMap) == 0x000001, "Wrong size on GymGuiPauseMenu_IsGoalMap");
static_assert(offsetof(GymGuiPauseMenu_IsGoalMap, ReturnValue) == 0x000000, "Member 'GymGuiPauseMenu_IsGoalMap::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiPauseMenu.IsMapOwner
// 0x0001 (0x0001 - 0x0000)
struct GymGuiPauseMenu_IsMapOwner final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiPauseMenu_IsMapOwner) == 0x000001, "Wrong alignment on GymGuiPauseMenu_IsMapOwner");
static_assert(sizeof(GymGuiPauseMenu_IsMapOwner) == 0x000001, "Wrong size on GymGuiPauseMenu_IsMapOwner");
static_assert(offsetof(GymGuiPauseMenu_IsMapOwner, ReturnValue) == 0x000000, "Member 'GymGuiPauseMenu_IsMapOwner::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiPauseMenu.IsQuickplay
// 0x0001 (0x0001 - 0x0000)
struct GymGuiPauseMenu_IsQuickplay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiPauseMenu_IsQuickplay) == 0x000001, "Wrong alignment on GymGuiPauseMenu_IsQuickplay");
static_assert(sizeof(GymGuiPauseMenu_IsQuickplay) == 0x000001, "Wrong size on GymGuiPauseMenu_IsQuickplay");
static_assert(offsetof(GymGuiPauseMenu_IsQuickplay, ReturnValue) == 0x000000, "Member 'GymGuiPauseMenu_IsQuickplay::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiPlayerIdentityNameplate.BP_UpdatePlayerIdentityInfo
// 0x0008 (0x0008 - 0x0000)
struct GymGuiPlayerIdentityNameplate_BP_UpdatePlayerIdentityInfo final
{
public:
	class AGymCharacter*                          OtherPlayer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiPlayerIdentityNameplate_BP_UpdatePlayerIdentityInfo) == 0x000008, "Wrong alignment on GymGuiPlayerIdentityNameplate_BP_UpdatePlayerIdentityInfo");
static_assert(sizeof(GymGuiPlayerIdentityNameplate_BP_UpdatePlayerIdentityInfo) == 0x000008, "Wrong size on GymGuiPlayerIdentityNameplate_BP_UpdatePlayerIdentityInfo");
static_assert(offsetof(GymGuiPlayerIdentityNameplate_BP_UpdatePlayerIdentityInfo, OtherPlayer) == 0x000000, "Member 'GymGuiPlayerIdentityNameplate_BP_UpdatePlayerIdentityInfo::OtherPlayer' has a wrong offset!");

// Function GYMGAME.GymGuiPlayMenuWidget.IsInHostedGame
// 0x0001 (0x0001 - 0x0000)
struct GymGuiPlayMenuWidget_IsInHostedGame final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiPlayMenuWidget_IsInHostedGame) == 0x000001, "Wrong alignment on GymGuiPlayMenuWidget_IsInHostedGame");
static_assert(sizeof(GymGuiPlayMenuWidget_IsInHostedGame) == 0x000001, "Wrong size on GymGuiPlayMenuWidget_IsInHostedGame");
static_assert(offsetof(GymGuiPlayMenuWidget_IsInHostedGame, ReturnValue) == 0x000000, "Member 'GymGuiPlayMenuWidget_IsInHostedGame::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiPlayMenuWidget.ShouldShowMapOwnerOptions
// 0x0001 (0x0001 - 0x0000)
struct GymGuiPlayMenuWidget_ShouldShowMapOwnerOptions final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiPlayMenuWidget_ShouldShowMapOwnerOptions) == 0x000001, "Wrong alignment on GymGuiPlayMenuWidget_ShouldShowMapOwnerOptions");
static_assert(sizeof(GymGuiPlayMenuWidget_ShouldShowMapOwnerOptions) == 0x000001, "Wrong size on GymGuiPlayMenuWidget_ShouldShowMapOwnerOptions");
static_assert(offsetof(GymGuiPlayMenuWidget_ShouldShowMapOwnerOptions, ReturnValue) == 0x000000, "Member 'GymGuiPlayMenuWidget_ShouldShowMapOwnerOptions::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiRewardNotificationWidget.ShowRewards
// 0x0010 (0x0010 - 0x0000)
struct GymGuiRewardNotificationWidget_ShowRewards final
{
public:
	TArray<struct FGymRewardNotification>         RewardNotifications;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiRewardNotificationWidget_ShowRewards) == 0x000008, "Wrong alignment on GymGuiRewardNotificationWidget_ShowRewards");
static_assert(sizeof(GymGuiRewardNotificationWidget_ShowRewards) == 0x000010, "Wrong size on GymGuiRewardNotificationWidget_ShowRewards");
static_assert(offsetof(GymGuiRewardNotificationWidget_ShowRewards, RewardNotifications) == 0x000000, "Member 'GymGuiRewardNotificationWidget_ShowRewards::RewardNotifications' has a wrong offset!");

// Function GYMGAME.GymGuiRuleStateWidgetCareer.ShowBombUI
// 0x0001 (0x0001 - 0x0000)
struct GymGuiRuleStateWidgetCareer_ShowBombUI final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiRuleStateWidgetCareer_ShowBombUI) == 0x000001, "Wrong alignment on GymGuiRuleStateWidgetCareer_ShowBombUI");
static_assert(sizeof(GymGuiRuleStateWidgetCareer_ShowBombUI) == 0x000001, "Wrong size on GymGuiRuleStateWidgetCareer_ShowBombUI");
static_assert(offsetof(GymGuiRuleStateWidgetCareer_ShowBombUI, bShow) == 0x000000, "Member 'GymGuiRuleStateWidgetCareer_ShowBombUI::bShow' has a wrong offset!");

// Function GYMGAME.GymGuiRuleStateWidgetCareer.ShowSpray
// 0x0001 (0x0001 - 0x0000)
struct GymGuiRuleStateWidgetCareer_ShowSpray final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiRuleStateWidgetCareer_ShowSpray) == 0x000001, "Wrong alignment on GymGuiRuleStateWidgetCareer_ShowSpray");
static_assert(sizeof(GymGuiRuleStateWidgetCareer_ShowSpray) == 0x000001, "Wrong size on GymGuiRuleStateWidgetCareer_ShowSpray");
static_assert(offsetof(GymGuiRuleStateWidgetCareer_ShowSpray, bShow) == 0x000000, "Member 'GymGuiRuleStateWidgetCareer_ShowSpray::bShow' has a wrong offset!");

// Function GYMGAME.GymGuiRuleStateWidgetLoot.OnLootCollected
// 0x0008 (0x0008 - 0x0000)
struct GymGuiRuleStateWidgetLoot_OnLootCollected final
{
public:
	int32                                         Collected;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootLeft;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiRuleStateWidgetLoot_OnLootCollected) == 0x000004, "Wrong alignment on GymGuiRuleStateWidgetLoot_OnLootCollected");
static_assert(sizeof(GymGuiRuleStateWidgetLoot_OnLootCollected) == 0x000008, "Wrong size on GymGuiRuleStateWidgetLoot_OnLootCollected");
static_assert(offsetof(GymGuiRuleStateWidgetLoot_OnLootCollected, Collected) == 0x000000, "Member 'GymGuiRuleStateWidgetLoot_OnLootCollected::Collected' has a wrong offset!");
static_assert(offsetof(GymGuiRuleStateWidgetLoot_OnLootCollected, LootLeft) == 0x000004, "Member 'GymGuiRuleStateWidgetLoot_OnLootCollected::LootLeft' has a wrong offset!");

// Function GYMGAME.GymGuiRuleStateWidgetLoot.GetParticipantData
// 0x0008 (0x0008 - 0x0000)
struct GymGuiRuleStateWidgetLoot_GetParticipantData final
{
public:
	class UGymParticipantRepDataLoot*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiRuleStateWidgetLoot_GetParticipantData) == 0x000008, "Wrong alignment on GymGuiRuleStateWidgetLoot_GetParticipantData");
static_assert(sizeof(GymGuiRuleStateWidgetLoot_GetParticipantData) == 0x000008, "Wrong size on GymGuiRuleStateWidgetLoot_GetParticipantData");
static_assert(offsetof(GymGuiRuleStateWidgetLoot_GetParticipantData, ReturnValue) == 0x000000, "Member 'GymGuiRuleStateWidgetLoot_GetParticipantData::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiRuleStateWidgetLoot.GetRuleData
// 0x0008 (0x0008 - 0x0000)
struct GymGuiRuleStateWidgetLoot_GetRuleData final
{
public:
	class UGymLootReplicatedData*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiRuleStateWidgetLoot_GetRuleData) == 0x000008, "Wrong alignment on GymGuiRuleStateWidgetLoot_GetRuleData");
static_assert(sizeof(GymGuiRuleStateWidgetLoot_GetRuleData) == 0x000008, "Wrong size on GymGuiRuleStateWidgetLoot_GetRuleData");
static_assert(offsetof(GymGuiRuleStateWidgetLoot_GetRuleData, ReturnValue) == 0x000000, "Member 'GymGuiRuleStateWidgetLoot_GetRuleData::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiRuleStateWidgetSprint.GetParticipantData
// 0x0008 (0x0008 - 0x0000)
struct GymGuiRuleStateWidgetSprint_GetParticipantData final
{
public:
	class UGymParticipantRepDataSprint*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiRuleStateWidgetSprint_GetParticipantData) == 0x000008, "Wrong alignment on GymGuiRuleStateWidgetSprint_GetParticipantData");
static_assert(sizeof(GymGuiRuleStateWidgetSprint_GetParticipantData) == 0x000008, "Wrong size on GymGuiRuleStateWidgetSprint_GetParticipantData");
static_assert(offsetof(GymGuiRuleStateWidgetSprint_GetParticipantData, ReturnValue) == 0x000000, "Member 'GymGuiRuleStateWidgetSprint_GetParticipantData::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiRuleStateWidgetSprint.GetRuleData
// 0x0008 (0x0008 - 0x0000)
struct GymGuiRuleStateWidgetSprint_GetRuleData final
{
public:
	class UGymRuleReplicatedData*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiRuleStateWidgetSprint_GetRuleData) == 0x000008, "Wrong alignment on GymGuiRuleStateWidgetSprint_GetRuleData");
static_assert(sizeof(GymGuiRuleStateWidgetSprint_GetRuleData) == 0x000008, "Wrong size on GymGuiRuleStateWidgetSprint_GetRuleData");
static_assert(offsetof(GymGuiRuleStateWidgetSprint_GetRuleData, ReturnValue) == 0x000000, "Member 'GymGuiRuleStateWidgetSprint_GetRuleData::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiScoreboardEntryWidget.SetInfo
// 0x0008 (0x0008 - 0x0000)
struct GymGuiScoreboardEntryWidget_SetInfo final
{
public:
	class AGymPlayerState*                        Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiScoreboardEntryWidget_SetInfo) == 0x000008, "Wrong alignment on GymGuiScoreboardEntryWidget_SetInfo");
static_assert(sizeof(GymGuiScoreboardEntryWidget_SetInfo) == 0x000008, "Wrong size on GymGuiScoreboardEntryWidget_SetInfo");
static_assert(offsetof(GymGuiScoreboardEntryWidget_SetInfo, Player) == 0x000000, "Member 'GymGuiScoreboardEntryWidget_SetInfo::Player' has a wrong offset!");

// Function GYMGAME.GymGuiSettingsWidget.BPSetScrollBoxAutoScroll
// 0x0001 (0x0001 - 0x0000)
struct GymGuiSettingsWidget_BPSetScrollBoxAutoScroll final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiSettingsWidget_BPSetScrollBoxAutoScroll) == 0x000001, "Wrong alignment on GymGuiSettingsWidget_BPSetScrollBoxAutoScroll");
static_assert(sizeof(GymGuiSettingsWidget_BPSetScrollBoxAutoScroll) == 0x000001, "Wrong size on GymGuiSettingsWidget_BPSetScrollBoxAutoScroll");
static_assert(offsetof(GymGuiSettingsWidget_BPSetScrollBoxAutoScroll, Value) == 0x000000, "Member 'GymGuiSettingsWidget_BPSetScrollBoxAutoScroll::Value' has a wrong offset!");

// Function GYMGAME.GymGuiSettingsWidget.IsCareer
// 0x0001 (0x0001 - 0x0000)
struct GymGuiSettingsWidget_IsCareer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiSettingsWidget_IsCareer) == 0x000001, "Wrong alignment on GymGuiSettingsWidget_IsCareer");
static_assert(sizeof(GymGuiSettingsWidget_IsCareer) == 0x000001, "Wrong size on GymGuiSettingsWidget_IsCareer");
static_assert(offsetof(GymGuiSettingsWidget_IsCareer, ReturnValue) == 0x000000, "Member 'GymGuiSettingsWidget_IsCareer::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiSettingsWidget.IsCareerRace
// 0x0001 (0x0001 - 0x0000)
struct GymGuiSettingsWidget_IsCareerRace final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiSettingsWidget_IsCareerRace) == 0x000001, "Wrong alignment on GymGuiSettingsWidget_IsCareerRace");
static_assert(sizeof(GymGuiSettingsWidget_IsCareerRace) == 0x000001, "Wrong size on GymGuiSettingsWidget_IsCareerRace");
static_assert(offsetof(GymGuiSettingsWidget_IsCareerRace, ReturnValue) == 0x000000, "Member 'GymGuiSettingsWidget_IsCareerRace::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiSettingsWidget.IsGoalMap
// 0x0001 (0x0001 - 0x0000)
struct GymGuiSettingsWidget_IsGoalMap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiSettingsWidget_IsGoalMap) == 0x000001, "Wrong alignment on GymGuiSettingsWidget_IsGoalMap");
static_assert(sizeof(GymGuiSettingsWidget_IsGoalMap) == 0x000001, "Wrong size on GymGuiSettingsWidget_IsGoalMap");
static_assert(offsetof(GymGuiSettingsWidget_IsGoalMap, ReturnValue) == 0x000000, "Member 'GymGuiSettingsWidget_IsGoalMap::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiSpectatorRuleWidgetBomb.GetBombTimer
// 0x0004 (0x0004 - 0x0000)
struct GymGuiSpectatorRuleWidgetBomb_GetBombTimer final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiSpectatorRuleWidgetBomb_GetBombTimer) == 0x000004, "Wrong alignment on GymGuiSpectatorRuleWidgetBomb_GetBombTimer");
static_assert(sizeof(GymGuiSpectatorRuleWidgetBomb_GetBombTimer) == 0x000004, "Wrong size on GymGuiSpectatorRuleWidgetBomb_GetBombTimer");
static_assert(offsetof(GymGuiSpectatorRuleWidgetBomb_GetBombTimer, ReturnValue) == 0x000000, "Member 'GymGuiSpectatorRuleWidgetBomb_GetBombTimer::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiSpectatorRuleWidgetBomb.GetIsBombTicking
// 0x0001 (0x0001 - 0x0000)
struct GymGuiSpectatorRuleWidgetBomb_GetIsBombTicking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiSpectatorRuleWidgetBomb_GetIsBombTicking) == 0x000001, "Wrong alignment on GymGuiSpectatorRuleWidgetBomb_GetIsBombTicking");
static_assert(sizeof(GymGuiSpectatorRuleWidgetBomb_GetIsBombTicking) == 0x000001, "Wrong size on GymGuiSpectatorRuleWidgetBomb_GetIsBombTicking");
static_assert(offsetof(GymGuiSpectatorRuleWidgetBomb_GetIsBombTicking, ReturnValue) == 0x000000, "Member 'GymGuiSpectatorRuleWidgetBomb_GetIsBombTicking::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiSpectatorRuleWidgetBomb.GetRoundStartTime
// 0x0004 (0x0004 - 0x0000)
struct GymGuiSpectatorRuleWidgetBomb_GetRoundStartTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiSpectatorRuleWidgetBomb_GetRoundStartTime) == 0x000004, "Wrong alignment on GymGuiSpectatorRuleWidgetBomb_GetRoundStartTime");
static_assert(sizeof(GymGuiSpectatorRuleWidgetBomb_GetRoundStartTime) == 0x000004, "Wrong size on GymGuiSpectatorRuleWidgetBomb_GetRoundStartTime");
static_assert(offsetof(GymGuiSpectatorRuleWidgetBomb_GetRoundStartTime, ReturnValue) == 0x000000, "Member 'GymGuiSpectatorRuleWidgetBomb_GetRoundStartTime::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiSpectatorRuleWidgetBomb.GetRuleData
// 0x0008 (0x0008 - 0x0000)
struct GymGuiSpectatorRuleWidgetBomb_GetRuleData final
{
public:
	class UGymBombModeReplicatedData*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiSpectatorRuleWidgetBomb_GetRuleData) == 0x000008, "Wrong alignment on GymGuiSpectatorRuleWidgetBomb_GetRuleData");
static_assert(sizeof(GymGuiSpectatorRuleWidgetBomb_GetRuleData) == 0x000008, "Wrong size on GymGuiSpectatorRuleWidgetBomb_GetRuleData");
static_assert(offsetof(GymGuiSpectatorRuleWidgetBomb_GetRuleData, ReturnValue) == 0x000000, "Member 'GymGuiSpectatorRuleWidgetBomb_GetRuleData::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiSpectatorRuleWidgetBomb.GetParticipantData
// 0x0008 (0x0008 - 0x0000)
struct GymGuiSpectatorRuleWidgetBomb_GetParticipantData final
{
public:
	class UGymParticipantRepDataBomb*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiSpectatorRuleWidgetBomb_GetParticipantData) == 0x000008, "Wrong alignment on GymGuiSpectatorRuleWidgetBomb_GetParticipantData");
static_assert(sizeof(GymGuiSpectatorRuleWidgetBomb_GetParticipantData) == 0x000008, "Wrong size on GymGuiSpectatorRuleWidgetBomb_GetParticipantData");
static_assert(offsetof(GymGuiSpectatorRuleWidgetBomb_GetParticipantData, ReturnValue) == 0x000000, "Member 'GymGuiSpectatorRuleWidgetBomb_GetParticipantData::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiSpectatorRuleWidgetCircuit.GetRuleData
// 0x0008 (0x0008 - 0x0000)
struct GymGuiSpectatorRuleWidgetCircuit_GetRuleData final
{
public:
	class UGymCircuitReplicatedData*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiSpectatorRuleWidgetCircuit_GetRuleData) == 0x000008, "Wrong alignment on GymGuiSpectatorRuleWidgetCircuit_GetRuleData");
static_assert(sizeof(GymGuiSpectatorRuleWidgetCircuit_GetRuleData) == 0x000008, "Wrong size on GymGuiSpectatorRuleWidgetCircuit_GetRuleData");
static_assert(offsetof(GymGuiSpectatorRuleWidgetCircuit_GetRuleData, ReturnValue) == 0x000000, "Member 'GymGuiSpectatorRuleWidgetCircuit_GetRuleData::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiSpectatorRuleWidgetCircuit.GetParticipantData
// 0x0008 (0x0008 - 0x0000)
struct GymGuiSpectatorRuleWidgetCircuit_GetParticipantData final
{
public:
	class UGymParticipantRepDataCircuit*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiSpectatorRuleWidgetCircuit_GetParticipantData) == 0x000008, "Wrong alignment on GymGuiSpectatorRuleWidgetCircuit_GetParticipantData");
static_assert(sizeof(GymGuiSpectatorRuleWidgetCircuit_GetParticipantData) == 0x000008, "Wrong size on GymGuiSpectatorRuleWidgetCircuit_GetParticipantData");
static_assert(offsetof(GymGuiSpectatorRuleWidgetCircuit_GetParticipantData, ReturnValue) == 0x000000, "Member 'GymGuiSpectatorRuleWidgetCircuit_GetParticipantData::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiSpectatorRuleWidgetObstacle.OnLocationsSaved
// 0x0004 (0x0004 - 0x0000)
struct GymGuiSpectatorRuleWidgetObstacle_OnLocationsSaved final
{
public:
	int32                                         LocationsSaved;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiSpectatorRuleWidgetObstacle_OnLocationsSaved) == 0x000004, "Wrong alignment on GymGuiSpectatorRuleWidgetObstacle_OnLocationsSaved");
static_assert(sizeof(GymGuiSpectatorRuleWidgetObstacle_OnLocationsSaved) == 0x000004, "Wrong size on GymGuiSpectatorRuleWidgetObstacle_OnLocationsSaved");
static_assert(offsetof(GymGuiSpectatorRuleWidgetObstacle_OnLocationsSaved, LocationsSaved) == 0x000000, "Member 'GymGuiSpectatorRuleWidgetObstacle_OnLocationsSaved::LocationsSaved' has a wrong offset!");

// Function GYMGAME.GymGuiSpectatorRuleWidgetObstacle.GetParticipantData
// 0x0008 (0x0008 - 0x0000)
struct GymGuiSpectatorRuleWidgetObstacle_GetParticipantData final
{
public:
	class UGymParticipantRepDataObby*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiSpectatorRuleWidgetObstacle_GetParticipantData) == 0x000008, "Wrong alignment on GymGuiSpectatorRuleWidgetObstacle_GetParticipantData");
static_assert(sizeof(GymGuiSpectatorRuleWidgetObstacle_GetParticipantData) == 0x000008, "Wrong size on GymGuiSpectatorRuleWidgetObstacle_GetParticipantData");
static_assert(offsetof(GymGuiSpectatorRuleWidgetObstacle_GetParticipantData, ReturnValue) == 0x000000, "Member 'GymGuiSpectatorRuleWidgetObstacle_GetParticipantData::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiSpectatorRuleWidgetObstacle.GetRuleData
// 0x0008 (0x0008 - 0x0000)
struct GymGuiSpectatorRuleWidgetObstacle_GetRuleData final
{
public:
	class UGymOCReplicatedData*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiSpectatorRuleWidgetObstacle_GetRuleData) == 0x000008, "Wrong alignment on GymGuiSpectatorRuleWidgetObstacle_GetRuleData");
static_assert(sizeof(GymGuiSpectatorRuleWidgetObstacle_GetRuleData) == 0x000008, "Wrong size on GymGuiSpectatorRuleWidgetObstacle_GetRuleData");
static_assert(offsetof(GymGuiSpectatorRuleWidgetObstacle_GetRuleData, ReturnValue) == 0x000000, "Member 'GymGuiSpectatorRuleWidgetObstacle_GetRuleData::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiSpectatorRuleWidgetSprint.GetParticipantData
// 0x0008 (0x0008 - 0x0000)
struct GymGuiSpectatorRuleWidgetSprint_GetParticipantData final
{
public:
	class UGymParticipantRepData*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiSpectatorRuleWidgetSprint_GetParticipantData) == 0x000008, "Wrong alignment on GymGuiSpectatorRuleWidgetSprint_GetParticipantData");
static_assert(sizeof(GymGuiSpectatorRuleWidgetSprint_GetParticipantData) == 0x000008, "Wrong size on GymGuiSpectatorRuleWidgetSprint_GetParticipantData");
static_assert(offsetof(GymGuiSpectatorRuleWidgetSprint_GetParticipantData, ReturnValue) == 0x000000, "Member 'GymGuiSpectatorRuleWidgetSprint_GetParticipantData::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiSpectatorRuleWidgetSprint.GetRuleData
// 0x0008 (0x0008 - 0x0000)
struct GymGuiSpectatorRuleWidgetSprint_GetRuleData final
{
public:
	class UGymRuleReplicatedData*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiSpectatorRuleWidgetSprint_GetRuleData) == 0x000008, "Wrong alignment on GymGuiSpectatorRuleWidgetSprint_GetRuleData");
static_assert(sizeof(GymGuiSpectatorRuleWidgetSprint_GetRuleData) == 0x000008, "Wrong size on GymGuiSpectatorRuleWidgetSprint_GetRuleData");
static_assert(offsetof(GymGuiSpectatorRuleWidgetSprint_GetRuleData, ReturnValue) == 0x000000, "Member 'GymGuiSpectatorRuleWidgetSprint_GetRuleData::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiSpectatorRuleWidgetTide.GetParticipantData
// 0x0008 (0x0008 - 0x0000)
struct GymGuiSpectatorRuleWidgetTide_GetParticipantData final
{
public:
	class UGymParticipantRepData*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiSpectatorRuleWidgetTide_GetParticipantData) == 0x000008, "Wrong alignment on GymGuiSpectatorRuleWidgetTide_GetParticipantData");
static_assert(sizeof(GymGuiSpectatorRuleWidgetTide_GetParticipantData) == 0x000008, "Wrong size on GymGuiSpectatorRuleWidgetTide_GetParticipantData");
static_assert(offsetof(GymGuiSpectatorRuleWidgetTide_GetParticipantData, ReturnValue) == 0x000000, "Member 'GymGuiSpectatorRuleWidgetTide_GetParticipantData::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiSpectatorRuleWidgetTide.GetRuleData
// 0x0008 (0x0008 - 0x0000)
struct GymGuiSpectatorRuleWidgetTide_GetRuleData final
{
public:
	class UGymRuleReplicatedData*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiSpectatorRuleWidgetTide_GetRuleData) == 0x000008, "Wrong alignment on GymGuiSpectatorRuleWidgetTide_GetRuleData");
static_assert(sizeof(GymGuiSpectatorRuleWidgetTide_GetRuleData) == 0x000008, "Wrong size on GymGuiSpectatorRuleWidgetTide_GetRuleData");
static_assert(offsetof(GymGuiSpectatorRuleWidgetTide_GetRuleData, ReturnValue) == 0x000000, "Member 'GymGuiSpectatorRuleWidgetTide_GetRuleData::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymGuiTickerMetaWidget.AddCustomMessage
// 0x0010 (0x0010 - 0x0000)
struct GymGuiTickerMetaWidget_AddCustomMessage final
{
public:
	TSubclassOf<class UGymGuiTickerMessageWidget> TickerWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETickerPosition                               Position;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymGuiTickerMetaWidget_AddCustomMessage) == 0x000008, "Wrong alignment on GymGuiTickerMetaWidget_AddCustomMessage");
static_assert(sizeof(GymGuiTickerMetaWidget_AddCustomMessage) == 0x000010, "Wrong size on GymGuiTickerMetaWidget_AddCustomMessage");
static_assert(offsetof(GymGuiTickerMetaWidget_AddCustomMessage, TickerWidget) == 0x000000, "Member 'GymGuiTickerMetaWidget_AddCustomMessage::TickerWidget' has a wrong offset!");
static_assert(offsetof(GymGuiTickerMetaWidget_AddCustomMessage, Position) == 0x000008, "Member 'GymGuiTickerMetaWidget_AddCustomMessage::Position' has a wrong offset!");

// Function GYMGAME.GymGuiTickerMetaWidget.AddMessage
// 0x0058 (0x0058 - 0x0000)
struct GymGuiTickerMetaWidget_AddMessage final
{
public:
	struct FTickerSettingsStruct                  Settings;                                          // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiTickerMetaWidget_AddMessage) == 0x000008, "Wrong alignment on GymGuiTickerMetaWidget_AddMessage");
static_assert(sizeof(GymGuiTickerMetaWidget_AddMessage) == 0x000058, "Wrong size on GymGuiTickerMetaWidget_AddMessage");
static_assert(offsetof(GymGuiTickerMetaWidget_AddMessage, Settings) == 0x000000, "Member 'GymGuiTickerMetaWidget_AddMessage::Settings' has a wrong offset!");

// Function GYMGAME.GymGuiTickerMetaWidget.RemoveMessage
// 0x0008 (0x0008 - 0x0000)
struct GymGuiTickerMetaWidget_RemoveMessage final
{
public:
	class FName                                   MessageId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymGuiTickerMetaWidget_RemoveMessage) == 0x000004, "Wrong alignment on GymGuiTickerMetaWidget_RemoveMessage");
static_assert(sizeof(GymGuiTickerMetaWidget_RemoveMessage) == 0x000008, "Wrong size on GymGuiTickerMetaWidget_RemoveMessage");
static_assert(offsetof(GymGuiTickerMetaWidget_RemoveMessage, MessageId) == 0x000000, "Member 'GymGuiTickerMetaWidget_RemoveMessage::MessageId' has a wrong offset!");

// Function GYMGAME.GymInputControl.GetInputRecorder
// 0x0008 (0x0008 - 0x0000)
struct GymInputControl_GetInputRecorder final
{
public:
	class UGymInputRecorder*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymInputControl_GetInputRecorder) == 0x000008, "Wrong alignment on GymInputControl_GetInputRecorder");
static_assert(sizeof(GymInputControl_GetInputRecorder) == 0x000008, "Wrong size on GymInputControl_GetInputRecorder");
static_assert(offsetof(GymInputControl_GetInputRecorder, ReturnValue) == 0x000000, "Member 'GymInputControl_GetInputRecorder::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymInteractionControl.Client_Interact
// 0x0010 (0x0010 - 0x0000)
struct GymInteractionControl_Client_Interact final
{
public:
	class AActor*                                 ActorToInteract;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    ComponentToInteract;                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymInteractionControl_Client_Interact) == 0x000008, "Wrong alignment on GymInteractionControl_Client_Interact");
static_assert(sizeof(GymInteractionControl_Client_Interact) == 0x000010, "Wrong size on GymInteractionControl_Client_Interact");
static_assert(offsetof(GymInteractionControl_Client_Interact, ActorToInteract) == 0x000000, "Member 'GymInteractionControl_Client_Interact::ActorToInteract' has a wrong offset!");
static_assert(offsetof(GymInteractionControl_Client_Interact, ComponentToInteract) == 0x000008, "Member 'GymInteractionControl_Client_Interact::ComponentToInteract' has a wrong offset!");

// Function GYMGAME.GymInteractionControl.OnOverlapBegin
// 0x0108 (0x0108 - 0x0000)
struct GymInteractionControl_OnOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymInteractionControl_OnOverlapBegin) == 0x000008, "Wrong alignment on GymInteractionControl_OnOverlapBegin");
static_assert(sizeof(GymInteractionControl_OnOverlapBegin) == 0x000108, "Wrong size on GymInteractionControl_OnOverlapBegin");
static_assert(offsetof(GymInteractionControl_OnOverlapBegin, OverlappedComponent) == 0x000000, "Member 'GymInteractionControl_OnOverlapBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(GymInteractionControl_OnOverlapBegin, OtherActor) == 0x000008, "Member 'GymInteractionControl_OnOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(GymInteractionControl_OnOverlapBegin, OtherComp) == 0x000010, "Member 'GymInteractionControl_OnOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(GymInteractionControl_OnOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'GymInteractionControl_OnOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(GymInteractionControl_OnOverlapBegin, bFromSweep) == 0x00001C, "Member 'GymInteractionControl_OnOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(GymInteractionControl_OnOverlapBegin, SweepResult) == 0x000020, "Member 'GymInteractionControl_OnOverlapBegin::SweepResult' has a wrong offset!");

// Function GYMGAME.GymInteractionControl.OnOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct GymInteractionControl_OnOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymInteractionControl_OnOverlapEnd) == 0x000008, "Wrong alignment on GymInteractionControl_OnOverlapEnd");
static_assert(sizeof(GymInteractionControl_OnOverlapEnd) == 0x000020, "Wrong size on GymInteractionControl_OnOverlapEnd");
static_assert(offsetof(GymInteractionControl_OnOverlapEnd, OverlappedComp) == 0x000000, "Member 'GymInteractionControl_OnOverlapEnd::OverlappedComp' has a wrong offset!");
static_assert(offsetof(GymInteractionControl_OnOverlapEnd, OtherActor) == 0x000008, "Member 'GymInteractionControl_OnOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(GymInteractionControl_OnOverlapEnd, OtherComp) == 0x000010, "Member 'GymInteractionControl_OnOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(GymInteractionControl_OnOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'GymInteractionControl_OnOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function GYMGAME.GymInteractionControl.Server_Interact
// 0x0010 (0x0010 - 0x0000)
struct GymInteractionControl_Server_Interact final
{
public:
	class AActor*                                 ActorToInteract;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    ComponentToInteract;                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymInteractionControl_Server_Interact) == 0x000008, "Wrong alignment on GymInteractionControl_Server_Interact");
static_assert(sizeof(GymInteractionControl_Server_Interact) == 0x000010, "Wrong size on GymInteractionControl_Server_Interact");
static_assert(offsetof(GymInteractionControl_Server_Interact, ActorToInteract) == 0x000000, "Member 'GymInteractionControl_Server_Interact::ActorToInteract' has a wrong offset!");
static_assert(offsetof(GymInteractionControl_Server_Interact, ComponentToInteract) == 0x000008, "Member 'GymInteractionControl_Server_Interact::ComponentToInteract' has a wrong offset!");

// Function GYMGAME.GymLoadingScreen.GetLastUsedTextureUri
// 0x0010 (0x0010 - 0x0000)
struct GymLoadingScreen_GetLastUsedTextureUri final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymLoadingScreen_GetLastUsedTextureUri) == 0x000008, "Wrong alignment on GymLoadingScreen_GetLastUsedTextureUri");
static_assert(sizeof(GymLoadingScreen_GetLastUsedTextureUri) == 0x000010, "Wrong size on GymLoadingScreen_GetLastUsedTextureUri");
static_assert(offsetof(GymLoadingScreen_GetLastUsedTextureUri, ReturnValue) == 0x000000, "Member 'GymLoadingScreen_GetLastUsedTextureUri::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymLoadingScreen.GetLastUsedTimestamp
// 0x0008 (0x0008 - 0x0000)
struct GymLoadingScreen_GetLastUsedTimestamp final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymLoadingScreen_GetLastUsedTimestamp) == 0x000008, "Wrong alignment on GymLoadingScreen_GetLastUsedTimestamp");
static_assert(sizeof(GymLoadingScreen_GetLastUsedTimestamp) == 0x000008, "Wrong size on GymLoadingScreen_GetLastUsedTimestamp");
static_assert(offsetof(GymLoadingScreen_GetLastUsedTimestamp, ReturnValue) == 0x000000, "Member 'GymLoadingScreen_GetLastUsedTimestamp::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymLoadingScreen.SetLastUsedTextureUri
// 0x0010 (0x0010 - 0x0000)
struct GymLoadingScreen_SetLastUsedTextureUri final
{
public:
	class FString                                 TextureUri;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymLoadingScreen_SetLastUsedTextureUri) == 0x000008, "Wrong alignment on GymLoadingScreen_SetLastUsedTextureUri");
static_assert(sizeof(GymLoadingScreen_SetLastUsedTextureUri) == 0x000010, "Wrong size on GymLoadingScreen_SetLastUsedTextureUri");
static_assert(offsetof(GymLoadingScreen_SetLastUsedTextureUri, TextureUri) == 0x000000, "Member 'GymLoadingScreen_SetLastUsedTextureUri::TextureUri' has a wrong offset!");

// Function GYMGAME.GymLocationObjectiveActor.OnCollided
// 0x0008 (0x0008 - 0x0000)
struct GymLocationObjectiveActor_OnCollided final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymLocationObjectiveActor_OnCollided) == 0x000008, "Wrong alignment on GymLocationObjectiveActor_OnCollided");
static_assert(sizeof(GymLocationObjectiveActor_OnCollided) == 0x000008, "Wrong size on GymLocationObjectiveActor_OnCollided");
static_assert(offsetof(GymLocationObjectiveActor_OnCollided, OtherActor) == 0x000000, "Member 'GymLocationObjectiveActor_OnCollided::OtherActor' has a wrong offset!");

// DelegateFunction GYMGAME.GymLocationObjectiveActor.OnCollided__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct GymLocationObjectiveActor_OnCollided__DelegateSignature final
{
public:
	class AGymLocationObjectiveActor*             LocationActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymLocationObjectiveActor_OnCollided__DelegateSignature) == 0x000008, "Wrong alignment on GymLocationObjectiveActor_OnCollided__DelegateSignature");
static_assert(sizeof(GymLocationObjectiveActor_OnCollided__DelegateSignature) == 0x000008, "Wrong size on GymLocationObjectiveActor_OnCollided__DelegateSignature");
static_assert(offsetof(GymLocationObjectiveActor_OnCollided__DelegateSignature, LocationActor) == 0x000000, "Member 'GymLocationObjectiveActor_OnCollided__DelegateSignature::LocationActor' has a wrong offset!");

// Function GYMGAME.GymLootReplicatedData.SetMaxLootNum
// 0x0004 (0x0004 - 0x0000)
struct GymLootReplicatedData_SetMaxLootNum final
{
public:
	int32                                         Loot;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymLootReplicatedData_SetMaxLootNum) == 0x000004, "Wrong alignment on GymLootReplicatedData_SetMaxLootNum");
static_assert(sizeof(GymLootReplicatedData_SetMaxLootNum) == 0x000004, "Wrong size on GymLootReplicatedData_SetMaxLootNum");
static_assert(offsetof(GymLootReplicatedData_SetMaxLootNum, Loot) == 0x000000, "Member 'GymLootReplicatedData_SetMaxLootNum::Loot' has a wrong offset!");

// Function GYMGAME.GymMap.GetBaseMapIndex
// 0x0004 (0x0004 - 0x0000)
struct GymMap_GetBaseMapIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMap_GetBaseMapIndex) == 0x000004, "Wrong alignment on GymMap_GetBaseMapIndex");
static_assert(sizeof(GymMap_GetBaseMapIndex) == 0x000004, "Wrong size on GymMap_GetBaseMapIndex");
static_assert(offsetof(GymMap_GetBaseMapIndex, ReturnValue) == 0x000000, "Member 'GymMap_GetBaseMapIndex::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymMap.GetLevelKit
// 0x0050 (0x0050 - 0x0000)
struct GymMap_GetLevelKit final
{
public:
	struct FGymLevelKit                           ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMap_GetLevelKit) == 0x000008, "Wrong alignment on GymMap_GetLevelKit");
static_assert(sizeof(GymMap_GetLevelKit) == 0x000050, "Wrong size on GymMap_GetLevelKit");
static_assert(offsetof(GymMap_GetLevelKit, ReturnValue) == 0x000000, "Member 'GymMap_GetLevelKit::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymMap.GetMusic
// 0x0008 (0x0008 - 0x0000)
struct GymMap_GetMusic final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMap_GetMusic) == 0x000004, "Wrong alignment on GymMap_GetMusic");
static_assert(sizeof(GymMap_GetMusic) == 0x000008, "Wrong size on GymMap_GetMusic");
static_assert(offsetof(GymMap_GetMusic, ReturnValue) == 0x000000, "Member 'GymMap_GetMusic::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymMap.GetRule
// 0x0008 (0x0008 - 0x0000)
struct GymMap_GetRule final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMap_GetRule) == 0x000004, "Wrong alignment on GymMap_GetRule");
static_assert(sizeof(GymMap_GetRule) == 0x000008, "Wrong size on GymMap_GetRule");
static_assert(offsetof(GymMap_GetRule, ReturnValue) == 0x000000, "Member 'GymMap_GetRule::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymMap.GetRuleModifierControl
// 0x0008 (0x0008 - 0x0000)
struct GymMap_GetRuleModifierControl final
{
public:
	class UGymMapRuleModifierControl*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMap_GetRuleModifierControl) == 0x000008, "Wrong alignment on GymMap_GetRuleModifierControl");
static_assert(sizeof(GymMap_GetRuleModifierControl) == 0x000008, "Wrong size on GymMap_GetRuleModifierControl");
static_assert(offsetof(GymMap_GetRuleModifierControl, ReturnValue) == 0x000000, "Member 'GymMap_GetRuleModifierControl::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymMap.GetTime
// 0x0004 (0x0004 - 0x0000)
struct GymMap_GetTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMap_GetTime) == 0x000004, "Wrong alignment on GymMap_GetTime");
static_assert(sizeof(GymMap_GetTime) == 0x000004, "Wrong size on GymMap_GetTime");
static_assert(offsetof(GymMap_GetTime, ReturnValue) == 0x000000, "Member 'GymMap_GetTime::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymMap.GetWeather
// 0x0008 (0x0008 - 0x0000)
struct GymMap_GetWeather final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMap_GetWeather) == 0x000004, "Wrong alignment on GymMap_GetWeather");
static_assert(sizeof(GymMap_GetWeather) == 0x000008, "Wrong size on GymMap_GetWeather");
static_assert(offsetof(GymMap_GetWeather, ReturnValue) == 0x000000, "Member 'GymMap_GetWeather::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymMap.GetWeatherName
// 0x0008 (0x0008 - 0x0000)
struct GymMap_GetWeatherName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMap_GetWeatherName) == 0x000004, "Wrong alignment on GymMap_GetWeatherName");
static_assert(sizeof(GymMap_GetWeatherName) == 0x000008, "Wrong size on GymMap_GetWeatherName");
static_assert(offsetof(GymMap_GetWeatherName, ReturnValue) == 0x000000, "Member 'GymMap_GetWeatherName::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymMap.HideAsset_Multicast
// 0x0008 (0x0008 - 0x0000)
struct GymMap_HideAsset_Multicast final
{
public:
	int32                                         AssetRecordId;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHidden;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymMap_HideAsset_Multicast) == 0x000004, "Wrong alignment on GymMap_HideAsset_Multicast");
static_assert(sizeof(GymMap_HideAsset_Multicast) == 0x000008, "Wrong size on GymMap_HideAsset_Multicast");
static_assert(offsetof(GymMap_HideAsset_Multicast, AssetRecordId) == 0x000000, "Member 'GymMap_HideAsset_Multicast::AssetRecordId' has a wrong offset!");
static_assert(offsetof(GymMap_HideAsset_Multicast, IsHidden) == 0x000004, "Member 'GymMap_HideAsset_Multicast::IsHidden' has a wrong offset!");

// Function GYMGAME.GymMap.SetMusic
// 0x0008 (0x0008 - 0x0000)
struct GymMap_SetMusic final
{
public:
	class FName                                   NewMusic;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMap_SetMusic) == 0x000004, "Wrong alignment on GymMap_SetMusic");
static_assert(sizeof(GymMap_SetMusic) == 0x000008, "Wrong size on GymMap_SetMusic");
static_assert(offsetof(GymMap_SetMusic, NewMusic) == 0x000000, "Member 'GymMap_SetMusic::NewMusic' has a wrong offset!");

// Function GYMGAME.GymMap.SetPreviewPhysics
// 0x0008 (0x0008 - 0x0000)
struct GymMap_SetPreviewPhysics final
{
public:
	float                                         PreviewDuration;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InfinitePhysPreview;                               // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymMap_SetPreviewPhysics) == 0x000004, "Wrong alignment on GymMap_SetPreviewPhysics");
static_assert(sizeof(GymMap_SetPreviewPhysics) == 0x000008, "Wrong size on GymMap_SetPreviewPhysics");
static_assert(offsetof(GymMap_SetPreviewPhysics, PreviewDuration) == 0x000000, "Member 'GymMap_SetPreviewPhysics::PreviewDuration' has a wrong offset!");
static_assert(offsetof(GymMap_SetPreviewPhysics, InfinitePhysPreview) == 0x000004, "Member 'GymMap_SetPreviewPhysics::InfinitePhysPreview' has a wrong offset!");

// Function GYMGAME.GymMap.SetRule
// 0x000C (0x000C - 0x0000)
struct GymMap_SetRule final
{
public:
	class FName                                   NewRule;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSwapRules;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymMap_SetRule) == 0x000004, "Wrong alignment on GymMap_SetRule");
static_assert(sizeof(GymMap_SetRule) == 0x00000C, "Wrong size on GymMap_SetRule");
static_assert(offsetof(GymMap_SetRule, NewRule) == 0x000000, "Member 'GymMap_SetRule::NewRule' has a wrong offset!");
static_assert(offsetof(GymMap_SetRule, bSwapRules) == 0x000008, "Member 'GymMap_SetRule::bSwapRules' has a wrong offset!");

// Function GYMGAME.GymMap.SetTime
// 0x0008 (0x0008 - 0x0000)
struct GymMap_SetTime final
{
public:
	float                                         NewTime;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImmediate;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymMap_SetTime) == 0x000004, "Wrong alignment on GymMap_SetTime");
static_assert(sizeof(GymMap_SetTime) == 0x000008, "Wrong size on GymMap_SetTime");
static_assert(offsetof(GymMap_SetTime, NewTime) == 0x000000, "Member 'GymMap_SetTime::NewTime' has a wrong offset!");
static_assert(offsetof(GymMap_SetTime, bImmediate) == 0x000004, "Member 'GymMap_SetTime::bImmediate' has a wrong offset!");

// Function GYMGAME.GymMap.SetVolumetric
// 0x0001 (0x0001 - 0x0000)
struct GymMap_SetVolumetric final
{
public:
	bool                                          bVolumetric;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMap_SetVolumetric) == 0x000001, "Wrong alignment on GymMap_SetVolumetric");
static_assert(sizeof(GymMap_SetVolumetric) == 0x000001, "Wrong size on GymMap_SetVolumetric");
static_assert(offsetof(GymMap_SetVolumetric, bVolumetric) == 0x000000, "Member 'GymMap_SetVolumetric::bVolumetric' has a wrong offset!");

// Function GYMGAME.GymMap.SetWeather
// 0x0008 (0x0008 - 0x0000)
struct GymMap_SetWeather final
{
public:
	class FName                                   NewWeather;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMap_SetWeather) == 0x000004, "Wrong alignment on GymMap_SetWeather");
static_assert(sizeof(GymMap_SetWeather) == 0x000008, "Wrong size on GymMap_SetWeather");
static_assert(offsetof(GymMap_SetWeather, NewWeather) == 0x000000, "Member 'GymMap_SetWeather::NewWeather' has a wrong offset!");

// Function GYMGAME.GymMap.GetEditingAllowed
// 0x0010 (0x0010 - 0x0000)
struct GymMap_GetEditingAllowed final
{
public:
	class AGymPlayerController*                   ForPlayer;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymMap_GetEditingAllowed) == 0x000008, "Wrong alignment on GymMap_GetEditingAllowed");
static_assert(sizeof(GymMap_GetEditingAllowed) == 0x000010, "Wrong size on GymMap_GetEditingAllowed");
static_assert(offsetof(GymMap_GetEditingAllowed, ForPlayer) == 0x000000, "Member 'GymMap_GetEditingAllowed::ForPlayer' has a wrong offset!");
static_assert(offsetof(GymMap_GetEditingAllowed, ReturnValue) == 0x000008, "Member 'GymMap_GetEditingAllowed::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymMap.GetLoadStatus
// 0x0001 (0x0001 - 0x0000)
struct GymMap_GetLoadStatus final
{
public:
	EGymMapLoadStatus                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMap_GetLoadStatus) == 0x000001, "Wrong alignment on GymMap_GetLoadStatus");
static_assert(sizeof(GymMap_GetLoadStatus) == 0x000001, "Wrong size on GymMap_GetLoadStatus");
static_assert(offsetof(GymMap_GetLoadStatus, ReturnValue) == 0x000000, "Member 'GymMap_GetLoadStatus::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymMap.HasBeenEdited
// 0x0001 (0x0001 - 0x0000)
struct GymMap_HasBeenEdited final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMap_HasBeenEdited) == 0x000001, "Wrong alignment on GymMap_HasBeenEdited");
static_assert(sizeof(GymMap_HasBeenEdited) == 0x000001, "Wrong size on GymMap_HasBeenEdited");
static_assert(offsetof(GymMap_HasBeenEdited, ReturnValue) == 0x000000, "Member 'GymMap_HasBeenEdited::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymMap.LastEditTimestamp
// 0x0008 (0x0008 - 0x0000)
struct GymMap_LastEditTimestamp final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMap_LastEditTimestamp) == 0x000008, "Wrong alignment on GymMap_LastEditTimestamp");
static_assert(sizeof(GymMap_LastEditTimestamp) == 0x000008, "Wrong size on GymMap_LastEditTimestamp");
static_assert(offsetof(GymMap_LastEditTimestamp, ReturnValue) == 0x000000, "Member 'GymMap_LastEditTimestamp::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymWirePlaceable.SetRotation
// 0x0018 (0x0018 - 0x0000)
struct GymWirePlaceable_SetRotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymWirePlaceable_SetRotation) == 0x000008, "Wrong alignment on GymWirePlaceable_SetRotation");
static_assert(sizeof(GymWirePlaceable_SetRotation) == 0x000018, "Wrong size on GymWirePlaceable_SetRotation");
static_assert(offsetof(GymWirePlaceable_SetRotation, Rotation) == 0x000000, "Member 'GymWirePlaceable_SetRotation::Rotation' has a wrong offset!");

// Function GYMGAME.GymMapBuilderControl.RemoveStaticAsset
// 0x0008 (0x0008 - 0x0000)
struct GymMapBuilderControl_RemoveStaticAsset final
{
public:
	class AGymStaticLevelAsset*                   Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMapBuilderControl_RemoveStaticAsset) == 0x000008, "Wrong alignment on GymMapBuilderControl_RemoveStaticAsset");
static_assert(sizeof(GymMapBuilderControl_RemoveStaticAsset) == 0x000008, "Wrong size on GymMapBuilderControl_RemoveStaticAsset");
static_assert(offsetof(GymMapBuilderControl_RemoveStaticAsset, Actor) == 0x000000, "Member 'GymMapBuilderControl_RemoveStaticAsset::Actor' has a wrong offset!");

// Function GYMGAME.GymMapLobbyRules.OnMapDetailsReceived
// 0x00D0 (0x00D0 - 0x0000)
struct GymMapLobbyRules_OnMapDetailsReceived final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymMapDetailsResult                   Result;                                            // 0x0008(0x00C8)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMapLobbyRules_OnMapDetailsReceived) == 0x000008, "Wrong alignment on GymMapLobbyRules_OnMapDetailsReceived");
static_assert(sizeof(GymMapLobbyRules_OnMapDetailsReceived) == 0x0000D0, "Wrong size on GymMapLobbyRules_OnMapDetailsReceived");
static_assert(offsetof(GymMapLobbyRules_OnMapDetailsReceived, bSuccess) == 0x000000, "Member 'GymMapLobbyRules_OnMapDetailsReceived::bSuccess' has a wrong offset!");
static_assert(offsetof(GymMapLobbyRules_OnMapDetailsReceived, Result) == 0x000008, "Member 'GymMapLobbyRules_OnMapDetailsReceived::Result' has a wrong offset!");

// Function GYMGAME.GymMapRuleModifierControl.GetFloatModifier
// 0x0010 (0x0010 - 0x0000)
struct GymMapRuleModifierControl_GetFloatModifier final
{
public:
	class FName                                   ModifierID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymMapRuleModifierControl_GetFloatModifier) == 0x000004, "Wrong alignment on GymMapRuleModifierControl_GetFloatModifier");
static_assert(sizeof(GymMapRuleModifierControl_GetFloatModifier) == 0x000010, "Wrong size on GymMapRuleModifierControl_GetFloatModifier");
static_assert(offsetof(GymMapRuleModifierControl_GetFloatModifier, ModifierID) == 0x000000, "Member 'GymMapRuleModifierControl_GetFloatModifier::ModifierID' has a wrong offset!");
static_assert(offsetof(GymMapRuleModifierControl_GetFloatModifier, Value) == 0x000008, "Member 'GymMapRuleModifierControl_GetFloatModifier::Value' has a wrong offset!");
static_assert(offsetof(GymMapRuleModifierControl_GetFloatModifier, ReturnValue) == 0x00000C, "Member 'GymMapRuleModifierControl_GetFloatModifier::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymMapRuleModifierControl.GetIntModifier
// 0x0010 (0x0010 - 0x0000)
struct GymMapRuleModifierControl_GetIntModifier final
{
public:
	class FName                                   ModifierID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymMapRuleModifierControl_GetIntModifier) == 0x000004, "Wrong alignment on GymMapRuleModifierControl_GetIntModifier");
static_assert(sizeof(GymMapRuleModifierControl_GetIntModifier) == 0x000010, "Wrong size on GymMapRuleModifierControl_GetIntModifier");
static_assert(offsetof(GymMapRuleModifierControl_GetIntModifier, ModifierID) == 0x000000, "Member 'GymMapRuleModifierControl_GetIntModifier::ModifierID' has a wrong offset!");
static_assert(offsetof(GymMapRuleModifierControl_GetIntModifier, Value) == 0x000008, "Member 'GymMapRuleModifierControl_GetIntModifier::Value' has a wrong offset!");
static_assert(offsetof(GymMapRuleModifierControl_GetIntModifier, ReturnValue) == 0x00000C, "Member 'GymMapRuleModifierControl_GetIntModifier::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymMapRuleModifierControl.GetStringModifier
// 0x0020 (0x0020 - 0x0000)
struct GymMapRuleModifierControl_GetStringModifier final
{
public:
	class FName                                   ModifierID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymMapRuleModifierControl_GetStringModifier) == 0x000008, "Wrong alignment on GymMapRuleModifierControl_GetStringModifier");
static_assert(sizeof(GymMapRuleModifierControl_GetStringModifier) == 0x000020, "Wrong size on GymMapRuleModifierControl_GetStringModifier");
static_assert(offsetof(GymMapRuleModifierControl_GetStringModifier, ModifierID) == 0x000000, "Member 'GymMapRuleModifierControl_GetStringModifier::ModifierID' has a wrong offset!");
static_assert(offsetof(GymMapRuleModifierControl_GetStringModifier, Value) == 0x000008, "Member 'GymMapRuleModifierControl_GetStringModifier::Value' has a wrong offset!");
static_assert(offsetof(GymMapRuleModifierControl_GetStringModifier, ReturnValue) == 0x000018, "Member 'GymMapRuleModifierControl_GetStringModifier::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymMapUtils.DownloadAndOpenMap
// 0x0040 (0x0040 - 0x0000)
struct GymMapUtils_DownloadAndOpenMap final
{
public:
	struct FGymMapVersionLocator                  MapId;                                             // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          Travel;                                            // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepPlaylist;                                     // 0x0019(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SessionMode;                                       // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExtraData;                                         // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMapUtils_DownloadAndOpenMap) == 0x000008, "Wrong alignment on GymMapUtils_DownloadAndOpenMap");
static_assert(sizeof(GymMapUtils_DownloadAndOpenMap) == 0x000040, "Wrong size on GymMapUtils_DownloadAndOpenMap");
static_assert(offsetof(GymMapUtils_DownloadAndOpenMap, MapId) == 0x000000, "Member 'GymMapUtils_DownloadAndOpenMap::MapId' has a wrong offset!");
static_assert(offsetof(GymMapUtils_DownloadAndOpenMap, Travel) == 0x000018, "Member 'GymMapUtils_DownloadAndOpenMap::Travel' has a wrong offset!");
static_assert(offsetof(GymMapUtils_DownloadAndOpenMap, bKeepPlaylist) == 0x000019, "Member 'GymMapUtils_DownloadAndOpenMap::bKeepPlaylist' has a wrong offset!");
static_assert(offsetof(GymMapUtils_DownloadAndOpenMap, SessionMode) == 0x000020, "Member 'GymMapUtils_DownloadAndOpenMap::SessionMode' has a wrong offset!");
static_assert(offsetof(GymMapUtils_DownloadAndOpenMap, ExtraData) == 0x000030, "Member 'GymMapUtils_DownloadAndOpenMap::ExtraData' has a wrong offset!");

// Function GYMGAME.GymMapUtils.DownloadAndOpenPlaylist
// 0x0010 (0x0010 - 0x0000)
struct GymMapUtils_DownloadAndOpenPlaylist final
{
public:
	class FString                                 PlaylistId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMapUtils_DownloadAndOpenPlaylist) == 0x000008, "Wrong alignment on GymMapUtils_DownloadAndOpenPlaylist");
static_assert(sizeof(GymMapUtils_DownloadAndOpenPlaylist) == 0x000010, "Wrong size on GymMapUtils_DownloadAndOpenPlaylist");
static_assert(offsetof(GymMapUtils_DownloadAndOpenPlaylist, PlaylistId) == 0x000000, "Member 'GymMapUtils_DownloadAndOpenPlaylist::PlaylistId' has a wrong offset!");

// Function GYMGAME.GymMapUtils.InitializeLobbyMode
// 0x0028 (0x0028 - 0x0000)
struct GymMapUtils_InitializeLobbyMode final
{
public:
	struct FGymMapVersionLocator                  Locator;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FString                                 KitId;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMapUtils_InitializeLobbyMode) == 0x000008, "Wrong alignment on GymMapUtils_InitializeLobbyMode");
static_assert(sizeof(GymMapUtils_InitializeLobbyMode) == 0x000028, "Wrong size on GymMapUtils_InitializeLobbyMode");
static_assert(offsetof(GymMapUtils_InitializeLobbyMode, Locator) == 0x000000, "Member 'GymMapUtils_InitializeLobbyMode::Locator' has a wrong offset!");
static_assert(offsetof(GymMapUtils_InitializeLobbyMode, KitId) == 0x000018, "Member 'GymMapUtils_InitializeLobbyMode::KitId' has a wrong offset!");

// Function GYMGAME.GymMapUtils.LoadPackagedMap
// 0x0018 (0x0018 - 0x0000)
struct GymMapUtils_LoadPackagedMap final
{
public:
	class FString                                 MapName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepPlaylist;                                     // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymMapUtils_LoadPackagedMap) == 0x000008, "Wrong alignment on GymMapUtils_LoadPackagedMap");
static_assert(sizeof(GymMapUtils_LoadPackagedMap) == 0x000018, "Wrong size on GymMapUtils_LoadPackagedMap");
static_assert(offsetof(GymMapUtils_LoadPackagedMap, MapName) == 0x000000, "Member 'GymMapUtils_LoadPackagedMap::MapName' has a wrong offset!");
static_assert(offsetof(GymMapUtils_LoadPackagedMap, bKeepPlaylist) == 0x000010, "Member 'GymMapUtils_LoadPackagedMap::bKeepPlaylist' has a wrong offset!");

// DelegateFunction GYMGAME.GymMapUtils.MapRemixComplete__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct GymMapUtils_MapRemixComplete__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MapId;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMapUtils_MapRemixComplete__DelegateSignature) == 0x000008, "Wrong alignment on GymMapUtils_MapRemixComplete__DelegateSignature");
static_assert(sizeof(GymMapUtils_MapRemixComplete__DelegateSignature) == 0x000018, "Wrong size on GymMapUtils_MapRemixComplete__DelegateSignature");
static_assert(offsetof(GymMapUtils_MapRemixComplete__DelegateSignature, Success) == 0x000000, "Member 'GymMapUtils_MapRemixComplete__DelegateSignature::Success' has a wrong offset!");
static_assert(offsetof(GymMapUtils_MapRemixComplete__DelegateSignature, MapId) == 0x000008, "Member 'GymMapUtils_MapRemixComplete__DelegateSignature::MapId' has a wrong offset!");

// Function GYMGAME.GymMapUtils.PlaylistLoaded
// 0x0068 (0x0068 - 0x0000)
struct GymMapUtils_PlaylistLoaded final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymPlaylistDetailsResult              Details;                                           // 0x0008(0x0060)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMapUtils_PlaylistLoaded) == 0x000008, "Wrong alignment on GymMapUtils_PlaylistLoaded");
static_assert(sizeof(GymMapUtils_PlaylistLoaded) == 0x000068, "Wrong size on GymMapUtils_PlaylistLoaded");
static_assert(offsetof(GymMapUtils_PlaylistLoaded, Success) == 0x000000, "Member 'GymMapUtils_PlaylistLoaded::Success' has a wrong offset!");
static_assert(offsetof(GymMapUtils_PlaylistLoaded, Details) == 0x000008, "Member 'GymMapUtils_PlaylistLoaded::Details' has a wrong offset!");

// Function GYMGAME.GymMapUtils.RemixMap
// 0x0010 (0x0010 - 0x0000)
struct GymMapUtils_RemixMap final
{
public:
	class FString                                 Map;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMapUtils_RemixMap) == 0x000008, "Wrong alignment on GymMapUtils_RemixMap");
static_assert(sizeof(GymMapUtils_RemixMap) == 0x000010, "Wrong size on GymMapUtils_RemixMap");
static_assert(offsetof(GymMapUtils_RemixMap, Map) == 0x000000, "Member 'GymMapUtils_RemixMap::Map' has a wrong offset!");

// Function GYMGAME.GymMapUtils.ServerTravel
// 0x0010 (0x0010 - 0x0000)
struct GymMapUtils_ServerTravel final
{
public:
	class FString                                 Map;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMapUtils_ServerTravel) == 0x000008, "Wrong alignment on GymMapUtils_ServerTravel");
static_assert(sizeof(GymMapUtils_ServerTravel) == 0x000010, "Wrong size on GymMapUtils_ServerTravel");
static_assert(offsetof(GymMapUtils_ServerTravel, Map) == 0x000000, "Member 'GymMapUtils_ServerTravel::Map' has a wrong offset!");

// Function GYMGAME.GymMapUtils.IsUploadInProgress
// 0x0001 (0x0001 - 0x0000)
struct GymMapUtils_IsUploadInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMapUtils_IsUploadInProgress) == 0x000001, "Wrong alignment on GymMapUtils_IsUploadInProgress");
static_assert(sizeof(GymMapUtils_IsUploadInProgress) == 0x000001, "Wrong size on GymMapUtils_IsUploadInProgress");
static_assert(offsetof(GymMapUtils_IsUploadInProgress, ReturnValue) == 0x000000, "Member 'GymMapUtils_IsUploadInProgress::ReturnValue' has a wrong offset!");

// Function GYMGAME.LevelMenuWidget.AddListItem
// 0x00C0 (0x00C0 - 0x0000)
struct LevelMenuWidget_AddListItem final
{
public:
	struct FCustomLevelFileInfo                   Item;                                              // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCustomLevelFileInfo                   ReturnValue;                                       // 0x0060(0x0060)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelMenuWidget_AddListItem) == 0x000008, "Wrong alignment on LevelMenuWidget_AddListItem");
static_assert(sizeof(LevelMenuWidget_AddListItem) == 0x0000C0, "Wrong size on LevelMenuWidget_AddListItem");
static_assert(offsetof(LevelMenuWidget_AddListItem, Item) == 0x000000, "Member 'LevelMenuWidget_AddListItem::Item' has a wrong offset!");
static_assert(offsetof(LevelMenuWidget_AddListItem, ReturnValue) == 0x000060, "Member 'LevelMenuWidget_AddListItem::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymMetaBoulder.ClientActivatePlayerRagdoll
// 0x0008 (0x0008 - 0x0000)
struct GymMetaBoulder_ClientActivatePlayerRagdoll final
{
public:
	class AGymCharacter*                          Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMetaBoulder_ClientActivatePlayerRagdoll) == 0x000008, "Wrong alignment on GymMetaBoulder_ClientActivatePlayerRagdoll");
static_assert(sizeof(GymMetaBoulder_ClientActivatePlayerRagdoll) == 0x000008, "Wrong size on GymMetaBoulder_ClientActivatePlayerRagdoll");
static_assert(offsetof(GymMetaBoulder_ClientActivatePlayerRagdoll, Player) == 0x000000, "Member 'GymMetaBoulder_ClientActivatePlayerRagdoll::Player' has a wrong offset!");

// Function GYMGAME.GymMetaBoulder.Multi_ImpactSound
// 0x0008 (0x0008 - 0x0000)
struct GymMetaBoulder_Multi_ImpactSound final
{
public:
	class AGymCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMetaBoulder_Multi_ImpactSound) == 0x000008, "Wrong alignment on GymMetaBoulder_Multi_ImpactSound");
static_assert(sizeof(GymMetaBoulder_Multi_ImpactSound) == 0x000008, "Wrong size on GymMetaBoulder_Multi_ImpactSound");
static_assert(offsetof(GymMetaBoulder_Multi_ImpactSound, Character) == 0x000000, "Member 'GymMetaBoulder_Multi_ImpactSound::Character' has a wrong offset!");

// Function GYMGAME.GymMetaBoulder.OnMeshComponentHit
// 0x0118 (0x0118 - 0x0000)
struct GymMetaBoulder_OnMeshComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0030(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMetaBoulder_OnMeshComponentHit) == 0x000008, "Wrong alignment on GymMetaBoulder_OnMeshComponentHit");
static_assert(sizeof(GymMetaBoulder_OnMeshComponentHit) == 0x000118, "Wrong size on GymMetaBoulder_OnMeshComponentHit");
static_assert(offsetof(GymMetaBoulder_OnMeshComponentHit, HitComponent) == 0x000000, "Member 'GymMetaBoulder_OnMeshComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(GymMetaBoulder_OnMeshComponentHit, OtherActor) == 0x000008, "Member 'GymMetaBoulder_OnMeshComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(GymMetaBoulder_OnMeshComponentHit, OtherComp) == 0x000010, "Member 'GymMetaBoulder_OnMeshComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(GymMetaBoulder_OnMeshComponentHit, NormalImpulse) == 0x000018, "Member 'GymMetaBoulder_OnMeshComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(GymMetaBoulder_OnMeshComponentHit, Hit) == 0x000030, "Member 'GymMetaBoulder_OnMeshComponentHit::Hit' has a wrong offset!");

// Function GYMGAME.GymMetaBoulder.OnMeshComponentOverlap
// 0x0108 (0x0108 - 0x0000)
struct GymMetaBoulder_OnMeshComponentOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMetaBoulder_OnMeshComponentOverlap) == 0x000008, "Wrong alignment on GymMetaBoulder_OnMeshComponentOverlap");
static_assert(sizeof(GymMetaBoulder_OnMeshComponentOverlap) == 0x000108, "Wrong size on GymMetaBoulder_OnMeshComponentOverlap");
static_assert(offsetof(GymMetaBoulder_OnMeshComponentOverlap, OverlappedComp) == 0x000000, "Member 'GymMetaBoulder_OnMeshComponentOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(GymMetaBoulder_OnMeshComponentOverlap, OtherActor) == 0x000008, "Member 'GymMetaBoulder_OnMeshComponentOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(GymMetaBoulder_OnMeshComponentOverlap, OtherComp) == 0x000010, "Member 'GymMetaBoulder_OnMeshComponentOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(GymMetaBoulder_OnMeshComponentOverlap, OtherBodyIndex) == 0x000018, "Member 'GymMetaBoulder_OnMeshComponentOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(GymMetaBoulder_OnMeshComponentOverlap, bFromSweep) == 0x00001C, "Member 'GymMetaBoulder_OnMeshComponentOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(GymMetaBoulder_OnMeshComponentOverlap, SweepResult) == 0x000020, "Member 'GymMetaBoulder_OnMeshComponentOverlap::SweepResult' has a wrong offset!");

// Function GYMGAME.GymMetaBoulder.UnFreeze
// 0x0001 (0x0001 - 0x0000)
struct GymMetaBoulder_UnFreeze final
{
public:
	bool                                          GhostVisible;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMetaBoulder_UnFreeze) == 0x000001, "Wrong alignment on GymMetaBoulder_UnFreeze");
static_assert(sizeof(GymMetaBoulder_UnFreeze) == 0x000001, "Wrong size on GymMetaBoulder_UnFreeze");
static_assert(offsetof(GymMetaBoulder_UnFreeze, GhostVisible) == 0x000000, "Member 'GymMetaBoulder_UnFreeze::GhostVisible' has a wrong offset!");

// Function GYMGAME.GymMetagameUtils.ClaimReward
// 0x0038 (0x0038 - 0x0000)
struct GymMetagameUtils_ClaimReward final
{
public:
	struct FGymUnclaimedReward                    Reward;                                            // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMetagameUtils_ClaimReward) == 0x000008, "Wrong alignment on GymMetagameUtils_ClaimReward");
static_assert(sizeof(GymMetagameUtils_ClaimReward) == 0x000038, "Wrong size on GymMetagameUtils_ClaimReward");
static_assert(offsetof(GymMetagameUtils_ClaimReward, Reward) == 0x000000, "Member 'GymMetagameUtils_ClaimReward::Reward' has a wrong offset!");

// Function GYMGAME.GymMetagameUtils.EquipItem
// 0x0010 (0x0010 - 0x0000)
struct GymMetagameUtils_EquipItem final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMetagameUtils_EquipItem) == 0x000008, "Wrong alignment on GymMetagameUtils_EquipItem");
static_assert(sizeof(GymMetagameUtils_EquipItem) == 0x000010, "Wrong size on GymMetagameUtils_EquipItem");
static_assert(offsetof(GymMetagameUtils_EquipItem, ItemId) == 0x000000, "Member 'GymMetagameUtils_EquipItem::ItemId' has a wrong offset!");

// Function GYMGAME.GymMetagameUtils.GetAssetDisplayName
// 0x0028 (0x0028 - 0x0000)
struct GymMetagameUtils_GetAssetDisplayName final
{
public:
	class FString                                 AssetId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMetagameUtils_GetAssetDisplayName) == 0x000008, "Wrong alignment on GymMetagameUtils_GetAssetDisplayName");
static_assert(sizeof(GymMetagameUtils_GetAssetDisplayName) == 0x000028, "Wrong size on GymMetagameUtils_GetAssetDisplayName");
static_assert(offsetof(GymMetagameUtils_GetAssetDisplayName, AssetId) == 0x000000, "Member 'GymMetagameUtils_GetAssetDisplayName::AssetId' has a wrong offset!");
static_assert(offsetof(GymMetagameUtils_GetAssetDisplayName, ReturnValue) == 0x000010, "Member 'GymMetagameUtils_GetAssetDisplayName::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymMetagameUtils.GetAssetPreview
// 0x0018 (0x0018 - 0x0000)
struct GymMetagameUtils_GetAssetPreview final
{
public:
	class FString                                 AssetId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTexture*                         ReturnValue;                                       // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMetagameUtils_GetAssetPreview) == 0x000008, "Wrong alignment on GymMetagameUtils_GetAssetPreview");
static_assert(sizeof(GymMetagameUtils_GetAssetPreview) == 0x000018, "Wrong size on GymMetagameUtils_GetAssetPreview");
static_assert(offsetof(GymMetagameUtils_GetAssetPreview, AssetId) == 0x000000, "Member 'GymMetagameUtils_GetAssetPreview::AssetId' has a wrong offset!");
static_assert(offsetof(GymMetagameUtils_GetAssetPreview, ReturnValue) == 0x000010, "Member 'GymMetagameUtils_GetAssetPreview::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymMetagameUtils.GetAssetSeasonTags
// 0x0020 (0x0020 - 0x0000)
struct GymMetagameUtils_GetAssetSeasonTags final
{
public:
	class FString                                 AssetId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           ReturnValue;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMetagameUtils_GetAssetSeasonTags) == 0x000008, "Wrong alignment on GymMetagameUtils_GetAssetSeasonTags");
static_assert(sizeof(GymMetagameUtils_GetAssetSeasonTags) == 0x000020, "Wrong size on GymMetagameUtils_GetAssetSeasonTags");
static_assert(offsetof(GymMetagameUtils_GetAssetSeasonTags, AssetId) == 0x000000, "Member 'GymMetagameUtils_GetAssetSeasonTags::AssetId' has a wrong offset!");
static_assert(offsetof(GymMetagameUtils_GetAssetSeasonTags, ReturnValue) == 0x000010, "Member 'GymMetagameUtils_GetAssetSeasonTags::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymMetagameUtils.GetAssetThumbnail
// 0x0018 (0x0018 - 0x0000)
struct GymMetagameUtils_GetAssetThumbnail final
{
public:
	class FString                                 AssetId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTexture*                         ReturnValue;                                       // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMetagameUtils_GetAssetThumbnail) == 0x000008, "Wrong alignment on GymMetagameUtils_GetAssetThumbnail");
static_assert(sizeof(GymMetagameUtils_GetAssetThumbnail) == 0x000018, "Wrong size on GymMetagameUtils_GetAssetThumbnail");
static_assert(offsetof(GymMetagameUtils_GetAssetThumbnail, AssetId) == 0x000000, "Member 'GymMetagameUtils_GetAssetThumbnail::AssetId' has a wrong offset!");
static_assert(offsetof(GymMetagameUtils_GetAssetThumbnail, ReturnValue) == 0x000010, "Member 'GymMetagameUtils_GetAssetThumbnail::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymMetagameUtils.IsRewardClaimed
// 0x0018 (0x0018 - 0x0000)
struct GymMetagameUtils_IsRewardClaimed final
{
public:
	class FString                                 RewardId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymMetagameUtils_IsRewardClaimed) == 0x000008, "Wrong alignment on GymMetagameUtils_IsRewardClaimed");
static_assert(sizeof(GymMetagameUtils_IsRewardClaimed) == 0x000018, "Wrong size on GymMetagameUtils_IsRewardClaimed");
static_assert(offsetof(GymMetagameUtils_IsRewardClaimed, RewardId) == 0x000000, "Member 'GymMetagameUtils_IsRewardClaimed::RewardId' has a wrong offset!");
static_assert(offsetof(GymMetagameUtils_IsRewardClaimed, ReturnValue) == 0x000010, "Member 'GymMetagameUtils_IsRewardClaimed::ReturnValue' has a wrong offset!");

// DelegateFunction GYMGAME.GymMetagameUtils.OnRewardClaimed__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct GymMetagameUtils_OnRewardClaimed__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RewardId;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMetagameUtils_OnRewardClaimed__DelegateSignature) == 0x000008, "Wrong alignment on GymMetagameUtils_OnRewardClaimed__DelegateSignature");
static_assert(sizeof(GymMetagameUtils_OnRewardClaimed__DelegateSignature) == 0x000018, "Wrong size on GymMetagameUtils_OnRewardClaimed__DelegateSignature");
static_assert(offsetof(GymMetagameUtils_OnRewardClaimed__DelegateSignature, Success) == 0x000000, "Member 'GymMetagameUtils_OnRewardClaimed__DelegateSignature::Success' has a wrong offset!");
static_assert(offsetof(GymMetagameUtils_OnRewardClaimed__DelegateSignature, RewardId) == 0x000008, "Member 'GymMetagameUtils_OnRewardClaimed__DelegateSignature::RewardId' has a wrong offset!");

// Function GYMGAME.GymMetagameUtils.OnRewardClaimed_Internal
// 0x0018 (0x0018 - 0x0000)
struct GymMetagameUtils_OnRewardClaimed_Internal final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RewardId;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMetagameUtils_OnRewardClaimed_Internal) == 0x000008, "Wrong alignment on GymMetagameUtils_OnRewardClaimed_Internal");
static_assert(sizeof(GymMetagameUtils_OnRewardClaimed_Internal) == 0x000018, "Wrong size on GymMetagameUtils_OnRewardClaimed_Internal");
static_assert(offsetof(GymMetagameUtils_OnRewardClaimed_Internal, bSuccess) == 0x000000, "Member 'GymMetagameUtils_OnRewardClaimed_Internal::bSuccess' has a wrong offset!");
static_assert(offsetof(GymMetagameUtils_OnRewardClaimed_Internal, RewardId) == 0x000008, "Member 'GymMetagameUtils_OnRewardClaimed_Internal::RewardId' has a wrong offset!");

// Function GYMGAME.GymMovementControl.Client_BlockLooking
// 0x0008 (0x0008 - 0x0000)
struct GymMovementControl_Client_BlockLooking final
{
public:
	class UObject*                                Reason;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMovementControl_Client_BlockLooking) == 0x000008, "Wrong alignment on GymMovementControl_Client_BlockLooking");
static_assert(sizeof(GymMovementControl_Client_BlockLooking) == 0x000008, "Wrong size on GymMovementControl_Client_BlockLooking");
static_assert(offsetof(GymMovementControl_Client_BlockLooking, Reason) == 0x000000, "Member 'GymMovementControl_Client_BlockLooking::Reason' has a wrong offset!");

// Function GYMGAME.GymMovementControl.Client_UnblockLooking
// 0x0008 (0x0008 - 0x0000)
struct GymMovementControl_Client_UnblockLooking final
{
public:
	class UObject*                                Reason;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymMovementControl_Client_UnblockLooking) == 0x000008, "Wrong alignment on GymMovementControl_Client_UnblockLooking");
static_assert(sizeof(GymMovementControl_Client_UnblockLooking) == 0x000008, "Wrong size on GymMovementControl_Client_UnblockLooking");
static_assert(offsetof(GymMovementControl_Client_UnblockLooking, Reason) == 0x000000, "Member 'GymMovementControl_Client_UnblockLooking::Reason' has a wrong offset!");

// Function GYMGAME.GymNetInterface.ConnectServer
// 0x0010 (0x0010 - 0x0000)
struct GymNetInterface_ConnectServer final
{
public:
	class FString                                 ConnectionString;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymNetInterface_ConnectServer) == 0x000008, "Wrong alignment on GymNetInterface_ConnectServer");
static_assert(sizeof(GymNetInterface_ConnectServer) == 0x000010, "Wrong size on GymNetInterface_ConnectServer");
static_assert(offsetof(GymNetInterface_ConnectServer, ConnectionString) == 0x000000, "Member 'GymNetInterface_ConnectServer::ConnectionString' has a wrong offset!");

// Function GYMGAME.GymNetInterface.CreateAndJoinServer_Playlist
// 0x0020 (0x0020 - 0x0000)
struct GymNetInterface_CreateAndJoinServer_Playlist final
{
public:
	class FString                                 ServerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlaylistId;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymNetInterface_CreateAndJoinServer_Playlist) == 0x000008, "Wrong alignment on GymNetInterface_CreateAndJoinServer_Playlist");
static_assert(sizeof(GymNetInterface_CreateAndJoinServer_Playlist) == 0x000020, "Wrong size on GymNetInterface_CreateAndJoinServer_Playlist");
static_assert(offsetof(GymNetInterface_CreateAndJoinServer_Playlist, ServerName) == 0x000000, "Member 'GymNetInterface_CreateAndJoinServer_Playlist::ServerName' has a wrong offset!");
static_assert(offsetof(GymNetInterface_CreateAndJoinServer_Playlist, PlaylistId) == 0x000010, "Member 'GymNetInterface_CreateAndJoinServer_Playlist::PlaylistId' has a wrong offset!");

// Function GYMGAME.GymNetInterface.OnServerCreated
// 0x0018 (0x0018 - 0x0000)
struct GymNetInterface_OnServerCreated final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ConnectString;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymNetInterface_OnServerCreated) == 0x000008, "Wrong alignment on GymNetInterface_OnServerCreated");
static_assert(sizeof(GymNetInterface_OnServerCreated) == 0x000018, "Wrong size on GymNetInterface_OnServerCreated");
static_assert(offsetof(GymNetInterface_OnServerCreated, Success) == 0x000000, "Member 'GymNetInterface_OnServerCreated::Success' has a wrong offset!");
static_assert(offsetof(GymNetInterface_OnServerCreated, ConnectString) == 0x000008, "Member 'GymNetInterface_OnServerCreated::ConnectString' has a wrong offset!");

// Function GYMGAME.GymNPC.Multi_SetVisible
// 0x0001 (0x0001 - 0x0000)
struct GymNPC_Multi_SetVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymNPC_Multi_SetVisible) == 0x000001, "Wrong alignment on GymNPC_Multi_SetVisible");
static_assert(sizeof(GymNPC_Multi_SetVisible) == 0x000001, "Wrong size on GymNPC_Multi_SetVisible");
static_assert(offsetof(GymNPC_Multi_SetVisible, bVisible) == 0x000000, "Member 'GymNPC_Multi_SetVisible::bVisible' has a wrong offset!");

// Function GYMGAME.GymNPC.Show3DMessage
// 0x0020 (0x0020 - 0x0000)
struct GymNPC_Show3DMessage final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ForTime;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymNPC_Show3DMessage) == 0x000008, "Wrong alignment on GymNPC_Show3DMessage");
static_assert(sizeof(GymNPC_Show3DMessage) == 0x000020, "Wrong size on GymNPC_Show3DMessage");
static_assert(offsetof(GymNPC_Show3DMessage, Message) == 0x000000, "Member 'GymNPC_Show3DMessage::Message' has a wrong offset!");
static_assert(offsetof(GymNPC_Show3DMessage, ForTime) == 0x000018, "Member 'GymNPC_Show3DMessage::ForTime' has a wrong offset!");

// Function GYMGAME.GymNPC.GetViewPitch
// 0x0004 (0x0004 - 0x0000)
struct GymNPC_GetViewPitch final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymNPC_GetViewPitch) == 0x000004, "Wrong alignment on GymNPC_GetViewPitch");
static_assert(sizeof(GymNPC_GetViewPitch) == 0x000004, "Wrong size on GymNPC_GetViewPitch");
static_assert(offsetof(GymNPC_GetViewPitch, ReturnValue) == 0x000000, "Member 'GymNPC_GetViewPitch::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymWallThemeProvider.ClampIndex
// 0x0003 (0x0003 - 0x0000)
struct GymWallThemeProvider_ClampIndex final
{
public:
	uint8                                         Index_0;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGymWallDirection                             Direction;                                         // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymWallThemeProvider_ClampIndex) == 0x000001, "Wrong alignment on GymWallThemeProvider_ClampIndex");
static_assert(sizeof(GymWallThemeProvider_ClampIndex) == 0x000003, "Wrong size on GymWallThemeProvider_ClampIndex");
static_assert(offsetof(GymWallThemeProvider_ClampIndex, Index_0) == 0x000000, "Member 'GymWallThemeProvider_ClampIndex::Index_0' has a wrong offset!");
static_assert(offsetof(GymWallThemeProvider_ClampIndex, Direction) == 0x000001, "Member 'GymWallThemeProvider_ClampIndex::Direction' has a wrong offset!");
static_assert(offsetof(GymWallThemeProvider_ClampIndex, ReturnValue) == 0x000002, "Member 'GymWallThemeProvider_ClampIndex::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymWallThemeProvider.GetIndex
// 0x0010 (0x0010 - 0x0000)
struct GymWallThemeProvider_GetIndex final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGymWallDirection                             Direction;                                         // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymWallThemeProvider_GetIndex) == 0x000004, "Wrong alignment on GymWallThemeProvider_GetIndex");
static_assert(sizeof(GymWallThemeProvider_GetIndex) == 0x000010, "Wrong size on GymWallThemeProvider_GetIndex");
static_assert(offsetof(GymWallThemeProvider_GetIndex, Name_0) == 0x000000, "Member 'GymWallThemeProvider_GetIndex::Name_0' has a wrong offset!");
static_assert(offsetof(GymWallThemeProvider_GetIndex, Direction) == 0x000008, "Member 'GymWallThemeProvider_GetIndex::Direction' has a wrong offset!");
static_assert(offsetof(GymWallThemeProvider_GetIndex, ReturnValue) == 0x00000C, "Member 'GymWallThemeProvider_GetIndex::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymWallThemeProvider.GetPiece
// 0x0078 (0x0078 - 0x0000)
struct GymWallThemeProvider_GetPiece final
{
public:
	struct FIntVector                             Location;                                          // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGymWallDirection                             Direction;                                         // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymShape                              Shape;                                             // 0x0010(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGymWallThemeVariant                   ReturnValue;                                       // 0x0068(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymWallThemeProvider_GetPiece) == 0x000008, "Wrong alignment on GymWallThemeProvider_GetPiece");
static_assert(sizeof(GymWallThemeProvider_GetPiece) == 0x000078, "Wrong size on GymWallThemeProvider_GetPiece");
static_assert(offsetof(GymWallThemeProvider_GetPiece, Location) == 0x000000, "Member 'GymWallThemeProvider_GetPiece::Location' has a wrong offset!");
static_assert(offsetof(GymWallThemeProvider_GetPiece, Direction) == 0x00000C, "Member 'GymWallThemeProvider_GetPiece::Direction' has a wrong offset!");
static_assert(offsetof(GymWallThemeProvider_GetPiece, Shape) == 0x000010, "Member 'GymWallThemeProvider_GetPiece::Shape' has a wrong offset!");
static_assert(offsetof(GymWallThemeProvider_GetPiece, ReturnValue) == 0x000068, "Member 'GymWallThemeProvider_GetPiece::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymWallThemeProvider.GetPieceByIndex
// 0x0018 (0x0018 - 0x0000)
struct GymWallThemeProvider_GetPieceByIndex final
{
public:
	uint8                                         Index_0;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGymWallDirection                             Direction;                                         // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymWallThemeVariant                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymWallThemeProvider_GetPieceByIndex) == 0x000008, "Wrong alignment on GymWallThemeProvider_GetPieceByIndex");
static_assert(sizeof(GymWallThemeProvider_GetPieceByIndex) == 0x000018, "Wrong size on GymWallThemeProvider_GetPieceByIndex");
static_assert(offsetof(GymWallThemeProvider_GetPieceByIndex, Index_0) == 0x000000, "Member 'GymWallThemeProvider_GetPieceByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(GymWallThemeProvider_GetPieceByIndex, Direction) == 0x000001, "Member 'GymWallThemeProvider_GetPieceByIndex::Direction' has a wrong offset!");
static_assert(offsetof(GymWallThemeProvider_GetPieceByIndex, ReturnValue) == 0x000008, "Member 'GymWallThemeProvider_GetPieceByIndex::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymObjectiveControl.AddQuest
// 0x0018 (0x0018 - 0x0000)
struct GymObjectiveControl_AddQuest final
{
public:
	TSubclassOf<class UGymQuest>                  QuestClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetActive;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGymNPC*                                QuestGiver;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymObjectiveControl_AddQuest) == 0x000008, "Wrong alignment on GymObjectiveControl_AddQuest");
static_assert(sizeof(GymObjectiveControl_AddQuest) == 0x000018, "Wrong size on GymObjectiveControl_AddQuest");
static_assert(offsetof(GymObjectiveControl_AddQuest, QuestClass) == 0x000000, "Member 'GymObjectiveControl_AddQuest::QuestClass' has a wrong offset!");
static_assert(offsetof(GymObjectiveControl_AddQuest, bSetActive) == 0x000008, "Member 'GymObjectiveControl_AddQuest::bSetActive' has a wrong offset!");
static_assert(offsetof(GymObjectiveControl_AddQuest, QuestGiver) == 0x000010, "Member 'GymObjectiveControl_AddQuest::QuestGiver' has a wrong offset!");

// Function GYMGAME.GymObjectiveControl.AddTask
// 0x0010 (0x0010 - 0x0000)
struct GymObjectiveControl_AddTask final
{
public:
	class FString                                 TaskName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymObjectiveControl_AddTask) == 0x000008, "Wrong alignment on GymObjectiveControl_AddTask");
static_assert(sizeof(GymObjectiveControl_AddTask) == 0x000010, "Wrong size on GymObjectiveControl_AddTask");
static_assert(offsetof(GymObjectiveControl_AddTask, TaskName) == 0x000000, "Member 'GymObjectiveControl_AddTask::TaskName' has a wrong offset!");

// Function GYMGAME.GymObjectiveControl.Client_AddCompletedQuest
// 0x0008 (0x0008 - 0x0000)
struct GymObjectiveControl_Client_AddCompletedQuest final
{
public:
	class FName                                   Quest;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymObjectiveControl_Client_AddCompletedQuest) == 0x000004, "Wrong alignment on GymObjectiveControl_Client_AddCompletedQuest");
static_assert(sizeof(GymObjectiveControl_Client_AddCompletedQuest) == 0x000008, "Wrong size on GymObjectiveControl_Client_AddCompletedQuest");
static_assert(offsetof(GymObjectiveControl_Client_AddCompletedQuest, Quest) == 0x000000, "Member 'GymObjectiveControl_Client_AddCompletedQuest::Quest' has a wrong offset!");

// Function GYMGAME.GymObjectiveControl.Client_SetMovementFrozen
// 0x0001 (0x0001 - 0x0000)
struct GymObjectiveControl_Client_SetMovementFrozen final
{
public:
	bool                                          bFreeze;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymObjectiveControl_Client_SetMovementFrozen) == 0x000001, "Wrong alignment on GymObjectiveControl_Client_SetMovementFrozen");
static_assert(sizeof(GymObjectiveControl_Client_SetMovementFrozen) == 0x000001, "Wrong size on GymObjectiveControl_Client_SetMovementFrozen");
static_assert(offsetof(GymObjectiveControl_Client_SetMovementFrozen, bFreeze) == 0x000000, "Member 'GymObjectiveControl_Client_SetMovementFrozen::bFreeze' has a wrong offset!");

// Function GYMGAME.GymObjectiveControl.PlayObjectiveSound
// 0x0010 (0x0010 - 0x0000)
struct GymObjectiveControl_PlayObjectiveSound final
{
public:
	class FString                                 TriggerName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymObjectiveControl_PlayObjectiveSound) == 0x000008, "Wrong alignment on GymObjectiveControl_PlayObjectiveSound");
static_assert(sizeof(GymObjectiveControl_PlayObjectiveSound) == 0x000010, "Wrong size on GymObjectiveControl_PlayObjectiveSound");
static_assert(offsetof(GymObjectiveControl_PlayObjectiveSound, TriggerName) == 0x000000, "Member 'GymObjectiveControl_PlayObjectiveSound::TriggerName' has a wrong offset!");

// Function GYMGAME.GymObjectiveControl.RemoveQuest
// 0x0008 (0x0008 - 0x0000)
struct GymObjectiveControl_RemoveQuest final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymObjectiveControl_RemoveQuest) == 0x000004, "Wrong alignment on GymObjectiveControl_RemoveQuest");
static_assert(sizeof(GymObjectiveControl_RemoveQuest) == 0x000008, "Wrong size on GymObjectiveControl_RemoveQuest");
static_assert(offsetof(GymObjectiveControl_RemoveQuest, QuestID) == 0x000000, "Member 'GymObjectiveControl_RemoveQuest::QuestID' has a wrong offset!");

// Function GYMGAME.GymObjectiveControl.ResetCareerLevel
// 0x0010 (0x0010 - 0x0000)
struct GymObjectiveControl_ResetCareerLevel final
{
public:
	class FString                                 LevelName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymObjectiveControl_ResetCareerLevel) == 0x000008, "Wrong alignment on GymObjectiveControl_ResetCareerLevel");
static_assert(sizeof(GymObjectiveControl_ResetCareerLevel) == 0x000010, "Wrong size on GymObjectiveControl_ResetCareerLevel");
static_assert(offsetof(GymObjectiveControl_ResetCareerLevel, LevelName) == 0x000000, "Member 'GymObjectiveControl_ResetCareerLevel::LevelName' has a wrong offset!");

// Function GYMGAME.GymObjectiveControl.ResetTask
// 0x0010 (0x0010 - 0x0000)
struct GymObjectiveControl_ResetTask final
{
public:
	class FString                                 TaskName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymObjectiveControl_ResetTask) == 0x000008, "Wrong alignment on GymObjectiveControl_ResetTask");
static_assert(sizeof(GymObjectiveControl_ResetTask) == 0x000010, "Wrong size on GymObjectiveControl_ResetTask");
static_assert(offsetof(GymObjectiveControl_ResetTask, TaskName) == 0x000000, "Member 'GymObjectiveControl_ResetTask::TaskName' has a wrong offset!");

// Function GYMGAME.GymObjectiveControl.RestartQuest
// 0x0008 (0x0008 - 0x0000)
struct GymObjectiveControl_RestartQuest final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymObjectiveControl_RestartQuest) == 0x000004, "Wrong alignment on GymObjectiveControl_RestartQuest");
static_assert(sizeof(GymObjectiveControl_RestartQuest) == 0x000008, "Wrong size on GymObjectiveControl_RestartQuest");
static_assert(offsetof(GymObjectiveControl_RestartQuest, QuestID) == 0x000000, "Member 'GymObjectiveControl_RestartQuest::QuestID' has a wrong offset!");

// Function GYMGAME.GymObjectiveControl.SaveCareerProgress
// 0x0018 (0x0018 - 0x0000)
struct GymObjectiveControl_SaveCareerProgress final
{
public:
	class FString                                 CareerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskID;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymObjectiveControl_SaveCareerProgress) == 0x000008, "Wrong alignment on GymObjectiveControl_SaveCareerProgress");
static_assert(sizeof(GymObjectiveControl_SaveCareerProgress) == 0x000018, "Wrong size on GymObjectiveControl_SaveCareerProgress");
static_assert(offsetof(GymObjectiveControl_SaveCareerProgress, CareerName) == 0x000000, "Member 'GymObjectiveControl_SaveCareerProgress::CareerName' has a wrong offset!");
static_assert(offsetof(GymObjectiveControl_SaveCareerProgress, TaskID) == 0x000010, "Member 'GymObjectiveControl_SaveCareerProgress::TaskID' has a wrong offset!");

// Function GYMGAME.GymObjectiveControl.SaveCareerTournament
// 0x0018 (0x0018 - 0x0000)
struct GymObjectiveControl_SaveCareerTournament final
{
public:
	class FString                                 TournamentName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Placement;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymObjectiveControl_SaveCareerTournament) == 0x000008, "Wrong alignment on GymObjectiveControl_SaveCareerTournament");
static_assert(sizeof(GymObjectiveControl_SaveCareerTournament) == 0x000018, "Wrong size on GymObjectiveControl_SaveCareerTournament");
static_assert(offsetof(GymObjectiveControl_SaveCareerTournament, TournamentName) == 0x000000, "Member 'GymObjectiveControl_SaveCareerTournament::TournamentName' has a wrong offset!");
static_assert(offsetof(GymObjectiveControl_SaveCareerTournament, Placement) == 0x000010, "Member 'GymObjectiveControl_SaveCareerTournament::Placement' has a wrong offset!");

// Function GYMGAME.GymObjectiveControl.Server_AddCompletedQuest
// 0x0008 (0x0008 - 0x0000)
struct GymObjectiveControl_Server_AddCompletedQuest final
{
public:
	class FName                                   Quest;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymObjectiveControl_Server_AddCompletedQuest) == 0x000004, "Wrong alignment on GymObjectiveControl_Server_AddCompletedQuest");
static_assert(sizeof(GymObjectiveControl_Server_AddCompletedQuest) == 0x000008, "Wrong size on GymObjectiveControl_Server_AddCompletedQuest");
static_assert(offsetof(GymObjectiveControl_Server_AddCompletedQuest, Quest) == 0x000000, "Member 'GymObjectiveControl_Server_AddCompletedQuest::Quest' has a wrong offset!");

// Function GYMGAME.GymObjectiveControl.SetQuestActive
// 0x0008 (0x0008 - 0x0000)
struct GymObjectiveControl_SetQuestActive final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymObjectiveControl_SetQuestActive) == 0x000004, "Wrong alignment on GymObjectiveControl_SetQuestActive");
static_assert(sizeof(GymObjectiveControl_SetQuestActive) == 0x000008, "Wrong size on GymObjectiveControl_SetQuestActive");
static_assert(offsetof(GymObjectiveControl_SetQuestActive, QuestID) == 0x000000, "Member 'GymObjectiveControl_SetQuestActive::QuestID' has a wrong offset!");

// Function GYMGAME.GymObjectiveControl.GetActiveQuest
// 0x0008 (0x0008 - 0x0000)
struct GymObjectiveControl_GetActiveQuest final
{
public:
	class UGymQuest*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymObjectiveControl_GetActiveQuest) == 0x000008, "Wrong alignment on GymObjectiveControl_GetActiveQuest");
static_assert(sizeof(GymObjectiveControl_GetActiveQuest) == 0x000008, "Wrong size on GymObjectiveControl_GetActiveQuest");
static_assert(offsetof(GymObjectiveControl_GetActiveQuest, ReturnValue) == 0x000000, "Member 'GymObjectiveControl_GetActiveQuest::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymObjectiveControl.GetAllQuests
// 0x0010 (0x0010 - 0x0000)
struct GymObjectiveControl_GetAllQuests final
{
public:
	TArray<class UGymQuest*>                      ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymObjectiveControl_GetAllQuests) == 0x000008, "Wrong alignment on GymObjectiveControl_GetAllQuests");
static_assert(sizeof(GymObjectiveControl_GetAllQuests) == 0x000010, "Wrong size on GymObjectiveControl_GetAllQuests");
static_assert(offsetof(GymObjectiveControl_GetAllQuests, ReturnValue) == 0x000000, "Member 'GymObjectiveControl_GetAllQuests::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymObjectiveControl.GetCompletedQuests
// 0x0010 (0x0010 - 0x0000)
struct GymObjectiveControl_GetCompletedQuests final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymObjectiveControl_GetCompletedQuests) == 0x000008, "Wrong alignment on GymObjectiveControl_GetCompletedQuests");
static_assert(sizeof(GymObjectiveControl_GetCompletedQuests) == 0x000010, "Wrong size on GymObjectiveControl_GetCompletedQuests");
static_assert(offsetof(GymObjectiveControl_GetCompletedQuests, ReturnValue) == 0x000000, "Member 'GymObjectiveControl_GetCompletedQuests::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymObjectiveControl.GetQuest
// 0x0010 (0x0010 - 0x0000)
struct GymObjectiveControl_GetQuest final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymQuest*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymObjectiveControl_GetQuest) == 0x000008, "Wrong alignment on GymObjectiveControl_GetQuest");
static_assert(sizeof(GymObjectiveControl_GetQuest) == 0x000010, "Wrong size on GymObjectiveControl_GetQuest");
static_assert(offsetof(GymObjectiveControl_GetQuest, QuestID) == 0x000000, "Member 'GymObjectiveControl_GetQuest::QuestID' has a wrong offset!");
static_assert(offsetof(GymObjectiveControl_GetQuest, ReturnValue) == 0x000008, "Member 'GymObjectiveControl_GetQuest::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymObjectiveControl.GetQuestState
// 0x000C (0x000C - 0x0000)
struct GymObjectiveControl_GetQuestState final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestState                                   ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymObjectiveControl_GetQuestState) == 0x000004, "Wrong alignment on GymObjectiveControl_GetQuestState");
static_assert(sizeof(GymObjectiveControl_GetQuestState) == 0x00000C, "Wrong size on GymObjectiveControl_GetQuestState");
static_assert(offsetof(GymObjectiveControl_GetQuestState, QuestID) == 0x000000, "Member 'GymObjectiveControl_GetQuestState::QuestID' has a wrong offset!");
static_assert(offsetof(GymObjectiveControl_GetQuestState, ReturnValue) == 0x000008, "Member 'GymObjectiveControl_GetQuestState::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymObjectiveControl.HasQuest
// 0x000C (0x000C - 0x0000)
struct GymObjectiveControl_HasQuest final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymObjectiveControl_HasQuest) == 0x000004, "Wrong alignment on GymObjectiveControl_HasQuest");
static_assert(sizeof(GymObjectiveControl_HasQuest) == 0x00000C, "Wrong size on GymObjectiveControl_HasQuest");
static_assert(offsetof(GymObjectiveControl_HasQuest, QuestID) == 0x000000, "Member 'GymObjectiveControl_HasQuest::QuestID' has a wrong offset!");
static_assert(offsetof(GymObjectiveControl_HasQuest, ReturnValue) == 0x000008, "Member 'GymObjectiveControl_HasQuest::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymObjectiveControl.IsQuestActive
// 0x000C (0x000C - 0x0000)
struct GymObjectiveControl_IsQuestActive final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymObjectiveControl_IsQuestActive) == 0x000004, "Wrong alignment on GymObjectiveControl_IsQuestActive");
static_assert(sizeof(GymObjectiveControl_IsQuestActive) == 0x00000C, "Wrong size on GymObjectiveControl_IsQuestActive");
static_assert(offsetof(GymObjectiveControl_IsQuestActive, QuestID) == 0x000000, "Member 'GymObjectiveControl_IsQuestActive::QuestID' has a wrong offset!");
static_assert(offsetof(GymObjectiveControl_IsQuestActive, ReturnValue) == 0x000008, "Member 'GymObjectiveControl_IsQuestActive::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymObjectiveControl.IsQuestCompleted
// 0x000C (0x000C - 0x0000)
struct GymObjectiveControl_IsQuestCompleted final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymObjectiveControl_IsQuestCompleted) == 0x000004, "Wrong alignment on GymObjectiveControl_IsQuestCompleted");
static_assert(sizeof(GymObjectiveControl_IsQuestCompleted) == 0x00000C, "Wrong size on GymObjectiveControl_IsQuestCompleted");
static_assert(offsetof(GymObjectiveControl_IsQuestCompleted, QuestID) == 0x000000, "Member 'GymObjectiveControl_IsQuestCompleted::QuestID' has a wrong offset!");
static_assert(offsetof(GymObjectiveControl_IsQuestCompleted, ReturnValue) == 0x000008, "Member 'GymObjectiveControl_IsQuestCompleted::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymObjectiveControl.IsQuestFailed
// 0x000C (0x000C - 0x0000)
struct GymObjectiveControl_IsQuestFailed final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymObjectiveControl_IsQuestFailed) == 0x000004, "Wrong alignment on GymObjectiveControl_IsQuestFailed");
static_assert(sizeof(GymObjectiveControl_IsQuestFailed) == 0x00000C, "Wrong size on GymObjectiveControl_IsQuestFailed");
static_assert(offsetof(GymObjectiveControl_IsQuestFailed, QuestID) == 0x000000, "Member 'GymObjectiveControl_IsQuestFailed::QuestID' has a wrong offset!");
static_assert(offsetof(GymObjectiveControl_IsQuestFailed, ReturnValue) == 0x000008, "Member 'GymObjectiveControl_IsQuestFailed::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymObjectiveControl.IsQuestInProgress
// 0x000C (0x000C - 0x0000)
struct GymObjectiveControl_IsQuestInProgress final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymObjectiveControl_IsQuestInProgress) == 0x000004, "Wrong alignment on GymObjectiveControl_IsQuestInProgress");
static_assert(sizeof(GymObjectiveControl_IsQuestInProgress) == 0x00000C, "Wrong size on GymObjectiveControl_IsQuestInProgress");
static_assert(offsetof(GymObjectiveControl_IsQuestInProgress, QuestID) == 0x000000, "Member 'GymObjectiveControl_IsQuestInProgress::QuestID' has a wrong offset!");
static_assert(offsetof(GymObjectiveControl_IsQuestInProgress, ReturnValue) == 0x000008, "Member 'GymObjectiveControl_IsQuestInProgress::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymObstacleCourseRules.GoalReached
// 0x0010 (0x0010 - 0x0000)
struct GymObstacleCourseRules_GoalReached final
{
public:
	class AActor*                                 Goal;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGymCharacter*                          PlayerCharacter;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymObstacleCourseRules_GoalReached) == 0x000008, "Wrong alignment on GymObstacleCourseRules_GoalReached");
static_assert(sizeof(GymObstacleCourseRules_GoalReached) == 0x000010, "Wrong size on GymObstacleCourseRules_GoalReached");
static_assert(offsetof(GymObstacleCourseRules_GoalReached, Goal) == 0x000000, "Member 'GymObstacleCourseRules_GoalReached::Goal' has a wrong offset!");
static_assert(offsetof(GymObstacleCourseRules_GoalReached, PlayerCharacter) == 0x000008, "Member 'GymObstacleCourseRules_GoalReached::PlayerCharacter' has a wrong offset!");

// Function GYMGAME.GymOCReplicatedData.SetMaxFlags
// 0x0004 (0x0004 - 0x0000)
struct GymOCReplicatedData_SetMaxFlags final
{
public:
	int32                                         Flags_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymOCReplicatedData_SetMaxFlags) == 0x000004, "Wrong alignment on GymOCReplicatedData_SetMaxFlags");
static_assert(sizeof(GymOCReplicatedData_SetMaxFlags) == 0x000004, "Wrong size on GymOCReplicatedData_SetMaxFlags");
static_assert(offsetof(GymOCReplicatedData_SetMaxFlags, Flags_0) == 0x000000, "Member 'GymOCReplicatedData_SetMaxFlags::Flags_0' has a wrong offset!");

// Function GYMGAME.GymOCReplicatedData.SetUnlimitedFlags
// 0x0001 (0x0001 - 0x0000)
struct GymOCReplicatedData_SetUnlimitedFlags final
{
public:
	bool                                          Unlimited;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymOCReplicatedData_SetUnlimitedFlags) == 0x000001, "Wrong alignment on GymOCReplicatedData_SetUnlimitedFlags");
static_assert(sizeof(GymOCReplicatedData_SetUnlimitedFlags) == 0x000001, "Wrong size on GymOCReplicatedData_SetUnlimitedFlags");
static_assert(offsetof(GymOCReplicatedData_SetUnlimitedFlags, Unlimited) == 0x000000, "Member 'GymOCReplicatedData_SetUnlimitedFlags::Unlimited' has a wrong offset!");

// Function GYMGAME.GymOCReplicatedData.GetMaxFlags
// 0x0004 (0x0004 - 0x0000)
struct GymOCReplicatedData_GetMaxFlags final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymOCReplicatedData_GetMaxFlags) == 0x000004, "Wrong alignment on GymOCReplicatedData_GetMaxFlags");
static_assert(sizeof(GymOCReplicatedData_GetMaxFlags) == 0x000004, "Wrong size on GymOCReplicatedData_GetMaxFlags");
static_assert(offsetof(GymOCReplicatedData_GetMaxFlags, ReturnValue) == 0x000000, "Member 'GymOCReplicatedData_GetMaxFlags::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymOCReplicatedData.IsUnlimitedFlags
// 0x0001 (0x0001 - 0x0000)
struct GymOCReplicatedData_IsUnlimitedFlags final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymOCReplicatedData_IsUnlimitedFlags) == 0x000001, "Wrong alignment on GymOCReplicatedData_IsUnlimitedFlags");
static_assert(sizeof(GymOCReplicatedData_IsUnlimitedFlags) == 0x000001, "Wrong size on GymOCReplicatedData_IsUnlimitedFlags");
static_assert(offsetof(GymOCReplicatedData_IsUnlimitedFlags, ReturnValue) == 0x000000, "Member 'GymOCReplicatedData_IsUnlimitedFlags::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymParticipantRepData.LastCheckpointVisitedTime
// 0x0004 (0x0004 - 0x0000)
struct GymParticipantRepData_LastCheckpointVisitedTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymParticipantRepData_LastCheckpointVisitedTime) == 0x000004, "Wrong alignment on GymParticipantRepData_LastCheckpointVisitedTime");
static_assert(sizeof(GymParticipantRepData_LastCheckpointVisitedTime) == 0x000004, "Wrong size on GymParticipantRepData_LastCheckpointVisitedTime");
static_assert(offsetof(GymParticipantRepData_LastCheckpointVisitedTime, ReturnValue) == 0x000000, "Member 'GymParticipantRepData_LastCheckpointVisitedTime::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymParticipantRepData.SetPlayerRuleState
// 0x0001 (0x0001 - 0x0000)
struct GymParticipantRepData_SetPlayerRuleState final
{
public:
	EPlayerRuleState                              RuleState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymParticipantRepData_SetPlayerRuleState) == 0x000001, "Wrong alignment on GymParticipantRepData_SetPlayerRuleState");
static_assert(sizeof(GymParticipantRepData_SetPlayerRuleState) == 0x000001, "Wrong size on GymParticipantRepData_SetPlayerRuleState");
static_assert(offsetof(GymParticipantRepData_SetPlayerRuleState, RuleState) == 0x000000, "Member 'GymParticipantRepData_SetPlayerRuleState::RuleState' has a wrong offset!");

// Function GYMGAME.GymParticipantRepData.CheckpointsVisited
// 0x0004 (0x0004 - 0x0000)
struct GymParticipantRepData_CheckpointsVisited final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymParticipantRepData_CheckpointsVisited) == 0x000004, "Wrong alignment on GymParticipantRepData_CheckpointsVisited");
static_assert(sizeof(GymParticipantRepData_CheckpointsVisited) == 0x000004, "Wrong size on GymParticipantRepData_CheckpointsVisited");
static_assert(offsetof(GymParticipantRepData_CheckpointsVisited, ReturnValue) == 0x000000, "Member 'GymParticipantRepData_CheckpointsVisited::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymParticipantRepData.GetPlayerRuleState
// 0x0001 (0x0001 - 0x0000)
struct GymParticipantRepData_GetPlayerRuleState final
{
public:
	EPlayerRuleState                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymParticipantRepData_GetPlayerRuleState) == 0x000001, "Wrong alignment on GymParticipantRepData_GetPlayerRuleState");
static_assert(sizeof(GymParticipantRepData_GetPlayerRuleState) == 0x000001, "Wrong size on GymParticipantRepData_GetPlayerRuleState");
static_assert(offsetof(GymParticipantRepData_GetPlayerRuleState, ReturnValue) == 0x000000, "Member 'GymParticipantRepData_GetPlayerRuleState::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymParticipantRepDataBomb.SetIsTagged
// 0x0001 (0x0001 - 0x0000)
struct GymParticipantRepDataBomb_SetIsTagged final
{
public:
	bool                                          IsTagged;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymParticipantRepDataBomb_SetIsTagged) == 0x000001, "Wrong alignment on GymParticipantRepDataBomb_SetIsTagged");
static_assert(sizeof(GymParticipantRepDataBomb_SetIsTagged) == 0x000001, "Wrong size on GymParticipantRepDataBomb_SetIsTagged");
static_assert(offsetof(GymParticipantRepDataBomb_SetIsTagged, IsTagged) == 0x000000, "Member 'GymParticipantRepDataBomb_SetIsTagged::IsTagged' has a wrong offset!");

// Function GYMGAME.GymParticipantRepDataBomb.SetRoundEliminated
// 0x0004 (0x0004 - 0x0000)
struct GymParticipantRepDataBomb_SetRoundEliminated final
{
public:
	int32                                         RoundEliminated;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymParticipantRepDataBomb_SetRoundEliminated) == 0x000004, "Wrong alignment on GymParticipantRepDataBomb_SetRoundEliminated");
static_assert(sizeof(GymParticipantRepDataBomb_SetRoundEliminated) == 0x000004, "Wrong size on GymParticipantRepDataBomb_SetRoundEliminated");
static_assert(offsetof(GymParticipantRepDataBomb_SetRoundEliminated, RoundEliminated) == 0x000000, "Member 'GymParticipantRepDataBomb_SetRoundEliminated::RoundEliminated' has a wrong offset!");

// Function GYMGAME.GymParticipantRepDataBomb.GetIsTagged
// 0x0001 (0x0001 - 0x0000)
struct GymParticipantRepDataBomb_GetIsTagged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymParticipantRepDataBomb_GetIsTagged) == 0x000001, "Wrong alignment on GymParticipantRepDataBomb_GetIsTagged");
static_assert(sizeof(GymParticipantRepDataBomb_GetIsTagged) == 0x000001, "Wrong size on GymParticipantRepDataBomb_GetIsTagged");
static_assert(offsetof(GymParticipantRepDataBomb_GetIsTagged, ReturnValue) == 0x000000, "Member 'GymParticipantRepDataBomb_GetIsTagged::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymParticipantRepDataBomb.GetRoundEliminated
// 0x0004 (0x0004 - 0x0000)
struct GymParticipantRepDataBomb_GetRoundEliminated final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymParticipantRepDataBomb_GetRoundEliminated) == 0x000004, "Wrong alignment on GymParticipantRepDataBomb_GetRoundEliminated");
static_assert(sizeof(GymParticipantRepDataBomb_GetRoundEliminated) == 0x000004, "Wrong size on GymParticipantRepDataBomb_GetRoundEliminated");
static_assert(offsetof(GymParticipantRepDataBomb_GetRoundEliminated, ReturnValue) == 0x000000, "Member 'GymParticipantRepDataBomb_GetRoundEliminated::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymParticipantRepDataCircuit.SetLapsCompleted
// 0x0004 (0x0004 - 0x0000)
struct GymParticipantRepDataCircuit_SetLapsCompleted final
{
public:
	int32                                         Laps;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymParticipantRepDataCircuit_SetLapsCompleted) == 0x000004, "Wrong alignment on GymParticipantRepDataCircuit_SetLapsCompleted");
static_assert(sizeof(GymParticipantRepDataCircuit_SetLapsCompleted) == 0x000004, "Wrong size on GymParticipantRepDataCircuit_SetLapsCompleted");
static_assert(offsetof(GymParticipantRepDataCircuit_SetLapsCompleted, Laps) == 0x000000, "Member 'GymParticipantRepDataCircuit_SetLapsCompleted::Laps' has a wrong offset!");

// Function GYMGAME.GymParticipantRepDataCircuit.GetLapsCompleted
// 0x0004 (0x0004 - 0x0000)
struct GymParticipantRepDataCircuit_GetLapsCompleted final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymParticipantRepDataCircuit_GetLapsCompleted) == 0x000004, "Wrong alignment on GymParticipantRepDataCircuit_GetLapsCompleted");
static_assert(sizeof(GymParticipantRepDataCircuit_GetLapsCompleted) == 0x000004, "Wrong size on GymParticipantRepDataCircuit_GetLapsCompleted");
static_assert(offsetof(GymParticipantRepDataCircuit_GetLapsCompleted, ReturnValue) == 0x000000, "Member 'GymParticipantRepDataCircuit_GetLapsCompleted::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymParticipantRepDataLoot.GetLastTimeLootCollected
// 0x0004 (0x0004 - 0x0000)
struct GymParticipantRepDataLoot_GetLastTimeLootCollected final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymParticipantRepDataLoot_GetLastTimeLootCollected) == 0x000004, "Wrong alignment on GymParticipantRepDataLoot_GetLastTimeLootCollected");
static_assert(sizeof(GymParticipantRepDataLoot_GetLastTimeLootCollected) == 0x000004, "Wrong size on GymParticipantRepDataLoot_GetLastTimeLootCollected");
static_assert(offsetof(GymParticipantRepDataLoot_GetLastTimeLootCollected, ReturnValue) == 0x000000, "Member 'GymParticipantRepDataLoot_GetLastTimeLootCollected::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymParticipantRepDataLoot.GetLootCollected
// 0x0004 (0x0004 - 0x0000)
struct GymParticipantRepDataLoot_GetLootCollected final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymParticipantRepDataLoot_GetLootCollected) == 0x000004, "Wrong alignment on GymParticipantRepDataLoot_GetLootCollected");
static_assert(sizeof(GymParticipantRepDataLoot_GetLootCollected) == 0x000004, "Wrong size on GymParticipantRepDataLoot_GetLootCollected");
static_assert(offsetof(GymParticipantRepDataLoot_GetLootCollected, ReturnValue) == 0x000000, "Member 'GymParticipantRepDataLoot_GetLootCollected::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymParticipantRepDataLoot.GetLootLeft
// 0x0004 (0x0004 - 0x0000)
struct GymParticipantRepDataLoot_GetLootLeft final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymParticipantRepDataLoot_GetLootLeft) == 0x000004, "Wrong alignment on GymParticipantRepDataLoot_GetLootLeft");
static_assert(sizeof(GymParticipantRepDataLoot_GetLootLeft) == 0x000004, "Wrong size on GymParticipantRepDataLoot_GetLootLeft");
static_assert(offsetof(GymParticipantRepDataLoot_GetLootLeft, ReturnValue) == 0x000000, "Member 'GymParticipantRepDataLoot_GetLootLeft::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymParticipantRepDataLoot.HasCollectedAll
// 0x0001 (0x0001 - 0x0000)
struct GymParticipantRepDataLoot_HasCollectedAll final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymParticipantRepDataLoot_HasCollectedAll) == 0x000001, "Wrong alignment on GymParticipantRepDataLoot_HasCollectedAll");
static_assert(sizeof(GymParticipantRepDataLoot_HasCollectedAll) == 0x000001, "Wrong size on GymParticipantRepDataLoot_HasCollectedAll");
static_assert(offsetof(GymParticipantRepDataLoot_HasCollectedAll, ReturnValue) == 0x000000, "Member 'GymParticipantRepDataLoot_HasCollectedAll::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymParticipantRepDataLoot.HasCollectingStarted
// 0x0001 (0x0001 - 0x0000)
struct GymParticipantRepDataLoot_HasCollectingStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymParticipantRepDataLoot_HasCollectingStarted) == 0x000001, "Wrong alignment on GymParticipantRepDataLoot_HasCollectingStarted");
static_assert(sizeof(GymParticipantRepDataLoot_HasCollectingStarted) == 0x000001, "Wrong size on GymParticipantRepDataLoot_HasCollectingStarted");
static_assert(offsetof(GymParticipantRepDataLoot_HasCollectingStarted, ReturnValue) == 0x000000, "Member 'GymParticipantRepDataLoot_HasCollectingStarted::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymParticipantRepDataObby.SetFlagsUsed
// 0x0004 (0x0004 - 0x0000)
struct GymParticipantRepDataObby_SetFlagsUsed final
{
public:
	int32                                         NewFlagsUsed;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymParticipantRepDataObby_SetFlagsUsed) == 0x000004, "Wrong alignment on GymParticipantRepDataObby_SetFlagsUsed");
static_assert(sizeof(GymParticipantRepDataObby_SetFlagsUsed) == 0x000004, "Wrong size on GymParticipantRepDataObby_SetFlagsUsed");
static_assert(offsetof(GymParticipantRepDataObby_SetFlagsUsed, NewFlagsUsed) == 0x000000, "Member 'GymParticipantRepDataObby_SetFlagsUsed::NewFlagsUsed' has a wrong offset!");

// Function GYMGAME.GymParticipantRepDataObby.GetFlagsUsed
// 0x0004 (0x0004 - 0x0000)
struct GymParticipantRepDataObby_GetFlagsUsed final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymParticipantRepDataObby_GetFlagsUsed) == 0x000004, "Wrong alignment on GymParticipantRepDataObby_GetFlagsUsed");
static_assert(sizeof(GymParticipantRepDataObby_GetFlagsUsed) == 0x000004, "Wrong size on GymParticipantRepDataObby_GetFlagsUsed");
static_assert(offsetof(GymParticipantRepDataObby_GetFlagsUsed, ReturnValue) == 0x000000, "Member 'GymParticipantRepDataObby_GetFlagsUsed::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPhotoModeControl.ClientExitPhotoMode
// 0x0048 (0x0048 - 0x0000)
struct GymPhotoModeControl_ClientExitPhotoMode final
{
public:
	struct FVector                                PlayerLocation;                                    // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               PlayerRotation;                                    // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ControlRotation;                                   // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPhotoModeControl_ClientExitPhotoMode) == 0x000008, "Wrong alignment on GymPhotoModeControl_ClientExitPhotoMode");
static_assert(sizeof(GymPhotoModeControl_ClientExitPhotoMode) == 0x000048, "Wrong size on GymPhotoModeControl_ClientExitPhotoMode");
static_assert(offsetof(GymPhotoModeControl_ClientExitPhotoMode, PlayerLocation) == 0x000000, "Member 'GymPhotoModeControl_ClientExitPhotoMode::PlayerLocation' has a wrong offset!");
static_assert(offsetof(GymPhotoModeControl_ClientExitPhotoMode, PlayerRotation) == 0x000018, "Member 'GymPhotoModeControl_ClientExitPhotoMode::PlayerRotation' has a wrong offset!");
static_assert(offsetof(GymPhotoModeControl_ClientExitPhotoMode, ControlRotation) == 0x000030, "Member 'GymPhotoModeControl_ClientExitPhotoMode::ControlRotation' has a wrong offset!");

// Function GYMGAME.GymPhotoModeControl.EnterPhotoMode
// 0x0018 (0x0018 - 0x0000)
struct GymPhotoModeControl_EnterPhotoMode final
{
public:
	struct FRotator                               PlayerCameraRotation;                              // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPhotoModeControl_EnterPhotoMode) == 0x000008, "Wrong alignment on GymPhotoModeControl_EnterPhotoMode");
static_assert(sizeof(GymPhotoModeControl_EnterPhotoMode) == 0x000018, "Wrong size on GymPhotoModeControl_EnterPhotoMode");
static_assert(offsetof(GymPhotoModeControl_EnterPhotoMode, PlayerCameraRotation) == 0x000000, "Member 'GymPhotoModeControl_EnterPhotoMode::PlayerCameraRotation' has a wrong offset!");

// Function GYMGAME.RegionOptionFactory.RegionStringToText
// 0x0028 (0x0028 - 0x0000)
struct RegionOptionFactory_RegionStringToText final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RegionOptionFactory_RegionStringToText) == 0x000008, "Wrong alignment on RegionOptionFactory_RegionStringToText");
static_assert(sizeof(RegionOptionFactory_RegionStringToText) == 0x000028, "Wrong size on RegionOptionFactory_RegionStringToText");
static_assert(offsetof(RegionOptionFactory_RegionStringToText, String) == 0x000000, "Member 'RegionOptionFactory_RegionStringToText::String' has a wrong offset!");
static_assert(offsetof(RegionOptionFactory_RegionStringToText, ReturnValue) == 0x000010, "Member 'RegionOptionFactory_RegionStringToText::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPhysicsControl.OnPlayerHit
// 0x0118 (0x0118 - 0x0000)
struct GymPhysicsControl_OnPlayerHit final
{
public:
	class UPrimitiveComponent*                    HitComp;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0030(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPhysicsControl_OnPlayerHit) == 0x000008, "Wrong alignment on GymPhysicsControl_OnPlayerHit");
static_assert(sizeof(GymPhysicsControl_OnPlayerHit) == 0x000118, "Wrong size on GymPhysicsControl_OnPlayerHit");
static_assert(offsetof(GymPhysicsControl_OnPlayerHit, HitComp) == 0x000000, "Member 'GymPhysicsControl_OnPlayerHit::HitComp' has a wrong offset!");
static_assert(offsetof(GymPhysicsControl_OnPlayerHit, OtherActor) == 0x000008, "Member 'GymPhysicsControl_OnPlayerHit::OtherActor' has a wrong offset!");
static_assert(offsetof(GymPhysicsControl_OnPlayerHit, OtherComp) == 0x000010, "Member 'GymPhysicsControl_OnPlayerHit::OtherComp' has a wrong offset!");
static_assert(offsetof(GymPhysicsControl_OnPlayerHit, NormalImpulse) == 0x000018, "Member 'GymPhysicsControl_OnPlayerHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(GymPhysicsControl_OnPlayerHit, Hit) == 0x000030, "Member 'GymPhysicsControl_OnPlayerHit::Hit' has a wrong offset!");

// Function GYMGAME.GymPhysicsControl.OnPlayerOverlapBegin
// 0x0108 (0x0108 - 0x0000)
struct GymPhysicsControl_OnPlayerOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPhysicsControl_OnPlayerOverlapBegin) == 0x000008, "Wrong alignment on GymPhysicsControl_OnPlayerOverlapBegin");
static_assert(sizeof(GymPhysicsControl_OnPlayerOverlapBegin) == 0x000108, "Wrong size on GymPhysicsControl_OnPlayerOverlapBegin");
static_assert(offsetof(GymPhysicsControl_OnPlayerOverlapBegin, OverlappedComponent) == 0x000000, "Member 'GymPhysicsControl_OnPlayerOverlapBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(GymPhysicsControl_OnPlayerOverlapBegin, OtherActor) == 0x000008, "Member 'GymPhysicsControl_OnPlayerOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(GymPhysicsControl_OnPlayerOverlapBegin, OtherComponent) == 0x000010, "Member 'GymPhysicsControl_OnPlayerOverlapBegin::OtherComponent' has a wrong offset!");
static_assert(offsetof(GymPhysicsControl_OnPlayerOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'GymPhysicsControl_OnPlayerOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(GymPhysicsControl_OnPlayerOverlapBegin, bFromSweep) == 0x00001C, "Member 'GymPhysicsControl_OnPlayerOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(GymPhysicsControl_OnPlayerOverlapBegin, Hit) == 0x000020, "Member 'GymPhysicsControl_OnPlayerOverlapBegin::Hit' has a wrong offset!");

// Function GYMGAME.GymPhysicsControl.OnPlayerOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct GymPhysicsControl_OnPlayerOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymPhysicsControl_OnPlayerOverlapEnd) == 0x000008, "Wrong alignment on GymPhysicsControl_OnPlayerOverlapEnd");
static_assert(sizeof(GymPhysicsControl_OnPlayerOverlapEnd) == 0x000020, "Wrong size on GymPhysicsControl_OnPlayerOverlapEnd");
static_assert(offsetof(GymPhysicsControl_OnPlayerOverlapEnd, OverlappedComponent) == 0x000000, "Member 'GymPhysicsControl_OnPlayerOverlapEnd::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(GymPhysicsControl_OnPlayerOverlapEnd, OtherActor) == 0x000008, "Member 'GymPhysicsControl_OnPlayerOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(GymPhysicsControl_OnPlayerOverlapEnd, OtherComponent) == 0x000010, "Member 'GymPhysicsControl_OnPlayerOverlapEnd::OtherComponent' has a wrong offset!");
static_assert(offsetof(GymPhysicsControl_OnPlayerOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'GymPhysicsControl_OnPlayerOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function GYMGAME.GymPlayerCheckpointControl.Client_PlayerReachedCheckpoint
// 0x0008 (0x0008 - 0x0000)
struct GymPlayerCheckpointControl_Client_PlayerReachedCheckpoint final
{
public:
	class AGymCheckpointPiece*                    Checkpoint;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerCheckpointControl_Client_PlayerReachedCheckpoint) == 0x000008, "Wrong alignment on GymPlayerCheckpointControl_Client_PlayerReachedCheckpoint");
static_assert(sizeof(GymPlayerCheckpointControl_Client_PlayerReachedCheckpoint) == 0x000008, "Wrong size on GymPlayerCheckpointControl_Client_PlayerReachedCheckpoint");
static_assert(offsetof(GymPlayerCheckpointControl_Client_PlayerReachedCheckpoint, Checkpoint) == 0x000000, "Member 'GymPlayerCheckpointControl_Client_PlayerReachedCheckpoint::Checkpoint' has a wrong offset!");

// Function GYMGAME.GymPlayerCheckpointControl.GetCheckpointNum
// 0x0004 (0x0004 - 0x0000)
struct GymPlayerCheckpointControl_GetCheckpointNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerCheckpointControl_GetCheckpointNum) == 0x000004, "Wrong alignment on GymPlayerCheckpointControl_GetCheckpointNum");
static_assert(sizeof(GymPlayerCheckpointControl_GetCheckpointNum) == 0x000004, "Wrong size on GymPlayerCheckpointControl_GetCheckpointNum");
static_assert(offsetof(GymPlayerCheckpointControl_GetCheckpointNum, ReturnValue) == 0x000000, "Member 'GymPlayerCheckpointControl_GetCheckpointNum::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPlayerCheckpointControl.GetCheckpointsVisited
// 0x0004 (0x0004 - 0x0000)
struct GymPlayerCheckpointControl_GetCheckpointsVisited final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerCheckpointControl_GetCheckpointsVisited) == 0x000004, "Wrong alignment on GymPlayerCheckpointControl_GetCheckpointsVisited");
static_assert(sizeof(GymPlayerCheckpointControl_GetCheckpointsVisited) == 0x000004, "Wrong size on GymPlayerCheckpointControl_GetCheckpointsVisited");
static_assert(offsetof(GymPlayerCheckpointControl_GetCheckpointsVisited, ReturnValue) == 0x000000, "Member 'GymPlayerCheckpointControl_GetCheckpointsVisited::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPlayerCheckpointControl.LastCheckpointVisitedTime
// 0x0004 (0x0004 - 0x0000)
struct GymPlayerCheckpointControl_LastCheckpointVisitedTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerCheckpointControl_LastCheckpointVisitedTime) == 0x000004, "Wrong alignment on GymPlayerCheckpointControl_LastCheckpointVisitedTime");
static_assert(sizeof(GymPlayerCheckpointControl_LastCheckpointVisitedTime) == 0x000004, "Wrong size on GymPlayerCheckpointControl_LastCheckpointVisitedTime");
static_assert(offsetof(GymPlayerCheckpointControl_LastCheckpointVisitedTime, ReturnValue) == 0x000000, "Member 'GymPlayerCheckpointControl_LastCheckpointVisitedTime::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPlayerCheckpointControl.Multi_ConfirmCheckpointReached
// 0x0008 (0x0008 - 0x0000)
struct GymPlayerCheckpointControl_Multi_ConfirmCheckpointReached final
{
public:
	class AGymCheckpointPiece*                    Checkpoint;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerCheckpointControl_Multi_ConfirmCheckpointReached) == 0x000008, "Wrong alignment on GymPlayerCheckpointControl_Multi_ConfirmCheckpointReached");
static_assert(sizeof(GymPlayerCheckpointControl_Multi_ConfirmCheckpointReached) == 0x000008, "Wrong size on GymPlayerCheckpointControl_Multi_ConfirmCheckpointReached");
static_assert(offsetof(GymPlayerCheckpointControl_Multi_ConfirmCheckpointReached, Checkpoint) == 0x000000, "Member 'GymPlayerCheckpointControl_Multi_ConfirmCheckpointReached::Checkpoint' has a wrong offset!");

// Function GYMGAME.GymPlayerCheckpointControl.Multi_ConfirmGoalReached
// 0x0008 (0x0008 - 0x0000)
struct GymPlayerCheckpointControl_Multi_ConfirmGoalReached final
{
public:
	class AActor*                                 Goal;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerCheckpointControl_Multi_ConfirmGoalReached) == 0x000008, "Wrong alignment on GymPlayerCheckpointControl_Multi_ConfirmGoalReached");
static_assert(sizeof(GymPlayerCheckpointControl_Multi_ConfirmGoalReached) == 0x000008, "Wrong size on GymPlayerCheckpointControl_Multi_ConfirmGoalReached");
static_assert(offsetof(GymPlayerCheckpointControl_Multi_ConfirmGoalReached, Goal) == 0x000000, "Member 'GymPlayerCheckpointControl_Multi_ConfirmGoalReached::Goal' has a wrong offset!");

// Function GYMGAME.GymPlayerCheckpointControl.SetStarted
// 0x0001 (0x0001 - 0x0000)
struct GymPlayerCheckpointControl_SetStarted final
{
public:
	bool                                          bStarted;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerCheckpointControl_SetStarted) == 0x000001, "Wrong alignment on GymPlayerCheckpointControl_SetStarted");
static_assert(sizeof(GymPlayerCheckpointControl_SetStarted) == 0x000001, "Wrong size on GymPlayerCheckpointControl_SetStarted");
static_assert(offsetof(GymPlayerCheckpointControl_SetStarted, bStarted) == 0x000000, "Member 'GymPlayerCheckpointControl_SetStarted::bStarted' has a wrong offset!");

// Function GYMGAME.GymPlayerController.EditorIsOpen
// 0x0001 (0x0001 - 0x0000)
struct GymPlayerController_EditorIsOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_EditorIsOpen) == 0x000001, "Wrong alignment on GymPlayerController_EditorIsOpen");
static_assert(sizeof(GymPlayerController_EditorIsOpen) == 0x000001, "Wrong size on GymPlayerController_EditorIsOpen");
static_assert(offsetof(GymPlayerController_EditorIsOpen, ReturnValue) == 0x000000, "Member 'GymPlayerController_EditorIsOpen::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPlayerController.IsDebugCareerUnlocked
// 0x0001 (0x0001 - 0x0000)
struct GymPlayerController_IsDebugCareerUnlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_IsDebugCareerUnlocked) == 0x000001, "Wrong alignment on GymPlayerController_IsDebugCareerUnlocked");
static_assert(sizeof(GymPlayerController_IsDebugCareerUnlocked) == 0x000001, "Wrong size on GymPlayerController_IsDebugCareerUnlocked");
static_assert(offsetof(GymPlayerController_IsDebugCareerUnlocked, ReturnValue) == 0x000000, "Member 'GymPlayerController_IsDebugCareerUnlocked::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPlayerController.Client_BeginLoadingScreen
// 0x0018 (0x0018 - 0x0000)
struct GymPlayerController_Client_BeginLoadingScreen final
{
public:
	float                                         CloseInTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_Client_BeginLoadingScreen) == 0x000008, "Wrong alignment on GymPlayerController_Client_BeginLoadingScreen");
static_assert(sizeof(GymPlayerController_Client_BeginLoadingScreen) == 0x000018, "Wrong size on GymPlayerController_Client_BeginLoadingScreen");
static_assert(offsetof(GymPlayerController_Client_BeginLoadingScreen, CloseInTime) == 0x000000, "Member 'GymPlayerController_Client_BeginLoadingScreen::CloseInTime' has a wrong offset!");
static_assert(offsetof(GymPlayerController_Client_BeginLoadingScreen, Message) == 0x000008, "Member 'GymPlayerController_Client_BeginLoadingScreen::Message' has a wrong offset!");

// Function GYMGAME.GymPlayerController.Client_FadeInOut
// 0x0010 (0x0010 - 0x0000)
struct GymPlayerController_Client_FadeInOut final
{
public:
	float                                         FadeInTime;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Layer;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_Client_FadeInOut) == 0x000004, "Wrong alignment on GymPlayerController_Client_FadeInOut");
static_assert(sizeof(GymPlayerController_Client_FadeInOut) == 0x000010, "Wrong size on GymPlayerController_Client_FadeInOut");
static_assert(offsetof(GymPlayerController_Client_FadeInOut, FadeInTime) == 0x000000, "Member 'GymPlayerController_Client_FadeInOut::FadeInTime' has a wrong offset!");
static_assert(offsetof(GymPlayerController_Client_FadeInOut, FadeTime) == 0x000004, "Member 'GymPlayerController_Client_FadeInOut::FadeTime' has a wrong offset!");
static_assert(offsetof(GymPlayerController_Client_FadeInOut, FadeOutTime) == 0x000008, "Member 'GymPlayerController_Client_FadeInOut::FadeOutTime' has a wrong offset!");
static_assert(offsetof(GymPlayerController_Client_FadeInOut, Layer) == 0x00000C, "Member 'GymPlayerController_Client_FadeInOut::Layer' has a wrong offset!");

// Function GYMGAME.GymPlayerController.Client_KillZoneFadeInOut
// 0x0010 (0x0010 - 0x0000)
struct GymPlayerController_Client_KillZoneFadeInOut final
{
public:
	float                                         FadeInTime;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Layer;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_Client_KillZoneFadeInOut) == 0x000004, "Wrong alignment on GymPlayerController_Client_KillZoneFadeInOut");
static_assert(sizeof(GymPlayerController_Client_KillZoneFadeInOut) == 0x000010, "Wrong size on GymPlayerController_Client_KillZoneFadeInOut");
static_assert(offsetof(GymPlayerController_Client_KillZoneFadeInOut, FadeInTime) == 0x000000, "Member 'GymPlayerController_Client_KillZoneFadeInOut::FadeInTime' has a wrong offset!");
static_assert(offsetof(GymPlayerController_Client_KillZoneFadeInOut, FadeTime) == 0x000004, "Member 'GymPlayerController_Client_KillZoneFadeInOut::FadeTime' has a wrong offset!");
static_assert(offsetof(GymPlayerController_Client_KillZoneFadeInOut, FadeOutTime) == 0x000008, "Member 'GymPlayerController_Client_KillZoneFadeInOut::FadeOutTime' has a wrong offset!");
static_assert(offsetof(GymPlayerController_Client_KillZoneFadeInOut, Layer) == 0x00000C, "Member 'GymPlayerController_Client_KillZoneFadeInOut::Layer' has a wrong offset!");

// Function GYMGAME.GymPlayerController.Client_LootPickedUp
// 0x0008 (0x0008 - 0x0000)
struct GymPlayerController_Client_LootPickedUp final
{
public:
	class AGymLootActor*                          Loot;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_Client_LootPickedUp) == 0x000008, "Wrong alignment on GymPlayerController_Client_LootPickedUp");
static_assert(sizeof(GymPlayerController_Client_LootPickedUp) == 0x000008, "Wrong size on GymPlayerController_Client_LootPickedUp");
static_assert(offsetof(GymPlayerController_Client_LootPickedUp, Loot) == 0x000000, "Member 'GymPlayerController_Client_LootPickedUp::Loot' has a wrong offset!");

// Function GYMGAME.GymPlayerController.Client_SetLootVisibility
// 0x0010 (0x0010 - 0x0000)
struct GymPlayerController_Client_SetLootVisibility final
{
public:
	class AGymLootActor*                          Loot;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisiblity;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymPlayerController_Client_SetLootVisibility) == 0x000008, "Wrong alignment on GymPlayerController_Client_SetLootVisibility");
static_assert(sizeof(GymPlayerController_Client_SetLootVisibility) == 0x000010, "Wrong size on GymPlayerController_Client_SetLootVisibility");
static_assert(offsetof(GymPlayerController_Client_SetLootVisibility, Loot) == 0x000000, "Member 'GymPlayerController_Client_SetLootVisibility::Loot' has a wrong offset!");
static_assert(offsetof(GymPlayerController_Client_SetLootVisibility, bVisiblity) == 0x000008, "Member 'GymPlayerController_Client_SetLootVisibility::bVisiblity' has a wrong offset!");

// Function GYMGAME.GymPlayerController.DebugCreatePlaylist
// 0x0010 (0x0010 - 0x0000)
struct GymPlayerController_DebugCreatePlaylist final
{
public:
	class FString                                 Type;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_DebugCreatePlaylist) == 0x000008, "Wrong alignment on GymPlayerController_DebugCreatePlaylist");
static_assert(sizeof(GymPlayerController_DebugCreatePlaylist) == 0x000010, "Wrong size on GymPlayerController_DebugCreatePlaylist");
static_assert(offsetof(GymPlayerController_DebugCreatePlaylist, Type) == 0x000000, "Member 'GymPlayerController_DebugCreatePlaylist::Type' has a wrong offset!");

// Function GYMGAME.GymPlayerController.DebugForceStartRules
// 0x0004 (0x0004 - 0x0000)
struct GymPlayerController_DebugForceStartRules final
{
public:
	int32                                         StartIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_DebugForceStartRules) == 0x000004, "Wrong alignment on GymPlayerController_DebugForceStartRules");
static_assert(sizeof(GymPlayerController_DebugForceStartRules) == 0x000004, "Wrong size on GymPlayerController_DebugForceStartRules");
static_assert(offsetof(GymPlayerController_DebugForceStartRules, StartIndex) == 0x000000, "Member 'GymPlayerController_DebugForceStartRules::StartIndex' has a wrong offset!");

// Function GYMGAME.GymPlayerController.DebugInitializeLobby
// 0x0010 (0x0010 - 0x0000)
struct GymPlayerController_DebugInitializeLobby final
{
public:
	class FString                                 MapId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_DebugInitializeLobby) == 0x000008, "Wrong alignment on GymPlayerController_DebugInitializeLobby");
static_assert(sizeof(GymPlayerController_DebugInitializeLobby) == 0x000010, "Wrong size on GymPlayerController_DebugInitializeLobby");
static_assert(offsetof(GymPlayerController_DebugInitializeLobby, MapId) == 0x000000, "Member 'GymPlayerController_DebugInitializeLobby::MapId' has a wrong offset!");

// Function GYMGAME.GymPlayerController.DebugStartPlaylist
// 0x0002 (0x0002 - 0x0000)
struct GymPlayerController_DebugStartPlaylist final
{
public:
	bool                                          bIsFinal;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyThisPlayer;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_DebugStartPlaylist) == 0x000001, "Wrong alignment on GymPlayerController_DebugStartPlaylist");
static_assert(sizeof(GymPlayerController_DebugStartPlaylist) == 0x000002, "Wrong size on GymPlayerController_DebugStartPlaylist");
static_assert(offsetof(GymPlayerController_DebugStartPlaylist, bIsFinal) == 0x000000, "Member 'GymPlayerController_DebugStartPlaylist::bIsFinal' has a wrong offset!");
static_assert(offsetof(GymPlayerController_DebugStartPlaylist, bOnlyThisPlayer) == 0x000001, "Member 'GymPlayerController_DebugStartPlaylist::bOnlyThisPlayer' has a wrong offset!");

// Function GYMGAME.GymPlayerController.DebugStartRoyale
// 0x0002 (0x0002 - 0x0000)
struct GymPlayerController_DebugStartRoyale final
{
public:
	bool                                          bIsFinal;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyThisPlayer;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_DebugStartRoyale) == 0x000001, "Wrong alignment on GymPlayerController_DebugStartRoyale");
static_assert(sizeof(GymPlayerController_DebugStartRoyale) == 0x000002, "Wrong size on GymPlayerController_DebugStartRoyale");
static_assert(offsetof(GymPlayerController_DebugStartRoyale, bIsFinal) == 0x000000, "Member 'GymPlayerController_DebugStartRoyale::bIsFinal' has a wrong offset!");
static_assert(offsetof(GymPlayerController_DebugStartRoyale, bOnlyThisPlayer) == 0x000001, "Member 'GymPlayerController_DebugStartRoyale::bOnlyThisPlayer' has a wrong offset!");

// Function GYMGAME.GymPlayerController.DebugStartTournament
// 0x0002 (0x0002 - 0x0000)
struct GymPlayerController_DebugStartTournament final
{
public:
	bool                                          bIsFinal;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyThisPlayer;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_DebugStartTournament) == 0x000001, "Wrong alignment on GymPlayerController_DebugStartTournament");
static_assert(sizeof(GymPlayerController_DebugStartTournament) == 0x000002, "Wrong size on GymPlayerController_DebugStartTournament");
static_assert(offsetof(GymPlayerController_DebugStartTournament, bIsFinal) == 0x000000, "Member 'GymPlayerController_DebugStartTournament::bIsFinal' has a wrong offset!");
static_assert(offsetof(GymPlayerController_DebugStartTournament, bOnlyThisPlayer) == 0x000001, "Member 'GymPlayerController_DebugStartTournament::bOnlyThisPlayer' has a wrong offset!");

// Function GYMGAME.GymPlayerController.DebugSwapStartMode
// 0x0010 (0x0010 - 0x0000)
struct GymPlayerController_DebugSwapStartMode final
{
public:
	class FString                                 Mode;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_DebugSwapStartMode) == 0x000008, "Wrong alignment on GymPlayerController_DebugSwapStartMode");
static_assert(sizeof(GymPlayerController_DebugSwapStartMode) == 0x000010, "Wrong size on GymPlayerController_DebugSwapStartMode");
static_assert(offsetof(GymPlayerController_DebugSwapStartMode, Mode) == 0x000000, "Member 'GymPlayerController_DebugSwapStartMode::Mode' has a wrong offset!");

// Function GYMGAME.GymPlayerController.DebugUnlockAllCareer
// 0x0001 (0x0001 - 0x0000)
struct GymPlayerController_DebugUnlockAllCareer final
{
public:
	bool                                          bUnlock;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_DebugUnlockAllCareer) == 0x000001, "Wrong alignment on GymPlayerController_DebugUnlockAllCareer");
static_assert(sizeof(GymPlayerController_DebugUnlockAllCareer) == 0x000001, "Wrong size on GymPlayerController_DebugUnlockAllCareer");
static_assert(offsetof(GymPlayerController_DebugUnlockAllCareer, bUnlock) == 0x000000, "Member 'GymPlayerController_DebugUnlockAllCareer::bUnlock' has a wrong offset!");

// Function GYMGAME.GymPlayerController.EndPreflowClient
// 0x0004 (0x0004 - 0x0000)
struct GymPlayerController_EndPreflowClient final
{
public:
	float                                         CameraBlendTime;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_EndPreflowClient) == 0x000004, "Wrong alignment on GymPlayerController_EndPreflowClient");
static_assert(sizeof(GymPlayerController_EndPreflowClient) == 0x000004, "Wrong size on GymPlayerController_EndPreflowClient");
static_assert(offsetof(GymPlayerController_EndPreflowClient, CameraBlendTime) == 0x000000, "Member 'GymPlayerController_EndPreflowClient::CameraBlendTime' has a wrong offset!");

// Function GYMGAME.GymPlayerController.ExitPhotoMode
// 0x0010 (0x0010 - 0x0000)
struct GymPlayerController_ExitPhotoMode final
{
public:
	class AGymPhotoModePawn*                      PhotoModePawn;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGymCharacter*                          GymCharacter;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_ExitPhotoMode) == 0x000008, "Wrong alignment on GymPlayerController_ExitPhotoMode");
static_assert(sizeof(GymPlayerController_ExitPhotoMode) == 0x000010, "Wrong size on GymPlayerController_ExitPhotoMode");
static_assert(offsetof(GymPlayerController_ExitPhotoMode, PhotoModePawn) == 0x000000, "Member 'GymPlayerController_ExitPhotoMode::PhotoModePawn' has a wrong offset!");
static_assert(offsetof(GymPlayerController_ExitPhotoMode, GymCharacter) == 0x000008, "Member 'GymPlayerController_ExitPhotoMode::GymCharacter' has a wrong offset!");

// Function GYMGAME.GymPlayerController.ForceStartRules
// 0x0004 (0x0004 - 0x0000)
struct GymPlayerController_ForceStartRules final
{
public:
	int32                                         StartIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_ForceStartRules) == 0x000004, "Wrong alignment on GymPlayerController_ForceStartRules");
static_assert(sizeof(GymPlayerController_ForceStartRules) == 0x000004, "Wrong size on GymPlayerController_ForceStartRules");
static_assert(offsetof(GymPlayerController_ForceStartRules, StartIndex) == 0x000000, "Member 'GymPlayerController_ForceStartRules::StartIndex' has a wrong offset!");

// Function GYMGAME.GymPlayerController.GetIsInCutscene
// 0x0001 (0x0001 - 0x0000)
struct GymPlayerController_GetIsInCutscene final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_GetIsInCutscene) == 0x000001, "Wrong alignment on GymPlayerController_GetIsInCutscene");
static_assert(sizeof(GymPlayerController_GetIsInCutscene) == 0x000001, "Wrong size on GymPlayerController_GetIsInCutscene");
static_assert(offsetof(GymPlayerController_GetIsInCutscene, ReturnValue) == 0x000000, "Member 'GymPlayerController_GetIsInCutscene::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPlayerController.GetPreflowState
// 0x0001 (0x0001 - 0x0000)
struct GymPlayerController_GetPreflowState final
{
public:
	EPreflowState                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_GetPreflowState) == 0x000001, "Wrong alignment on GymPlayerController_GetPreflowState");
static_assert(sizeof(GymPlayerController_GetPreflowState) == 0x000001, "Wrong size on GymPlayerController_GetPreflowState");
static_assert(offsetof(GymPlayerController_GetPreflowState, ReturnValue) == 0x000000, "Member 'GymPlayerController_GetPreflowState::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPlayerController.IsLocalPlayerUsingGamepad
// 0x0001 (0x0001 - 0x0000)
struct GymPlayerController_IsLocalPlayerUsingGamepad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_IsLocalPlayerUsingGamepad) == 0x000001, "Wrong alignment on GymPlayerController_IsLocalPlayerUsingGamepad");
static_assert(sizeof(GymPlayerController_IsLocalPlayerUsingGamepad) == 0x000001, "Wrong size on GymPlayerController_IsLocalPlayerUsingGamepad");
static_assert(offsetof(GymPlayerController_IsLocalPlayerUsingGamepad, ReturnValue) == 0x000000, "Member 'GymPlayerController_IsLocalPlayerUsingGamepad::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPlayerController.LoadMapCompleted_Client
// 0x0001 (0x0001 - 0x0000)
struct GymPlayerController_LoadMapCompleted_Client final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_LoadMapCompleted_Client) == 0x000001, "Wrong alignment on GymPlayerController_LoadMapCompleted_Client");
static_assert(sizeof(GymPlayerController_LoadMapCompleted_Client) == 0x000001, "Wrong size on GymPlayerController_LoadMapCompleted_Client");
static_assert(offsetof(GymPlayerController_LoadMapCompleted_Client, Success) == 0x000000, "Member 'GymPlayerController_LoadMapCompleted_Client::Success' has a wrong offset!");

// Function GYMGAME.GymPlayerController.LoadMapCompleted_NotifyServer
// 0x0001 (0x0001 - 0x0000)
struct GymPlayerController_LoadMapCompleted_NotifyServer final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_LoadMapCompleted_NotifyServer) == 0x000001, "Wrong alignment on GymPlayerController_LoadMapCompleted_NotifyServer");
static_assert(sizeof(GymPlayerController_LoadMapCompleted_NotifyServer) == 0x000001, "Wrong size on GymPlayerController_LoadMapCompleted_NotifyServer");
static_assert(offsetof(GymPlayerController_LoadMapCompleted_NotifyServer, Success) == 0x000000, "Member 'GymPlayerController_LoadMapCompleted_NotifyServer::Success' has a wrong offset!");

// Function GYMGAME.GymPlayerController.LoadMapForClient
// 0x0010 (0x0010 - 0x0000)
struct GymPlayerController_LoadMapForClient final
{
public:
	class FString                                 Uri;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_LoadMapForClient) == 0x000008, "Wrong alignment on GymPlayerController_LoadMapForClient");
static_assert(sizeof(GymPlayerController_LoadMapForClient) == 0x000010, "Wrong size on GymPlayerController_LoadMapForClient");
static_assert(offsetof(GymPlayerController_LoadMapForClient, Uri) == 0x000000, "Member 'GymPlayerController_LoadMapForClient::Uri' has a wrong offset!");

// Function GYMGAME.GymPlayerController.Multi_SetDevMode
// 0x0001 (0x0001 - 0x0000)
struct GymPlayerController_Multi_SetDevMode final
{
public:
	bool                                          bMode;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_Multi_SetDevMode) == 0x000001, "Wrong alignment on GymPlayerController_Multi_SetDevMode");
static_assert(sizeof(GymPlayerController_Multi_SetDevMode) == 0x000001, "Wrong size on GymPlayerController_Multi_SetDevMode");
static_assert(offsetof(GymPlayerController_Multi_SetDevMode, bMode) == 0x000000, "Member 'GymPlayerController_Multi_SetDevMode::bMode' has a wrong offset!");

// Function GYMGAME.GymPlayerController.NotifyPlayerConnected
// 0x0010 (0x0010 - 0x0000)
struct GymPlayerController_NotifyPlayerConnected final
{
public:
	class FString                                 WithName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_NotifyPlayerConnected) == 0x000008, "Wrong alignment on GymPlayerController_NotifyPlayerConnected");
static_assert(sizeof(GymPlayerController_NotifyPlayerConnected) == 0x000010, "Wrong size on GymPlayerController_NotifyPlayerConnected");
static_assert(offsetof(GymPlayerController_NotifyPlayerConnected, WithName) == 0x000000, "Member 'GymPlayerController_NotifyPlayerConnected::WithName' has a wrong offset!");

// DelegateFunction GYMGAME.GymPlayerController.OnCutsceneStateChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GymPlayerController_OnCutsceneStateChanged__DelegateSignature final
{
public:
	bool                                          bIsInCutscene;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_OnCutsceneStateChanged__DelegateSignature) == 0x000001, "Wrong alignment on GymPlayerController_OnCutsceneStateChanged__DelegateSignature");
static_assert(sizeof(GymPlayerController_OnCutsceneStateChanged__DelegateSignature) == 0x000001, "Wrong size on GymPlayerController_OnCutsceneStateChanged__DelegateSignature");
static_assert(offsetof(GymPlayerController_OnCutsceneStateChanged__DelegateSignature, bIsInCutscene) == 0x000000, "Member 'GymPlayerController_OnCutsceneStateChanged__DelegateSignature::bIsInCutscene' has a wrong offset!");

// DelegateFunction GYMGAME.GymPlayerController.OnGenericError__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct GymPlayerController_OnGenericError__DelegateSignature final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_OnGenericError__DelegateSignature) == 0x000008, "Wrong alignment on GymPlayerController_OnGenericError__DelegateSignature");
static_assert(sizeof(GymPlayerController_OnGenericError__DelegateSignature) == 0x000010, "Wrong size on GymPlayerController_OnGenericError__DelegateSignature");
static_assert(offsetof(GymPlayerController_OnGenericError__DelegateSignature, Message) == 0x000000, "Member 'GymPlayerController_OnGenericError__DelegateSignature::Message' has a wrong offset!");

// DelegateFunction GYMGAME.GymPlayerController.OnGenericInfo__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct GymPlayerController_OnGenericInfo__DelegateSignature final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_OnGenericInfo__DelegateSignature) == 0x000008, "Wrong alignment on GymPlayerController_OnGenericInfo__DelegateSignature");
static_assert(sizeof(GymPlayerController_OnGenericInfo__DelegateSignature) == 0x000010, "Wrong size on GymPlayerController_OnGenericInfo__DelegateSignature");
static_assert(offsetof(GymPlayerController_OnGenericInfo__DelegateSignature, Message) == 0x000000, "Member 'GymPlayerController_OnGenericInfo__DelegateSignature::Message' has a wrong offset!");

// Function GYMGAME.GymPlayerController.PrepareNextLoadingScreen
// 0x0058 (0x0058 - 0x0000)
struct GymPlayerController_PrepareNextLoadingScreen final
{
public:
	struct FGymLoadingScreenOptions               Options;                                           // 0x0000(0x0058)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_PrepareNextLoadingScreen) == 0x000008, "Wrong alignment on GymPlayerController_PrepareNextLoadingScreen");
static_assert(sizeof(GymPlayerController_PrepareNextLoadingScreen) == 0x000058, "Wrong size on GymPlayerController_PrepareNextLoadingScreen");
static_assert(offsetof(GymPlayerController_PrepareNextLoadingScreen, Options) == 0x000000, "Member 'GymPlayerController_PrepareNextLoadingScreen::Options' has a wrong offset!");

// Function GYMGAME.GymPlayerController.ReportGenericInfo
// 0x0010 (0x0010 - 0x0000)
struct GymPlayerController_ReportGenericInfo final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_ReportGenericInfo) == 0x000008, "Wrong alignment on GymPlayerController_ReportGenericInfo");
static_assert(sizeof(GymPlayerController_ReportGenericInfo) == 0x000010, "Wrong size on GymPlayerController_ReportGenericInfo");
static_assert(offsetof(GymPlayerController_ReportGenericInfo, Message) == 0x000000, "Member 'GymPlayerController_ReportGenericInfo::Message' has a wrong offset!");

// Function GYMGAME.GymPlayerController.ReportMapUploadSuccess
// 0x0018 (0x0018 - 0x0000)
struct GymPlayerController_ReportMapUploadSuccess final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_ReportMapUploadSuccess) == 0x000008, "Wrong alignment on GymPlayerController_ReportMapUploadSuccess");
static_assert(sizeof(GymPlayerController_ReportMapUploadSuccess) == 0x000018, "Wrong size on GymPlayerController_ReportMapUploadSuccess");
static_assert(offsetof(GymPlayerController_ReportMapUploadSuccess, Success) == 0x000000, "Member 'GymPlayerController_ReportMapUploadSuccess::Success' has a wrong offset!");
static_assert(offsetof(GymPlayerController_ReportMapUploadSuccess, Message) == 0x000008, "Member 'GymPlayerController_ReportMapUploadSuccess::Message' has a wrong offset!");

// Function GYMGAME.GymPlayerController.Server_DebugCreatePlaylist
// 0x0010 (0x0010 - 0x0000)
struct GymPlayerController_Server_DebugCreatePlaylist final
{
public:
	class FString                                 Type;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_Server_DebugCreatePlaylist) == 0x000008, "Wrong alignment on GymPlayerController_Server_DebugCreatePlaylist");
static_assert(sizeof(GymPlayerController_Server_DebugCreatePlaylist) == 0x000010, "Wrong size on GymPlayerController_Server_DebugCreatePlaylist");
static_assert(offsetof(GymPlayerController_Server_DebugCreatePlaylist, Type) == 0x000000, "Member 'GymPlayerController_Server_DebugCreatePlaylist::Type' has a wrong offset!");

// Function GYMGAME.GymPlayerController.Server_DebugInitializeLobby
// 0x0010 (0x0010 - 0x0000)
struct GymPlayerController_Server_DebugInitializeLobby final
{
public:
	class FString                                 MapId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_Server_DebugInitializeLobby) == 0x000008, "Wrong alignment on GymPlayerController_Server_DebugInitializeLobby");
static_assert(sizeof(GymPlayerController_Server_DebugInitializeLobby) == 0x000010, "Wrong size on GymPlayerController_Server_DebugInitializeLobby");
static_assert(offsetof(GymPlayerController_Server_DebugInitializeLobby, MapId) == 0x000000, "Member 'GymPlayerController_Server_DebugInitializeLobby::MapId' has a wrong offset!");

// Function GYMGAME.GymPlayerController.Server_DebugSwapStartMode
// 0x0010 (0x0010 - 0x0000)
struct GymPlayerController_Server_DebugSwapStartMode final
{
public:
	class FString                                 Mode;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_Server_DebugSwapStartMode) == 0x000008, "Wrong alignment on GymPlayerController_Server_DebugSwapStartMode");
static_assert(sizeof(GymPlayerController_Server_DebugSwapStartMode) == 0x000010, "Wrong size on GymPlayerController_Server_DebugSwapStartMode");
static_assert(offsetof(GymPlayerController_Server_DebugSwapStartMode, Mode) == 0x000000, "Member 'GymPlayerController_Server_DebugSwapStartMode::Mode' has a wrong offset!");

// Function GYMGAME.GymPlayerController.Server_SetDevMode
// 0x0001 (0x0001 - 0x0000)
struct GymPlayerController_Server_SetDevMode final
{
public:
	bool                                          bMode;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_Server_SetDevMode) == 0x000001, "Wrong alignment on GymPlayerController_Server_SetDevMode");
static_assert(sizeof(GymPlayerController_Server_SetDevMode) == 0x000001, "Wrong size on GymPlayerController_Server_SetDevMode");
static_assert(offsetof(GymPlayerController_Server_SetDevMode, bMode) == 0x000000, "Member 'GymPlayerController_Server_SetDevMode::bMode' has a wrong offset!");

// Function GYMGAME.GymPlayerController.Server_SpawnMarker
// 0x0018 (0x0018 - 0x0000)
struct GymPlayerController_Server_SpawnMarker final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_Server_SpawnMarker) == 0x000008, "Wrong alignment on GymPlayerController_Server_SpawnMarker");
static_assert(sizeof(GymPlayerController_Server_SpawnMarker) == 0x000018, "Wrong size on GymPlayerController_Server_SpawnMarker");
static_assert(offsetof(GymPlayerController_Server_SpawnMarker, Location) == 0x000000, "Member 'GymPlayerController_Server_SpawnMarker::Location' has a wrong offset!");

// Function GYMGAME.GymPlayerController.SetDevMode
// 0x0001 (0x0001 - 0x0000)
struct GymPlayerController_SetDevMode final
{
public:
	bool                                          bMode;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_SetDevMode) == 0x000001, "Wrong alignment on GymPlayerController_SetDevMode");
static_assert(sizeof(GymPlayerController_SetDevMode) == 0x000001, "Wrong size on GymPlayerController_SetDevMode");
static_assert(offsetof(GymPlayerController_SetDevMode, bMode) == 0x000000, "Member 'GymPlayerController_SetDevMode::bMode' has a wrong offset!");

// Function GYMGAME.GymPlayerController.SetGameViewTarget
// 0x0008 (0x0008 - 0x0000)
struct GymPlayerController_SetGameViewTarget final
{
public:
	class AActor*                                 ViewTarget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_SetGameViewTarget) == 0x000008, "Wrong alignment on GymPlayerController_SetGameViewTarget");
static_assert(sizeof(GymPlayerController_SetGameViewTarget) == 0x000008, "Wrong size on GymPlayerController_SetGameViewTarget");
static_assert(offsetof(GymPlayerController_SetGameViewTarget, ViewTarget) == 0x000000, "Member 'GymPlayerController_SetGameViewTarget::ViewTarget' has a wrong offset!");

// Function GYMGAME.GymPlayerController.SetGameViewTargetWithBlend
// 0x0018 (0x0018 - 0x0000)
struct GymPlayerController_SetGameViewTargetWithBlend final
{
public:
	class AActor*                                 ViewTarget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      BlendFunc;                                         // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockOutgoing;                                     // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymPlayerController_SetGameViewTargetWithBlend) == 0x000008, "Wrong alignment on GymPlayerController_SetGameViewTargetWithBlend");
static_assert(sizeof(GymPlayerController_SetGameViewTargetWithBlend) == 0x000018, "Wrong size on GymPlayerController_SetGameViewTargetWithBlend");
static_assert(offsetof(GymPlayerController_SetGameViewTargetWithBlend, ViewTarget) == 0x000000, "Member 'GymPlayerController_SetGameViewTargetWithBlend::ViewTarget' has a wrong offset!");
static_assert(offsetof(GymPlayerController_SetGameViewTargetWithBlend, BlendTime) == 0x000008, "Member 'GymPlayerController_SetGameViewTargetWithBlend::BlendTime' has a wrong offset!");
static_assert(offsetof(GymPlayerController_SetGameViewTargetWithBlend, BlendFunc) == 0x00000C, "Member 'GymPlayerController_SetGameViewTargetWithBlend::BlendFunc' has a wrong offset!");
static_assert(offsetof(GymPlayerController_SetGameViewTargetWithBlend, BlendExp) == 0x000010, "Member 'GymPlayerController_SetGameViewTargetWithBlend::BlendExp' has a wrong offset!");
static_assert(offsetof(GymPlayerController_SetGameViewTargetWithBlend, bLockOutgoing) == 0x000014, "Member 'GymPlayerController_SetGameViewTargetWithBlend::bLockOutgoing' has a wrong offset!");

// Function GYMGAME.GymPlayerController.SetGymIdWithoutToken
// 0x0010 (0x0010 - 0x0000)
struct GymPlayerController_SetGymIdWithoutToken final
{
public:
	class FString                                 GymId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_SetGymIdWithoutToken) == 0x000008, "Wrong alignment on GymPlayerController_SetGymIdWithoutToken");
static_assert(sizeof(GymPlayerController_SetGymIdWithoutToken) == 0x000010, "Wrong size on GymPlayerController_SetGymIdWithoutToken");
static_assert(offsetof(GymPlayerController_SetGymIdWithoutToken, GymId) == 0x000000, "Member 'GymPlayerController_SetGymIdWithoutToken::GymId' has a wrong offset!");

// Function GYMGAME.GymPlayerController.SetPlayerName
// 0x0010 (0x0010 - 0x0000)
struct GymPlayerController_SetPlayerName final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_SetPlayerName) == 0x000008, "Wrong alignment on GymPlayerController_SetPlayerName");
static_assert(sizeof(GymPlayerController_SetPlayerName) == 0x000010, "Wrong size on GymPlayerController_SetPlayerName");
static_assert(offsetof(GymPlayerController_SetPlayerName, Name_0) == 0x000000, "Member 'GymPlayerController_SetPlayerName::Name_0' has a wrong offset!");

// Function GYMGAME.GymPlayerController.SetPlaylistTravelTime
// 0x0004 (0x0004 - 0x0000)
struct GymPlayerController_SetPlaylistTravelTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_SetPlaylistTravelTime) == 0x000004, "Wrong alignment on GymPlayerController_SetPlaylistTravelTime");
static_assert(sizeof(GymPlayerController_SetPlaylistTravelTime) == 0x000004, "Wrong size on GymPlayerController_SetPlaylistTravelTime");
static_assert(offsetof(GymPlayerController_SetPlaylistTravelTime, Time) == 0x000000, "Member 'GymPlayerController_SetPlaylistTravelTime::Time' has a wrong offset!");

// Function GYMGAME.GymPlayerController.SetupPlaylist
// 0x0018 (0x0018 - 0x0000)
struct GymPlayerController_SetupPlaylist final
{
public:
	class FString                                 Type;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFinal;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyThisPlayer;                                   // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymPlayerController_SetupPlaylist) == 0x000008, "Wrong alignment on GymPlayerController_SetupPlaylist");
static_assert(sizeof(GymPlayerController_SetupPlaylist) == 0x000018, "Wrong size on GymPlayerController_SetupPlaylist");
static_assert(offsetof(GymPlayerController_SetupPlaylist, Type) == 0x000000, "Member 'GymPlayerController_SetupPlaylist::Type' has a wrong offset!");
static_assert(offsetof(GymPlayerController_SetupPlaylist, bIsFinal) == 0x000010, "Member 'GymPlayerController_SetupPlaylist::bIsFinal' has a wrong offset!");
static_assert(offsetof(GymPlayerController_SetupPlaylist, bOnlyThisPlayer) == 0x000011, "Member 'GymPlayerController_SetupPlaylist::bOnlyThisPlayer' has a wrong offset!");

// Function GYMGAME.GymPlayerController.ShowPlaylistStandings
// 0x0050 (0x0050 - 0x0000)
struct GymPlayerController_ShowPlaylistStandings final
{
public:
	struct FGymPlayerScoreboard                   Scoreboard;                                        // 0x0000(0x0048)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	EGymPlaylistType                              PlayListType;                                      // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFinal;                                           // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidLevel;                                     // 0x004A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymPlayerController_ShowPlaylistStandings) == 0x000008, "Wrong alignment on GymPlayerController_ShowPlaylistStandings");
static_assert(sizeof(GymPlayerController_ShowPlaylistStandings) == 0x000050, "Wrong size on GymPlayerController_ShowPlaylistStandings");
static_assert(offsetof(GymPlayerController_ShowPlaylistStandings, Scoreboard) == 0x000000, "Member 'GymPlayerController_ShowPlaylistStandings::Scoreboard' has a wrong offset!");
static_assert(offsetof(GymPlayerController_ShowPlaylistStandings, PlayListType) == 0x000048, "Member 'GymPlayerController_ShowPlaylistStandings::PlayListType' has a wrong offset!");
static_assert(offsetof(GymPlayerController_ShowPlaylistStandings, IsFinal) == 0x000049, "Member 'GymPlayerController_ShowPlaylistStandings::IsFinal' has a wrong offset!");
static_assert(offsetof(GymPlayerController_ShowPlaylistStandings, bIsValidLevel) == 0x00004A, "Member 'GymPlayerController_ShowPlaylistStandings::bIsValidLevel' has a wrong offset!");

// Function GYMGAME.GymPlayerController.ShowStandings
// 0x0010 (0x0010 - 0x0000)
struct GymPlayerController_ShowStandings final
{
public:
	TArray<struct FGymScoreboardEntry>            Data;                                              // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_ShowStandings) == 0x000008, "Wrong alignment on GymPlayerController_ShowStandings");
static_assert(sizeof(GymPlayerController_ShowStandings) == 0x000010, "Wrong size on GymPlayerController_ShowStandings");
static_assert(offsetof(GymPlayerController_ShowStandings, Data) == 0x000000, "Member 'GymPlayerController_ShowStandings::Data' has a wrong offset!");

// Function GYMGAME.GymPlayerController.UpdateLevelInfo
// 0x0060 (0x0060 - 0x0000)
struct GymPlayerController_UpdateLevelInfo final
{
public:
	struct FCustomLevelFileInfo                   LevelInfo;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_UpdateLevelInfo) == 0x000008, "Wrong alignment on GymPlayerController_UpdateLevelInfo");
static_assert(sizeof(GymPlayerController_UpdateLevelInfo) == 0x000060, "Wrong size on GymPlayerController_UpdateLevelInfo");
static_assert(offsetof(GymPlayerController_UpdateLevelInfo, LevelInfo) == 0x000000, "Member 'GymPlayerController_UpdateLevelInfo::LevelInfo' has a wrong offset!");

// Function GYMGAME.GymPlayerController.CanStartMatchInPlayMode
// 0x0001 (0x0001 - 0x0000)
struct GymPlayerController_CanStartMatchInPlayMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_CanStartMatchInPlayMode) == 0x000001, "Wrong alignment on GymPlayerController_CanStartMatchInPlayMode");
static_assert(sizeof(GymPlayerController_CanStartMatchInPlayMode) == 0x000001, "Wrong size on GymPlayerController_CanStartMatchInPlayMode");
static_assert(offsetof(GymPlayerController_CanStartMatchInPlayMode, ReturnValue) == 0x000000, "Member 'GymPlayerController_CanStartMatchInPlayMode::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPlayerController.GetCurrentRuleState
// 0x0001 (0x0001 - 0x0000)
struct GymPlayerController_GetCurrentRuleState final
{
public:
	EGymRuleParticipantState                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_GetCurrentRuleState) == 0x000001, "Wrong alignment on GymPlayerController_GetCurrentRuleState");
static_assert(sizeof(GymPlayerController_GetCurrentRuleState) == 0x000001, "Wrong size on GymPlayerController_GetCurrentRuleState");
static_assert(offsetof(GymPlayerController_GetCurrentRuleState, ReturnValue) == 0x000000, "Member 'GymPlayerController_GetCurrentRuleState::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPlayerController.GetGameViewTarget
// 0x0008 (0x0008 - 0x0000)
struct GymPlayerController_GetGameViewTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_GetGameViewTarget) == 0x000008, "Wrong alignment on GymPlayerController_GetGameViewTarget");
static_assert(sizeof(GymPlayerController_GetGameViewTarget) == 0x000008, "Wrong size on GymPlayerController_GetGameViewTarget");
static_assert(offsetof(GymPlayerController_GetGameViewTarget, ReturnValue) == 0x000000, "Member 'GymPlayerController_GetGameViewTarget::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPlayerController.GetGymCharacter
// 0x0008 (0x0008 - 0x0000)
struct GymPlayerController_GetGymCharacter final
{
public:
	class AGymCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_GetGymCharacter) == 0x000008, "Wrong alignment on GymPlayerController_GetGymCharacter");
static_assert(sizeof(GymPlayerController_GetGymCharacter) == 0x000008, "Wrong size on GymPlayerController_GetGymCharacter");
static_assert(offsetof(GymPlayerController_GetGymCharacter, ReturnValue) == 0x000000, "Member 'GymPlayerController_GetGymCharacter::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPlayerController.GetGymPhotoModePawn
// 0x0008 (0x0008 - 0x0000)
struct GymPlayerController_GetGymPhotoModePawn final
{
public:
	class AGymPhotoModePawn*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_GetGymPhotoModePawn) == 0x000008, "Wrong alignment on GymPlayerController_GetGymPhotoModePawn");
static_assert(sizeof(GymPlayerController_GetGymPhotoModePawn) == 0x000008, "Wrong size on GymPlayerController_GetGymPhotoModePawn");
static_assert(offsetof(GymPlayerController_GetGymPhotoModePawn, ReturnValue) == 0x000000, "Member 'GymPlayerController_GetGymPhotoModePawn::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPlayerController.GetGymSpectatorPawn
// 0x0008 (0x0008 - 0x0000)
struct GymPlayerController_GetGymSpectatorPawn final
{
public:
	class AGymSpectatorPawn*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_GetGymSpectatorPawn) == 0x000008, "Wrong alignment on GymPlayerController_GetGymSpectatorPawn");
static_assert(sizeof(GymPlayerController_GetGymSpectatorPawn) == 0x000008, "Wrong size on GymPlayerController_GetGymSpectatorPawn");
static_assert(offsetof(GymPlayerController_GetGymSpectatorPawn, ReturnValue) == 0x000000, "Member 'GymPlayerController_GetGymSpectatorPawn::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPlayerController.GetTickerControl
// 0x0008 (0x0008 - 0x0000)
struct GymPlayerController_GetTickerControl final
{
public:
	class UGymGlobalTickerEventControl*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_GetTickerControl) == 0x000008, "Wrong alignment on GymPlayerController_GetTickerControl");
static_assert(sizeof(GymPlayerController_GetTickerControl) == 0x000008, "Wrong size on GymPlayerController_GetTickerControl");
static_assert(offsetof(GymPlayerController_GetTickerControl, ReturnValue) == 0x000000, "Member 'GymPlayerController_GetTickerControl::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPlayerController.GetWidgetControl
// 0x0008 (0x0008 - 0x0000)
struct GymPlayerController_GetWidgetControl final
{
public:
	class UGymGlobalWidgetControl*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_GetWidgetControl) == 0x000008, "Wrong alignment on GymPlayerController_GetWidgetControl");
static_assert(sizeof(GymPlayerController_GetWidgetControl) == 0x000008, "Wrong size on GymPlayerController_GetWidgetControl");
static_assert(offsetof(GymPlayerController_GetWidgetControl, ReturnValue) == 0x000000, "Member 'GymPlayerController_GetWidgetControl::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPlayerController.IsEditorOpen
// 0x0001 (0x0001 - 0x0000)
struct GymPlayerController_IsEditorOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_IsEditorOpen) == 0x000001, "Wrong alignment on GymPlayerController_IsEditorOpen");
static_assert(sizeof(GymPlayerController_IsEditorOpen) == 0x000001, "Wrong size on GymPlayerController_IsEditorOpen");
static_assert(offsetof(GymPlayerController_IsEditorOpen, ReturnValue) == 0x000000, "Member 'GymPlayerController_IsEditorOpen::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPlayerController.IsInPhotoMode
// 0x0001 (0x0001 - 0x0000)
struct GymPlayerController_IsInPhotoMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_IsInPhotoMode) == 0x000001, "Wrong alignment on GymPlayerController_IsInPhotoMode");
static_assert(sizeof(GymPlayerController_IsInPhotoMode) == 0x000001, "Wrong size on GymPlayerController_IsInPhotoMode");
static_assert(offsetof(GymPlayerController_IsInPhotoMode, ReturnValue) == 0x000000, "Member 'GymPlayerController_IsInPhotoMode::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPlayerController.IsSpectating
// 0x0001 (0x0001 - 0x0000)
struct GymPlayerController_IsSpectating final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_IsSpectating) == 0x000001, "Wrong alignment on GymPlayerController_IsSpectating");
static_assert(sizeof(GymPlayerController_IsSpectating) == 0x000001, "Wrong size on GymPlayerController_IsSpectating");
static_assert(offsetof(GymPlayerController_IsSpectating, ReturnValue) == 0x000000, "Member 'GymPlayerController_IsSpectating::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPlayerController.ParticipantFinishedClient
// 0x0068 (0x0068 - 0x0000)
struct GymPlayerController_ParticipantFinishedClient final
{
public:
	struct FGymRuleParticipant                    Participant;                                       // 0x0000(0x0068)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerController_ParticipantFinishedClient) == 0x000008, "Wrong alignment on GymPlayerController_ParticipantFinishedClient");
static_assert(sizeof(GymPlayerController_ParticipantFinishedClient) == 0x000068, "Wrong size on GymPlayerController_ParticipantFinishedClient");
static_assert(offsetof(GymPlayerController_ParticipantFinishedClient, Participant) == 0x000000, "Member 'GymPlayerController_ParticipantFinishedClient::Participant' has a wrong offset!");

// Function GYMGAME.GymPlayerLootControl.Multi_ConfirmOtherPlayerCollected
// 0x0008 (0x0008 - 0x0000)
struct GymPlayerLootControl_Multi_ConfirmOtherPlayerCollected final
{
public:
	class AGymLootActor*                          LootActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerLootControl_Multi_ConfirmOtherPlayerCollected) == 0x000008, "Wrong alignment on GymPlayerLootControl_Multi_ConfirmOtherPlayerCollected");
static_assert(sizeof(GymPlayerLootControl_Multi_ConfirmOtherPlayerCollected) == 0x000008, "Wrong size on GymPlayerLootControl_Multi_ConfirmOtherPlayerCollected");
static_assert(offsetof(GymPlayerLootControl_Multi_ConfirmOtherPlayerCollected, LootActor) == 0x000000, "Member 'GymPlayerLootControl_Multi_ConfirmOtherPlayerCollected::LootActor' has a wrong offset!");

// Function GYMGAME.GymPlayerLootControl.Multi_LootCollected
// 0x0008 (0x0008 - 0x0000)
struct GymPlayerLootControl_Multi_LootCollected final
{
public:
	class AGymLootActor*                          LootActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerLootControl_Multi_LootCollected) == 0x000008, "Wrong alignment on GymPlayerLootControl_Multi_LootCollected");
static_assert(sizeof(GymPlayerLootControl_Multi_LootCollected) == 0x000008, "Wrong size on GymPlayerLootControl_Multi_LootCollected");
static_assert(offsetof(GymPlayerLootControl_Multi_LootCollected, LootActor) == 0x000000, "Member 'GymPlayerLootControl_Multi_LootCollected::LootActor' has a wrong offset!");

// Function GYMGAME.GymPlayerLootControl.Multi_SetStarted
// 0x0001 (0x0001 - 0x0000)
struct GymPlayerLootControl_Multi_SetStarted final
{
public:
	bool                                          Started;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerLootControl_Multi_SetStarted) == 0x000001, "Wrong alignment on GymPlayerLootControl_Multi_SetStarted");
static_assert(sizeof(GymPlayerLootControl_Multi_SetStarted) == 0x000001, "Wrong size on GymPlayerLootControl_Multi_SetStarted");
static_assert(offsetof(GymPlayerLootControl_Multi_SetStarted, Started) == 0x000000, "Member 'GymPlayerLootControl_Multi_SetStarted::Started' has a wrong offset!");

// Function GYMGAME.GymPlayerState.Client_SetFinishedRank
// 0x0004 (0x0004 - 0x0000)
struct GymPlayerState_Client_SetFinishedRank final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerState_Client_SetFinishedRank) == 0x000004, "Wrong alignment on GymPlayerState_Client_SetFinishedRank");
static_assert(sizeof(GymPlayerState_Client_SetFinishedRank) == 0x000004, "Wrong size on GymPlayerState_Client_SetFinishedRank");
static_assert(offsetof(GymPlayerState_Client_SetFinishedRank, Rank) == 0x000000, "Member 'GymPlayerState_Client_SetFinishedRank::Rank' has a wrong offset!");

// Function GYMGAME.GymPlayerState.DebugSetOverrideOwner
// 0x0001 (0x0001 - 0x0000)
struct GymPlayerState_DebugSetOverrideOwner final
{
public:
	bool                                          bOwner;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerState_DebugSetOverrideOwner) == 0x000001, "Wrong alignment on GymPlayerState_DebugSetOverrideOwner");
static_assert(sizeof(GymPlayerState_DebugSetOverrideOwner) == 0x000001, "Wrong size on GymPlayerState_DebugSetOverrideOwner");
static_assert(offsetof(GymPlayerState_DebugSetOverrideOwner, bOwner) == 0x000000, "Member 'GymPlayerState_DebugSetOverrideOwner::bOwner' has a wrong offset!");

// Function GYMGAME.GymPlayerState.GetEditAllowed
// 0x0001 (0x0001 - 0x0000)
struct GymPlayerState_GetEditAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerState_GetEditAllowed) == 0x000001, "Wrong alignment on GymPlayerState_GetEditAllowed");
static_assert(sizeof(GymPlayerState_GetEditAllowed) == 0x000001, "Wrong size on GymPlayerState_GetEditAllowed");
static_assert(offsetof(GymPlayerState_GetEditAllowed, ReturnValue) == 0x000000, "Member 'GymPlayerState_GetEditAllowed::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPlayerState.KickPlayer
// 0x0008 (0x0008 - 0x0000)
struct GymPlayerState_KickPlayer final
{
public:
	const class AGymPlayerState*                  PlayerToKick;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerState_KickPlayer) == 0x000008, "Wrong alignment on GymPlayerState_KickPlayer");
static_assert(sizeof(GymPlayerState_KickPlayer) == 0x000008, "Wrong size on GymPlayerState_KickPlayer");
static_assert(offsetof(GymPlayerState_KickPlayer, PlayerToKick) == 0x000000, "Member 'GymPlayerState_KickPlayer::PlayerToKick' has a wrong offset!");

// Function GYMGAME.GymPlayerState.KickPlayerReply
// 0x0001 (0x0001 - 0x0000)
struct GymPlayerState_KickPlayerReply final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerState_KickPlayerReply) == 0x000001, "Wrong alignment on GymPlayerState_KickPlayerReply");
static_assert(sizeof(GymPlayerState_KickPlayerReply) == 0x000001, "Wrong size on GymPlayerState_KickPlayerReply");
static_assert(offsetof(GymPlayerState_KickPlayerReply, bSuccess) == 0x000000, "Member 'GymPlayerState_KickPlayerReply::bSuccess' has a wrong offset!");

// Function GYMGAME.GymPlayerState.NotifyClientVoteChanged
// 0x0001 (0x0001 - 0x0000)
struct GymPlayerState_NotifyClientVoteChanged final
{
public:
	bool                                          bDidVote;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerState_NotifyClientVoteChanged) == 0x000001, "Wrong alignment on GymPlayerState_NotifyClientVoteChanged");
static_assert(sizeof(GymPlayerState_NotifyClientVoteChanged) == 0x000001, "Wrong size on GymPlayerState_NotifyClientVoteChanged");
static_assert(offsetof(GymPlayerState_NotifyClientVoteChanged, bDidVote) == 0x000000, "Member 'GymPlayerState_NotifyClientVoteChanged::bDidVote' has a wrong offset!");

// Function GYMGAME.GymPlayerState.NotifyClientVoteEnded
// 0x0002 (0x0002 - 0x0000)
struct GymPlayerState_NotifyClientVoteEnded final
{
public:
	EVoteState                                    VoteResult;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDidVote;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerState_NotifyClientVoteEnded) == 0x000001, "Wrong alignment on GymPlayerState_NotifyClientVoteEnded");
static_assert(sizeof(GymPlayerState_NotifyClientVoteEnded) == 0x000002, "Wrong size on GymPlayerState_NotifyClientVoteEnded");
static_assert(offsetof(GymPlayerState_NotifyClientVoteEnded, VoteResult) == 0x000000, "Member 'GymPlayerState_NotifyClientVoteEnded::VoteResult' has a wrong offset!");
static_assert(offsetof(GymPlayerState_NotifyClientVoteEnded, bDidVote) == 0x000001, "Member 'GymPlayerState_NotifyClientVoteEnded::bDidVote' has a wrong offset!");

// DelegateFunction GYMGAME.GymPlayerState.OnEditingAllowed__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GymPlayerState_OnEditingAllowed__DelegateSignature final
{
public:
	bool                                          bAllowed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerState_OnEditingAllowed__DelegateSignature) == 0x000001, "Wrong alignment on GymPlayerState_OnEditingAllowed__DelegateSignature");
static_assert(sizeof(GymPlayerState_OnEditingAllowed__DelegateSignature) == 0x000001, "Wrong size on GymPlayerState_OnEditingAllowed__DelegateSignature");
static_assert(offsetof(GymPlayerState_OnEditingAllowed__DelegateSignature, bAllowed) == 0x000000, "Member 'GymPlayerState_OnEditingAllowed__DelegateSignature::bAllowed' has a wrong offset!");

// DelegateFunction GYMGAME.GymPlayerState.OnHasVotedChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GymPlayerState_OnHasVotedChanged__DelegateSignature final
{
public:
	bool                                          bDidVote;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerState_OnHasVotedChanged__DelegateSignature) == 0x000001, "Wrong alignment on GymPlayerState_OnHasVotedChanged__DelegateSignature");
static_assert(sizeof(GymPlayerState_OnHasVotedChanged__DelegateSignature) == 0x000001, "Wrong size on GymPlayerState_OnHasVotedChanged__DelegateSignature");
static_assert(offsetof(GymPlayerState_OnHasVotedChanged__DelegateSignature, bDidVote) == 0x000000, "Member 'GymPlayerState_OnHasVotedChanged__DelegateSignature::bDidVote' has a wrong offset!");

// DelegateFunction GYMGAME.GymPlayerState.OnVoteEnded__DelegateSignature
// 0x0002 (0x0002 - 0x0000)
struct GymPlayerState_OnVoteEnded__DelegateSignature final
{
public:
	EVoteState                                    VoteResult;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDidVote;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerState_OnVoteEnded__DelegateSignature) == 0x000001, "Wrong alignment on GymPlayerState_OnVoteEnded__DelegateSignature");
static_assert(sizeof(GymPlayerState_OnVoteEnded__DelegateSignature) == 0x000002, "Wrong size on GymPlayerState_OnVoteEnded__DelegateSignature");
static_assert(offsetof(GymPlayerState_OnVoteEnded__DelegateSignature, VoteResult) == 0x000000, "Member 'GymPlayerState_OnVoteEnded__DelegateSignature::VoteResult' has a wrong offset!");
static_assert(offsetof(GymPlayerState_OnVoteEnded__DelegateSignature, bDidVote) == 0x000001, "Member 'GymPlayerState_OnVoteEnded__DelegateSignature::bDidVote' has a wrong offset!");

// Function GYMGAME.GymPlayerState.SendCustomization
// 0x0010 (0x0010 - 0x0000)
struct GymPlayerState_SendCustomization final
{
public:
	struct FGymCharacterCustomization             NewCustomization;                                  // 0x0000(0x0010)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerState_SendCustomization) == 0x000008, "Wrong alignment on GymPlayerState_SendCustomization");
static_assert(sizeof(GymPlayerState_SendCustomization) == 0x000010, "Wrong size on GymPlayerState_SendCustomization");
static_assert(offsetof(GymPlayerState_SendCustomization, NewCustomization) == 0x000000, "Member 'GymPlayerState_SendCustomization::NewCustomization' has a wrong offset!");

// Function GYMGAME.GymPlayerState.Server_SwapName
// 0x0010 (0x0010 - 0x0000)
struct GymPlayerState_Server_SwapName final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerState_Server_SwapName) == 0x000008, "Wrong alignment on GymPlayerState_Server_SwapName");
static_assert(sizeof(GymPlayerState_Server_SwapName) == 0x000010, "Wrong size on GymPlayerState_Server_SwapName");
static_assert(offsetof(GymPlayerState_Server_SwapName, Name_0) == 0x000000, "Member 'GymPlayerState_Server_SwapName::Name_0' has a wrong offset!");

// Function GYMGAME.GymPlayerState.SetEditAllowed
// 0x0010 (0x0010 - 0x0000)
struct GymPlayerState_SetEditAllowed final
{
public:
	class AGymPlayerState*                        State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymPlayerState_SetEditAllowed) == 0x000008, "Wrong alignment on GymPlayerState_SetEditAllowed");
static_assert(sizeof(GymPlayerState_SetEditAllowed) == 0x000010, "Wrong size on GymPlayerState_SetEditAllowed");
static_assert(offsetof(GymPlayerState_SetEditAllowed, State) == 0x000000, "Member 'GymPlayerState_SetEditAllowed::State' has a wrong offset!");
static_assert(offsetof(GymPlayerState_SetEditAllowed, Value) == 0x000008, "Member 'GymPlayerState_SetEditAllowed::Value' has a wrong offset!");

// Function GYMGAME.GymPlayerState.SwapName
// 0x0010 (0x0010 - 0x0000)
struct GymPlayerState_SwapName final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerState_SwapName) == 0x000008, "Wrong alignment on GymPlayerState_SwapName");
static_assert(sizeof(GymPlayerState_SwapName) == 0x000010, "Wrong size on GymPlayerState_SwapName");
static_assert(offsetof(GymPlayerState_SwapName, Name_0) == 0x000000, "Member 'GymPlayerState_SwapName::Name_0' has a wrong offset!");

// Function GYMGAME.GymPlayerState.GetGymCharacter
// 0x0008 (0x0008 - 0x0000)
struct GymPlayerState_GetGymCharacter final
{
public:
	class AGymCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerState_GetGymCharacter) == 0x000008, "Wrong alignment on GymPlayerState_GetGymCharacter");
static_assert(sizeof(GymPlayerState_GetGymCharacter) == 0x000008, "Wrong size on GymPlayerState_GetGymCharacter");
static_assert(offsetof(GymPlayerState_GetGymCharacter, ReturnValue) == 0x000000, "Member 'GymPlayerState_GetGymCharacter::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPlayerState.GetGymPlayerController
// 0x0008 (0x0008 - 0x0000)
struct GymPlayerState_GetGymPlayerController final
{
public:
	class AGymPlayerController*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerState_GetGymPlayerController) == 0x000008, "Wrong alignment on GymPlayerState_GetGymPlayerController");
static_assert(sizeof(GymPlayerState_GetGymPlayerController) == 0x000008, "Wrong size on GymPlayerState_GetGymPlayerController");
static_assert(offsetof(GymPlayerState_GetGymPlayerController, ReturnValue) == 0x000000, "Member 'GymPlayerState_GetGymPlayerController::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPlayerState.GetGymSpectatorPawn
// 0x0008 (0x0008 - 0x0000)
struct GymPlayerState_GetGymSpectatorPawn final
{
public:
	class AGymSpectatorPawn*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerState_GetGymSpectatorPawn) == 0x000008, "Wrong alignment on GymPlayerState_GetGymSpectatorPawn");
static_assert(sizeof(GymPlayerState_GetGymSpectatorPawn) == 0x000008, "Wrong size on GymPlayerState_GetGymSpectatorPawn");
static_assert(offsetof(GymPlayerState_GetGymSpectatorPawn, ReturnValue) == 0x000000, "Member 'GymPlayerState_GetGymSpectatorPawn::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPlayerState.GetPlayerAvatar
// 0x0008 (0x0008 - 0x0000)
struct GymPlayerState_GetPlayerAvatar final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerState_GetPlayerAvatar) == 0x000008, "Wrong alignment on GymPlayerState_GetPlayerAvatar");
static_assert(sizeof(GymPlayerState_GetPlayerAvatar) == 0x000008, "Wrong size on GymPlayerState_GetPlayerAvatar");
static_assert(offsetof(GymPlayerState_GetPlayerAvatar, ReturnValue) == 0x000000, "Member 'GymPlayerState_GetPlayerAvatar::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPlayerState.IsMapOwner
// 0x0001 (0x0001 - 0x0000)
struct GymPlayerState_IsMapOwner final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerState_IsMapOwner) == 0x000001, "Wrong alignment on GymPlayerState_IsMapOwner");
static_assert(sizeof(GymPlayerState_IsMapOwner) == 0x000001, "Wrong size on GymPlayerState_IsMapOwner");
static_assert(offsetof(GymPlayerState_IsMapOwner, ReturnValue) == 0x000000, "Member 'GymPlayerState_IsMapOwner::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPlayerState.IsOwner
// 0x0001 (0x0001 - 0x0000)
struct GymPlayerState_IsOwner final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlayerState_IsOwner) == 0x000001, "Wrong alignment on GymPlayerState_IsOwner");
static_assert(sizeof(GymPlayerState_IsOwner) == 0x000001, "Wrong size on GymPlayerState_IsOwner");
static_assert(offsetof(GymPlayerState_IsOwner, ReturnValue) == 0x000000, "Member 'GymPlayerState_IsOwner::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPlaylist.OrderScoreByCurrentStanding
// 0x0010 (0x0010 - 0x0000)
struct GymPlaylist_OrderScoreByCurrentStanding final
{
public:
	TArray<struct FGymPlaylistScoreboardEntry>    OutScoreboard;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlaylist_OrderScoreByCurrentStanding) == 0x000008, "Wrong alignment on GymPlaylist_OrderScoreByCurrentStanding");
static_assert(sizeof(GymPlaylist_OrderScoreByCurrentStanding) == 0x000010, "Wrong size on GymPlaylist_OrderScoreByCurrentStanding");
static_assert(offsetof(GymPlaylist_OrderScoreByCurrentStanding, OutScoreboard) == 0x000000, "Member 'GymPlaylist_OrderScoreByCurrentStanding::OutScoreboard' has a wrong offset!");

// Function GYMGAME.GymPlaylist.OrderScoreByTotalScore
// 0x0010 (0x0010 - 0x0000)
struct GymPlaylist_OrderScoreByTotalScore final
{
public:
	TArray<struct FGymPlaylistScoreboardEntry>    OutScoreboard;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlaylist_OrderScoreByTotalScore) == 0x000008, "Wrong alignment on GymPlaylist_OrderScoreByTotalScore");
static_assert(sizeof(GymPlaylist_OrderScoreByTotalScore) == 0x000010, "Wrong size on GymPlaylist_OrderScoreByTotalScore");
static_assert(offsetof(GymPlaylist_OrderScoreByTotalScore, OutScoreboard) == 0x000000, "Member 'GymPlaylist_OrderScoreByTotalScore::OutScoreboard' has a wrong offset!");

// Function GYMGAME.GymPlaylist.OrderScoreByTotalStanding
// 0x0010 (0x0010 - 0x0000)
struct GymPlaylist_OrderScoreByTotalStanding final
{
public:
	TArray<struct FGymPlaylistScoreboardEntry>    OutScoreboard;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlaylist_OrderScoreByTotalStanding) == 0x000008, "Wrong alignment on GymPlaylist_OrderScoreByTotalStanding");
static_assert(sizeof(GymPlaylist_OrderScoreByTotalStanding) == 0x000010, "Wrong size on GymPlaylist_OrderScoreByTotalStanding");
static_assert(offsetof(GymPlaylist_OrderScoreByTotalStanding, OutScoreboard) == 0x000000, "Member 'GymPlaylist_OrderScoreByTotalStanding::OutScoreboard' has a wrong offset!");

// Function GYMGAME.GymPlaylist.GetCurrentMapIndex
// 0x0004 (0x0004 - 0x0000)
struct GymPlaylist_GetCurrentMapIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlaylist_GetCurrentMapIndex) == 0x000004, "Wrong alignment on GymPlaylist_GetCurrentMapIndex");
static_assert(sizeof(GymPlaylist_GetCurrentMapIndex) == 0x000004, "Wrong size on GymPlaylist_GetCurrentMapIndex");
static_assert(offsetof(GymPlaylist_GetCurrentMapIndex, ReturnValue) == 0x000000, "Member 'GymPlaylist_GetCurrentMapIndex::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPlaylist.GetCurrentMapInfo
// 0x0080 (0x0080 - 0x0000)
struct GymPlaylist_GetCurrentMapInfo final
{
public:
	struct FGymPlaylistMapInfo                    ReturnValue;                                       // 0x0000(0x0080)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlaylist_GetCurrentMapInfo) == 0x000008, "Wrong alignment on GymPlaylist_GetCurrentMapInfo");
static_assert(sizeof(GymPlaylist_GetCurrentMapInfo) == 0x000080, "Wrong size on GymPlaylist_GetCurrentMapInfo");
static_assert(offsetof(GymPlaylist_GetCurrentMapInfo, ReturnValue) == 0x000000, "Member 'GymPlaylist_GetCurrentMapInfo::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPlaylist.GetMapCount
// 0x0004 (0x0004 - 0x0000)
struct GymPlaylist_GetMapCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlaylist_GetMapCount) == 0x000004, "Wrong alignment on GymPlaylist_GetMapCount");
static_assert(sizeof(GymPlaylist_GetMapCount) == 0x000004, "Wrong size on GymPlaylist_GetMapCount");
static_assert(offsetof(GymPlaylist_GetMapCount, ReturnValue) == 0x000000, "Member 'GymPlaylist_GetMapCount::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPlaylist.IsFinalMap
// 0x0001 (0x0001 - 0x0000)
struct GymPlaylist_IsFinalMap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlaylist_IsFinalMap) == 0x000001, "Wrong alignment on GymPlaylist_IsFinalMap");
static_assert(sizeof(GymPlaylist_IsFinalMap) == 0x000001, "Wrong size on GymPlaylist_IsFinalMap");
static_assert(offsetof(GymPlaylist_IsFinalMap, ReturnValue) == 0x000000, "Member 'GymPlaylist_IsFinalMap::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPlaylist.IsLocal
// 0x0001 (0x0001 - 0x0000)
struct GymPlaylist_IsLocal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlaylist_IsLocal) == 0x000001, "Wrong alignment on GymPlaylist_IsLocal");
static_assert(sizeof(GymPlaylist_IsLocal) == 0x000001, "Wrong size on GymPlaylist_IsLocal");
static_assert(offsetof(GymPlaylist_IsLocal, ReturnValue) == 0x000000, "Member 'GymPlaylist_IsLocal::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPlaylist.IsStarted
// 0x0001 (0x0001 - 0x0000)
struct GymPlaylist_IsStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymPlaylist_IsStarted) == 0x000001, "Wrong alignment on GymPlaylist_IsStarted");
static_assert(sizeof(GymPlaylist_IsStarted) == 0x000001, "Wrong size on GymPlaylist_IsStarted");
static_assert(offsetof(GymPlaylist_IsStarted, ReturnValue) == 0x000000, "Member 'GymPlaylist_IsStarted::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymPostPodiumCutscene.Multi_SpawnOwnPlayer
// 0x0018 (0x0018 - 0x0000)
struct GymPostPodiumCutscene_Multi_SpawnOwnPlayer final
{
public:
	TArray<struct FGymPlaylistScoreboardEntry>    Scoreboard;                                        // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsFinal;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTournament;                                     // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTrueFinal;                                      // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymPostPodiumCutscene_Multi_SpawnOwnPlayer) == 0x000008, "Wrong alignment on GymPostPodiumCutscene_Multi_SpawnOwnPlayer");
static_assert(sizeof(GymPostPodiumCutscene_Multi_SpawnOwnPlayer) == 0x000018, "Wrong size on GymPostPodiumCutscene_Multi_SpawnOwnPlayer");
static_assert(offsetof(GymPostPodiumCutscene_Multi_SpawnOwnPlayer, Scoreboard) == 0x000000, "Member 'GymPostPodiumCutscene_Multi_SpawnOwnPlayer::Scoreboard' has a wrong offset!");
static_assert(offsetof(GymPostPodiumCutscene_Multi_SpawnOwnPlayer, bIsFinal) == 0x000010, "Member 'GymPostPodiumCutscene_Multi_SpawnOwnPlayer::bIsFinal' has a wrong offset!");
static_assert(offsetof(GymPostPodiumCutscene_Multi_SpawnOwnPlayer, bIsTournament) == 0x000011, "Member 'GymPostPodiumCutscene_Multi_SpawnOwnPlayer::bIsTournament' has a wrong offset!");
static_assert(offsetof(GymPostPodiumCutscene_Multi_SpawnOwnPlayer, bIsTrueFinal) == 0x000012, "Member 'GymPostPodiumCutscene_Multi_SpawnOwnPlayer::bIsTrueFinal' has a wrong offset!");

// Function GYMGAME.GymQuest.GetAllObjectives
// 0x0010 (0x0010 - 0x0000)
struct GymQuest_GetAllObjectives final
{
public:
	TArray<class UGymObjective*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymQuest_GetAllObjectives) == 0x000008, "Wrong alignment on GymQuest_GetAllObjectives");
static_assert(sizeof(GymQuest_GetAllObjectives) == 0x000010, "Wrong size on GymQuest_GetAllObjectives");
static_assert(offsetof(GymQuest_GetAllObjectives, ReturnValue) == 0x000000, "Member 'GymQuest_GetAllObjectives::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymQuest.GetObjective
// 0x0010 (0x0010 - 0x0000)
struct GymQuest_GetObjective final
{
public:
	class FName                                   ObjectiveID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGymObjective*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymQuest_GetObjective) == 0x000008, "Wrong alignment on GymQuest_GetObjective");
static_assert(sizeof(GymQuest_GetObjective) == 0x000010, "Wrong size on GymQuest_GetObjective");
static_assert(offsetof(GymQuest_GetObjective, ObjectiveID) == 0x000000, "Member 'GymQuest_GetObjective::ObjectiveID' has a wrong offset!");
static_assert(offsetof(GymQuest_GetObjective, ReturnValue) == 0x000008, "Member 'GymQuest_GetObjective::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymQuest.GetTimeLeft
// 0x0004 (0x0004 - 0x0000)
struct GymQuest_GetTimeLeft final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymQuest_GetTimeLeft) == 0x000004, "Wrong alignment on GymQuest_GetTimeLeft");
static_assert(sizeof(GymQuest_GetTimeLeft) == 0x000004, "Wrong size on GymQuest_GetTimeLeft");
static_assert(offsetof(GymQuest_GetTimeLeft, ReturnValue) == 0x000000, "Member 'GymQuest_GetTimeLeft::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymQuest.IsCompleted
// 0x0001 (0x0001 - 0x0000)
struct GymQuest_IsCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymQuest_IsCompleted) == 0x000001, "Wrong alignment on GymQuest_IsCompleted");
static_assert(sizeof(GymQuest_IsCompleted) == 0x000001, "Wrong size on GymQuest_IsCompleted");
static_assert(offsetof(GymQuest_IsCompleted, ReturnValue) == 0x000000, "Member 'GymQuest_IsCompleted::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymQuest.IsFailed
// 0x0001 (0x0001 - 0x0000)
struct GymQuest_IsFailed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymQuest_IsFailed) == 0x000001, "Wrong alignment on GymQuest_IsFailed");
static_assert(sizeof(GymQuest_IsFailed) == 0x000001, "Wrong size on GymQuest_IsFailed");
static_assert(offsetof(GymQuest_IsFailed, ReturnValue) == 0x000000, "Member 'GymQuest_IsFailed::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymQuest.IsInProgress
// 0x0001 (0x0001 - 0x0000)
struct GymQuest_IsInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymQuest_IsInProgress) == 0x000001, "Wrong alignment on GymQuest_IsInProgress");
static_assert(sizeof(GymQuest_IsInProgress) == 0x000001, "Wrong size on GymQuest_IsInProgress");
static_assert(offsetof(GymQuest_IsInProgress, ReturnValue) == 0x000000, "Member 'GymQuest_IsInProgress::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymQuest.IsTimedQuest
// 0x0001 (0x0001 - 0x0000)
struct GymQuest_IsTimedQuest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymQuest_IsTimedQuest) == 0x000001, "Wrong alignment on GymQuest_IsTimedQuest");
static_assert(sizeof(GymQuest_IsTimedQuest) == 0x000001, "Wrong size on GymQuest_IsTimedQuest");
static_assert(offsetof(GymQuest_IsTimedQuest, ReturnValue) == 0x000000, "Member 'GymQuest_IsTimedQuest::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymQuestWidget.ShowMessage
// 0x0020 (0x0020 - 0x0000)
struct GymQuestWidget_ShowMessage final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bGoodMessage;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymQuestWidget_ShowMessage) == 0x000008, "Wrong alignment on GymQuestWidget_ShowMessage");
static_assert(sizeof(GymQuestWidget_ShowMessage) == 0x000020, "Wrong size on GymQuestWidget_ShowMessage");
static_assert(offsetof(GymQuestWidget_ShowMessage, Message) == 0x000000, "Member 'GymQuestWidget_ShowMessage::Message' has a wrong offset!");
static_assert(offsetof(GymQuestWidget_ShowMessage, bGoodMessage) == 0x000018, "Member 'GymQuestWidget_ShowMessage::bGoodMessage' has a wrong offset!");

// Function GYMGAME.GymQuestWidget.IsShowingMessage
// 0x0001 (0x0001 - 0x0000)
struct GymQuestWidget_IsShowingMessage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymQuestWidget_IsShowingMessage) == 0x000001, "Wrong alignment on GymQuestWidget_IsShowingMessage");
static_assert(sizeof(GymQuestWidget_IsShowingMessage) == 0x000001, "Wrong size on GymQuestWidget_IsShowingMessage");
static_assert(offsetof(GymQuestWidget_IsShowingMessage, ReturnValue) == 0x000000, "Member 'GymQuestWidget_IsShowingMessage::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymRoyaleEliminationCutscene.Multi_PlaySequence
// 0x0010 (0x0010 - 0x0000)
struct GymRoyaleEliminationCutscene_Multi_PlaySequence final
{
public:
	TArray<struct FGymPlaylistScoreboardEntry>    Scoreboard;                                        // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRoyaleEliminationCutscene_Multi_PlaySequence) == 0x000008, "Wrong alignment on GymRoyaleEliminationCutscene_Multi_PlaySequence");
static_assert(sizeof(GymRoyaleEliminationCutscene_Multi_PlaySequence) == 0x000010, "Wrong size on GymRoyaleEliminationCutscene_Multi_PlaySequence");
static_assert(offsetof(GymRoyaleEliminationCutscene_Multi_PlaySequence, Scoreboard) == 0x000000, "Member 'GymRoyaleEliminationCutscene_Multi_PlaySequence::Scoreboard' has a wrong offset!");

// Function GYMGAME.GymRoyalePodiumCutscene.Multi_SetupPodiumWidget
// 0x0050 (0x0050 - 0x0000)
struct GymRoyalePodiumCutscene_Multi_SetupPodiumWidget final
{
public:
	class FString                                 SpawnID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGymPlaylistScoreboardEntry            Score;                                             // 0x0010(0x0038)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bShowTournamentScore;                              // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFinal;                                          // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTrueFinal;                                      // 0x004A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymRoyalePodiumCutscene_Multi_SetupPodiumWidget) == 0x000008, "Wrong alignment on GymRoyalePodiumCutscene_Multi_SetupPodiumWidget");
static_assert(sizeof(GymRoyalePodiumCutscene_Multi_SetupPodiumWidget) == 0x000050, "Wrong size on GymRoyalePodiumCutscene_Multi_SetupPodiumWidget");
static_assert(offsetof(GymRoyalePodiumCutscene_Multi_SetupPodiumWidget, SpawnID) == 0x000000, "Member 'GymRoyalePodiumCutscene_Multi_SetupPodiumWidget::SpawnID' has a wrong offset!");
static_assert(offsetof(GymRoyalePodiumCutscene_Multi_SetupPodiumWidget, Score) == 0x000010, "Member 'GymRoyalePodiumCutscene_Multi_SetupPodiumWidget::Score' has a wrong offset!");
static_assert(offsetof(GymRoyalePodiumCutscene_Multi_SetupPodiumWidget, bShowTournamentScore) == 0x000048, "Member 'GymRoyalePodiumCutscene_Multi_SetupPodiumWidget::bShowTournamentScore' has a wrong offset!");
static_assert(offsetof(GymRoyalePodiumCutscene_Multi_SetupPodiumWidget, bIsFinal) == 0x000049, "Member 'GymRoyalePodiumCutscene_Multi_SetupPodiumWidget::bIsFinal' has a wrong offset!");
static_assert(offsetof(GymRoyalePodiumCutscene_Multi_SetupPodiumWidget, bIsTrueFinal) == 0x00004A, "Member 'GymRoyalePodiumCutscene_Multi_SetupPodiumWidget::bIsTrueFinal' has a wrong offset!");

// Function GYMGAME.GymRoyalePodiumCutscene.Multi_SpawnLosers
// 0x0010 (0x0010 - 0x0000)
struct GymRoyalePodiumCutscene_Multi_SpawnLosers final
{
public:
	TArray<struct FGymPlaylistScoreboardEntry>    PlaylistScore;                                     // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRoyalePodiumCutscene_Multi_SpawnLosers) == 0x000008, "Wrong alignment on GymRoyalePodiumCutscene_Multi_SpawnLosers");
static_assert(sizeof(GymRoyalePodiumCutscene_Multi_SpawnLosers) == 0x000010, "Wrong size on GymRoyalePodiumCutscene_Multi_SpawnLosers");
static_assert(offsetof(GymRoyalePodiumCutscene_Multi_SpawnLosers, PlaylistScore) == 0x000000, "Member 'GymRoyalePodiumCutscene_Multi_SpawnLosers::PlaylistScore' has a wrong offset!");

// Function GYMGAME.GymRuleControl.Client_AddMessage
// 0x0020 (0x0020 - 0x0000)
struct GymRuleControl_Client_AddMessage final
{
public:
	struct FRuleAdvanceResponse                   Response;                                          // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleControl_Client_AddMessage) == 0x000008, "Wrong alignment on GymRuleControl_Client_AddMessage");
static_assert(sizeof(GymRuleControl_Client_AddMessage) == 0x000020, "Wrong size on GymRuleControl_Client_AddMessage");
static_assert(offsetof(GymRuleControl_Client_AddMessage, Response) == 0x000000, "Member 'GymRuleControl_Client_AddMessage::Response' has a wrong offset!");

// Function GYMGAME.GymRuleControl.Client_CheckpointVisited
// 0x0004 (0x0004 - 0x0000)
struct GymRuleControl_Client_CheckpointVisited final
{
public:
	int32                                         CheckpointVisited;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleControl_Client_CheckpointVisited) == 0x000004, "Wrong alignment on GymRuleControl_Client_CheckpointVisited");
static_assert(sizeof(GymRuleControl_Client_CheckpointVisited) == 0x000004, "Wrong size on GymRuleControl_Client_CheckpointVisited");
static_assert(offsetof(GymRuleControl_Client_CheckpointVisited, CheckpointVisited) == 0x000000, "Member 'GymRuleControl_Client_CheckpointVisited::CheckpointVisited' has a wrong offset!");

// Function GYMGAME.GymRuleControl.Client_OnEliminated
// 0x0001 (0x0001 - 0x0000)
struct GymRuleControl_Client_OnEliminated final
{
public:
	EEliminationReason                            EliminationReason;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleControl_Client_OnEliminated) == 0x000001, "Wrong alignment on GymRuleControl_Client_OnEliminated");
static_assert(sizeof(GymRuleControl_Client_OnEliminated) == 0x000001, "Wrong size on GymRuleControl_Client_OnEliminated");
static_assert(offsetof(GymRuleControl_Client_OnEliminated, EliminationReason) == 0x000000, "Member 'GymRuleControl_Client_OnEliminated::EliminationReason' has a wrong offset!");

// Function GYMGAME.GymRuleControl.Client_OnFinished
// 0x0001 (0x0001 - 0x0000)
struct GymRuleControl_Client_OnFinished final
{
public:
	bool                                          bIsRoyale;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleControl_Client_OnFinished) == 0x000001, "Wrong alignment on GymRuleControl_Client_OnFinished");
static_assert(sizeof(GymRuleControl_Client_OnFinished) == 0x000001, "Wrong size on GymRuleControl_Client_OnFinished");
static_assert(offsetof(GymRuleControl_Client_OnFinished, bIsRoyale) == 0x000000, "Member 'GymRuleControl_Client_OnFinished::bIsRoyale' has a wrong offset!");

// Function GYMGAME.GymRuleControl.Client_OnPlayerTagged
// 0x0010 (0x0010 - 0x0000)
struct GymRuleControl_Client_OnPlayerTagged final
{
public:
	class AGymPlayerState*                        OtherPlayer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Cooldown;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymRuleControl_Client_OnPlayerTagged) == 0x000008, "Wrong alignment on GymRuleControl_Client_OnPlayerTagged");
static_assert(sizeof(GymRuleControl_Client_OnPlayerTagged) == 0x000010, "Wrong size on GymRuleControl_Client_OnPlayerTagged");
static_assert(offsetof(GymRuleControl_Client_OnPlayerTagged, OtherPlayer) == 0x000000, "Member 'GymRuleControl_Client_OnPlayerTagged::OtherPlayer' has a wrong offset!");
static_assert(offsetof(GymRuleControl_Client_OnPlayerTagged, Cooldown) == 0x000008, "Member 'GymRuleControl_Client_OnPlayerTagged::Cooldown' has a wrong offset!");

// Function GYMGAME.GymRuleControl.Client_OnTaggedByPlayer
// 0x0008 (0x0008 - 0x0000)
struct GymRuleControl_Client_OnTaggedByPlayer final
{
public:
	class AGymPlayerState*                        OtherPlayer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleControl_Client_OnTaggedByPlayer) == 0x000008, "Wrong alignment on GymRuleControl_Client_OnTaggedByPlayer");
static_assert(sizeof(GymRuleControl_Client_OnTaggedByPlayer) == 0x000008, "Wrong size on GymRuleControl_Client_OnTaggedByPlayer");
static_assert(offsetof(GymRuleControl_Client_OnTaggedByPlayer, OtherPlayer) == 0x000000, "Member 'GymRuleControl_Client_OnTaggedByPlayer::OtherPlayer' has a wrong offset!");

// Function GYMGAME.GymRuleControl.Client_RespondResetRuleState
// 0x0020 (0x0020 - 0x0000)
struct GymRuleControl_Client_RespondResetRuleState final
{
public:
	struct FRuleAdvanceResponse                   Response;                                          // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleControl_Client_RespondResetRuleState) == 0x000008, "Wrong alignment on GymRuleControl_Client_RespondResetRuleState");
static_assert(sizeof(GymRuleControl_Client_RespondResetRuleState) == 0x000020, "Wrong size on GymRuleControl_Client_RespondResetRuleState");
static_assert(offsetof(GymRuleControl_Client_RespondResetRuleState, Response) == 0x000000, "Member 'GymRuleControl_Client_RespondResetRuleState::Response' has a wrong offset!");

// Function GYMGAME.GymRuleControl.Client_RespondRuleToAdvance
// 0x0020 (0x0020 - 0x0000)
struct GymRuleControl_Client_RespondRuleToAdvance final
{
public:
	struct FRuleAdvanceResponse                   Response;                                          // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleControl_Client_RespondRuleToAdvance) == 0x000008, "Wrong alignment on GymRuleControl_Client_RespondRuleToAdvance");
static_assert(sizeof(GymRuleControl_Client_RespondRuleToAdvance) == 0x000020, "Wrong size on GymRuleControl_Client_RespondRuleToAdvance");
static_assert(offsetof(GymRuleControl_Client_RespondRuleToAdvance, Response) == 0x000000, "Member 'GymRuleControl_Client_RespondRuleToAdvance::Response' has a wrong offset!");

// Function GYMGAME.GymRuleControl.Client_SetFlagVisibility
// 0x0010 (0x0010 - 0x0000)
struct GymRuleControl_Client_SetFlagVisibility final
{
public:
	class AGymOCRespawnActor*                     Flag;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibility;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymRuleControl_Client_SetFlagVisibility) == 0x000008, "Wrong alignment on GymRuleControl_Client_SetFlagVisibility");
static_assert(sizeof(GymRuleControl_Client_SetFlagVisibility) == 0x000010, "Wrong size on GymRuleControl_Client_SetFlagVisibility");
static_assert(offsetof(GymRuleControl_Client_SetFlagVisibility, Flag) == 0x000000, "Member 'GymRuleControl_Client_SetFlagVisibility::Flag' has a wrong offset!");
static_assert(offsetof(GymRuleControl_Client_SetFlagVisibility, bVisibility) == 0x000008, "Member 'GymRuleControl_Client_SetFlagVisibility::bVisibility' has a wrong offset!");

// Function GYMGAME.GymRuleControl.Client_SetLootCollected
// 0x0008 (0x0008 - 0x0000)
struct GymRuleControl_Client_SetLootCollected final
{
public:
	int32                                         CollectedLoot;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootLeft;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleControl_Client_SetLootCollected) == 0x000004, "Wrong alignment on GymRuleControl_Client_SetLootCollected");
static_assert(sizeof(GymRuleControl_Client_SetLootCollected) == 0x000008, "Wrong size on GymRuleControl_Client_SetLootCollected");
static_assert(offsetof(GymRuleControl_Client_SetLootCollected, CollectedLoot) == 0x000000, "Member 'GymRuleControl_Client_SetLootCollected::CollectedLoot' has a wrong offset!");
static_assert(offsetof(GymRuleControl_Client_SetLootCollected, LootLeft) == 0x000004, "Member 'GymRuleControl_Client_SetLootCollected::LootLeft' has a wrong offset!");

// Function GYMGAME.GymRuleControl.CanStartVote
// 0x0001 (0x0001 - 0x0000)
struct GymRuleControl_CanStartVote final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleControl_CanStartVote) == 0x000001, "Wrong alignment on GymRuleControl_CanStartVote");
static_assert(sizeof(GymRuleControl_CanStartVote) == 0x000001, "Wrong size on GymRuleControl_CanStartVote");
static_assert(offsetof(GymRuleControl_CanStartVote, ReturnValue) == 0x000000, "Member 'GymRuleControl_CanStartVote::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymRuleUtils.FormatTime
// 0x0018 (0x0018 - 0x0000)
struct GymRuleUtils_FormatTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymRuleUtils_FormatTime) == 0x000008, "Wrong alignment on GymRuleUtils_FormatTime");
static_assert(sizeof(GymRuleUtils_FormatTime) == 0x000018, "Wrong size on GymRuleUtils_FormatTime");
static_assert(offsetof(GymRuleUtils_FormatTime, Time) == 0x000000, "Member 'GymRuleUtils_FormatTime::Time' has a wrong offset!");
static_assert(offsetof(GymRuleUtils_FormatTime, ReturnValue) == 0x000008, "Member 'GymRuleUtils_FormatTime::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSaveGameTutorial.DoesSaveExist
// 0x0001 (0x0001 - 0x0000)
struct GymSaveGameTutorial_DoesSaveExist final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSaveGameTutorial_DoesSaveExist) == 0x000001, "Wrong alignment on GymSaveGameTutorial_DoesSaveExist");
static_assert(sizeof(GymSaveGameTutorial_DoesSaveExist) == 0x000001, "Wrong size on GymSaveGameTutorial_DoesSaveExist");
static_assert(offsetof(GymSaveGameTutorial_DoesSaveExist, ReturnValue) == 0x000000, "Member 'GymSaveGameTutorial_DoesSaveExist::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSaveGameTutorial.GetSaveFile
// 0x0008 (0x0008 - 0x0000)
struct GymSaveGameTutorial_GetSaveFile final
{
public:
	class UGymSaveGameTutorial*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSaveGameTutorial_GetSaveFile) == 0x000008, "Wrong alignment on GymSaveGameTutorial_GetSaveFile");
static_assert(sizeof(GymSaveGameTutorial_GetSaveFile) == 0x000008, "Wrong size on GymSaveGameTutorial_GetSaveFile");
static_assert(offsetof(GymSaveGameTutorial_GetSaveFile, ReturnValue) == 0x000000, "Member 'GymSaveGameTutorial_GetSaveFile::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSaveGameTutorial.GetCompletedTaskArray
// 0x0020 (0x0020 - 0x0000)
struct GymSaveGameTutorial_GetCompletedTaskArray final
{
public:
	class FString                                 LevelName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSaveGameTutorial_GetCompletedTaskArray) == 0x000008, "Wrong alignment on GymSaveGameTutorial_GetCompletedTaskArray");
static_assert(sizeof(GymSaveGameTutorial_GetCompletedTaskArray) == 0x000020, "Wrong size on GymSaveGameTutorial_GetCompletedTaskArray");
static_assert(offsetof(GymSaveGameTutorial_GetCompletedTaskArray, LevelName) == 0x000000, "Member 'GymSaveGameTutorial_GetCompletedTaskArray::LevelName' has a wrong offset!");
static_assert(offsetof(GymSaveGameTutorial_GetCompletedTaskArray, ReturnValue) == 0x000010, "Member 'GymSaveGameTutorial_GetCompletedTaskArray::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSaveGameTutorial.GetCompletedTasks
// 0x0018 (0x0018 - 0x0000)
struct GymSaveGameTutorial_GetCompletedTasks final
{
public:
	class FString                                 LevelName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymSaveGameTutorial_GetCompletedTasks) == 0x000008, "Wrong alignment on GymSaveGameTutorial_GetCompletedTasks");
static_assert(sizeof(GymSaveGameTutorial_GetCompletedTasks) == 0x000018, "Wrong size on GymSaveGameTutorial_GetCompletedTasks");
static_assert(offsetof(GymSaveGameTutorial_GetCompletedTasks, LevelName) == 0x000000, "Member 'GymSaveGameTutorial_GetCompletedTasks::LevelName' has a wrong offset!");
static_assert(offsetof(GymSaveGameTutorial_GetCompletedTasks, ReturnValue) == 0x000010, "Member 'GymSaveGameTutorial_GetCompletedTasks::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSaveGameTutorial.GetPlacementForTournament
// 0x0018 (0x0018 - 0x0000)
struct GymSaveGameTutorial_GetPlacementForTournament final
{
public:
	class FString                                 TournamentId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymSaveGameTutorial_GetPlacementForTournament) == 0x000008, "Wrong alignment on GymSaveGameTutorial_GetPlacementForTournament");
static_assert(sizeof(GymSaveGameTutorial_GetPlacementForTournament) == 0x000018, "Wrong size on GymSaveGameTutorial_GetPlacementForTournament");
static_assert(offsetof(GymSaveGameTutorial_GetPlacementForTournament, TournamentId) == 0x000000, "Member 'GymSaveGameTutorial_GetPlacementForTournament::TournamentId' has a wrong offset!");
static_assert(offsetof(GymSaveGameTutorial_GetPlacementForTournament, ReturnValue) == 0x000010, "Member 'GymSaveGameTutorial_GetPlacementForTournament::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSaveGameTutorial.GetScoreForTournament
// 0x0018 (0x0018 - 0x0000)
struct GymSaveGameTutorial_GetScoreForTournament final
{
public:
	class FString                                 TournamentId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymSaveGameTutorial_GetScoreForTournament) == 0x000008, "Wrong alignment on GymSaveGameTutorial_GetScoreForTournament");
static_assert(sizeof(GymSaveGameTutorial_GetScoreForTournament) == 0x000018, "Wrong size on GymSaveGameTutorial_GetScoreForTournament");
static_assert(offsetof(GymSaveGameTutorial_GetScoreForTournament, TournamentId) == 0x000000, "Member 'GymSaveGameTutorial_GetScoreForTournament::TournamentId' has a wrong offset!");
static_assert(offsetof(GymSaveGameTutorial_GetScoreForTournament, ReturnValue) == 0x000010, "Member 'GymSaveGameTutorial_GetScoreForTournament::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSaveGameTutorial.GetTapesCollected
// 0x0004 (0x0004 - 0x0000)
struct GymSaveGameTutorial_GetTapesCollected final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSaveGameTutorial_GetTapesCollected) == 0x000004, "Wrong alignment on GymSaveGameTutorial_GetTapesCollected");
static_assert(sizeof(GymSaveGameTutorial_GetTapesCollected) == 0x000004, "Wrong size on GymSaveGameTutorial_GetTapesCollected");
static_assert(offsetof(GymSaveGameTutorial_GetTapesCollected, ReturnValue) == 0x000000, "Member 'GymSaveGameTutorial_GetTapesCollected::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSaveGameTutorial.GetTotalCompletedTasks
// 0x0004 (0x0004 - 0x0000)
struct GymSaveGameTutorial_GetTotalCompletedTasks final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSaveGameTutorial_GetTotalCompletedTasks) == 0x000004, "Wrong alignment on GymSaveGameTutorial_GetTotalCompletedTasks");
static_assert(sizeof(GymSaveGameTutorial_GetTotalCompletedTasks) == 0x000004, "Wrong size on GymSaveGameTutorial_GetTotalCompletedTasks");
static_assert(offsetof(GymSaveGameTutorial_GetTotalCompletedTasks, ReturnValue) == 0x000000, "Member 'GymSaveGameTutorial_GetTotalCompletedTasks::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSaveGameTutorial.HasCompletedLevel
// 0x0018 (0x0018 - 0x0000)
struct GymSaveGameTutorial_HasCompletedLevel final
{
public:
	class FString                                 LevelName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNum;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymSaveGameTutorial_HasCompletedLevel) == 0x000008, "Wrong alignment on GymSaveGameTutorial_HasCompletedLevel");
static_assert(sizeof(GymSaveGameTutorial_HasCompletedLevel) == 0x000018, "Wrong size on GymSaveGameTutorial_HasCompletedLevel");
static_assert(offsetof(GymSaveGameTutorial_HasCompletedLevel, LevelName) == 0x000000, "Member 'GymSaveGameTutorial_HasCompletedLevel::LevelName' has a wrong offset!");
static_assert(offsetof(GymSaveGameTutorial_HasCompletedLevel, MaxNum) == 0x000010, "Member 'GymSaveGameTutorial_HasCompletedLevel::MaxNum' has a wrong offset!");
static_assert(offsetof(GymSaveGameTutorial_HasCompletedLevel, ReturnValue) == 0x000014, "Member 'GymSaveGameTutorial_HasCompletedLevel::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSaveGameTutorial.HasCompletedTask
// 0x0028 (0x0028 - 0x0000)
struct GymSaveGameTutorial_HasCompletedTask final
{
public:
	class FString                                 LevelName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TaskName;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymSaveGameTutorial_HasCompletedTask) == 0x000008, "Wrong alignment on GymSaveGameTutorial_HasCompletedTask");
static_assert(sizeof(GymSaveGameTutorial_HasCompletedTask) == 0x000028, "Wrong size on GymSaveGameTutorial_HasCompletedTask");
static_assert(offsetof(GymSaveGameTutorial_HasCompletedTask, LevelName) == 0x000000, "Member 'GymSaveGameTutorial_HasCompletedTask::LevelName' has a wrong offset!");
static_assert(offsetof(GymSaveGameTutorial_HasCompletedTask, TaskName) == 0x000010, "Member 'GymSaveGameTutorial_HasCompletedTask::TaskName' has a wrong offset!");
static_assert(offsetof(GymSaveGameTutorial_HasCompletedTask, ReturnValue) == 0x000020, "Member 'GymSaveGameTutorial_HasCompletedTask::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSaveGameTutorial.IsTopN
// 0x0018 (0x0018 - 0x0000)
struct GymSaveGameTutorial_IsTopN final
{
public:
	class FString                                 TournamentId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Placement;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymSaveGameTutorial_IsTopN) == 0x000008, "Wrong alignment on GymSaveGameTutorial_IsTopN");
static_assert(sizeof(GymSaveGameTutorial_IsTopN) == 0x000018, "Wrong size on GymSaveGameTutorial_IsTopN");
static_assert(offsetof(GymSaveGameTutorial_IsTopN, TournamentId) == 0x000000, "Member 'GymSaveGameTutorial_IsTopN::TournamentId' has a wrong offset!");
static_assert(offsetof(GymSaveGameTutorial_IsTopN, Placement) == 0x000010, "Member 'GymSaveGameTutorial_IsTopN::Placement' has a wrong offset!");
static_assert(offsetof(GymSaveGameTutorial_IsTopN, ReturnValue) == 0x000014, "Member 'GymSaveGameTutorial_IsTopN::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSaveGameTutorial.SaveCareerLevelVisited
// 0x0010 (0x0010 - 0x0000)
struct GymSaveGameTutorial_SaveCareerLevelVisited final
{
public:
	class FString                                 LevelName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSaveGameTutorial_SaveCareerLevelVisited) == 0x000008, "Wrong alignment on GymSaveGameTutorial_SaveCareerLevelVisited");
static_assert(sizeof(GymSaveGameTutorial_SaveCareerLevelVisited) == 0x000010, "Wrong size on GymSaveGameTutorial_SaveCareerLevelVisited");
static_assert(offsetof(GymSaveGameTutorial_SaveCareerLevelVisited, LevelName) == 0x000000, "Member 'GymSaveGameTutorial_SaveCareerLevelVisited::LevelName' has a wrong offset!");

// Function GYMGAME.GymSaveGameTutorial.SaveCareerProgress
// 0x0018 (0x0018 - 0x0000)
struct GymSaveGameTutorial_SaveCareerProgress final
{
public:
	class FString                                 LevelName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CompletedTask;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSaveGameTutorial_SaveCareerProgress) == 0x000008, "Wrong alignment on GymSaveGameTutorial_SaveCareerProgress");
static_assert(sizeof(GymSaveGameTutorial_SaveCareerProgress) == 0x000018, "Wrong size on GymSaveGameTutorial_SaveCareerProgress");
static_assert(offsetof(GymSaveGameTutorial_SaveCareerProgress, LevelName) == 0x000000, "Member 'GymSaveGameTutorial_SaveCareerProgress::LevelName' has a wrong offset!");
static_assert(offsetof(GymSaveGameTutorial_SaveCareerProgress, CompletedTask) == 0x000010, "Member 'GymSaveGameTutorial_SaveCareerProgress::CompletedTask' has a wrong offset!");

// Function GYMGAME.GymSaveGameTutorial.SaveCareerTournament
// 0x0018 (0x0018 - 0x0000)
struct GymSaveGameTutorial_SaveCareerTournament final
{
public:
	class FString                                 TournamentId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Placement;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymSaveGameTutorial_SaveCareerTournament) == 0x000008, "Wrong alignment on GymSaveGameTutorial_SaveCareerTournament");
static_assert(sizeof(GymSaveGameTutorial_SaveCareerTournament) == 0x000018, "Wrong size on GymSaveGameTutorial_SaveCareerTournament");
static_assert(offsetof(GymSaveGameTutorial_SaveCareerTournament, TournamentId) == 0x000000, "Member 'GymSaveGameTutorial_SaveCareerTournament::TournamentId' has a wrong offset!");
static_assert(offsetof(GymSaveGameTutorial_SaveCareerTournament, Placement) == 0x000010, "Member 'GymSaveGameTutorial_SaveCareerTournament::Placement' has a wrong offset!");

// Function GYMGAME.GymSaveGameTutorial.GetCareerCompletionData
// 0x000C (0x000C - 0x0000)
struct GymSaveGameTutorial_GetCareerCompletionData final
{
public:
	bool                                          bIsCompletedOut;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PercentageOut;                                     // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrestigeLevelOut;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSaveGameTutorial_GetCareerCompletionData) == 0x000004, "Wrong alignment on GymSaveGameTutorial_GetCareerCompletionData");
static_assert(sizeof(GymSaveGameTutorial_GetCareerCompletionData) == 0x00000C, "Wrong size on GymSaveGameTutorial_GetCareerCompletionData");
static_assert(offsetof(GymSaveGameTutorial_GetCareerCompletionData, bIsCompletedOut) == 0x000000, "Member 'GymSaveGameTutorial_GetCareerCompletionData::bIsCompletedOut' has a wrong offset!");
static_assert(offsetof(GymSaveGameTutorial_GetCareerCompletionData, PercentageOut) == 0x000004, "Member 'GymSaveGameTutorial_GetCareerCompletionData::PercentageOut' has a wrong offset!");
static_assert(offsetof(GymSaveGameTutorial_GetCareerCompletionData, PrestigeLevelOut) == 0x000008, "Member 'GymSaveGameTutorial_GetCareerCompletionData::PrestigeLevelOut' has a wrong offset!");

// Function GYMGAME.GymSaveGameTutorial.GetNumberOfTimesCompleted
// 0x0004 (0x0004 - 0x0000)
struct GymSaveGameTutorial_GetNumberOfTimesCompleted final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSaveGameTutorial_GetNumberOfTimesCompleted) == 0x000004, "Wrong alignment on GymSaveGameTutorial_GetNumberOfTimesCompleted");
static_assert(sizeof(GymSaveGameTutorial_GetNumberOfTimesCompleted) == 0x000004, "Wrong size on GymSaveGameTutorial_GetNumberOfTimesCompleted");
static_assert(offsetof(GymSaveGameTutorial_GetNumberOfTimesCompleted, ReturnValue) == 0x000000, "Member 'GymSaveGameTutorial_GetNumberOfTimesCompleted::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSaveGameTutorial.GetRewardsClaimed
// 0x0004 (0x0004 - 0x0000)
struct GymSaveGameTutorial_GetRewardsClaimed final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSaveGameTutorial_GetRewardsClaimed) == 0x000004, "Wrong alignment on GymSaveGameTutorial_GetRewardsClaimed");
static_assert(sizeof(GymSaveGameTutorial_GetRewardsClaimed) == 0x000004, "Wrong size on GymSaveGameTutorial_GetRewardsClaimed");
static_assert(offsetof(GymSaveGameTutorial_GetRewardsClaimed, ReturnValue) == 0x000000, "Member 'GymSaveGameTutorial_GetRewardsClaimed::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSaveGameTutorial.HasCollectedTape
// 0x0018 (0x0018 - 0x0000)
struct GymSaveGameTutorial_HasCollectedTape final
{
public:
	class FString                                 LevelName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymSaveGameTutorial_HasCollectedTape) == 0x000008, "Wrong alignment on GymSaveGameTutorial_HasCollectedTape");
static_assert(sizeof(GymSaveGameTutorial_HasCollectedTape) == 0x000018, "Wrong size on GymSaveGameTutorial_HasCollectedTape");
static_assert(offsetof(GymSaveGameTutorial_HasCollectedTape, LevelName) == 0x000000, "Member 'GymSaveGameTutorial_HasCollectedTape::LevelName' has a wrong offset!");
static_assert(offsetof(GymSaveGameTutorial_HasCollectedTape, ReturnValue) == 0x000010, "Member 'GymSaveGameTutorial_HasCollectedTape::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSecretTape.BPSetVisible
// 0x0001 (0x0001 - 0x0000)
struct GymSecretTape_BPSetVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSecretTape_BPSetVisible) == 0x000001, "Wrong alignment on GymSecretTape_BPSetVisible");
static_assert(sizeof(GymSecretTape_BPSetVisible) == 0x000001, "Wrong size on GymSecretTape_BPSetVisible");
static_assert(offsetof(GymSecretTape_BPSetVisible, bVisible) == 0x000000, "Member 'GymSecretTape_BPSetVisible::bVisible' has a wrong offset!");

// Function GYMGAME.GymServerAnalytics.RaceStart
// 0x0018 (0x0018 - 0x0000)
struct GymServerAnalytics_RaceStart final
{
public:
	class FString                                 GameMode;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _Participants;                                     // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymServerAnalytics_RaceStart) == 0x000008, "Wrong alignment on GymServerAnalytics_RaceStart");
static_assert(sizeof(GymServerAnalytics_RaceStart) == 0x000018, "Wrong size on GymServerAnalytics_RaceStart");
static_assert(offsetof(GymServerAnalytics_RaceStart, GameMode) == 0x000000, "Member 'GymServerAnalytics_RaceStart::GameMode' has a wrong offset!");
static_assert(offsetof(GymServerAnalytics_RaceStart, _Participants) == 0x000010, "Member 'GymServerAnalytics_RaceStart::_Participants' has a wrong offset!");

// Function GYMGAME.GymServerHeartbeat.Start
// 0x0028 (0x0028 - 0x0000)
struct GymServerHeartbeat_Start final
{
public:
	class FString                                 Address;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Interval;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Hub;                                               // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Key;                                               // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymServerHeartbeat_Start) == 0x000008, "Wrong alignment on GymServerHeartbeat_Start");
static_assert(sizeof(GymServerHeartbeat_Start) == 0x000028, "Wrong size on GymServerHeartbeat_Start");
static_assert(offsetof(GymServerHeartbeat_Start, Address) == 0x000000, "Member 'GymServerHeartbeat_Start::Address' has a wrong offset!");
static_assert(offsetof(GymServerHeartbeat_Start, Interval) == 0x000010, "Member 'GymServerHeartbeat_Start::Interval' has a wrong offset!");
static_assert(offsetof(GymServerHeartbeat_Start, Hub) == 0x000014, "Member 'GymServerHeartbeat_Start::Hub' has a wrong offset!");
static_assert(offsetof(GymServerHeartbeat_Start, Key) == 0x000018, "Member 'GymServerHeartbeat_Start::Key' has a wrong offset!");

// Function GYMGAME.GymSessionUtils.CreateSession
// 0x0028 (0x0028 - 0x0000)
struct GymSessionUtils_CreateSession final
{
public:
	int32                                         NumPublicConnections;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLANMatch;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFeaturedPlaylist;                               // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibility;                                       // 0x0006(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MapName;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionMode;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSessionUtils_CreateSession) == 0x000008, "Wrong alignment on GymSessionUtils_CreateSession");
static_assert(sizeof(GymSessionUtils_CreateSession) == 0x000028, "Wrong size on GymSessionUtils_CreateSession");
static_assert(offsetof(GymSessionUtils_CreateSession, NumPublicConnections) == 0x000000, "Member 'GymSessionUtils_CreateSession::NumPublicConnections' has a wrong offset!");
static_assert(offsetof(GymSessionUtils_CreateSession, IsLANMatch) == 0x000004, "Member 'GymSessionUtils_CreateSession::IsLANMatch' has a wrong offset!");
static_assert(offsetof(GymSessionUtils_CreateSession, bIsFeaturedPlaylist) == 0x000005, "Member 'GymSessionUtils_CreateSession::bIsFeaturedPlaylist' has a wrong offset!");
static_assert(offsetof(GymSessionUtils_CreateSession, bVisibility) == 0x000006, "Member 'GymSessionUtils_CreateSession::bVisibility' has a wrong offset!");
static_assert(offsetof(GymSessionUtils_CreateSession, MapName) == 0x000008, "Member 'GymSessionUtils_CreateSession::MapName' has a wrong offset!");
static_assert(offsetof(GymSessionUtils_CreateSession, SessionMode) == 0x000018, "Member 'GymSessionUtils_CreateSession::SessionMode' has a wrong offset!");

// Function GYMGAME.GymSessionUtils.FindSessions
// 0x0028 (0x0028 - 0x0000)
struct GymSessionUtils_FindSessions final
{
public:
	int32                                         MaxSearchResults;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLANQuery;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGymSessionSearchFilters               Filters;                                           // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSessionUtils_FindSessions) == 0x000008, "Wrong alignment on GymSessionUtils_FindSessions");
static_assert(sizeof(GymSessionUtils_FindSessions) == 0x000028, "Wrong size on GymSessionUtils_FindSessions");
static_assert(offsetof(GymSessionUtils_FindSessions, MaxSearchResults) == 0x000000, "Member 'GymSessionUtils_FindSessions::MaxSearchResults' has a wrong offset!");
static_assert(offsetof(GymSessionUtils_FindSessions, IsLANQuery) == 0x000004, "Member 'GymSessionUtils_FindSessions::IsLANQuery' has a wrong offset!");
static_assert(offsetof(GymSessionUtils_FindSessions, Filters) == 0x000008, "Member 'GymSessionUtils_FindSessions::Filters' has a wrong offset!");

// Function GYMGAME.GymSessionUtils.GetSessionKey
// 0x0010 (0x0010 - 0x0000)
struct GymSessionUtils_GetSessionKey final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSessionUtils_GetSessionKey) == 0x000008, "Wrong alignment on GymSessionUtils_GetSessionKey");
static_assert(sizeof(GymSessionUtils_GetSessionKey) == 0x000010, "Wrong size on GymSessionUtils_GetSessionKey");
static_assert(offsetof(GymSessionUtils_GetSessionKey, ReturnValue) == 0x000000, "Member 'GymSessionUtils_GetSessionKey::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSessionUtils.GetSessionMode
// 0x0018 (0x0018 - 0x0000)
struct GymSessionUtils_GetSessionMode final
{
public:
	class FString                                 SessionMode;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymSessionUtils_GetSessionMode) == 0x000008, "Wrong alignment on GymSessionUtils_GetSessionMode");
static_assert(sizeof(GymSessionUtils_GetSessionMode) == 0x000018, "Wrong size on GymSessionUtils_GetSessionMode");
static_assert(offsetof(GymSessionUtils_GetSessionMode, SessionMode) == 0x000000, "Member 'GymSessionUtils_GetSessionMode::SessionMode' has a wrong offset!");
static_assert(offsetof(GymSessionUtils_GetSessionMode, ReturnValue) == 0x000010, "Member 'GymSessionUtils_GetSessionMode::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSessionUtils.GetSessionOwnerId
// 0x0018 (0x0018 - 0x0000)
struct GymSessionUtils_GetSessionOwnerId final
{
public:
	class FString                                 OwnerId;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymSessionUtils_GetSessionOwnerId) == 0x000008, "Wrong alignment on GymSessionUtils_GetSessionOwnerId");
static_assert(sizeof(GymSessionUtils_GetSessionOwnerId) == 0x000018, "Wrong size on GymSessionUtils_GetSessionOwnerId");
static_assert(offsetof(GymSessionUtils_GetSessionOwnerId, OwnerId) == 0x000000, "Member 'GymSessionUtils_GetSessionOwnerId::OwnerId' has a wrong offset!");
static_assert(offsetof(GymSessionUtils_GetSessionOwnerId, ReturnValue) == 0x000010, "Member 'GymSessionUtils_GetSessionOwnerId::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSessionUtils.GetSessionVisibility
// 0x0001 (0x0001 - 0x0000)
struct GymSessionUtils_GetSessionVisibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSessionUtils_GetSessionVisibility) == 0x000001, "Wrong alignment on GymSessionUtils_GetSessionVisibility");
static_assert(sizeof(GymSessionUtils_GetSessionVisibility) == 0x000001, "Wrong size on GymSessionUtils_GetSessionVisibility");
static_assert(offsetof(GymSessionUtils_GetSessionVisibility, ReturnValue) == 0x000000, "Member 'GymSessionUtils_GetSessionVisibility::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSessionUtils.GetUseSessionKey
// 0x0001 (0x0001 - 0x0000)
struct GymSessionUtils_GetUseSessionKey final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSessionUtils_GetUseSessionKey) == 0x000001, "Wrong alignment on GymSessionUtils_GetUseSessionKey");
static_assert(sizeof(GymSessionUtils_GetUseSessionKey) == 0x000001, "Wrong size on GymSessionUtils_GetUseSessionKey");
static_assert(offsetof(GymSessionUtils_GetUseSessionKey, ReturnValue) == 0x000000, "Member 'GymSessionUtils_GetUseSessionKey::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSessionUtils.HasPendingInvite
// 0x0001 (0x0001 - 0x0000)
struct GymSessionUtils_HasPendingInvite final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSessionUtils_HasPendingInvite) == 0x000001, "Wrong alignment on GymSessionUtils_HasPendingInvite");
static_assert(sizeof(GymSessionUtils_HasPendingInvite) == 0x000001, "Wrong size on GymSessionUtils_HasPendingInvite");
static_assert(offsetof(GymSessionUtils_HasPendingInvite, ReturnValue) == 0x000000, "Member 'GymSessionUtils_HasPendingInvite::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSessionUtils.IsPlayMode
// 0x0001 (0x0001 - 0x0000)
struct GymSessionUtils_IsPlayMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSessionUtils_IsPlayMode) == 0x000001, "Wrong alignment on GymSessionUtils_IsPlayMode");
static_assert(sizeof(GymSessionUtils_IsPlayMode) == 0x000001, "Wrong size on GymSessionUtils_IsPlayMode");
static_assert(offsetof(GymSessionUtils_IsPlayMode, ReturnValue) == 0x000000, "Member 'GymSessionUtils_IsPlayMode::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSessionUtils.IsSandboxMode
// 0x0001 (0x0001 - 0x0000)
struct GymSessionUtils_IsSandboxMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSessionUtils_IsSandboxMode) == 0x000001, "Wrong alignment on GymSessionUtils_IsSandboxMode");
static_assert(sizeof(GymSessionUtils_IsSandboxMode) == 0x000001, "Wrong size on GymSessionUtils_IsSandboxMode");
static_assert(offsetof(GymSessionUtils_IsSandboxMode, ReturnValue) == 0x000000, "Member 'GymSessionUtils_IsSandboxMode::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSessionUtils.JoinGameSession
// 0x0148 (0x0148 - 0x0000)
struct GymSessionUtils_JoinGameSession final
{
public:
	struct FGymSessionSearchResult                SessionResult;                                     // 0x0000(0x0148)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSessionUtils_JoinGameSession) == 0x000008, "Wrong alignment on GymSessionUtils_JoinGameSession");
static_assert(sizeof(GymSessionUtils_JoinGameSession) == 0x000148, "Wrong size on GymSessionUtils_JoinGameSession");
static_assert(offsetof(GymSessionUtils_JoinGameSession, SessionResult) == 0x000000, "Member 'GymSessionUtils_JoinGameSession::SessionResult' has a wrong offset!");

// Function GYMGAME.GymSessionUtils.TryTravelToCurrentSession
// 0x0001 (0x0001 - 0x0000)
struct GymSessionUtils_TryTravelToCurrentSession final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSessionUtils_TryTravelToCurrentSession) == 0x000001, "Wrong alignment on GymSessionUtils_TryTravelToCurrentSession");
static_assert(sizeof(GymSessionUtils_TryTravelToCurrentSession) == 0x000001, "Wrong size on GymSessionUtils_TryTravelToCurrentSession");
static_assert(offsetof(GymSessionUtils_TryTravelToCurrentSession, ReturnValue) == 0x000000, "Member 'GymSessionUtils_TryTravelToCurrentSession::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSessionUtils.UpdateSessionMapName
// 0x0010 (0x0010 - 0x0000)
struct GymSessionUtils_UpdateSessionMapName final
{
public:
	class FString                                 MapName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSessionUtils_UpdateSessionMapName) == 0x000008, "Wrong alignment on GymSessionUtils_UpdateSessionMapName");
static_assert(sizeof(GymSessionUtils_UpdateSessionMapName) == 0x000010, "Wrong size on GymSessionUtils_UpdateSessionMapName");
static_assert(offsetof(GymSessionUtils_UpdateSessionMapName, MapName) == 0x000000, "Member 'GymSessionUtils_UpdateSessionMapName::MapName' has a wrong offset!");

// Function GYMGAME.GymSessionUtils.UpdateUseSessionKey
// 0x0001 (0x0001 - 0x0000)
struct GymSessionUtils_UpdateUseSessionKey final
{
public:
	bool                                          bUseKey;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSessionUtils_UpdateUseSessionKey) == 0x000001, "Wrong alignment on GymSessionUtils_UpdateUseSessionKey");
static_assert(sizeof(GymSessionUtils_UpdateUseSessionKey) == 0x000001, "Wrong size on GymSessionUtils_UpdateUseSessionKey");
static_assert(offsetof(GymSessionUtils_UpdateUseSessionKey, bUseKey) == 0x000000, "Member 'GymSessionUtils_UpdateUseSessionKey::bUseKey' has a wrong offset!");

// Function GYMGAME.GymSessionUtils.UpdateVisibility
// 0x0001 (0x0001 - 0x0000)
struct GymSessionUtils_UpdateVisibility final
{
public:
	bool                                          bVisibility;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSessionUtils_UpdateVisibility) == 0x000001, "Wrong alignment on GymSessionUtils_UpdateVisibility");
static_assert(sizeof(GymSessionUtils_UpdateVisibility) == 0x000001, "Wrong size on GymSessionUtils_UpdateVisibility");
static_assert(offsetof(GymSessionUtils_UpdateVisibility, bVisibility) == 0x000000, "Member 'GymSessionUtils_UpdateVisibility::bVisibility' has a wrong offset!");

// Function GYMGAME.GymSettingsManager.GetCrowdDensity
// 0x0004 (0x0004 - 0x0000)
struct GymSettingsManager_GetCrowdDensity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSettingsManager_GetCrowdDensity) == 0x000004, "Wrong alignment on GymSettingsManager_GetCrowdDensity");
static_assert(sizeof(GymSettingsManager_GetCrowdDensity) == 0x000004, "Wrong size on GymSettingsManager_GetCrowdDensity");
static_assert(offsetof(GymSettingsManager_GetCrowdDensity, ReturnValue) == 0x000000, "Member 'GymSettingsManager_GetCrowdDensity::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSettingsManager.GetGamepadForceFeedback
// 0x0001 (0x0001 - 0x0000)
struct GymSettingsManager_GetGamepadForceFeedback final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSettingsManager_GetGamepadForceFeedback) == 0x000001, "Wrong alignment on GymSettingsManager_GetGamepadForceFeedback");
static_assert(sizeof(GymSettingsManager_GetGamepadForceFeedback) == 0x000001, "Wrong size on GymSettingsManager_GetGamepadForceFeedback");
static_assert(offsetof(GymSettingsManager_GetGamepadForceFeedback, ReturnValue) == 0x000000, "Member 'GymSettingsManager_GetGamepadForceFeedback::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSettingsManager.GetGamepadX
// 0x0004 (0x0004 - 0x0000)
struct GymSettingsManager_GetGamepadX final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSettingsManager_GetGamepadX) == 0x000004, "Wrong alignment on GymSettingsManager_GetGamepadX");
static_assert(sizeof(GymSettingsManager_GetGamepadX) == 0x000004, "Wrong size on GymSettingsManager_GetGamepadX");
static_assert(offsetof(GymSettingsManager_GetGamepadX, ReturnValue) == 0x000000, "Member 'GymSettingsManager_GetGamepadX::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSettingsManager.GetGamepadY
// 0x0004 (0x0004 - 0x0000)
struct GymSettingsManager_GetGamepadY final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSettingsManager_GetGamepadY) == 0x000004, "Wrong alignment on GymSettingsManager_GetGamepadY");
static_assert(sizeof(GymSettingsManager_GetGamepadY) == 0x000004, "Wrong size on GymSettingsManager_GetGamepadY");
static_assert(offsetof(GymSettingsManager_GetGamepadY, ReturnValue) == 0x000000, "Member 'GymSettingsManager_GetGamepadY::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSettingsManager.GetInvertedX
// 0x0001 (0x0001 - 0x0000)
struct GymSettingsManager_GetInvertedX final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSettingsManager_GetInvertedX) == 0x000001, "Wrong alignment on GymSettingsManager_GetInvertedX");
static_assert(sizeof(GymSettingsManager_GetInvertedX) == 0x000001, "Wrong size on GymSettingsManager_GetInvertedX");
static_assert(offsetof(GymSettingsManager_GetInvertedX, ReturnValue) == 0x000000, "Member 'GymSettingsManager_GetInvertedX::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSettingsManager.GetInvertedY
// 0x0001 (0x0001 - 0x0000)
struct GymSettingsManager_GetInvertedY final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSettingsManager_GetInvertedY) == 0x000001, "Wrong alignment on GymSettingsManager_GetInvertedY");
static_assert(sizeof(GymSettingsManager_GetInvertedY) == 0x000001, "Wrong size on GymSettingsManager_GetInvertedY");
static_assert(offsetof(GymSettingsManager_GetInvertedY, ReturnValue) == 0x000000, "Member 'GymSettingsManager_GetInvertedY::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSettingsManager.GetMouseX
// 0x0004 (0x0004 - 0x0000)
struct GymSettingsManager_GetMouseX final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSettingsManager_GetMouseX) == 0x000004, "Wrong alignment on GymSettingsManager_GetMouseX");
static_assert(sizeof(GymSettingsManager_GetMouseX) == 0x000004, "Wrong size on GymSettingsManager_GetMouseX");
static_assert(offsetof(GymSettingsManager_GetMouseX, ReturnValue) == 0x000000, "Member 'GymSettingsManager_GetMouseX::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSettingsManager.GetMouseY
// 0x0004 (0x0004 - 0x0000)
struct GymSettingsManager_GetMouseY final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSettingsManager_GetMouseY) == 0x000004, "Wrong alignment on GymSettingsManager_GetMouseY");
static_assert(sizeof(GymSettingsManager_GetMouseY) == 0x000004, "Wrong size on GymSettingsManager_GetMouseY");
static_assert(offsetof(GymSettingsManager_GetMouseY, ReturnValue) == 0x000000, "Member 'GymSettingsManager_GetMouseY::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSettingsManager.GetPlayerPerspective
// 0x0001 (0x0001 - 0x0000)
struct GymSettingsManager_GetPlayerPerspective final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSettingsManager_GetPlayerPerspective) == 0x000001, "Wrong alignment on GymSettingsManager_GetPlayerPerspective");
static_assert(sizeof(GymSettingsManager_GetPlayerPerspective) == 0x000001, "Wrong size on GymSettingsManager_GetPlayerPerspective");
static_assert(offsetof(GymSettingsManager_GetPlayerPerspective, ReturnValue) == 0x000000, "Member 'GymSettingsManager_GetPlayerPerspective::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSettingsManager.GetShowCrosshair
// 0x0001 (0x0001 - 0x0000)
struct GymSettingsManager_GetShowCrosshair final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSettingsManager_GetShowCrosshair) == 0x000001, "Wrong alignment on GymSettingsManager_GetShowCrosshair");
static_assert(sizeof(GymSettingsManager_GetShowCrosshair) == 0x000001, "Wrong size on GymSettingsManager_GetShowCrosshair");
static_assert(offsetof(GymSettingsManager_GetShowCrosshair, ReturnValue) == 0x000000, "Member 'GymSettingsManager_GetShowCrosshair::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSettingsManager.GetShowSupermoveIcons
// 0x0001 (0x0001 - 0x0000)
struct GymSettingsManager_GetShowSupermoveIcons final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSettingsManager_GetShowSupermoveIcons) == 0x000001, "Wrong alignment on GymSettingsManager_GetShowSupermoveIcons");
static_assert(sizeof(GymSettingsManager_GetShowSupermoveIcons) == 0x000001, "Wrong size on GymSettingsManager_GetShowSupermoveIcons");
static_assert(offsetof(GymSettingsManager_GetShowSupermoveIcons, ReturnValue) == 0x000000, "Member 'GymSettingsManager_GetShowSupermoveIcons::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSettingsManager.GetShowSupermoveMeter
// 0x0001 (0x0001 - 0x0000)
struct GymSettingsManager_GetShowSupermoveMeter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSettingsManager_GetShowSupermoveMeter) == 0x000001, "Wrong alignment on GymSettingsManager_GetShowSupermoveMeter");
static_assert(sizeof(GymSettingsManager_GetShowSupermoveMeter) == 0x000001, "Wrong size on GymSettingsManager_GetShowSupermoveMeter");
static_assert(offsetof(GymSettingsManager_GetShowSupermoveMeter, ReturnValue) == 0x000000, "Member 'GymSettingsManager_GetShowSupermoveMeter::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSettingsManager.GetSoftwareCursorScale
// 0x0004 (0x0004 - 0x0000)
struct GymSettingsManager_GetSoftwareCursorScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSettingsManager_GetSoftwareCursorScale) == 0x000004, "Wrong alignment on GymSettingsManager_GetSoftwareCursorScale");
static_assert(sizeof(GymSettingsManager_GetSoftwareCursorScale) == 0x000004, "Wrong size on GymSettingsManager_GetSoftwareCursorScale");
static_assert(offsetof(GymSettingsManager_GetSoftwareCursorScale, ReturnValue) == 0x000000, "Member 'GymSettingsManager_GetSoftwareCursorScale::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSettingsManager.GetTextChatEnabled
// 0x0001 (0x0001 - 0x0000)
struct GymSettingsManager_GetTextChatEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSettingsManager_GetTextChatEnabled) == 0x000001, "Wrong alignment on GymSettingsManager_GetTextChatEnabled");
static_assert(sizeof(GymSettingsManager_GetTextChatEnabled) == 0x000001, "Wrong size on GymSettingsManager_GetTextChatEnabled");
static_assert(offsetof(GymSettingsManager_GetTextChatEnabled, ReturnValue) == 0x000000, "Member 'GymSettingsManager_GetTextChatEnabled::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSettingsManager.GetVolumetric
// 0x0001 (0x0001 - 0x0000)
struct GymSettingsManager_GetVolumetric final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSettingsManager_GetVolumetric) == 0x000001, "Wrong alignment on GymSettingsManager_GetVolumetric");
static_assert(sizeof(GymSettingsManager_GetVolumetric) == 0x000001, "Wrong size on GymSettingsManager_GetVolumetric");
static_assert(offsetof(GymSettingsManager_GetVolumetric, ReturnValue) == 0x000000, "Member 'GymSettingsManager_GetVolumetric::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSpectatorGuiControl.GetHideAllWidgets
// 0x0001 (0x0001 - 0x0000)
struct GymSpectatorGuiControl_GetHideAllWidgets final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSpectatorGuiControl_GetHideAllWidgets) == 0x000001, "Wrong alignment on GymSpectatorGuiControl_GetHideAllWidgets");
static_assert(sizeof(GymSpectatorGuiControl_GetHideAllWidgets) == 0x000001, "Wrong size on GymSpectatorGuiControl_GetHideAllWidgets");
static_assert(offsetof(GymSpectatorGuiControl_GetHideAllWidgets, ReturnValue) == 0x000000, "Member 'GymSpectatorGuiControl_GetHideAllWidgets::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSpectatorGuiMainWidget.SetReason
// 0x0001 (0x0001 - 0x0000)
struct GymSpectatorGuiMainWidget_SetReason final
{
public:
	ESpectateReason                               ParticipantState;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSpectatorGuiMainWidget_SetReason) == 0x000001, "Wrong alignment on GymSpectatorGuiMainWidget_SetReason");
static_assert(sizeof(GymSpectatorGuiMainWidget_SetReason) == 0x000001, "Wrong size on GymSpectatorGuiMainWidget_SetReason");
static_assert(offsetof(GymSpectatorGuiMainWidget_SetReason, ParticipantState) == 0x000000, "Member 'GymSpectatorGuiMainWidget_SetReason::ParticipantState' has a wrong offset!");

// Function GYMGAME.GymSpectatorPawn.Client_SetSpectateReason
// 0x0001 (0x0001 - 0x0000)
struct GymSpectatorPawn_Client_SetSpectateReason final
{
public:
	ESpectateReason                               NewSpectateReason;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSpectatorPawn_Client_SetSpectateReason) == 0x000001, "Wrong alignment on GymSpectatorPawn_Client_SetSpectateReason");
static_assert(sizeof(GymSpectatorPawn_Client_SetSpectateReason) == 0x000001, "Wrong size on GymSpectatorPawn_Client_SetSpectateReason");
static_assert(offsetof(GymSpectatorPawn_Client_SetSpectateReason, NewSpectateReason) == 0x000000, "Member 'GymSpectatorPawn_Client_SetSpectateReason::NewSpectateReason' has a wrong offset!");

// Function GYMGAME.GymSpectatorPawn.GetGymController
// 0x0008 (0x0008 - 0x0000)
struct GymSpectatorPawn_GetGymController final
{
public:
	class AGymPlayerController*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSpectatorPawn_GetGymController) == 0x000008, "Wrong alignment on GymSpectatorPawn_GetGymController");
static_assert(sizeof(GymSpectatorPawn_GetGymController) == 0x000008, "Wrong size on GymSpectatorPawn_GetGymController");
static_assert(offsetof(GymSpectatorPawn_GetGymController, ReturnValue) == 0x000000, "Member 'GymSpectatorPawn_GetGymController::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSpectatorPawn.GetCurrentMovementMode
// 0x0001 (0x0001 - 0x0000)
struct GymSpectatorPawn_GetCurrentMovementMode final
{
public:
	ESpectatorMovementMode                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSpectatorPawn_GetCurrentMovementMode) == 0x000001, "Wrong alignment on GymSpectatorPawn_GetCurrentMovementMode");
static_assert(sizeof(GymSpectatorPawn_GetCurrentMovementMode) == 0x000001, "Wrong size on GymSpectatorPawn_GetCurrentMovementMode");
static_assert(offsetof(GymSpectatorPawn_GetCurrentMovementMode, ReturnValue) == 0x000000, "Member 'GymSpectatorPawn_GetCurrentMovementMode::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSpectatorPawn.GetPlayerToFollow
// 0x0008 (0x0008 - 0x0000)
struct GymSpectatorPawn_GetPlayerToFollow final
{
public:
	class AGymCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSpectatorPawn_GetPlayerToFollow) == 0x000008, "Wrong alignment on GymSpectatorPawn_GetPlayerToFollow");
static_assert(sizeof(GymSpectatorPawn_GetPlayerToFollow) == 0x000008, "Wrong size on GymSpectatorPawn_GetPlayerToFollow");
static_assert(offsetof(GymSpectatorPawn_GetPlayerToFollow, ReturnValue) == 0x000000, "Member 'GymSpectatorPawn_GetPlayerToFollow::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSpectatorPawn.GetPlayerToFollowIfNotFreeMode
// 0x0008 (0x0008 - 0x0000)
struct GymSpectatorPawn_GetPlayerToFollowIfNotFreeMode final
{
public:
	class AGymCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSpectatorPawn_GetPlayerToFollowIfNotFreeMode) == 0x000008, "Wrong alignment on GymSpectatorPawn_GetPlayerToFollowIfNotFreeMode");
static_assert(sizeof(GymSpectatorPawn_GetPlayerToFollowIfNotFreeMode) == 0x000008, "Wrong size on GymSpectatorPawn_GetPlayerToFollowIfNotFreeMode");
static_assert(offsetof(GymSpectatorPawn_GetPlayerToFollowIfNotFreeMode, ReturnValue) == 0x000000, "Member 'GymSpectatorPawn_GetPlayerToFollowIfNotFreeMode::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSpinner.HandleCollision
// 0x0010 (0x0010 - 0x0000)
struct GymSpinner_HandleCollision final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    Comp;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSpinner_HandleCollision) == 0x000008, "Wrong alignment on GymSpinner_HandleCollision");
static_assert(sizeof(GymSpinner_HandleCollision) == 0x000010, "Wrong size on GymSpinner_HandleCollision");
static_assert(offsetof(GymSpinner_HandleCollision, OtherActor) == 0x000000, "Member 'GymSpinner_HandleCollision::OtherActor' has a wrong offset!");
static_assert(offsetof(GymSpinner_HandleCollision, Comp) == 0x000008, "Member 'GymSpinner_HandleCollision::Comp' has a wrong offset!");

// Function GYMGAME.GymSpinner.HandleEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct GymSpinner_HandleEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymSpinner_HandleEndOverlap) == 0x000008, "Wrong alignment on GymSpinner_HandleEndOverlap");
static_assert(sizeof(GymSpinner_HandleEndOverlap) == 0x000020, "Wrong size on GymSpinner_HandleEndOverlap");
static_assert(offsetof(GymSpinner_HandleEndOverlap, OverlappedComponent) == 0x000000, "Member 'GymSpinner_HandleEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(GymSpinner_HandleEndOverlap, OtherActor) == 0x000008, "Member 'GymSpinner_HandleEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(GymSpinner_HandleEndOverlap, OtherComp) == 0x000010, "Member 'GymSpinner_HandleEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(GymSpinner_HandleEndOverlap, OtherBodyIndex) == 0x000018, "Member 'GymSpinner_HandleEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function GYMGAME.GymSpinner.HandleOverlap
// 0x0108 (0x0108 - 0x0000)
struct GymSpinner_HandleOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSpinner_HandleOverlap) == 0x000008, "Wrong alignment on GymSpinner_HandleOverlap");
static_assert(sizeof(GymSpinner_HandleOverlap) == 0x000108, "Wrong size on GymSpinner_HandleOverlap");
static_assert(offsetof(GymSpinner_HandleOverlap, OverlappedComponent) == 0x000000, "Member 'GymSpinner_HandleOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(GymSpinner_HandleOverlap, OtherActor) == 0x000008, "Member 'GymSpinner_HandleOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(GymSpinner_HandleOverlap, OtherComp) == 0x000010, "Member 'GymSpinner_HandleOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(GymSpinner_HandleOverlap, OtherBodyIndex) == 0x000018, "Member 'GymSpinner_HandleOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(GymSpinner_HandleOverlap, bFromSweep) == 0x00001C, "Member 'GymSpinner_HandleOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(GymSpinner_HandleOverlap, SweepResult) == 0x000020, "Member 'GymSpinner_HandleOverlap::SweepResult' has a wrong offset!");

// Function GYMGAME.GymSpinner.Multi_ImpactSound
// 0x0008 (0x0008 - 0x0000)
struct GymSpinner_Multi_ImpactSound final
{
public:
	class AGymCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSpinner_Multi_ImpactSound) == 0x000008, "Wrong alignment on GymSpinner_Multi_ImpactSound");
static_assert(sizeof(GymSpinner_Multi_ImpactSound) == 0x000008, "Wrong size on GymSpinner_Multi_ImpactSound");
static_assert(offsetof(GymSpinner_Multi_ImpactSound, Character) == 0x000000, "Member 'GymSpinner_Multi_ImpactSound::Character' has a wrong offset!");

// Function GYMGAME.GymSprayLocationActor.SetVisibility
// 0x0001 (0x0001 - 0x0000)
struct GymSprayLocationActor_SetVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSprayLocationActor_SetVisibility) == 0x000001, "Wrong alignment on GymSprayLocationActor_SetVisibility");
static_assert(sizeof(GymSprayLocationActor_SetVisibility) == 0x000001, "Wrong size on GymSprayLocationActor_SetVisibility");
static_assert(offsetof(GymSprayLocationActor_SetVisibility, bVisible) == 0x000000, "Member 'GymSprayLocationActor_SetVisibility::bVisible' has a wrong offset!");

// Function GYMGAME.GymWallSystemUtils.DistanceToWall
// 0x0070 (0x0070 - 0x0000)
struct GymWallSystemUtils_DistanceToWall final
{
public:
	struct FGymShape                              Shape;                                             // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         X;                                                 // 0x0058(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x005C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Z;                                                 // 0x0060(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGymWallDirection                             Direction;                                         // 0x0064(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0068(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymWallSystemUtils_DistanceToWall) == 0x000008, "Wrong alignment on GymWallSystemUtils_DistanceToWall");
static_assert(sizeof(GymWallSystemUtils_DistanceToWall) == 0x000070, "Wrong size on GymWallSystemUtils_DistanceToWall");
static_assert(offsetof(GymWallSystemUtils_DistanceToWall, Shape) == 0x000000, "Member 'GymWallSystemUtils_DistanceToWall::Shape' has a wrong offset!");
static_assert(offsetof(GymWallSystemUtils_DistanceToWall, X) == 0x000058, "Member 'GymWallSystemUtils_DistanceToWall::X' has a wrong offset!");
static_assert(offsetof(GymWallSystemUtils_DistanceToWall, Y) == 0x00005C, "Member 'GymWallSystemUtils_DistanceToWall::Y' has a wrong offset!");
static_assert(offsetof(GymWallSystemUtils_DistanceToWall, Z) == 0x000060, "Member 'GymWallSystemUtils_DistanceToWall::Z' has a wrong offset!");
static_assert(offsetof(GymWallSystemUtils_DistanceToWall, Direction) == 0x000064, "Member 'GymWallSystemUtils_DistanceToWall::Direction' has a wrong offset!");
static_assert(offsetof(GymWallSystemUtils_DistanceToWall, ReturnValue) == 0x000068, "Member 'GymWallSystemUtils_DistanceToWall::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymWallSystemUtils.IsOutside
// 0x0068 (0x0068 - 0x0000)
struct GymWallSystemUtils_IsOutside final
{
public:
	struct FGymShape                              Shape;                                             // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         X;                                                 // 0x0058(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x005C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Z;                                                 // 0x0060(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0064(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymWallSystemUtils_IsOutside) == 0x000008, "Wrong alignment on GymWallSystemUtils_IsOutside");
static_assert(sizeof(GymWallSystemUtils_IsOutside) == 0x000068, "Wrong size on GymWallSystemUtils_IsOutside");
static_assert(offsetof(GymWallSystemUtils_IsOutside, Shape) == 0x000000, "Member 'GymWallSystemUtils_IsOutside::Shape' has a wrong offset!");
static_assert(offsetof(GymWallSystemUtils_IsOutside, X) == 0x000058, "Member 'GymWallSystemUtils_IsOutside::X' has a wrong offset!");
static_assert(offsetof(GymWallSystemUtils_IsOutside, Y) == 0x00005C, "Member 'GymWallSystemUtils_IsOutside::Y' has a wrong offset!");
static_assert(offsetof(GymWallSystemUtils_IsOutside, Z) == 0x000060, "Member 'GymWallSystemUtils_IsOutside::Z' has a wrong offset!");
static_assert(offsetof(GymWallSystemUtils_IsOutside, ReturnValue) == 0x000064, "Member 'GymWallSystemUtils_IsOutside::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymWallSystemUtils.IsValidLocation
// 0x0068 (0x0068 - 0x0000)
struct GymWallSystemUtils_IsValidLocation final
{
public:
	struct FGymShape                              Shape;                                             // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         X;                                                 // 0x0058(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x005C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Z;                                                 // 0x0060(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0064(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymWallSystemUtils_IsValidLocation) == 0x000008, "Wrong alignment on GymWallSystemUtils_IsValidLocation");
static_assert(sizeof(GymWallSystemUtils_IsValidLocation) == 0x000068, "Wrong size on GymWallSystemUtils_IsValidLocation");
static_assert(offsetof(GymWallSystemUtils_IsValidLocation, Shape) == 0x000000, "Member 'GymWallSystemUtils_IsValidLocation::Shape' has a wrong offset!");
static_assert(offsetof(GymWallSystemUtils_IsValidLocation, X) == 0x000058, "Member 'GymWallSystemUtils_IsValidLocation::X' has a wrong offset!");
static_assert(offsetof(GymWallSystemUtils_IsValidLocation, Y) == 0x00005C, "Member 'GymWallSystemUtils_IsValidLocation::Y' has a wrong offset!");
static_assert(offsetof(GymWallSystemUtils_IsValidLocation, Z) == 0x000060, "Member 'GymWallSystemUtils_IsValidLocation::Z' has a wrong offset!");
static_assert(offsetof(GymWallSystemUtils_IsValidLocation, ReturnValue) == 0x000064, "Member 'GymWallSystemUtils_IsValidLocation::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSprintRules.GoalReached
// 0x0010 (0x0010 - 0x0000)
struct GymSprintRules_GoalReached final
{
public:
	class AActor*                                 Goal;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGymCharacter*                          PlayerCharacter;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSprintRules_GoalReached) == 0x000008, "Wrong alignment on GymSprintRules_GoalReached");
static_assert(sizeof(GymSprintRules_GoalReached) == 0x000010, "Wrong size on GymSprintRules_GoalReached");
static_assert(offsetof(GymSprintRules_GoalReached, Goal) == 0x000000, "Member 'GymSprintRules_GoalReached::Goal' has a wrong offset!");
static_assert(offsetof(GymSprintRules_GoalReached, PlayerCharacter) == 0x000008, "Member 'GymSprintRules_GoalReached::PlayerCharacter' has a wrong offset!");

// Function GYMGAME.GymSteamBPUtils.AddPhotoToSteam
// 0x0020 (0x0020 - 0x0000)
struct GymSteamBPUtils_AddPhotoToSteam final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymSteamBPUtils_AddPhotoToSteam) == 0x000008, "Wrong alignment on GymSteamBPUtils_AddPhotoToSteam");
static_assert(sizeof(GymSteamBPUtils_AddPhotoToSteam) == 0x000020, "Wrong size on GymSteamBPUtils_AddPhotoToSteam");
static_assert(offsetof(GymSteamBPUtils_AddPhotoToSteam, FilePath) == 0x000000, "Member 'GymSteamBPUtils_AddPhotoToSteam::FilePath' has a wrong offset!");
static_assert(offsetof(GymSteamBPUtils_AddPhotoToSteam, Width) == 0x000010, "Member 'GymSteamBPUtils_AddPhotoToSteam::Width' has a wrong offset!");
static_assert(offsetof(GymSteamBPUtils_AddPhotoToSteam, Height) == 0x000014, "Member 'GymSteamBPUtils_AddPhotoToSteam::Height' has a wrong offset!");
static_assert(offsetof(GymSteamBPUtils_AddPhotoToSteam, ReturnValue) == 0x000018, "Member 'GymSteamBPUtils_AddPhotoToSteam::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSteamBPUtils.DoesOwnAppOrDlc
// 0x0018 (0x0018 - 0x0000)
struct GymSteamBPUtils_DoesOwnAppOrDlc final
{
public:
	class FString                                 AppId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymSteamBPUtils_DoesOwnAppOrDlc) == 0x000008, "Wrong alignment on GymSteamBPUtils_DoesOwnAppOrDlc");
static_assert(sizeof(GymSteamBPUtils_DoesOwnAppOrDlc) == 0x000018, "Wrong size on GymSteamBPUtils_DoesOwnAppOrDlc");
static_assert(offsetof(GymSteamBPUtils_DoesOwnAppOrDlc, AppId) == 0x000000, "Member 'GymSteamBPUtils_DoesOwnAppOrDlc::AppId' has a wrong offset!");
static_assert(offsetof(GymSteamBPUtils_DoesOwnAppOrDlc, ReturnValue) == 0x000010, "Member 'GymSteamBPUtils_DoesOwnAppOrDlc::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSteamBPUtils.GetSteamName
// 0x0010 (0x0010 - 0x0000)
struct GymSteamBPUtils_GetSteamName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSteamBPUtils_GetSteamName) == 0x000008, "Wrong alignment on GymSteamBPUtils_GetSteamName");
static_assert(sizeof(GymSteamBPUtils_GetSteamName) == 0x000010, "Wrong size on GymSteamBPUtils_GetSteamName");
static_assert(offsetof(GymSteamBPUtils_GetSteamName, ReturnValue) == 0x000000, "Member 'GymSteamBPUtils_GetSteamName::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymSteamBPUtils.IsDemo
// 0x0001 (0x0001 - 0x0000)
struct GymSteamBPUtils_IsDemo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSteamBPUtils_IsDemo) == 0x000001, "Wrong alignment on GymSteamBPUtils_IsDemo");
static_assert(sizeof(GymSteamBPUtils_IsDemo) == 0x000001, "Wrong size on GymSteamBPUtils_IsDemo");
static_assert(offsetof(GymSteamBPUtils_IsDemo, ReturnValue) == 0x000000, "Member 'GymSteamBPUtils_IsDemo::ReturnValue' has a wrong offset!");

// DelegateFunction GYMGAME.GymSteamSessionTicketRequest.SteamTicketReceived__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct GymSteamSessionTicketRequest_SteamTicketReceived__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ticket;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymSteamSessionTicketRequest_SteamTicketReceived__DelegateSignature) == 0x000008, "Wrong alignment on GymSteamSessionTicketRequest_SteamTicketReceived__DelegateSignature");
static_assert(sizeof(GymSteamSessionTicketRequest_SteamTicketReceived__DelegateSignature) == 0x000018, "Wrong size on GymSteamSessionTicketRequest_SteamTicketReceived__DelegateSignature");
static_assert(offsetof(GymSteamSessionTicketRequest_SteamTicketReceived__DelegateSignature, Success) == 0x000000, "Member 'GymSteamSessionTicketRequest_SteamTicketReceived__DelegateSignature::Success' has a wrong offset!");
static_assert(offsetof(GymSteamSessionTicketRequest_SteamTicketReceived__DelegateSignature, Ticket) == 0x000008, "Member 'GymSteamSessionTicketRequest_SteamTicketReceived__DelegateSignature::Ticket' has a wrong offset!");

// Function GYMGAME.GymTaggedPlayerMarker.SetActorToFollow
// 0x0008 (0x0008 - 0x0000)
struct GymTaggedPlayerMarker_SetActorToFollow final
{
public:
	class AGymCharacter*                          Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymTaggedPlayerMarker_SetActorToFollow) == 0x000008, "Wrong alignment on GymTaggedPlayerMarker_SetActorToFollow");
static_assert(sizeof(GymTaggedPlayerMarker_SetActorToFollow) == 0x000008, "Wrong size on GymTaggedPlayerMarker_SetActorToFollow");
static_assert(offsetof(GymTaggedPlayerMarker_SetActorToFollow, Actor) == 0x000000, "Member 'GymTaggedPlayerMarker_SetActorToFollow::Actor' has a wrong offset!");

// Function GYMGAME.GymTaggedPlayerMarker.SetBombTimer
// 0x0004 (0x0004 - 0x0000)
struct GymTaggedPlayerMarker_SetBombTimer final
{
public:
	float                                         BombTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymTaggedPlayerMarker_SetBombTimer) == 0x000004, "Wrong alignment on GymTaggedPlayerMarker_SetBombTimer");
static_assert(sizeof(GymTaggedPlayerMarker_SetBombTimer) == 0x000004, "Wrong size on GymTaggedPlayerMarker_SetBombTimer");
static_assert(offsetof(GymTaggedPlayerMarker_SetBombTimer, BombTime) == 0x000000, "Member 'GymTaggedPlayerMarker_SetBombTimer::BombTime' has a wrong offset!");

// Function GYMGAME.GymThumbnailCreator.GetThumbnailForActor
// 0x0010 (0x0010 - 0x0000)
struct GymThumbnailCreator_GetThumbnailForActor final
{
public:
	TSubclassOf<class AActor>                     Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymThumbnailCreator_GetThumbnailForActor) == 0x000008, "Wrong alignment on GymThumbnailCreator_GetThumbnailForActor");
static_assert(sizeof(GymThumbnailCreator_GetThumbnailForActor) == 0x000010, "Wrong size on GymThumbnailCreator_GetThumbnailForActor");
static_assert(offsetof(GymThumbnailCreator_GetThumbnailForActor, Actor) == 0x000000, "Member 'GymThumbnailCreator_GetThumbnailForActor::Actor' has a wrong offset!");
static_assert(offsetof(GymThumbnailCreator_GetThumbnailForActor, ReturnValue) == 0x000008, "Member 'GymThumbnailCreator_GetThumbnailForActor::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymThumbnailCreator.GetThumbnailForSkeletalMesh
// 0x0028 (0x0028 - 0x0000)
struct GymThumbnailCreator_GetThumbnailForSkeletalMesh final
{
public:
	class USkeletalMesh*                          Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CacheId;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymThumbnailCreator_GetThumbnailForSkeletalMesh) == 0x000008, "Wrong alignment on GymThumbnailCreator_GetThumbnailForSkeletalMesh");
static_assert(sizeof(GymThumbnailCreator_GetThumbnailForSkeletalMesh) == 0x000028, "Wrong size on GymThumbnailCreator_GetThumbnailForSkeletalMesh");
static_assert(offsetof(GymThumbnailCreator_GetThumbnailForSkeletalMesh, Mesh) == 0x000000, "Member 'GymThumbnailCreator_GetThumbnailForSkeletalMesh::Mesh' has a wrong offset!");
static_assert(offsetof(GymThumbnailCreator_GetThumbnailForSkeletalMesh, CacheId) == 0x000008, "Member 'GymThumbnailCreator_GetThumbnailForSkeletalMesh::CacheId' has a wrong offset!");
static_assert(offsetof(GymThumbnailCreator_GetThumbnailForSkeletalMesh, Material) == 0x000018, "Member 'GymThumbnailCreator_GetThumbnailForSkeletalMesh::Material' has a wrong offset!");
static_assert(offsetof(GymThumbnailCreator_GetThumbnailForSkeletalMesh, ReturnValue) == 0x000020, "Member 'GymThumbnailCreator_GetThumbnailForSkeletalMesh::ReturnValue' has a wrong offset!");

// Function GYMGAME.GymTickerTriggerAsset.Multi_SetActive
// 0x0001 (0x0001 - 0x0000)
struct GymTickerTriggerAsset_Multi_SetActive final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymTickerTriggerAsset_Multi_SetActive) == 0x000001, "Wrong alignment on GymTickerTriggerAsset_Multi_SetActive");
static_assert(sizeof(GymTickerTriggerAsset_Multi_SetActive) == 0x000001, "Wrong size on GymTickerTriggerAsset_Multi_SetActive");
static_assert(offsetof(GymTickerTriggerAsset_Multi_SetActive, bActive) == 0x000000, "Member 'GymTickerTriggerAsset_Multi_SetActive::bActive' has a wrong offset!");

// Function GYMGAME.GymTide.Multi_SetSpeed
// 0x0004 (0x0004 - 0x0000)
struct GymTide_Multi_SetSpeed final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymTide_Multi_SetSpeed) == 0x000004, "Wrong alignment on GymTide_Multi_SetSpeed");
static_assert(sizeof(GymTide_Multi_SetSpeed) == 0x000004, "Wrong size on GymTide_Multi_SetSpeed");
static_assert(offsetof(GymTide_Multi_SetSpeed, Speed) == 0x000000, "Member 'GymTide_Multi_SetSpeed::Speed' has a wrong offset!");

// Function GYMGAME.GymTide.PreStart
// 0x000C (0x000C - 0x0000)
struct GymTide_PreStart final
{
public:
	float                                         Height;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TideSpeed;                                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideSpeed;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GymTide_PreStart) == 0x000004, "Wrong alignment on GymTide_PreStart");
static_assert(sizeof(GymTide_PreStart) == 0x00000C, "Wrong size on GymTide_PreStart");
static_assert(offsetof(GymTide_PreStart, Height) == 0x000000, "Member 'GymTide_PreStart::Height' has a wrong offset!");
static_assert(offsetof(GymTide_PreStart, TideSpeed) == 0x000004, "Member 'GymTide_PreStart::TideSpeed' has a wrong offset!");
static_assert(offsetof(GymTide_PreStart, bOverrideSpeed) == 0x000008, "Member 'GymTide_PreStart::bOverrideSpeed' has a wrong offset!");

// Function GYMGAME.GymUtilityAnimator.GetProps
// 0x0018 (0x0018 - 0x0000)
struct GymUtilityAnimator_GetProps final
{
public:
	struct FGymUtilityAnimatorProps               ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GymUtilityAnimator_GetProps) == 0x000004, "Wrong alignment on GymUtilityAnimator_GetProps");
static_assert(sizeof(GymUtilityAnimator_GetProps) == 0x000018, "Wrong size on GymUtilityAnimator_GetProps");
static_assert(offsetof(GymUtilityAnimator_GetProps, ReturnValue) == 0x000000, "Member 'GymUtilityAnimator_GetProps::ReturnValue' has a wrong offset!");

// Function GYMGAME.HighlightableElement.SetHighlight
// 0x0001 (0x0001 - 0x0000)
struct HighlightableElement_SetHighlight final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HighlightableElement_SetHighlight) == 0x000001, "Wrong alignment on HighlightableElement_SetHighlight");
static_assert(sizeof(HighlightableElement_SetHighlight) == 0x000001, "Wrong size on HighlightableElement_SetHighlight");
static_assert(offsetof(HighlightableElement_SetHighlight, Value) == 0x000000, "Member 'HighlightableElement_SetHighlight::Value' has a wrong offset!");

// Function GYMGAME.HighlightableElement.SetNotifications
// 0x0004 (0x0004 - 0x0000)
struct HighlightableElement_SetNotifications final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HighlightableElement_SetNotifications) == 0x000004, "Wrong alignment on HighlightableElement_SetNotifications");
static_assert(sizeof(HighlightableElement_SetNotifications) == 0x000004, "Wrong size on HighlightableElement_SetNotifications");
static_assert(offsetof(HighlightableElement_SetNotifications, Count) == 0x000000, "Member 'HighlightableElement_SetNotifications::Count' has a wrong offset!");

}

