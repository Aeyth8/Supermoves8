#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CartoonWater_Lake_ForTide

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "OceanType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CartoonWater_Lake_ForTide.BP_CartoonWater_Lake_ForTide_C
// 0x02F8 (0x0590 - 0x0298)
class ABP_CartoonWater_Lake_ForTide_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   UnderwaterSide4;                                   // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   UnderwaterSide3;                                   // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   UnderwaterSide2;                                   // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   UnderwaterSide;                                    // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Underwater;                                        // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CartoonWaterDepth;                                 // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CartoonWater;                                      // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        Wave_Length;                                       // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Amplitude;                                         // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Steepness;                                         // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EOceanType                                    Ocean_Type;                                        // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F1[0x7];                                      // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Wave_Speed;                                        // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Gerstner_Wave_Speed_;                              // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Direction;                                    // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Global_Opacity;                                    // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Color_Distance_Fade;                               // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Color_Distance_Falloff;                            // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Water_Depth_Distance_Fade;                         // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Water_Depth_Distance_Falloff;                      // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Foam_Distance_Fade;                                // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Foam_Distance_Falloff;                             // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Normal_Distance_Fade;                              // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Normal_Distance_Falloff;                           // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Refraction_Distance_Fade;                          // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Refraction_Distance_Falloff;                       // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SSS_Distance_Fade;                                 // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SSS_Distance_Falloff;                              // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Small_Normal_Speed;                                // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Small_Normal_Intensity;                            // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Small_Normal_Tiling;                               // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Large_Normal_Speed;                                // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Large_Normal_Intensity;                            // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Large_Normal_Tiling;                               // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Current_Material_;                                 // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Current_Depth_Material_;                           // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Seafoam_Intensity;                                 // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Seafoam_Base_Height;                               // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Seafoam_Softness;                                  // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Seafoam_Distorsion;                                // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Seafoam_Tiling;                                    // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Foam_Intensity;                                    // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Foam_Speed;                                        // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Foam_X_Tile;                                       // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Foam_Y_Tile;                                       // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Intersection_Size;                                 // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Intersection_Softness;                             // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CubeMap_Intensity;                                 // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Reflection_Angle;                                  // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Shore_Distance;                                    // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Day_Intensity;                                     // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Water_Depth;                                       // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Refraction_Amount;                                 // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Refraction_Amount_Depth;                           // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Highlight_Intensity;                               // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Highlight_Base_Height;                             // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Highlight_Softness;                                // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Highlight_Density;                                 // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Trough_Intensity;                                  // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Trough_Base_Height;                                // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Trough_Softnes;                                    // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SSS_Intensity;                                     // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SSS_Base_Height;                                   // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SSS_Softness;                                      // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Base_Color;                                        // 0x0498(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Far_Color;                                         // 0x04A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Shallow_Water_Color;                               // 0x04B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Trough_Color;                                      // 0x04C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SSS_Color;                                         // 0x04D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Foam_Color;                                        // 0x04E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Seafoam_Color;                                     // 0x04F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               CubeMap;                                           // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Water_Normal_Large;                                // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Water_Normal_Small;                                // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Seafoam_Alpha_Tested__G_;                          // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Seafoam_Regular;                                   // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Foam_;                                             // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Reflection_Intensity;                          // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Reflection_Tightness;                          // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Specular_Intensity;                                // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Tessellation_Factor;                               // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Update_WaterMesh_Transform_Runtime;                // 0x0558(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_559[0x7];                                      // 0x0559(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Intersection_Size_Reduction_Over_Distance;         // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Custom_Lake_Material;                              // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Custom_Lake_Depth_Material;                        // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Underwater_Opacity;                                // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Refraction_Depth;                                  // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Underwater_Mesh_Z_scale;                           // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_CartoonWater_Lake_ForTide(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void UserConstructionScript();
	void Water_Parameters();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CartoonWater_Lake_ForTide_C">();
	}
	static class ABP_CartoonWater_Lake_ForTide_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CartoonWater_Lake_ForTide_C>();
	}
};
static_assert(alignof(ABP_CartoonWater_Lake_ForTide_C) == 0x000008, "Wrong alignment on ABP_CartoonWater_Lake_ForTide_C");
static_assert(sizeof(ABP_CartoonWater_Lake_ForTide_C) == 0x000590, "Wrong size on ABP_CartoonWater_Lake_ForTide_C");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, UberGraphFrame) == 0x000298, "Member 'ABP_CartoonWater_Lake_ForTide_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, UnderwaterSide4) == 0x0002A0, "Member 'ABP_CartoonWater_Lake_ForTide_C::UnderwaterSide4' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, UnderwaterSide3) == 0x0002A8, "Member 'ABP_CartoonWater_Lake_ForTide_C::UnderwaterSide3' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, UnderwaterSide2) == 0x0002B0, "Member 'ABP_CartoonWater_Lake_ForTide_C::UnderwaterSide2' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, UnderwaterSide) == 0x0002B8, "Member 'ABP_CartoonWater_Lake_ForTide_C::UnderwaterSide' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Underwater) == 0x0002C0, "Member 'ABP_CartoonWater_Lake_ForTide_C::Underwater' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, CartoonWaterDepth) == 0x0002C8, "Member 'ABP_CartoonWater_Lake_ForTide_C::CartoonWaterDepth' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, CartoonWater) == 0x0002D0, "Member 'ABP_CartoonWater_Lake_ForTide_C::CartoonWater' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Wave_Length) == 0x0002D8, "Member 'ABP_CartoonWater_Lake_ForTide_C::Wave_Length' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Amplitude) == 0x0002E0, "Member 'ABP_CartoonWater_Lake_ForTide_C::Amplitude' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Steepness) == 0x0002E8, "Member 'ABP_CartoonWater_Lake_ForTide_C::Steepness' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Ocean_Type) == 0x0002F0, "Member 'ABP_CartoonWater_Lake_ForTide_C::Ocean_Type' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Wave_Speed) == 0x0002F8, "Member 'ABP_CartoonWater_Lake_ForTide_C::Wave_Speed' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Gerstner_Wave_Speed_) == 0x000300, "Member 'ABP_CartoonWater_Lake_ForTide_C::Gerstner_Wave_Speed_' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Wind_Direction) == 0x000308, "Member 'ABP_CartoonWater_Lake_ForTide_C::Wind_Direction' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Global_Opacity) == 0x000310, "Member 'ABP_CartoonWater_Lake_ForTide_C::Global_Opacity' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Color_Distance_Fade) == 0x000318, "Member 'ABP_CartoonWater_Lake_ForTide_C::Color_Distance_Fade' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Color_Distance_Falloff) == 0x000320, "Member 'ABP_CartoonWater_Lake_ForTide_C::Color_Distance_Falloff' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Water_Depth_Distance_Fade) == 0x000328, "Member 'ABP_CartoonWater_Lake_ForTide_C::Water_Depth_Distance_Fade' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Water_Depth_Distance_Falloff) == 0x000330, "Member 'ABP_CartoonWater_Lake_ForTide_C::Water_Depth_Distance_Falloff' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Foam_Distance_Fade) == 0x000338, "Member 'ABP_CartoonWater_Lake_ForTide_C::Foam_Distance_Fade' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Foam_Distance_Falloff) == 0x000340, "Member 'ABP_CartoonWater_Lake_ForTide_C::Foam_Distance_Falloff' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Normal_Distance_Fade) == 0x000348, "Member 'ABP_CartoonWater_Lake_ForTide_C::Normal_Distance_Fade' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Normal_Distance_Falloff) == 0x000350, "Member 'ABP_CartoonWater_Lake_ForTide_C::Normal_Distance_Falloff' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Refraction_Distance_Fade) == 0x000358, "Member 'ABP_CartoonWater_Lake_ForTide_C::Refraction_Distance_Fade' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Refraction_Distance_Falloff) == 0x000360, "Member 'ABP_CartoonWater_Lake_ForTide_C::Refraction_Distance_Falloff' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, SSS_Distance_Fade) == 0x000368, "Member 'ABP_CartoonWater_Lake_ForTide_C::SSS_Distance_Fade' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, SSS_Distance_Falloff) == 0x000370, "Member 'ABP_CartoonWater_Lake_ForTide_C::SSS_Distance_Falloff' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Small_Normal_Speed) == 0x000378, "Member 'ABP_CartoonWater_Lake_ForTide_C::Small_Normal_Speed' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Small_Normal_Intensity) == 0x000380, "Member 'ABP_CartoonWater_Lake_ForTide_C::Small_Normal_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Small_Normal_Tiling) == 0x000388, "Member 'ABP_CartoonWater_Lake_ForTide_C::Small_Normal_Tiling' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Large_Normal_Speed) == 0x000390, "Member 'ABP_CartoonWater_Lake_ForTide_C::Large_Normal_Speed' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Large_Normal_Intensity) == 0x000398, "Member 'ABP_CartoonWater_Lake_ForTide_C::Large_Normal_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Large_Normal_Tiling) == 0x0003A0, "Member 'ABP_CartoonWater_Lake_ForTide_C::Large_Normal_Tiling' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Current_Material_) == 0x0003A8, "Member 'ABP_CartoonWater_Lake_ForTide_C::Current_Material_' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Current_Depth_Material_) == 0x0003B0, "Member 'ABP_CartoonWater_Lake_ForTide_C::Current_Depth_Material_' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Seafoam_Intensity) == 0x0003B8, "Member 'ABP_CartoonWater_Lake_ForTide_C::Seafoam_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Seafoam_Base_Height) == 0x0003C0, "Member 'ABP_CartoonWater_Lake_ForTide_C::Seafoam_Base_Height' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Seafoam_Softness) == 0x0003C8, "Member 'ABP_CartoonWater_Lake_ForTide_C::Seafoam_Softness' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Seafoam_Distorsion) == 0x0003D0, "Member 'ABP_CartoonWater_Lake_ForTide_C::Seafoam_Distorsion' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Seafoam_Tiling) == 0x0003D8, "Member 'ABP_CartoonWater_Lake_ForTide_C::Seafoam_Tiling' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Foam_Intensity) == 0x0003E0, "Member 'ABP_CartoonWater_Lake_ForTide_C::Foam_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Foam_Speed) == 0x0003E8, "Member 'ABP_CartoonWater_Lake_ForTide_C::Foam_Speed' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Foam_X_Tile) == 0x0003F0, "Member 'ABP_CartoonWater_Lake_ForTide_C::Foam_X_Tile' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Foam_Y_Tile) == 0x0003F8, "Member 'ABP_CartoonWater_Lake_ForTide_C::Foam_Y_Tile' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Intersection_Size) == 0x000400, "Member 'ABP_CartoonWater_Lake_ForTide_C::Intersection_Size' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Intersection_Softness) == 0x000408, "Member 'ABP_CartoonWater_Lake_ForTide_C::Intersection_Softness' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, CubeMap_Intensity) == 0x000410, "Member 'ABP_CartoonWater_Lake_ForTide_C::CubeMap_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Reflection_Angle) == 0x000418, "Member 'ABP_CartoonWater_Lake_ForTide_C::Reflection_Angle' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Shore_Distance) == 0x000420, "Member 'ABP_CartoonWater_Lake_ForTide_C::Shore_Distance' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Day_Intensity) == 0x000428, "Member 'ABP_CartoonWater_Lake_ForTide_C::Day_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Water_Depth) == 0x000430, "Member 'ABP_CartoonWater_Lake_ForTide_C::Water_Depth' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Refraction_Amount) == 0x000438, "Member 'ABP_CartoonWater_Lake_ForTide_C::Refraction_Amount' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Refraction_Amount_Depth) == 0x000440, "Member 'ABP_CartoonWater_Lake_ForTide_C::Refraction_Amount_Depth' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Highlight_Intensity) == 0x000448, "Member 'ABP_CartoonWater_Lake_ForTide_C::Highlight_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Highlight_Base_Height) == 0x000450, "Member 'ABP_CartoonWater_Lake_ForTide_C::Highlight_Base_Height' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Highlight_Softness) == 0x000458, "Member 'ABP_CartoonWater_Lake_ForTide_C::Highlight_Softness' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Highlight_Density) == 0x000460, "Member 'ABP_CartoonWater_Lake_ForTide_C::Highlight_Density' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Trough_Intensity) == 0x000468, "Member 'ABP_CartoonWater_Lake_ForTide_C::Trough_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Trough_Base_Height) == 0x000470, "Member 'ABP_CartoonWater_Lake_ForTide_C::Trough_Base_Height' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Trough_Softnes) == 0x000478, "Member 'ABP_CartoonWater_Lake_ForTide_C::Trough_Softnes' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, SSS_Intensity) == 0x000480, "Member 'ABP_CartoonWater_Lake_ForTide_C::SSS_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, SSS_Base_Height) == 0x000488, "Member 'ABP_CartoonWater_Lake_ForTide_C::SSS_Base_Height' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, SSS_Softness) == 0x000490, "Member 'ABP_CartoonWater_Lake_ForTide_C::SSS_Softness' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Base_Color) == 0x000498, "Member 'ABP_CartoonWater_Lake_ForTide_C::Base_Color' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Far_Color) == 0x0004A8, "Member 'ABP_CartoonWater_Lake_ForTide_C::Far_Color' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Shallow_Water_Color) == 0x0004B8, "Member 'ABP_CartoonWater_Lake_ForTide_C::Shallow_Water_Color' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Trough_Color) == 0x0004C8, "Member 'ABP_CartoonWater_Lake_ForTide_C::Trough_Color' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, SSS_Color) == 0x0004D8, "Member 'ABP_CartoonWater_Lake_ForTide_C::SSS_Color' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Foam_Color) == 0x0004E8, "Member 'ABP_CartoonWater_Lake_ForTide_C::Foam_Color' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Seafoam_Color) == 0x0004F8, "Member 'ABP_CartoonWater_Lake_ForTide_C::Seafoam_Color' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, CubeMap) == 0x000508, "Member 'ABP_CartoonWater_Lake_ForTide_C::CubeMap' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Water_Normal_Large) == 0x000510, "Member 'ABP_CartoonWater_Lake_ForTide_C::Water_Normal_Large' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Water_Normal_Small) == 0x000518, "Member 'ABP_CartoonWater_Lake_ForTide_C::Water_Normal_Small' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Seafoam_Alpha_Tested__G_) == 0x000520, "Member 'ABP_CartoonWater_Lake_ForTide_C::Seafoam_Alpha_Tested__G_' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Seafoam_Regular) == 0x000528, "Member 'ABP_CartoonWater_Lake_ForTide_C::Seafoam_Regular' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Foam_) == 0x000530, "Member 'ABP_CartoonWater_Lake_ForTide_C::Foam_' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Sun_Reflection_Intensity) == 0x000538, "Member 'ABP_CartoonWater_Lake_ForTide_C::Sun_Reflection_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Sun_Reflection_Tightness) == 0x000540, "Member 'ABP_CartoonWater_Lake_ForTide_C::Sun_Reflection_Tightness' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Specular_Intensity) == 0x000548, "Member 'ABP_CartoonWater_Lake_ForTide_C::Specular_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Tessellation_Factor) == 0x000550, "Member 'ABP_CartoonWater_Lake_ForTide_C::Tessellation_Factor' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Update_WaterMesh_Transform_Runtime) == 0x000558, "Member 'ABP_CartoonWater_Lake_ForTide_C::Update_WaterMesh_Transform_Runtime' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Intersection_Size_Reduction_Over_Distance) == 0x000560, "Member 'ABP_CartoonWater_Lake_ForTide_C::Intersection_Size_Reduction_Over_Distance' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Custom_Lake_Material) == 0x000568, "Member 'ABP_CartoonWater_Lake_ForTide_C::Custom_Lake_Material' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Custom_Lake_Depth_Material) == 0x000570, "Member 'ABP_CartoonWater_Lake_ForTide_C::Custom_Lake_Depth_Material' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Underwater_Opacity) == 0x000578, "Member 'ABP_CartoonWater_Lake_ForTide_C::Underwater_Opacity' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Refraction_Depth) == 0x000580, "Member 'ABP_CartoonWater_Lake_ForTide_C::Refraction_Depth' has a wrong offset!");
static_assert(offsetof(ABP_CartoonWater_Lake_ForTide_C, Underwater_Mesh_Z_scale) == 0x000588, "Member 'ABP_CartoonWater_Lake_ForTide_C::Underwater_Mesh_Z_scale' has a wrong offset!");

}

