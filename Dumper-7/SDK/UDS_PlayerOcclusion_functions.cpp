#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UDS_PlayerOcclusion

#include "Basic.hpp"

#include "UDS_PlayerOcclusion_classes.hpp"
#include "UDS_PlayerOcclusion_parameters.hpp"


namespace SDK
{

// Function UDS_PlayerOcclusion.UDS_PlayerOcclusion_C.Portal Direction Mask
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Mask                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUDS_PlayerOcclusion_C::Portal_Direction_Mask(const struct FVector& Direction, struct FLinearColor* Mask)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UDS_PlayerOcclusion_C", "Portal Direction Mask");

	Params::UDS_PlayerOcclusion_C_Portal_Direction_Mask Parms{};

	Parms.Direction = std::move(Direction);

	UObject::ProcessEvent(Func, &Parms);

	if (Mask != nullptr)
		*Mask = std::move(Parms.Mask);
}


// Function UDS_PlayerOcclusion.UDS_PlayerOcclusion_C.Delayed Startup
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UUDS_PlayerOcclusion_C::Delayed_Startup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UDS_PlayerOcclusion_C", "Delayed Startup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UDS_PlayerOcclusion.UDS_PlayerOcclusion_C.Check For Portal Components
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UUDS_PlayerOcclusion_C::Check_For_Portal_Components()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UDS_PlayerOcclusion_C", "Check For Portal Components");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UDS_PlayerOcclusion.UDS_PlayerOcclusion_C.Get Sample Location
// (Protected, BlueprintCallable, BlueprintEvent)

void UUDS_PlayerOcclusion_C::Get_Sample_Location()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UDS_PlayerOcclusion_C", "Get Sample Location");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UDS_PlayerOcclusion.UDS_PlayerOcclusion_C.Directional Mask Value
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Compare                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double UUDS_PlayerOcclusion_C::Directional_Mask_Value(const struct FVector& Direction, const struct FVector& Compare)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UDS_PlayerOcclusion_C", "Directional Mask Value");

	Params::UDS_PlayerOcclusion_C_Directional_Mask_Value Parms{};

	Parms.Direction = std::move(Direction);
	Parms.Compare = std::move(Compare);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function UDS_PlayerOcclusion.UDS_PlayerOcclusion_C.Update Ignored Actors
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UUDS_PlayerOcclusion_C::Update_Ignored_Actors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UDS_PlayerOcclusion_C", "Update Ignored Actors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UDS_PlayerOcclusion.UDS_PlayerOcclusion_C.Periodic Context Checks
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UUDS_PlayerOcclusion_C::Periodic_Context_Checks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UDS_PlayerOcclusion_C", "Periodic Context Checks");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UDS_PlayerOcclusion.UDS_PlayerOcclusion_C.Current Trace Direction
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Facing_Direction                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Vertical_Step                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector UUDS_PlayerOcclusion_C::Current_Trace_Direction(const struct FVector& Facing_Direction, int32 Vertical_Step)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UDS_PlayerOcclusion_C", "Current Trace Direction");

	Params::UDS_PlayerOcclusion_C_Current_Trace_Direction Parms{};

	Parms.Facing_Direction = std::move(Facing_Direction);
	Parms.Vertical_Step = Vertical_Step;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function UDS_PlayerOcclusion.UDS_PlayerOcclusion_C.Current Facing Direction
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Step                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector UUDS_PlayerOcclusion_C::Current_Facing_Direction(int32 Step)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UDS_PlayerOcclusion_C", "Current Facing Direction");

	Params::UDS_PlayerOcclusion_C_Current_Facing_Direction Parms{};

	Parms.Step = Step;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function UDS_PlayerOcclusion.UDS_PlayerOcclusion_C.Save Unchanging Values for Occlusion
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UUDS_PlayerOcclusion_C::Save_Unchanging_Values_for_Occlusion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UDS_PlayerOcclusion_C", "Save Unchanging Values for Occlusion");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UDS_PlayerOcclusion.UDS_PlayerOcclusion_C.Directional Vector Mask
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Mask                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUDS_PlayerOcclusion_C::Directional_Vector_Mask(const struct FVector& Direction, struct FLinearColor* Mask)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UDS_PlayerOcclusion_C", "Directional Vector Mask");

	Params::UDS_PlayerOcclusion_C_Directional_Vector_Mask Parms{};

	Parms.Direction = std::move(Direction);

	UObject::ProcessEvent(Func, &Parms);

	if (Mask != nullptr)
		*Mask = std::move(Parms.Mask);
}


// Function UDS_PlayerOcclusion.UDS_PlayerOcclusion_C.Update Current Occlusion
// (Protected, BlueprintCallable, BlueprintEvent)

void UUDS_PlayerOcclusion_C::Update_Current_Occlusion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UDS_PlayerOcclusion_C", "Update Current Occlusion");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UDS_PlayerOcclusion.UDS_PlayerOcclusion_C.Incremental Occlusion Traces
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UUDS_PlayerOcclusion_C::Incremental_Occlusion_Traces()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UDS_PlayerOcclusion_C", "Incremental Occlusion Traces");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UDS_PlayerOcclusion.UDS_PlayerOcclusion_C.Initialize
// (Public, BlueprintCallable, BlueprintEvent)

void UUDS_PlayerOcclusion_C::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UDS_PlayerOcclusion_C", "Initialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UDS_PlayerOcclusion.UDS_PlayerOcclusion_C.Hard Occlusion Change__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UUDS_PlayerOcclusion_C::Hard_Occlusion_Change__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UDS_PlayerOcclusion_C", "Hard Occlusion Change__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}

}

